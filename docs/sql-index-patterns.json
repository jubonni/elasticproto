{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.483271",
        "size": 3839,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-index-patterns.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": false,
        "title": "sql-index-patterns",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[sql-index-patterns]]\n=== Index patterns\n\n{es-sql} supports two types of patterns for matching multiple indices or tables:\n\n[[sql-index-patterns-multi]]\n[discrete]\n==== {es} multi-target syntax\n\nThe {es} notation for enumerating, including or excluding <<api-multi-index,multi-target syntax>>\nis supported _as long_ as it is quoted or escaped as a table identifier.\n\nFor example:\n\n[source, sql]\n----\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[showTablesEsMultiIndex]\n----\n\nNotice the pattern is surrounded by double quotes `\"`. It enumerated `*` meaning all indices however\nit excludes (due to `-`) all indices that start with `l`.\nThis notation is very convenient and powerful as it allows both inclusion and exclusion, depending on\nthe target naming convention.\n\nThe same kind of patterns can also be used to query multiple indices or tables.\n\nFor example:\n\n[source, sql]\n----\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[fromTablePatternQuoted]\n----\n\nNOTE: There is the restriction that all resolved concrete tables have the exact same mapping.\n\nexperimental:[] To run a <<modules-cross-cluster-search,{ccs}>>, specify a\ncluster name using the `<remote_cluster>:<target>` syntax, where\n`<remote_cluster>` maps to a SQL catalog (cluster) and `<target>` to a table\n(index or data stream). The `<remote_cluster>` supports wildcards (`*`)\nand `<target>` can be an index pattern.\n\nFor example:\n\n[source, sql]\n----\ninclude-tagged::{sql-specs}/multi-cluster-with-security/multi-cluster-docs.csv-spec[fromQualifiedTableQuoted]\n----\n\n[[sql-index-patterns-like]]\n[discrete]\n==== SQL `LIKE` notation\n\nThe common `LIKE` statement (including escaping if needed) to match a wildcard pattern, based on one `_`\nor multiple `%` characters.\n\nUsing `SHOW TABLES` command again:\n\n[source, sql]\n----\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[showTablesLikeWildcard]\n----\n\nThe pattern matches all tables that start with `emp`.\n\nThis command supports _escaping_ as well, for example:\n\n[source, sql]\n----\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[showTablesLikeEscape]\n----\n\nNotice how now `emp%` does not match any tables because `%`, which means match zero or more characters,\nhas been escaped by `!` and thus becomes an regular char. And since there is no table named `emp%`,\nan empty table is returned.\n\nIn a nutshell, the differences between the two type of patterns are:\n\n[cols=\"^h,^,^\"]\n|===\ns|Feature\ns|Multi index\ns|SQL `LIKE`\n\n| Type of quoting    | `\"` | `'`\n| Inclusion          | Yes | Yes\n| Exclusion          | Yes | No\n| Enumeration        | Yes | No\n| One char pattern   | No  | `_`\n| Multi char pattern | `*` | `%`\n| Escaping           | No  | `ESCAPE`\n\n|===\n\nWhich one to use, is up to you however try to stick to the same one across your queries for consistency.\n\nNOTE: As the query type of quoting between the two patterns is fairly similar (`\"` vs `'`), {es-sql} _always_\nrequires the keyword `LIKE` for SQL `LIKE` pattern.\n\n[[sql-index-frozen]]\n=== Frozen Indices\n\nBy default, {es-sql} doesn't search <<unfreeze-index-api,frozen indices>>. To\nsearch frozen indices, use one of the following features:\n\ndedicated configuration parameter::\nSet to `true` properties `index_include_frozen` in the <<sql-search-api,SQL search API>> or `index.include.frozen` in the drivers to include frozen indices.\n\ndedicated keyword::\nExplicitly perform the inclusion through the dedicated `FROZEN` keyword in the `FROM` clause or `INCLUDE FROZEN` in the `SHOW` commands:\n\n[source, sql]\n----\ninclude-tagged::{sql-specs}/docs/docs-frozen.csv-spec[showTablesIncludeFrozen]\n----\n\n\n[source, sql]\n----\ninclude-tagged::{sql-specs}/docs/docs-frozen.csv-spec[fromTableIncludeFrozen]\n----\n\nUnless enabled, frozen indices are completely ignored; it is as if they do not exist and as such, queries ran against them are likely to fail.\n"
}