{
    "meta": {
        "size": 7123,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-cumulative-cardinality-aggregation.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "search-aggregations-pipeline-cumulative-cardinality-aggregation",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[search-aggregations-pipeline-cumulative-cardinality-aggregation]]\n=== Cumulative cardinality aggregation\n++++\n<titleabbrev>Cumulative cardinality</titleabbrev>\n++++\n\nA parent pipeline aggregation which calculates the Cumulative Cardinality in a parent histogram (or date_histogram)\naggregation. The specified metric must be a cardinality aggregation and the enclosing histogram \nmust have `min_doc_count` set to `0` (default for `histogram` aggregations).\n\nThe `cumulative_cardinality` agg is useful for finding \"total new items\", like the number of new visitors to your\nwebsite each day. A regular cardinality aggregation will tell you how many unique visitors came each day, but doesn't\ndifferentiate between \"new\" or \"repeat\" visitors. The Cumulative Cardinality aggregation can be used to determine\nhow many of each day's unique visitors are \"new\".\n\n==== Syntax\n\nA `cumulative_cardinality` aggregation looks like this in isolation:\n\n[source,js]\n--------------------------------------------------\n{\n  \"cumulative_cardinality\": {\n    \"buckets_path\": \"my_cardinality_agg\"\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\n[[cumulative-cardinality-params]]\n.`cumulative_cardinality` Parameters\n[options=\"header\"]\n|===\n|Parameter Name |Description |Required |Default Value\n|`buckets_path` |The path to the cardinality aggregation we wish to find the cumulative cardinality for (see <<buckets-path-syntax>> for more\n details) |Required |\n|`format` |{javadoc}/java.base/java/text/DecimalFormat.html[DecimalFormat pattern] for the\noutput value. If specified, the formatted value is returned in the aggregation's\n`value_as_string` property |Optional |`null` \n|===\n\nThe following snippet calculates the cumulative cardinality of the total daily `users`:\n\n[source,console]\n--------------------------------------------------\nGET /user_hits/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"users_per_day\": {\n      \"date_histogram\": {\n        \"field\": \"timestamp\",\n        \"calendar_interval\": \"day\"\n      },\n      \"aggs\": {\n        \"distinct_users\": {\n          \"cardinality\": {\n            \"field\": \"user_id\"\n          }\n        },\n        \"total_new_users\": {\n          \"cumulative_cardinality\": {\n            \"buckets_path\": \"distinct_users\" <1>\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[setup:user_hits]\n\n<1> `buckets_path` instructs this aggregation to use the output of the `distinct_users` aggregation for the cumulative cardinality\n\nAnd the following may be the response:\n\n[source,console-result]\n--------------------------------------------------\n{\n   \"took\": 11,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"users_per_day\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2019-01-01T00:00:00.000Z\",\n               \"key\": 1546300800000,\n               \"doc_count\": 2,\n               \"distinct_users\": {\n                  \"value\": 2\n               },\n               \"total_new_users\": {\n                  \"value\": 2\n               }\n            },\n            {\n               \"key_as_string\": \"2019-01-02T00:00:00.000Z\",\n               \"key\": 1546387200000,\n               \"doc_count\": 2,\n               \"distinct_users\": {\n                  \"value\": 2\n               },\n               \"total_new_users\": {\n                  \"value\": 3\n               }\n            },\n            {\n               \"key_as_string\": \"2019-01-03T00:00:00.000Z\",\n               \"key\": 1546473600000,\n               \"doc_count\": 3,\n               \"distinct_users\": {\n                  \"value\": 3\n               },\n               \"total_new_users\": {\n                  \"value\": 4\n               }\n            }\n         ]\n      }\n   }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"took\": 11/\"took\": $body.took/]\n// TESTRESPONSE[s/\"_shards\": \\.\\.\\./\"_shards\": $body._shards/]\n// TESTRESPONSE[s/\"hits\": \\.\\.\\./\"hits\": $body.hits/]\n\n\nNote how the second day, `2019-01-02`, has two distinct users but the `total_new_users` metric generated by the\ncumulative pipeline agg only increments to three. This means that only one of the two users that day were\nnew, the other had already been seen in the previous day. This happens again on the third day, where only\none of three users is completely new.\n\n==== Incremental cumulative cardinality\n\nThe `cumulative_cardinality` agg will show you the total, distinct count since the beginning of the time period\nbeing queried. Sometimes, however, it is useful to see the \"incremental\" count. Meaning, how many new users\nare added each day, rather than the total cumulative count.\n\nThis can be accomplished by adding a `derivative` aggregation to our query:\n\n[source,console]\n--------------------------------------------------\nGET /user_hits/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"users_per_day\": {\n      \"date_histogram\": {\n        \"field\": \"timestamp\",\n        \"calendar_interval\": \"day\"\n      },\n      \"aggs\": {\n        \"distinct_users\": {\n          \"cardinality\": {\n            \"field\": \"user_id\"\n          }\n        },\n        \"total_new_users\": {\n          \"cumulative_cardinality\": {\n            \"buckets_path\": \"distinct_users\"\n          }\n        },\n        \"incremental_new_users\": {\n          \"derivative\": {\n            \"buckets_path\": \"total_new_users\"\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[setup:user_hits]\n\n\nAnd the following may be the response:\n\n[source,console-result]\n--------------------------------------------------\n{\n   \"took\": 11,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"users_per_day\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2019-01-01T00:00:00.000Z\",\n               \"key\": 1546300800000,\n               \"doc_count\": 2,\n               \"distinct_users\": {\n                  \"value\": 2\n               },\n               \"total_new_users\": {\n                  \"value\": 2\n               }\n            },\n            {\n               \"key_as_string\": \"2019-01-02T00:00:00.000Z\",\n               \"key\": 1546387200000,\n               \"doc_count\": 2,\n               \"distinct_users\": {\n                  \"value\": 2\n               },\n               \"total_new_users\": {\n                  \"value\": 3\n               },\n               \"incremental_new_users\": {\n                  \"value\": 1.0\n               }\n            },\n            {\n               \"key_as_string\": \"2019-01-03T00:00:00.000Z\",\n               \"key\": 1546473600000,\n               \"doc_count\": 3,\n               \"distinct_users\": {\n                  \"value\": 3\n               },\n               \"total_new_users\": {\n                  \"value\": 4\n               },\n               \"incremental_new_users\": {\n                  \"value\": 1.0\n               }\n            }\n         ]\n      }\n   }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"took\": 11/\"took\": $body.took/]\n// TESTRESPONSE[s/\"_shards\": \\.\\.\\./\"_shards\": $body._shards/]\n// TESTRESPONSE[s/\"hits\": \\.\\.\\./\"hits\": $body.hits/]\n"
}