{
    "meta": {
        "timestamp": "2024-11-01T02:49:24.959078",
        "size": 5690,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-distance-feature-query.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "query-dsl-distance-feature-query",
        "version": "8.15"
    },
    "doc": "[[query-dsl-distance-feature-query]]\n=== Distance feature query\n++++\n<titleabbrev>Distance feature</titleabbrev>\n++++\n\nBoosts the <<relevance-scores,relevance score>> of documents closer to a\nprovided `origin` date or point. For example, you can use this query to give\nmore weight to documents closer to a certain date or location.\n\nYou can use the `distance_feature` query to find the nearest neighbors to a\nlocation. You can also use the query in a <<query-dsl-bool-query,`bool`>>\nsearch's `should` filter to add boosted relevance scores to the `bool` query's\nscores.\n\n\n[[distance-feature-query-ex-request]]\n==== Example request\n\n[[distance-feature-index-setup]]\n===== Index setup\nTo use the `distance_feature` query, your index must include a <<date, `date`>>,\n<<date_nanos, `date_nanos`>> or <<geo-point,`geo_point`>> field.\n\nTo see how you can set up an index for the `distance_feature` query, try the\nfollowing example.\n\n. Create an `items` index with the following field mapping:\n+\n--\n\n* `name`, a <<keyword,`keyword`>> field\n* `production_date`, a <<date, `date`>> field\n* `location`, a <<geo-point,`geo_point`>> field\n\n[source,console]\n----\nPUT /items\n{\n  \"mappings\": {\n    \"properties\": {\n      \"name\": {\n        \"type\": \"keyword\"\n      },\n      \"production_date\": {\n        \"type\": \"date\"\n      },\n      \"location\": {\n        \"type\": \"geo_point\"\n      }\n    }\n  }\n}\n----\n// TESTSETUP\n--\n\n. Index several documents to this index.\n+\n--\n[source,console]\n----\nPUT /items/_doc/1?refresh\n{\n  \"name\" : \"chocolate\",\n  \"production_date\": \"2018-02-01\",\n  \"location\": [-71.34, 41.12]\n}\n\nPUT /items/_doc/2?refresh\n{\n  \"name\" : \"chocolate\",\n  \"production_date\": \"2018-01-01\",\n  \"location\": [-71.3, 41.15]\n}\n\n\nPUT /items/_doc/3?refresh\n{\n  \"name\" : \"chocolate\",\n  \"production_date\": \"2017-12-01\",\n  \"location\": [-71.3, 41.12]\n}\n----\n--\n\n\n[[distance-feature-query-ex-query]]\n===== Example queries\n\n[[distance-feature-query-date-ex]]\n====== Boost documents based on date\nThe following `bool` search returns documents with a `name` value of\n`chocolate`. The search also uses the `distance_feature` query to increase the\nrelevance score of documents with a `production_date` value closer to `now`.\n\n[source,console]\n----\nGET /items/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": {\n        \"match\": {\n          \"name\": \"chocolate\"\n        }\n      },\n      \"should\": {\n        \"distance_feature\": {\n          \"field\": \"production_date\",\n          \"pivot\": \"7d\",\n          \"origin\": \"now\"\n        }\n      }\n    }\n  }\n}\n----\n\n[[distance-feature-query-distance-ex]]\n====== Boost documents based on location\nThe following `bool` search returns documents with a `name` value of\n`chocolate`. The search also uses the `distance_feature` query to increase the\nrelevance score of documents with a `location` value closer to `[-71.3, 41.15]`.\n\n[source,console]\n----\nGET /items/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": {\n        \"match\": {\n          \"name\": \"chocolate\"\n        }\n      },\n      \"should\": {\n        \"distance_feature\": {\n          \"field\": \"location\",\n          \"pivot\": \"1000m\",\n          \"origin\": [-71.3, 41.15]\n        }\n      }\n    }\n  }\n}\n----\n\n\n[[distance-feature-top-level-params]]\n==== Top-level parameters for `distance_feature`\n`field`::\n(Required, string) Name of the field used to calculate distances. This field\nmust meet the following criteria:\n\n* Be a <<date, `date`>>, <<date_nanos, `date_nanos`>> or\n<<geo-point,`geo_point`>> field\n* Have an <<mapping-index,`index`>> mapping parameter value of `true`, which is\nthe default\n* Have an <<doc-values,`doc_values`>> mapping parameter value of `true`, which\nis the default\n\n`origin`::\n+\n--\n(Required, string) Date or point of origin used to calculate distances.\n\nIf the `field` value is a <<date, `date`>> or <<date_nanos, `date_nanos`>>\nfield, the `origin` value must be a <<date-format-pattern,date>>.\n<<date-math,Date Math>>, such as `now-1h`, is supported.\n\nIf the `field` value is a <<geo-point,`geo_point`>> field, the `origin` value\nmust be a geopoint.\n--\n\n`pivot`::\n+\n--\n(Required, <<time-units,time unit>> or <<distance-units,distance unit>>)\nDistance from the `origin` at which relevance scores receive half of the `boost`\nvalue.\n\nIf the `field` value is a <<date, `date`>> or <<date_nanos, `date_nanos`>>\nfield, the `pivot` value must be a <<time-units,time unit>>, such as `1h` or\n`10d`.\n\nIf the `field` value is a <<geo-point,`geo_point`>> field, the `pivot` value\nmust be a <<distance-units,distance unit>>, such as `1km` or `12m`.\n--\n\n`boost`::\n+\n--\n(Optional, float) Floating point number used to multiply the\n<<relevance-scores,relevance score>> of matching documents. This value\ncannot be negative. Defaults to `1.0`.\n--\n\n\n[[distance-feature-notes]]\n==== Notes\n\n[[distance-feature-calculation]]\n===== How the `distance_feature` query calculates relevance scores\nThe `distance_feature` query dynamically calculates the distance between the\n`origin` value and a document's field values. It then uses this distance as a\nfeature to boost the <<relevance-scores,relevance score>> of closer\ndocuments.\n\nThe `distance_feature` query calculates a document's\n<<relevance-scores,relevance score>> as follows:\n\n```\nrelevance score = boost * pivot / (pivot + distance)\n```\n\nThe `distance` is the absolute difference between the `origin` value and a\ndocument's field value.\n\n[[distance-feature-skip-hits]]\n===== Skip non-competitive hits\nUnlike the <<query-dsl-function-score-query,`function_score`>> query or other\nways to change <<relevance-scores,relevance scores>>, the\n`distance_feature` query efficiently skips non-competitive hits when the\n<<search-search,`track_total_hits`>> parameter is **not** `true`."
}