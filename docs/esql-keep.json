{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.833579",
        "size": 3089,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/esql-keep.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "esql-keep",
        "version": "8.15"
    },
    "doc": "[discrete]\n[[esql-keep]]\n=== `KEEP`\n\nThe `KEEP` processing command enables you to specify what columns are returned\nand the order in which they are returned.\n\n**Syntax**\n\n[source,esql]\n----\nKEEP columns\n----\n\n*Parameters*\n\n`columns`::\nA comma-separated list of columns to keep. Supports wildcards.\nSee below for the behavior in case an existing column matches multiple\ngiven wildcards or column names.\n\n*Description*\n\nThe `KEEP` processing command enables you to specify what columns are returned\nand the order in which they are returned.\n\nPrecedence rules are applied when a field name matches multiple expressions.\nFields are added in the order they appear. If one field matches multiple expressions, the following precedence rules apply (from highest to lowest priority):\n\n1. Complete field name (no wildcards)\n2. Partial wildcard expressions (for example: `fieldNam*`)\n3. Wildcard only (`*`)\n\nIf a field matches two expressions with the same precedence, the rightmost expression wins.\n\nRefer to the examples for illustrations of these precedence rules.\n\n*Examples*\n\nThe columns are returned in the specified order:\n\n[source.merge.styled,esql]\n----\ninclude::{esql-specs}/docs.csv-spec[tag=keep]\n----\n[%header.monospaced.styled,format=dsv,separator=|]\n|===\ninclude::{esql-specs}/docs.csv-spec[tag=keep-result]\n|===\n\nRather than specify each column by name, you can use wildcards to return all\ncolumns with a name that matches a pattern:\n\n[source,esql]\n----\ninclude::{esql-specs}/docs.csv-spec[tag=keepWildcard]\n----\n[%header.monospaced.styled,format=dsv,separator=|]\n|===\ninclude::{esql-specs}/docs.csv-spec[tag=keep-wildcard-result]\n|===\n\nThe asterisk wildcard (`*`) by itself translates to all columns that do not\nmatch the other arguments.\n\nThis query will first return all columns with a name\nthat starts with `h`, followed by all other columns:\n\n[source,esql]\n----\ninclude::{esql-specs}/docs.csv-spec[tag=keepDoubleWildcard]\n----\n[%header.monospaced.styled,format=dsv,separator=|]\n|===\ninclude::{esql-specs}/docs.csv-spec[tag=keep-double-wildcard-result]\n|===\n\nThe following examples show how precedence rules work when a field name matches multiple expressions.\n\nComplete field name has precedence over wildcard expressions:\n\n[source,esql]\n----\ninclude::{esql-specs}/docs.csv-spec[tag=keepCompleteName]\n----\n[%header.monospaced.styled,format=dsv,separator=|]\n|===\ninclude::{esql-specs}/docs.csv-spec[tag=keep-complete-name-result]\n|===\n\nWildcard expressions have the same priority, but last one wins (despite being less specific):\n\n[source,esql]\n----\ninclude::{esql-specs}/docs.csv-spec[tag=keepWildcardPrecedence]\n----\n[%header.monospaced.styled,format=dsv,separator=|]\n|===\ninclude::{esql-specs}/docs.csv-spec[tag=keep-wildcard-precedence-result]\n|===\n\nA simple wildcard expression `*` has the lowest precedence.\nOutput order is determined by the other arguments:\n\n[source,esql]\n----\ninclude::{esql-specs}/docs.csv-spec[tag=keepWildcardLowest]\n----\n[%header.monospaced.styled,format=dsv,separator=|]\n|===\ninclude::{esql-specs}/docs.csv-spec[tag=keep-wildcard-lowest-result]\n|===\n"
}