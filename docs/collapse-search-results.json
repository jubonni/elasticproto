{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.188580",
        "size": 10163,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/collapse-search-results.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "collapse-search-results",
        "version": "8.15"
    },
    "doc": "[[collapse-search-results]]\n=== Collapse search results\n\nYou can use the `collapse` parameter to collapse search results based\non field values. The collapsing is done by selecting only the top sorted\ndocument per collapse key.\n\nFor example, the following search collapses results by `user.id` and sorts them\nby `http.response.bytes`.\n\n[source,console]\n----\nGET my-index-000001/_search\n{\n  \"query\": {\n    \"match\": {\n      \"message\": \"GET /search\"\n    }\n  },\n  \"collapse\": {\n    \"field\": \"user.id\"         <1>\n  },\n  \"sort\": [\n    {\n      \"http.response.bytes\": { <2>\n        \"order\": \"desc\"\n      }\n    }\n  ],\n  \"from\": 0                    <3>\n}\n----\n// TEST[setup:my_index]\n\n<1> Collapse the result set using the `user.id` field\n<2> Sort the results by `http.response.bytes`\n<3> Define the offset of the first collapsed result\n\nWARNING: The total number of hits in the response indicates the number of matching documents without collapsing.\nThe total number of distinct group is unknown.\n\nThe field used for collapsing must be a single valued <<keyword, `keyword`>> or <<number, `numeric`>> field with <<doc-values, `doc_values`>> activated.\n\nNOTE: Collapsing is applied to the top hits only and does not affect aggregations.\n\n[discrete]\n[[expand-collapse-results]]\n==== Expand collapse results\n\nIt is also possible to expand each collapsed top hits with the <<inner-hits, `inner hits`>> option.\n\n[source,console]\n----\nGET /my-index-000001/_search\n{\n  \"query\": {\n    \"match\": {\n      \"message\": \"GET /search\"\n    }\n  },\n  \"collapse\": {\n    \"field\": \"user.id\",                       <1>\n    \"inner_hits\": {\n      \"name\": \"most_recent\",                  <2>\n      \"size\": 5,                              <3>\n      \"sort\": [ { \"@timestamp\": \"desc\" } ]    <4>\n    },\n    \"max_concurrent_group_searches\": 4        <5>\n  },\n  \"sort\": [\n    {\n      \"http.response.bytes\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}\n----\n// TEST[setup:my_index]\n\n<1> Collapse the result set using the `user.id` field\n<2> The name used for the inner hit section in the response\n<3> The number of `inner_hits` to retrieve per collapse key\n<4> How to sort the document inside each group\n<5> The number of concurrent requests allowed to retrieve the `inner_hits` per group\n\nSee <<inner-hits, inner hits>> for the complete list of supported options and the format of the response.\n\nIt is also possible to request multiple <<inner-hits, `inner hits`>> for each collapsed hit. This can be useful when you want to get\nmultiple representations of the collapsed hits.\n\n[source,console]\n----\nGET /my-index-000001/_search\n{\n  \"query\": {\n    \"match\": {\n      \"message\": \"GET /search\"\n    }\n  },\n  \"collapse\": {\n    \"field\": \"user.id\",                   <1>\n    \"inner_hits\": [\n      {\n        \"name\": \"largest_responses\",      <2>\n        \"size\": 3,\n        \"sort\": [\n          {\n            \"http.response.bytes\": {\n              \"order\": \"desc\"\n            }\n          }\n        ]\n      },\n      {\n        \"name\": \"most_recent\",             <3>\n        \"size\": 3,\n        \"sort\": [\n          {\n            \"@timestamp\": {\n              \"order\": \"desc\"\n            }\n          }\n        ]\n      }\n    ]\n  },\n  \"sort\": [\n    \"http.response.bytes\"\n  ]\n}\n----\n// TEST[setup:my_index]\n\n<1> Collapse the result set using the `user.id` field\n<2> Return the three largest HTTP responses for the user\n<3> Return the three most recent HTTP responses for the user\n\nThe expansion of the group is done by sending an additional query for each\n`inner_hit` request for each collapsed hit returned in the response. This can\nsignificantly slow your search if you have too many groups or `inner_hit`\nrequests.\n\nThe `max_concurrent_group_searches` request parameter can be used to control\nthe maximum number of concurrent searches allowed in this phase.\nThe default is based on the number of data nodes and the default search thread pool size.\n\nWARNING: `collapse` cannot be used in conjunction with <<scroll-search-results, scroll>>.\n\n[discrete]\n[[collapsing-with-search-after]]\n==== Collapsing with `search_after`\nField collapsing can be used with the <<search-after, `search_after`>>\nparameter. Using `search_after` is only supported when sorting and collapsing\non the same field. Secondary sorts are also not allowed. For example, we can\ncollapse and sort on `user.id`, while paging through the results using\n`search_after`:\n\n[source,console]\n----\nGET /my-index-000001/_search\n{\n  \"query\": {\n    \"match\": {\n      \"message\": \"GET /search\"\n    }\n  },\n  \"collapse\": {\n    \"field\": \"user.id\"\n  },\n  \"sort\": [ \"user.id\" ],\n  \"search_after\": [\"dd5ce1ad\"]\n}\n----\n// TEST[setup:my_index]\n\n[discrete]\n[[rescore-collapse-results]]\n==== Rescore collapse results\n\nYou can use field collapsing alongside the <<rescore, `rescore`>> search parameter.\nRescorers run on every shard for the top-ranked document per collapsed field.\nTo maintain a reliable order, it is recommended to cluster documents sharing the same collapse\nfield value on one shard.\nThis is achieved by assigning the collapse field value as the <<search-routing, routing key>>\nduring indexing:\n\n[source,console]\n----\nPOST /my-index-000001/_doc?routing=xyz      <1>\n{\n  \"@timestamp\": \"2099-11-15T13:12:00\",\n  \"message\": \"You know for search!\",\n  \"user.id\": \"xyz\"\n}\n----\n// TEST[setup:my_index]\n<1> Assign routing with the collapse field value (`user.id`).\n\nBy doing this, you guarantee that only one top document per\ncollapse key gets rescored globally.\n\nThe following request utilizes field collapsing on the `user.id`\nfield and then rescores the top groups with a <<query-rescorer, query rescorer>>:\n\n[source,console]\n----\nGET /my-index-000001/_search\n{\n  \"query\": {\n    \"match\": {\n      \"message\": \"you know for search\"\n    }\n  },\n  \"collapse\": {\n    \"field\": \"user.id\"\n  },\n  \"rescore\" : {\n      \"window_size\" : 50,\n      \"query\" : {\n         \"rescore_query\" : {\n            \"match_phrase\": {\n                \"message\": \"you know for search\"\n            }\n         },\n         \"query_weight\" : 0.3,\n         \"rescore_query_weight\" : 1.4\n      }\n   }\n}\n----\n// TEST[setup:my_index]\n\nWARNING: Rescorers are not applied to <<inner-hits, `inner hits`>>.\n\n[discrete]\n[[second-level-of-collapsing]]\n==== Second level of collapsing\n\nA second level of collapsing is also supported and is applied to `inner_hits`.\n\nFor example, the following search collapses results by `geo.country_name`.\nWithin each `geo.country_name`, inner hits are collapsed by `user.id`.\n\nNOTE: Second level of collapsing doesn't allow `inner_hits`.\n\n///////////////\n[source,console]\n----\nPUT my-index-000001/\n{\"mappings\":{\"properties\":{\"@timestamp\":{\"type\":\"date\"},\"geo\":{\"properties\":{\"country_name\":{\"type\":\"keyword\"}}},\"http\":{\"properties\":{\"request\":{\"properties\":{\"method\":{\"type\":\"keyword\"}}}}},\"message\":{\"type\":\"text\",\"fields\":{\"keyword\":{\"type\":\"keyword\"}}},\"user\":{\"properties\":{\"id\":{\"type\":\"keyword\",\"doc_values\":true}}}}}}\n----\n\n[source,console]\n----\nPOST my-index-000001/_doc/oX9uXXoB0da05OCR3adK?refresh=true\n{\"@timestamp\":\"2099-11-15T14:12:12\",\"geo\":{\"country_name\":\"Amsterdam\"},\"http\":{\"request\":{\"method\":\"get\"},\"response\":{\"bytes\":1070000,\"status_code\":200},\"version\":\"1.1\"},\"message\":\"GET /search HTTP/1.1 200 1070000\",\"source\":{\"ip\":\"127.0.0.1\"},\"user\":{\"id\":\"kimchy\"}}\n----\n// TEST[continued]\n///////////////\n\n[source,console]\n----\nGET /my-index-000001/_search\n{\n  \"query\": {\n    \"match\": {\n      \"message\": \"GET /search\"\n    }\n  },\n  \"collapse\": {\n    \"field\": \"geo.country_name\",\n    \"inner_hits\": {\n      \"name\": \"by_location\",\n      \"collapse\": { \"field\": \"user.id\" },\n      \"size\": 3\n    }\n  }\n}\n----\n// TEST[continued]\n// TEST[s/_search/_search\\?filter_path=hits.hits/]\n\n[source,console-result]\n----\n{\n  \"hits\" : {\n    \"hits\" : [\n      {\n        \"_index\" : \"my-index-000001\",\n        \"_id\" : \"oX9uXXoB0da05OCR3adK\",\n        \"_score\" : 0.5753642,\n        \"_source\" : {\n          \"@timestamp\" : \"2099-11-15T14:12:12\",\n          \"geo\" : {\n            \"country_name\" : \"Amsterdam\"\n          },\n          \"http\" : {\n            \"request\" : {\n              \"method\" : \"get\"\n            },\n            \"response\" : {\n              \"bytes\" : 1070000,\n              \"status_code\" : 200\n            },\n            \"version\" : \"1.1\"\n          },\n          \"message\" : \"GET /search HTTP/1.1 200 1070000\",\n          \"source\" : {\n            \"ip\" : \"127.0.0.1\"\n          },\n          \"user\" : {\n            \"id\" : \"kimchy\"\n          }\n        },\n        \"fields\" : {\n          \"geo.country_name\" : [\n            \"Amsterdam\"\n          ]\n        },\n        \"inner_hits\" : {\n          \"by_location\" : {\n            \"hits\" : {\n              \"total\" : {\n                \"value\" : 1,\n                \"relation\" : \"eq\"\n              },\n              \"max_score\" : 0.5753642,\n              \"hits\" : [\n                {\n                  \"_index\" : \"my-index-000001\",\n                  \"_id\" : \"oX9uXXoB0da05OCR3adK\",\n                  \"_score\" : 0.5753642,\n                  \"_source\" : {\n                    \"@timestamp\" : \"2099-11-15T14:12:12\",\n                    \"geo\" : {\n                      \"country_name\" : \"Amsterdam\"\n                    },\n                    \"http\" : {\n                      \"request\" : {\n                        \"method\" : \"get\"\n                      },\n                      \"response\" : {\n                        \"bytes\" : 1070000,\n                        \"status_code\" : 200\n                      },\n                      \"version\" : \"1.1\"\n                    },\n                    \"message\" : \"GET /search HTTP/1.1 200 1070000\",\n                    \"source\" : {\n                      \"ip\" : \"127.0.0.1\"\n                    },\n                    \"user\" : {\n                      \"id\" : \"kimchy\"\n                    }\n                  },\n                  \"fields\" : {\n                    \"user.id\" : [\n                      \"kimchy\"\n                    ]\n                  }\n                }\n              ]\n            }\n          }\n        }\n      }\n    ]\n  }\n}\n----\n\n[discrete]\n==== Track Scores\n\nWhen `collapse` is used with `sort` on a field, scores are not computed.\nSetting `track_scores` to true instructs {es} to compute and track scores.\n"
}