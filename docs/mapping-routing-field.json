{
    "meta": {
        "timestamp": "2024-11-01T03:07:10.119274",
        "size": 4742,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-routing-field.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "mapping-routing-field",
        "version": "8.15"
    },
    "doc": "[[mapping-routing-field]]\n=== `_routing` field\n\nA document is routed to a particular shard in an index using the following\nformulas:\n\n    routing_factor = num_routing_shards / num_primary_shards\n    shard_num = (hash(_routing) % num_routing_shards) / routing_factor\n\n`num_routing_shards` is the value of the\n<<index-number-of-routing-shards,`index.number_of_routing_shards`>> index\nsetting. `num_primary_shards` is the value of the\n<<index-number-of-shards,`index.number_of_shards`>> index setting.\n\nThe default `_routing` value is the document's <<mapping-id-field,`_id`>>.\nCustom routing patterns can be implemented by specifying a custom `routing`\nvalue per document. For instance:\n\n[source,console]\n------------------------------\nPUT my-index-000001/_doc/1?routing=user1&refresh=true <1>\n{\n  \"title\": \"This is a document\"\n}\n\nGET my-index-000001/_doc/1?routing=user1 <2>\n------------------------------\n// TESTSETUP\n\n<1> This document uses `user1` as its routing value, instead of its ID.\n<2> The same `routing` value needs to be provided when\n    <<docs-get,getting>>, <<docs-delete,deleting>>, or <<docs-update,updating>>\n    the document.\n\nThe value of the `_routing` field is accessible in queries:\n\n[source,console]\n--------------------------\nGET my-index-000001/_search\n{\n  \"query\": {\n    \"terms\": {\n      \"_routing\": [ \"user1\" ] <1>\n    }\n  }\n}\n--------------------------\n\n<1> Querying on the `_routing` field (also see the <<query-dsl-ids-query,`ids` query>>)\n\nNOTE: Data streams do not support custom routing unless they were created with\nthe <<put-index-template-api-request-body,`allow_custom_routing`>> setting\nenabled in the template.\n\n==== Searching with custom routing\n\nCustom routing can reduce the impact of searches. Instead of having to fan\nout a search request to all the shards in an index, the request can be sent to\njust the shard that matches the specific routing value (or values):\n\n[source,console]\n------------------------------\nGET my-index-000001/_search?routing=user1,user2 <1>\n{\n  \"query\": {\n    \"match\": {\n      \"title\": \"document\"\n    }\n  }\n}\n------------------------------\n\n<1> This search request will only be executed on the shards associated with the `user1` and `user2` routing values.\n\n\n==== Making a routing value required\n\nWhen using custom routing, it is important to provide the routing value\nwhenever <<docs-index_,indexing>>, <<docs-get,getting>>,\n<<docs-delete,deleting>>, or <<docs-update,updating>> a document.\n\nForgetting the routing value can lead to a document being indexed on more than\none shard. As a safeguard, the `_routing` field can be configured to make a\ncustom `routing` value required for all CRUD operations:\n\n[source,console]\n------------------------------\nPUT my-index-000002\n{\n  \"mappings\": {\n    \"_routing\": {\n      \"required\": true <1>\n    }\n  }\n}\n\nPUT my-index-000002/_doc/1 <2>\n{\n  \"text\": \"No routing value provided\"\n}\n------------------------------\n// TEST[catch:bad_request]\n\n<1> Routing is required for all documents.\n<2> This index request throws a `routing_missing_exception`.\n\n==== Unique IDs with custom routing\n\nWhen indexing documents specifying a custom `_routing`, the uniqueness of the\n`_id` is not guaranteed across all of the shards in the index. In fact,\ndocuments with the same `_id` might end up on different shards if indexed with\ndifferent `_routing` values.\n\nIt is up to the user to ensure that IDs are unique across the index.\n\n[[routing-index-partition]]\n==== Routing to an index partition\n\nAn index can be configured such that custom routing values will go to a subset of the shards rather\nthan a single shard. This helps mitigate the risk of ending up with an imbalanced cluster while still\nreducing the impact of searches.\n\nThis is done by providing the index level setting <<routing-partition-size,`index.routing_partition_size`>> at index creation.\nAs the partition size increases, the more evenly distributed the data will become at the\nexpense of having to search more shards per request.\n\nWhen this setting is present, the formulas for calculating the shard become:\n\n    routing_value = hash(_routing) + hash(_id) % routing_partition_size\n    shard_num = (routing_value % num_routing_shards) / routing_factor\n\nThat is, the `_routing` field is used to calculate a set of shards within the index and then the\n`_id` is used to pick a shard within that set.\n\nTo enable this feature, the `index.routing_partition_size` should have a value greater than 1 and\nless than `index.number_of_shards`.\n\nOnce enabled, the partitioned index will have the following limitations:\n\n*   Mappings with <<parent-join,`join` field>> relationships cannot be created within it.\n*   All mappings within the index must have the `_routing` field marked as required.\n"
}