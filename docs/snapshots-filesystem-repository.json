{
    "meta": {
        "size": 4516,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/snapshots-filesystem-repository.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "snapshots-filesystem-repository",
        "version": "8.15"
    },
    "doc": "[[snapshots-filesystem-repository]]\n=== Shared file system repository\n\ninclude::{es-ref-dir}/snapshot-restore/on-prem-repo-type.asciidoc[]\n\nUse a shared file system repository to store snapshots on a shared file system.\n\nTo register a shared file system repository, first mount the file system to the\nsame location on all master and data nodes. Then add the file system's path or\nparent directory to the `path.repo` setting in `elasticsearch.yml` for each\nmaster and data node. For running clusters, this requires a\n<<restart-cluster-rolling,rolling restart>> of each node.\n\nSupported `path.repo` values vary by platform:\n\ninclude::{es-ref-dir}/tab-widgets/register-fs-repo-widget.asciidoc[]\n\n[[filesystem-repository-settings]]\n==== Repository settings\n\n`chunk_size`::\n(Optional, <<byte-units,byte value>>)\nMaximum size of files in snapshots. In snapshots, files larger than this are\nbroken down into chunks of this size or smaller. Defaults to `null` (unlimited\nfile size).\n\n`compress`::\n(Optional, Boolean)\nIf `true`, metadata files, such as index mappings and settings, are compressed\nin snapshots. Data files are not compressed. Defaults to `true`.\n\n`location`::\n(Required, string)\nLocation of the shared filesystem used to store and retrieve snapshots. This\nlocation must be registered in the `path.repo` setting on all master and data\nnodes in the cluster. \nUnlike `path.repo`, this setting supports only a single file path.\n\n`max_number_of_snapshots`::\n(Optional, integer)\nMaximum number of snapshots the repository can contain.\nDefaults to `Integer.MAX_VALUE`, which is `2^31-1` or `2147483647`.\n\ninclude::repository-shared-settings.asciidoc[]\n\n==== Troubleshooting a shared file system repository\n\n{es} interacts with a shared file system repository using the file system\nabstraction in your operating system. This means that every {es} node must be\nable to perform operations within the repository path such as creating,\nopening, and renaming files, and creating and listing directories, and\noperations performed by one node must be visible to other nodes as soon as they\ncomplete.\n\nCheck for common misconfigurations using the <<verify-snapshot-repo-api>> API\nand the <<repo-analysis-api>> API. When the repository is properly configured,\nthese APIs will complete successfully. If the verify repository or repository\nanalysis APIs report a problem then you will be able to reproduce this problem\noutside {es} by performing similar operations on the file system directly.\n\nIf the verify repository or repository analysis APIs fail with an error\nindicating insufficient permissions then adjust the configuration of the\nrepository within your operating system to give {es} an appropriate level of\naccess. To reproduce such problems directly, perform the same operations as\n{es} in the same security context as the one in which {es} is running. For\nexample, on Linux, use a command such as `su` to switch to the user as which\n{es} runs.\n\nIf the verify repository or repository analysis APIs fail with an error\nindicating that operations on one node are not immediately visible on another\nnode then adjust the configuration of the repository within your operating\nsystem to address this problem. If your repository cannot be configured with\nstrong enough visibility guarantees then it is not suitable for use as an {es}\nsnapshot repository.\n\nThe verify repository and repository analysis APIs will also fail if the\noperating system returns any other kind of I/O error when accessing the\nrepository. If this happens, address the cause of the I/O error reported by the\noperating system.\n\nTIP: Many NFS implementations match accounts across nodes using their _numeric_\nuser IDs (UIDs) and group IDs (GIDs) rather than their names. It is possible\nfor {es} to run under an account with the same name (often `elasticsearch`) on\neach node, but for these accounts to have different numeric user or group IDs.\nIf your shared file system uses NFS then ensure that every node is running with\nthe same numeric UID and GID, or else update your NFS configuration to account\nfor the variance in numeric IDs across nodes.\n\n[[repository-fs-linearizable-registers]]\n==== Linearizable register implementation\n\nThe linearizable register implementation for shared filesystem repositories is\nbased around file locking. To perform a compare-and-exchange operation on a\nregister, {es} first locks he underlying file and then writes the updated\ncontents under the same lock. This ensures that the file has not changed in the\nmeantime.\n"
}