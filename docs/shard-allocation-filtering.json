{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.537580",
        "size": 4732,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/shard-allocation-filtering.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "shard-allocation-filtering",
        "version": "8.15"
    },
    "doc": "[[shard-allocation-filtering]]\n=== Index-level shard allocation filtering\n\nYou can use shard allocation filters to control where {es} allocates shards of\na particular index. These per-index filters are applied in conjunction with\n<<cluster-shard-allocation-filtering, cluster-wide allocation filtering>> and\n<<shard-allocation-awareness, allocation awareness>>.\n\nShard allocation filters can be based on custom node attributes or the built-in\n`_name`, `_host_ip`, `_publish_ip`, `_ip`, `_host`, `_id`, `_tier` and `_tier_preference`\nattributes. <<index-lifecycle-management, Index lifecycle management>> uses filters based\non custom node attributes to determine how to reallocate shards when moving\nbetween phases.\n\nThe `cluster.routing.allocation` settings are dynamic, enabling existing indices to\nbe moved immediately from one set of nodes to another. Shards are only relocated if it is\npossible to do so without breaking another routing constraint, such as never\nallocating a primary and replica shard on the same node.\n\nFor example, you could use a custom node attribute to indicate a node's\nperformance characteristics and use shard allocation filtering to route shards\nfor a particular index to the most appropriate class of hardware.\n\n[discrete]\n[[index-allocation-filters]]\n==== Enabling index-level shard allocation filtering\n\nTo filter based on a custom node attribute:\n\n. Specify the filter characteristics with a custom node attribute in each\nnode's `elasticsearch.yml` configuration file. For example, if you have `small`,\n`medium`, and `big` nodes, you could add a `size` attribute to filter based\non node size.\n+\n[source,yaml]\n--------------------------------------------------------\nnode.attr.size: medium\n--------------------------------------------------------\n+\nYou can also set custom attributes when you start a node:\n+\n[source,sh]\n--------------------------------------------------------\n./bin/elasticsearch -Enode.attr.size=medium\n--------------------------------------------------------\n\n. Add a routing allocation filter to the index. The `index.routing.allocation`\nsettings support three types of filters: `include`, `exclude`, and `require`.\nFor example, to tell {es} to allocate shards from the `test` index to either\n`big` or `medium` nodes, use `index.routing.allocation.include`:\n+\n--\n[source,console]\n------------------------\nPUT test/_settings\n{\n  \"index.routing.allocation.include.size\": \"big,medium\"\n}\n------------------------\n// TEST[s/^/PUT test\\n/]\n\nIf you specify multiple filters the following conditions must be satisfied\nsimultaneously by a node in order for shards to be relocated to it:\n\n* If any `require` type conditions are specified, all of them must be satisfied\n* If any `exclude` type conditions are specified, none of them may be satisfied\n* If any `include` type conditions are specified, at least one of them must be\nsatisfied\n\nFor example, to move the `test` index to `big` nodes in `rack1`, you could\nspecify:\n\n[source,console]\n------------------------\nPUT test/_settings\n{\n  \"index.routing.allocation.require.size\": \"big\",\n  \"index.routing.allocation.require.rack\": \"rack1\"\n}\n------------------------\n// TEST[s/^/PUT test\\n/]\n--\n\n[discrete]\n[[index-allocation-settings]]\n==== Index allocation filter settings\n\n`index.routing.allocation.include.{attribute}`::\n\n    Assign the index to a node whose `{attribute}` has at least one of the\n    comma-separated values.\n\n`index.routing.allocation.require.{attribute}`::\n\n    Assign the index to a node whose `{attribute}` has _all_ of the\n    comma-separated values.\n\n`index.routing.allocation.exclude.{attribute}`::\n\n    Assign the index to a node whose `{attribute}` has _none_ of the\n    comma-separated values.\n\nThe index allocation settings support the following built-in attributes:\n\n[horizontal]\n`_name`::       Match nodes by node name\n`_host_ip`::    Match nodes by host IP address (IP associated with hostname)\n`_publish_ip`:: Match nodes by publish IP address\n`_ip`::         Match either `_host_ip` or `_publish_ip`\n`_host`::       Match nodes by hostname\n`_id`::         Match nodes by node id\n`_tier`::       Match nodes by the node's <<data-tiers, data tier>> role.\n                For more details see <<data-tier-shard-filtering, data tier allocation filtering>>\n\nNOTE: `_tier` filtering is based on <<modules-node, node>> roles. Only\na subset of roles are <<data-tiers, data tier>> roles, and the generic\n<<data-node, data role>> will match any tier filtering.\n\nYou can use wildcards when specifying attribute values, for example:\n\n[source,console]\n------------------------\nPUT test/_settings\n{\n  \"index.routing.allocation.include._ip\": \"192.168.2.*\"\n}\n------------------------\n// TEST[skip:indexes don't assign]\n"
}