{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.591591",
        "size": 9456,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-sparse-vector-query.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "query-dsl-sparse-vector-query",
        "version": "8.15"
    },
    "doc": "[[query-dsl-sparse-vector-query]]\n=== Sparse vector query\n\n++++\n<titleabbrev>Sparse vector</titleabbrev>\n++++\n\nThe sparse vector query executes a query consisting of sparse vectors, such as built by a learned sparse retrieval model.\nThis can be achieved with one of two strategies:\n\n- Using an {nlp} model to convert query text into a list of token-weight pairs\n- Sending in precalculated token-weight pairs as query vectors\n\nThese token-weight pairs are then used in a query against a <<sparse-vector,sparse vector>>.\nAt query time, query vectors are calculated using the same inference model that was used to create the tokens.\nWhen querying, these query vectors are ORed together with their respective weights, which means scoring is effectively a <<vector-functions-dot-product,dot product>> calculation between stored dimensions and query dimensions.\n\nFor example, a stored vector `{\"feature_0\": 0.12, \"feature_1\": 1.2, \"feature_2\": 3.0}` with query vector `{\"feature_0\": 2.5, \"feature_2\": 0.2}` would score the document `_score = 0.12*2.5 + 3.0*0.2 = 0.9`\n\n[discrete]\n[[sparse-vector-query-ex-request]]\n==== Example request using an {nlp} model\n\n[source,console]\n----\nGET _search\n{\n   \"query\":{\n      \"sparse_vector\": {\n        \"field\": \"ml.tokens\",\n        \"inference_id\": \"the inference ID to produce the token weights\",\n        \"query\": \"the query string\"\n      }\n   }\n}\n----\n// TEST[skip: Requires inference]\n\n[discrete]\n==== Example request using precomputed vectors\n\n[source,console]\n----\nGET _search\n{\n   \"query\":{\n      \"sparse_vector\": {\n        \"field\": \"ml.tokens\",\n        \"query_vector\": { \"token1\": 0.5, \"token2\": 0.3, \"token3\": 0.2 }\n      }\n   }\n}\n----\n// TEST[skip: TBD]\n\n[discrete]\n[[sparse-vector-field-params]]\n==== Top level parameters for `sparse_vector`\n\n`field`::\n(Required, string) The name of the field that contains the token-weight pairs to be searched against.\n\n`inference_id`::\n(Optional, string) The <<inference-apis,inference ID>> to use to convert the query text into token-weight pairs.\nIt must be the same inference ID that was used to create the tokens from the input text.\nOnly one of `inference_id` and `query_vector` is allowed.\nIf `inference_id` is specified, `query` must also be specified.\n\n`query`::\n(Optional, string) The query text you want to use for search.\nIf `inference_id` is specified, `query` must also be specified.\nIf `query_vector` is specified, `query` must not be specified.\n\n`query_vector`::\n(Optional, dictionary) A dictionary of token-weight pairs representing the precomputed query vector to search.\nSearching using this query vector will bypass additional inference.\nOnly one of `inference_id` and `query_vector` is allowed.\n\n`prune` ::\n(Optional, boolean)\npreview:[]\nWhether to perform pruning, omitting the non-significant tokens from the query to improve query performance.\nIf `prune` is true but the `pruning_config` is not specified, pruning will occur but default values will be used.\nDefault: false.\n\n`pruning_config` ::\n(Optional, object)\npreview:[]\nOptional pruning configuration.\nIf enabled, this will omit non-significant tokens from the query in order to improve query performance.\nThis is only used if `prune` is set to `true`.\nIf `prune` is set to `true` but `pruning_config` is not specified, default values will be used.\n+\n--\nParameters for `pruning_config` are:\n\n`tokens_freq_ratio_threshold`::\n(Optional, integer)\npreview:[]\nTokens whose frequency is more than `tokens_freq_ratio_threshold` times the average frequency of all tokens in the specified field are considered outliers and pruned.\nThis value must between 1 and 100.\nDefault: `5`.\n\n`tokens_weight_threshold`::\n(Optional, float)\npreview:[]\nTokens whose weight is less than `tokens_weight_threshold` are considered insignificant and pruned.\nThis value must be between 0 and 1.\nDefault: `0.4`.\n\n`only_score_pruned_tokens`::\n(Optional, boolean)\npreview:[]\nIf `true` we only input pruned tokens into scoring, and discard non-pruned tokens.\nIt is strongly recommended to set this to `false` for the main query, but this can be set to `true` for a rescore query to get more relevant results.\nDefault: `false`.\n\nNOTE: The default values for `tokens_freq_ratio_threshold` and `tokens_weight_threshold` were chosen based on tests using ELSERv2 that provided the most optimal results.\n--\n\n[discrete]\n[[sparse-vector-query-example]]\n==== Example ELSER query\n\nThe following is an example of the `sparse_vector` query that references the ELSER model to perform semantic search.\nFor a more detailed description of how to perform semantic search by using ELSER and the `sparse_vector` query, refer to <<semantic-search-elser,this tutorial>>.\n\n[source,console]\n----\nGET my-index/_search\n{\n   \"query\":{\n      \"sparse_vector\": {\n         \"field\": \"ml.tokens\",\n         \"inference_id\": \"my-elser-model\",\n         \"query\": \"How is the weather in Jamaica?\"\n      }\n   }\n}\n----\n// TEST[skip: Requires inference]\n\nMultiple `sparse_vector` queries can be combined with each other or other query types.\nThis can be achieved by wrapping them in <<query-dsl-bool-query, boolean query clauses>> and using linear boosting:\n\n[source,console]\n----\nGET my-index/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"should\": [\n        {\n          \"sparse_vector\": {\n            \"field\": \"ml.inference.title_expanded.predicted_value\",\n            \"inference_id\": \"my-elser-model\",\n            \"query\": \"How is the weather in Jamaica?\",\n            \"boost\": 1\n          }\n        },\n        {\n          \"sparse_vector\": {\n            \"field\": \"ml.inference.description_expanded.predicted_value\",\n            \"inference_id\": \"my-elser-model\",\n            \"query\": \"How is the weather in Jamaica?\",\n            \"boost\": 1\n          }\n        },\n        {\n          \"multi_match\": {\n            \"query\": \"How is the weather in Jamaica?\",\n            \"fields\": [\n              \"title\",\n              \"description\"\n            ],\n            \"boost\": 4\n          }\n        }\n      ]\n    }\n  }\n}\n----\n// TEST[skip: Requires inference]\n\nThis can also be achieved using <<rrf, reciprocal rank fusion (RRF)>>, through an <<rrf-retriever, `rrf` retriever>> with multiple\n<<standard-retriever, `standard` retrievers>>.\n\n[source,console]\n----\nGET my-index/_search\n{\n  \"retriever\": {\n    \"rrf\": {\n      \"retrievers\": [\n        {\n          \"standard\": {\n            \"query\": {\n              \"multi_match\": {\n                \"query\": \"How is the weather in Jamaica?\",\n                \"fields\": [\n                  \"title\",\n                  \"description\"\n                ]\n              }\n            }\n          }\n        },\n        {\n          \"standard\": {\n            \"query\": {\n              \"sparse_vector\": {\n                \"field\": \"ml.inference.title_expanded.predicted_value\",\n                \"inference_id\": \"my-elser-model\",\n                \"query\": \"How is the weather in Jamaica?\",\n                \"boost\": 1\n              }\n            }\n          }\n        },\n        {\n          \"standard\": {\n            \"query\": {\n              \"sparse_vector\": {\n                \"field\": \"ml.inference.description_expanded.predicted_value\",\n                \"inference_id\": \"my-elser-model\",\n                \"query\": \"How is the weather in Jamaica?\",\n                \"boost\": 1\n              }\n            }\n          }\n        }\n      ],\n      \"window_size\": 10,\n      \"rank_constant\": 20\n    }\n  }\n}\n----\n// TEST[skip: Requires inference]\n\n[discrete]\n[[sparse-vector-query-with-pruning-config-and-rescore-example]]\n==== Example ELSER query with pruning configuration and rescore\n\nThe following is an extension to the above example that adds a preview:[] pruning configuration to the `sparse_vector` query.\nThe pruning configuration identifies non-significant tokens to prune from the query in order to improve query performance.\n\nToken pruning happens at the shard level.\nWhile this should result in the same tokens being labeled as insignificant across shards, this is not guaranteed based on the composition of each shard.\nTherefore, if you are running `sparse_vector` with a `pruning_config` on a multi-shard index, we strongly recommend adding a <<rescore>> function with the tokens that were originally pruned from the query.\nThis will help mitigate any shard-level inconsistency with pruned tokens and provide better relevance overall.\n\n[source,console]\n----\nGET my-index/_search\n{\n   \"query\":{\n      \"sparse_vector\":{\n         \"field\": \"ml.tokens\",\n         \"inference_id\": \"my-elser-model\",\n         \"query\":\"How is the weather in Jamaica?\",\n         \"prune\": true,\n         \"pruning_config\": {\n           \"tokens_freq_ratio_threshold\": 5,\n           \"tokens_weight_threshold\": 0.4,\n           \"only_score_pruned_tokens\": false\n         }\n      }\n   },\n   \"rescore\": {\n      \"window_size\": 100,\n      \"query\": {\n         \"rescore_query\": {\n            \"sparse_vector\": {\n               \"field\": \"ml.tokens\",\n               \"inference_id\": \"my-elser-model\",\n               \"query\": \"How is the weather in Jamaica?\",\n               \"prune\": true,\n               \"pruning_config\": {\n                   \"tokens_freq_ratio_threshold\": 5,\n                   \"tokens_weight_threshold\": 0.4,\n                   \"only_score_pruned_tokens\": true\n               }\n            }\n         }\n      }\n   }\n}\n----\n//TEST[skip: Requires inference]\n\nNOTE: When performing <<modules-cross-cluster-search, cross-cluster search>>, inference is performed on the local cluster.\n\n\n"
}