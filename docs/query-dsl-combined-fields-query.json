{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.191578",
        "size": 6206,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-combined-fields-query.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "query-dsl-combined-fields-query",
        "version": "8.15"
    },
    "doc": "[[query-dsl-combined-fields-query]]\n=== Combined fields\n++++\n<titleabbrev>Combined fields</titleabbrev>\n++++\n\nThe `combined_fields` query supports searching multiple text fields as if their\ncontents had been indexed into one combined field. The query takes a term-centric\nview of the input string: first it analyzes the query string into individual terms,\nthen looks for each term in any of the fields. This query is particularly\nuseful when a match could span multiple text fields, for example the `title`,\n`abstract`, and `body` of an article:\n\n[source,console]\n----\nGET /_search\n{\n  \"query\": {\n    \"combined_fields\" : {\n      \"query\":      \"database systems\",\n      \"fields\":     [ \"title\", \"abstract\", \"body\"],\n      \"operator\":   \"and\"\n    }\n  }\n}\n----\n\nThe `combined_fields` query takes a principled approach to scoring based on the\nsimple BM25F formula described in\nhttp://www.staff.city.ac.uk/~sb317/papers/foundations_bm25_review.pdf[The Probabilistic Relevance Framework: BM25 and Beyond].\nWhen scoring matches, the query combines term and collection statistics across\nfields to score each match as if the specified fields had been indexed into a\nsingle, combined field. This scoring is a best attempt; `combined_fields` makes\nsome approximations and scores will not obey the BM25F model perfectly.\n\n:query-type: combined fields\n// tag::max-clause-limit[]\n[WARNING]\n.Field number limit\n===================================================\nBy default, there is a limit to the number of clauses a query can contain. This\nlimit is defined by the\n<<indices-query-bool-max-clause-count,`indices.query.bool.max_clause_count`>>\nsetting, which defaults to `4096`. For {query-type} queries, the number of\nclauses is calculated as the number of fields multiplied by the number of terms.\n===================================================\n// end::max-clause-limit[]\n:query-type!:\n\n==== Per-field boosting\n\nField boosts are interpreted according to the combined field model. For example,\nif the `title` field has a boost of 2, the score is calculated as if each term\nin the title appeared twice in the synthetic combined field.\n\n[source,console]\n----\nGET /_search\n{\n  \"query\": {\n    \"combined_fields\" : {\n      \"query\" : \"distributed consensus\",\n      \"fields\" : [ \"title^2\", \"body\" ] <1>\n    }\n  }\n}\n----\n<1> Individual fields can be boosted with the caret (`^`) notation.\n\nNOTE: The `combined_fields` query requires that field boosts are greater than\nor equal to 1.0. Field boosts are allowed to be fractional.\n\n[[combined-field-top-level-params]]\n==== Top-level parameters for `combined_fields`\n\n`fields`::\n(Required, array of strings) List of fields to search. Field wildcard patterns\nare allowed. Only <<text,`text`>> fields are supported, and they must all have\nthe same search <<analyzer,`analyzer`>>.\n\n`query`::\n+\n--\n(Required, string) Text to search for in the provided `<fields>`.\n\nThe `combined_fields` query <<analysis,analyzes>> the provided text before\nperforming a search.\n--\n\n`auto_generate_synonyms_phrase_query`::\n+\n--\n(Optional, Boolean) If `true`, <<query-dsl-match-query-phrase,match phrase>>\nqueries are automatically created for multi-term synonyms. Defaults to `true`.\n\nSee <<query-dsl-match-query-synonyms,Use synonyms with match query>> for an\nexample.\n--\n\n`operator`::\n+\n--\n(Optional, string) Boolean logic used to interpret text in the `query` value.\nValid values are:\n\n`or` (Default)::\nFor example, a `query` value of `database systems` is interpreted as `database\nOR systems`.\n\n`and`::\nFor example, a `query` value of `database systems` is interpreted as `database\nAND systems`.\n--\n\n`minimum_should_match`::\n+\n--\n(Optional, string) Minimum number of clauses that must match for a document to\nbe returned. See the <<query-dsl-minimum-should-match, `minimum_should_match`\nparameter>> for valid values and more information.\n--\n\n`zero_terms_query`::\n+\n--\n(Optional, string) Indicates whether no documents are returned if the `analyzer`\nremoves all tokens, such as when using a `stop` filter. Valid values are:\n\n`none` (Default)::\nNo documents are returned if the `analyzer` removes all tokens.\n\n`all`::\nReturns all documents, similar to a <<query-dsl-match-all-query,`match_all`>>\nquery.\n\nSee <<query-dsl-match-query-zero>> for an example.\n--\n\n===== Comparison to `multi_match` query\n\nThe `combined_fields` query provides a principled way of matching and scoring\nacross multiple <<text, `text`>> fields. To support this, it requires that all\nfields have the same search <<analyzer,`analyzer`>>.\n\nIf you want a single query that handles fields of different types like\nkeywords or numbers, then the <<query-dsl-multi-match-query,`multi_match`>>\nquery may be a better fit. It supports both text and non-text fields, and\naccepts text fields that do not share the same analyzer.\n\nThe main `multi_match` modes `best_fields` and `most_fields` take a\nfield-centric view of the query. In contrast, `combined_fields` is\nterm-centric: `operator` and `minimum_should_match` are applied per-term,\ninstead of per-field. Concretely, a query like\n\n[source,console]\n----\nGET /_search\n{\n  \"query\": {\n    \"combined_fields\" : {\n      \"query\":      \"database systems\",\n      \"fields\":     [ \"title\", \"abstract\"],\n      \"operator\":   \"and\"\n    }\n  }\n}\n----\n\nis executed as:\n\n[source,txt]\n----\n+(combined(\"database\", fields:[\"title\" \"abstract\"]))\n+(combined(\"systems\", fields:[\"title\", \"abstract\"]))\n----\n\nIn other words, each term must be present in at least one field for a\ndocument to match.\n\nThe `cross_fields` `multi_match` mode also takes a term-centric approach and\napplies `operator` and `minimum_should_match per-term`. The main advantage of\n`combined_fields` over `cross_fields` is its robust and interpretable approach\nto scoring based on the BM25F algorithm.\n\n[NOTE]\n.Custom similarities\n===================================================\nThe `combined_fields` query currently only supports the BM25 similarity,\nwhich is the default unless a <<index-modules-similarity, custom similarity>>\nis configured. <<similarity, Per-field similarities>> are also not allowed.\nUsing `combined_fields` in either of these cases will result in an error.\n===================================================\n"
}