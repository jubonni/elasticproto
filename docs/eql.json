{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.470580",
        "size": 43893,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/eql.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": false,
        "title": "eql",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[eql]]\n= EQL search\n++++\n<titleabbrev>EQL</titleabbrev>\n++++\n\nEvent Query Language (EQL) is a query language for event-based time series\ndata, such as logs, metrics, and traces.\n\n[discrete]\n[[eql-advantages]]\n=== Advantages of EQL\n\n* *EQL lets you express relationships between events.* +\nMany query languages allow you to match single events. EQL lets you match a\nsequence of events across different event categories and time spans.\n\n* *EQL has a low learning curve.* +\n<<eql-syntax,EQL syntax>> looks like other common query languages, such as SQL.\nEQL lets you write and read queries intuitively, which makes for quick,\niterative searching.\n\n* *EQL is designed for security use cases.* +\nWhile you can use it for any event-based data, we created EQL for threat\nhunting. EQL not only supports indicator of compromise (IOC) searches but can\ndescribe activity that goes beyond IOCs.\n\n[discrete]\n[[eql-required-fields]]\n=== Required fields\n\nWith the exception of sample queries, EQL searches require that the searched\ndata stream or index  contains a _timestamp_ field. By default, EQL uses the\n`@timestamp` field from the {ecs-ref}[Elastic Common Schema (ECS)].\n\nEQL searches also require an _event category_ field, unless you use the\n<<eql-syntax-match-any-event-category,`any` keyword>> to search for  documents\nwithout an event category field. By default, EQL uses the ECS `event.category`\nfield.\n\nTo use a different timestamp or event category field, see\n<<specify-a-timestamp-or-event-category-field>>.\n\nTIP: While no schema is required to use EQL, we recommend using the\n{ecs-ref}[ECS]. EQL searches are designed to work with core ECS fields by\ndefault.\n\n[discrete]\n[[run-an-eql-search]]\n=== Run an EQL search\n\nUse the <<eql-search-api,EQL search API>> to run a <<eql-basic-syntax,basic EQL\nquery>>.\n\n////\n[source,console]\n----\nDELETE /_data_stream/*\nDELETE /_index_template/*\n----\n// TEARDOWN\n////\n\n[source,console]\n----\nGET /my-data-stream/_eql/search\n{\n  \"query\": \"\"\"\n    process where process.name == \"regsvr32.exe\"\n  \"\"\"\n}\n----\n// TEST[setup:sec_logs]\n\nBy default, basic EQL queries return the 10 most recent matching events in the\n`hits.events` property. These hits are sorted by timestamp, converted to\nmilliseconds since the {wikipedia}/Unix_time[Unix epoch], in ascending order.\n\n[source,console-result]\n----\n{\n  \"is_partial\": false,\n  \"is_running\": false,\n  \"took\": 60,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": {\n      \"value\": 2,\n      \"relation\": \"eq\"\n    },\n    \"events\": [\n      {\n        \"_index\": \".ds-my-data-stream-2099.12.07-000001\",\n        \"_id\": \"OQmfCaduce8zoHT93o4H\",\n        \"_source\": {\n          \"@timestamp\": \"2099-12-07T11:07:09.000Z\",\n          \"event\": {\n            \"category\": \"process\",\n            \"id\": \"aR3NWVOs\",\n            \"sequence\": 4\n          },\n          \"process\": {\n            \"pid\": 2012,\n            \"name\": \"regsvr32.exe\",\n            \"command_line\": \"regsvr32.exe  /s /u /i:https://...RegSvr32.sct scrobj.dll\",\n            \"executable\": \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\"\n          }\n        }\n      },\n      {\n        \"_index\": \".ds-my-data-stream-2099.12.07-000001\",\n        \"_id\": \"xLkCaj4EujzdNSxfYLbO\",\n        \"_source\": {\n          \"@timestamp\": \"2099-12-07T11:07:10.000Z\",\n          \"event\": {\n            \"category\": \"process\",\n            \"id\": \"GTSmSqgz0U\",\n            \"sequence\": 6,\n            \"type\": \"termination\"\n          },\n          \"process\": {\n            \"pid\": 2012,\n            \"name\": \"regsvr32.exe\",\n            \"executable\": \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\"\n          }\n        }\n      }\n    ]\n  }\n}\n----\n// TESTRESPONSE[s/\"took\": 60/\"took\": $body.took/]\n// TESTRESPONSE[s/\"_index\": \".ds-my-data-stream-2099.12.07-000001\"/\"_index\": $body.hits.events.0._index/]\n// TESTRESPONSE[s/\"_id\": \"OQmfCaduce8zoHT93o4H\"/\"_id\": $body.hits.events.0._id/]\n// TESTRESPONSE[s/\"_id\": \"xLkCaj4EujzdNSxfYLbO\"/\"_id\": $body.hits.events.1._id/]\n\nUse the `size` parameter to get a smaller or larger set of hits:\n\n[source,console]\n----\nGET /my-data-stream/_eql/search\n{\n  \"query\": \"\"\"\n    process where process.name == \"regsvr32.exe\"\n  \"\"\",\n  \"size\": 50\n}\n----\n// TEST[setup:sec_logs]\n\n[discrete]\n[[eql-search-sequence]]\n=== Search for a sequence of events\n\nUse EQL's <<eql-sequences,sequence syntax>> to search for a series of\nordered events. List the event items in ascending chronological order,\nwith the most recent event listed last:\n\n[source,console]\n----\nGET /my-data-stream/_eql/search\n{\n  \"query\": \"\"\"\n    sequence\n      [ process where process.name == \"regsvr32.exe\" ]\n      [ file where stringContains(file.name, \"scrobj.dll\") ]\n  \"\"\"\n}\n----\n// TEST[setup:sec_logs]\n\nThe response's `hits.sequences` property contains the 10 most recent matching\nsequences.\n\n[source,console-result]\n----\n{\n  ...\n  \"hits\": {\n    \"total\": ...,\n    \"sequences\": [\n      {\n        \"events\": [\n          {\n            \"_index\": \".ds-my-data-stream-2099.12.07-000001\",\n            \"_id\": \"OQmfCaduce8zoHT93o4H\",\n            \"_source\": {\n              \"@timestamp\": \"2099-12-07T11:07:09.000Z\",\n              \"event\": {\n                \"category\": \"process\",\n                \"id\": \"aR3NWVOs\",\n                \"sequence\": 4\n              },\n              \"process\": {\n                \"pid\": 2012,\n                \"name\": \"regsvr32.exe\",\n                \"command_line\": \"regsvr32.exe  /s /u /i:https://...RegSvr32.sct scrobj.dll\",\n                \"executable\": \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\"\n              }\n            }\n          },\n          {\n            \"_index\": \".ds-my-data-stream-2099.12.07-000001\",\n            \"_id\": \"yDwnGIJouOYGBzP0ZE9n\",\n            \"_source\": {\n              \"@timestamp\": \"2099-12-07T11:07:10.000Z\",\n              \"event\": {\n                \"category\": \"file\",\n                \"id\": \"tZ1NWVOs\",\n                \"sequence\": 5\n              },\n              \"process\": {\n                \"pid\": 2012,\n                \"name\": \"regsvr32.exe\",\n                \"executable\": \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\"\n              },\n              \"file\": {\n                \"path\": \"C:\\\\Windows\\\\System32\\\\scrobj.dll\",\n                \"name\": \"scrobj.dll\"\n              }\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n----\n// TESTRESPONSE[s/  \\.\\.\\.\\n/\"is_partial\": false, \"is_running\": false, \"took\": $body.took, \"timed_out\": false,/]\n// TESTRESPONSE[s/\"total\": \\.\\.\\.,/\"total\": { \"value\": 1, \"relation\": \"eq\" },/]\n// TESTRESPONSE[s/\"_index\": \".ds-my-data-stream-2099.12.07-000001\"/\"_index\": $body.hits.sequences.0.events.0._index/]\n// TESTRESPONSE[s/\"_id\": \"OQmfCaduce8zoHT93o4H\"/\"_id\": $body.hits.sequences.0.events.0._id/]\n// TESTRESPONSE[s/\"_id\": \"yDwnGIJouOYGBzP0ZE9n\"/\"_id\": $body.hits.sequences.0.events.1._id/]\n\nUse <<eql-with-maxspan-keywords,`with maxspan`>> to constrain matching sequences\nto a timespan:\n\n[source,console]\n----\nGET /my-data-stream/_eql/search\n{\n  \"query\": \"\"\"\n    sequence with maxspan=1h\n      [ process where process.name == \"regsvr32.exe\" ]\n      [ file where stringContains(file.name, \"scrobj.dll\") ]\n  \"\"\"\n}\n----\n// TEST[setup:sec_logs]\n\nUse `!` to match <<eql-missing-events,missing events>>: events in a sequence\nthat do not meet a condition within a given timespan:\n\n[source,console]\n----\nGET /my-data-stream/_eql/search\n{\n  \"query\": \"\"\"\n    sequence with maxspan=1d\n      [ process where process.name == \"cmd.exe\" ]\n      ![ process where stringContains(process.command_line, \"ocx\") ]\n      [ file where stringContains(file.name, \"scrobj.dll\") ]\n  \"\"\"\n}\n----\n// TEST[setup:sec_logs]\n\nMissing events are indicated in the response as `missing\": true`:\n\n[source,console-result]\n----\n{\n  ...\n  \"hits\": {\n    \"total\": ...,\n    \"sequences\": [\n      {\n        \"events\": [\n          {\n            \"_index\": \".ds-my-data-stream-2023.07.04-000001\",\n            \"_id\": \"AnpTIYkBrVQ2QEgsWg94\",\n            \"_source\": {\n              \"@timestamp\": \"2099-12-07T11:06:07.000Z\",\n              \"event\": {\n                \"category\": \"process\",\n                \"id\": \"cMyt5SZ2\",\n                \"sequence\": 3\n              },\n              \"process\": {\n                \"pid\": 2012,\n                \"name\": \"cmd.exe\",\n                \"executable\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"\n              }\n            }\n          },\n          {\n            \"_index\": \"\",\n            \"_id\": \"\",\n            \"_source\": {},\n            \"missing\": true\n          },\n          {\n            \"_index\": \".ds-my-data-stream-2023.07.04-000001\",\n            \"_id\": \"BHpTIYkBrVQ2QEgsWg94\",\n            \"_source\": {\n              \"@timestamp\": \"2099-12-07T11:07:10.000Z\",\n              \"event\": {\n                \"category\": \"file\",\n                \"id\": \"tZ1NWVOs\",\n                \"sequence\": 5\n              },\n              \"process\": {\n                \"pid\": 2012,\n                \"name\": \"regsvr32.exe\",\n                \"executable\": \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\"\n              },\n              \"file\": {\n                \"path\": \"C:\\\\Windows\\\\System32\\\\scrobj.dll\",\n                \"name\": \"scrobj.dll\"\n              }\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n----\n// TESTRESPONSE[s/  \\.\\.\\.\\n/\"is_partial\": false, \"is_running\": false, \"took\": $body.took, \"timed_out\": false,/]\n// TESTRESPONSE[s/\"total\": \\.\\.\\.,/\"total\": { \"value\": 1, \"relation\": \"eq\" },/]\n// TESTRESPONSE[s/\"_index\": \".ds-my-data-stream-2023.07.04-000001\"/\"_index\": $body.hits.sequences.0.events.0._index/]\n// TESTRESPONSE[s/\"_id\": \"AnpTIYkBrVQ2QEgsWg94\"/\"_id\": $body.hits.sequences.0.events.0._id/]\n// TESTRESPONSE[s/\"_id\": \"BHpTIYkBrVQ2QEgsWg94\"/\"_id\": $body.hits.sequences.0.events.2._id/]\n\nUse the <<eql-by-keyword,`by` keyword>> to match events that share the\nsame field values:\n\n[source,console]\n----\nGET /my-data-stream/_eql/search\n{\n  \"query\": \"\"\"\n    sequence with maxspan=1h\n      [ process where process.name == \"regsvr32.exe\" ] by process.pid\n      [ file where stringContains(file.name, \"scrobj.dll\") ] by process.pid\n  \"\"\"\n}\n----\n// TEST[setup:sec_logs]\n\nIf a field value should be shared across all events, use the `sequence by`\nkeyword. The following query is equivalent to the previous one.\n\n[source,console]\n----\nGET /my-data-stream/_eql/search\n{\n  \"query\": \"\"\"\n    sequence by process.pid with maxspan=1h\n      [ process where process.name == \"regsvr32.exe\" ]\n      [ file where stringContains(file.name, \"scrobj.dll\") ]\n  \"\"\"\n}\n----\n// TEST[setup:sec_logs]\n\nThe `hits.sequences.join_keys` property contains the shared field values.\n\n[source,console-result]\n----\n{\n  ...\n  \"hits\": ...,\n    \"sequences\": [\n      {\n        \"join_keys\": [\n          2012\n        ],\n        \"events\": ...\n      }\n    ]\n  }\n}\n----\n// TESTRESPONSE[s/  \\.\\.\\.\\n/\"is_partial\": false, \"is_running\": false, \"took\": $body.took, \"timed_out\": false,/]\n// TESTRESPONSE[s/\"hits\": \\.\\.\\.,/\"hits\": { \"total\": { \"value\": 1, \"relation\": \"eq\" },/]\n// TESTRESPONSE[s/\"events\": \\.\\.\\./\"events\": $body.hits.sequences.0.events/]\n\nUse the <<eql-until-keyword,`until` keyword>> to specify an expiration\nevent for sequences. Matching sequences must end before this event.\n\n[source,console]\n----\nGET /my-data-stream/_eql/search\n{\n  \"query\": \"\"\"\n    sequence by process.pid with maxspan=1h\n      [ process where process.name == \"regsvr32.exe\" ]\n      [ file where stringContains(file.name, \"scrobj.dll\") ]\n    until [ process where event.type == \"termination\" ]\n  \"\"\"\n}\n----\n// TEST[setup:sec_logs]\n\n[discrete]\n[[eql-search-sample]]\n=== Sample chronologically unordered events\n\nUse EQL's <<eql-samples,sample syntax>> to search for events that match one or\nmore join keys and a set of filters. Samples are similar to sequences, but do\nnot return events in chronological order. In fact, sample queries can run on\ndata without a timestamp. Sample queries can be useful to find correlations in\nevents that don't always occur in the same sequence, or that occur across long\ntime spans.\n\n.Click to show the sample data used in the examples below\n[%collapsible]\n====\n[source,console]\n----\nPUT /my-index-000001\n{\n    \"mappings\": {\n        \"properties\": {\n            \"ip\": {\n                \"type\":\"ip\"\n            },\n            \"version\": {\n                \"type\": \"version\"\n            },\n            \"missing_keyword\": {\n                \"type\": \"keyword\"\n            },\n            \"@timestamp\": {\n              \"type\": \"date\"\n            },\n            \"type_test\": {\n                \"type\": \"keyword\"\n            },\n            \"@timestamp_pretty\": {\n              \"type\": \"date\",\n              \"format\": \"dd-MM-yyyy\"\n            },\n            \"event_type\": {\n              \"type\": \"keyword\"\n            },\n            \"event\": {\n              \"properties\": {\n                \"category\": {\n                  \"type\": \"alias\",\n                  \"path\": \"event_type\"\n                }\n              }\n            },\n            \"host\": {\n              \"type\": \"keyword\"\n            },\n            \"os\": {\n              \"type\": \"keyword\"\n            },\n            \"bool\": {\n              \"type\": \"boolean\"\n            },\n            \"uptime\" : {\n              \"type\" : \"long\"\n            },\n            \"port\" : {\n              \"type\" : \"long\"\n            }\n        }\n    }\n}\n\nPUT /my-index-000002\n{\n    \"mappings\": {\n        \"properties\": {\n            \"ip\": {\n                \"type\":\"ip\"\n            },\n            \"@timestamp\": {\n              \"type\": \"date\"\n            },\n            \"@timestamp_pretty\": {\n              \"type\": \"date\",\n              \"format\": \"yyyy-MM-dd\"\n            },\n            \"type_test\": {\n                \"type\": \"keyword\"\n            },\n            \"event_type\": {\n              \"type\": \"keyword\"\n            },\n            \"event\": {\n              \"properties\": {\n                \"category\": {\n                  \"type\": \"alias\",\n                  \"path\": \"event_type\"\n                }\n              }\n            },\n            \"host\": {\n              \"type\": \"keyword\"\n            },\n            \"op_sys\": {\n              \"type\": \"keyword\"\n            },\n            \"bool\": {\n              \"type\": \"boolean\"\n            },\n            \"uptime\" : {\n              \"type\" : \"long\"\n            },\n            \"port\" : {\n              \"type\" : \"long\"\n            }\n        }\n    }\n}\n\nPUT /my-index-000003\n{\n    \"mappings\": {\n        \"properties\": {\n            \"host_ip\": {\n                \"type\":\"ip\"\n            },\n            \"@timestamp\": {\n              \"type\": \"date\"\n            },\n            \"date\": {\n              \"type\": \"date\"\n            },\n            \"event_type\": {\n              \"type\": \"keyword\"\n            },\n            \"event\": {\n              \"properties\": {\n                \"category\": {\n                  \"type\": \"alias\",\n                  \"path\": \"event_type\"\n                }\n              }\n            },\n            \"missing_keyword\": {\n                \"type\": \"keyword\"\n            },\n            \"host\": {\n              \"type\": \"keyword\"\n            },\n            \"os\": {\n              \"type\": \"keyword\"\n            },\n            \"bool\": {\n              \"type\": \"boolean\"\n            },\n            \"uptime\" : {\n              \"type\" : \"long\"\n            },\n            \"port\" : {\n              \"type\" : \"long\"\n            }\n        }\n    }\n}\n\nPOST /my-index-000001/_bulk?refresh\n{\"index\":{\"_id\":1}}\n{\"@timestamp\":\"1234567891\",\"@timestamp_pretty\":\"12-12-2022\",\"missing_keyword\":\"test\",\"type_test\":\"abc\",\"ip\":\"10.0.0.1\",\"event_type\":\"alert\",\"host\":\"doom\",\"uptime\":0,\"port\":1234,\"os\":\"win10\",\"version\":\"1.0.0\",\"id\":11}\n{\"index\":{\"_id\":2}}\n{\"@timestamp\":\"1234567892\",\"@timestamp_pretty\":\"13-12-2022\",\"event_type\":\"alert\",\"type_test\":\"abc\",\"host\":\"CS\",\"uptime\":5,\"port\":1,\"os\":\"win10\",\"version\":\"1.2.0\",\"id\":12}\n{\"index\":{\"_id\":3}}\n{\"@timestamp\":\"1234567893\",\"@timestamp_pretty\":\"12-12-2022\",\"event_type\":\"alert\",\"type_test\":\"abc\",\"host\":\"farcry\",\"uptime\":1,\"port\":1234,\"bool\":false,\"os\":\"win10\",\"version\":\"2.0.0\",\"id\":13}\n{\"index\":{\"_id\":4}}\n{\"@timestamp\":\"1234567894\",\"@timestamp_pretty\":\"13-12-2022\",\"event_type\":\"alert\",\"type_test\":\"abc\",\"host\":\"GTA\",\"uptime\":3,\"port\":12,\"os\":\"slack\",\"version\":\"10.0.0\",\"id\":14}\n{\"index\":{\"_id\":5}}\n{\"@timestamp\":\"1234567895\",\"@timestamp_pretty\":\"17-12-2022\",\"event_type\":\"alert\",\"host\":\"sniper 3d\",\"uptime\":6,\"port\":1234,\"os\":\"fedora\",\"version\":\"20.1.0\",\"id\":15}\n{\"index\":{\"_id\":6}}\n{\"@timestamp\":\"1234568896\",\"@timestamp_pretty\":\"17-12-2022\",\"event_type\":\"alert\",\"host\":\"doom\",\"port\":65123,\"bool\":true,\"os\":\"redhat\",\"version\":\"20.10.0\",\"id\":16}\n{\"index\":{\"_id\":7}}\n{\"@timestamp\":\"1234567897\",\"@timestamp_pretty\":\"17-12-2022\",\"missing_keyword\":\"yyy\",\"event_type\":\"failure\",\"host\":\"doom\",\"uptime\":15,\"port\":1234,\"bool\":true,\"os\":\"redhat\",\"version\":\"20.2.0\",\"id\":17}\n{\"index\":{\"_id\":8}}\n{\"@timestamp\":\"1234567898\",\"@timestamp_pretty\":\"12-12-2022\",\"missing_keyword\":\"test\",\"event_type\":\"success\",\"host\":\"doom\",\"uptime\":16,\"port\":512,\"os\":\"win10\",\"version\":\"1.2.3\",\"id\":18}\n{\"index\":{\"_id\":9}}\n{\"@timestamp\":\"1234567899\",\"@timestamp_pretty\":\"15-12-2022\",\"missing_keyword\":\"test\",\"event_type\":\"success\",\"host\":\"GTA\",\"port\":12,\"bool\":true,\"os\":\"win10\",\"version\":\"1.2.3\",\"id\":19}\n{\"index\":{\"_id\":10}}\n{\"@timestamp\":\"1234567893\",\"missing_keyword\":null,\"ip\":\"10.0.0.5\",\"event_type\":\"alert\",\"host\":\"farcry\",\"uptime\":1,\"port\":1234,\"bool\":true,\"os\":\"win10\",\"version\":\"1.2.3\",\"id\":110}\n\nPOST /my-index-000002/_bulk?refresh\n{\"index\":{\"_id\":1}}\n{\"@timestamp\":\"1234567991\",\"type_test\":\"abc\",\"ip\":\"10.0.0.1\",\"event_type\":\"alert\",\"host\":\"doom\",\"uptime\":0,\"port\":1234,\"op_sys\":\"win10\",\"id\":21}\n{\"index\":{\"_id\":2}}\n{\"@timestamp\":\"1234567992\",\"type_test\":\"abc\",\"event_type\":\"alert\",\"host\":\"CS\",\"uptime\":5,\"port\":1,\"op_sys\":\"win10\",\"id\":22}\n{\"index\":{\"_id\":3}}\n{\"@timestamp\":\"1234567993\",\"type_test\":\"abc\",\"@timestamp_pretty\":\"2022-12-17\",\"event_type\":\"alert\",\"host\":\"farcry\",\"uptime\":1,\"port\":1234,\"bool\":false,\"op_sys\":\"win10\",\"id\":23}\n{\"index\":{\"_id\":4}}\n{\"@timestamp\":\"1234567994\",\"event_type\":\"alert\",\"host\":\"GTA\",\"uptime\":3,\"port\":12,\"op_sys\":\"slack\",\"id\":24}\n{\"index\":{\"_id\":5}}\n{\"@timestamp\":\"1234567995\",\"event_type\":\"alert\",\"host\":\"sniper 3d\",\"uptime\":6,\"port\":1234,\"op_sys\":\"fedora\",\"id\":25}\n{\"index\":{\"_id\":6}}\n{\"@timestamp\":\"1234568996\",\"@timestamp_pretty\":\"2022-12-17\",\"ip\":\"10.0.0.5\",\"event_type\":\"alert\",\"host\":\"doom\",\"port\":65123,\"bool\":true,\"op_sys\":\"redhat\",\"id\":26}\n{\"index\":{\"_id\":7}}\n{\"@timestamp\":\"1234567997\",\"@timestamp_pretty\":\"2022-12-17\",\"event_type\":\"failure\",\"host\":\"doom\",\"uptime\":15,\"port\":1234,\"bool\":true,\"op_sys\":\"redhat\",\"id\":27}\n{\"index\":{\"_id\":8}}\n{\"@timestamp\":\"1234567998\",\"ip\":\"10.0.0.1\",\"event_type\":\"success\",\"host\":\"doom\",\"uptime\":16,\"port\":512,\"op_sys\":\"win10\",\"id\":28}\n{\"index\":{\"_id\":9}}\n{\"@timestamp\":\"1234567999\",\"ip\":\"10.0.0.1\",\"event_type\":\"success\",\"host\":\"GTA\",\"port\":12,\"bool\":false,\"op_sys\":\"win10\",\"id\":29}\n\nPOST /my-index-000003/_bulk?refresh\n{\"index\":{\"_id\":1}}\n{\"@timestamp\":\"1334567891\",\"host_ip\":\"10.0.0.1\",\"event_type\":\"alert\",\"host\":\"doom\",\"uptime\":0,\"port\":12,\"os\":\"win10\",\"id\":31}\n{\"index\":{\"_id\":2}}\n{\"@timestamp\":\"1334567892\",\"event_type\":\"alert\",\"host\":\"CS\",\"os\":\"win10\",\"id\":32}\n{\"index\":{\"_id\":3}}\n{\"@timestamp\":\"1334567893\",\"event_type\":\"alert\",\"host\":\"farcry\",\"bool\":true,\"os\":\"win10\",\"id\":33}\n{\"index\":{\"_id\":4}}\n{\"@timestamp\":\"1334567894\",\"event_type\":\"alert\",\"host\":\"GTA\",\"os\":\"slack\",\"bool\":true,\"id\":34}\n{\"index\":{\"_id\":5}}\n{\"@timestamp\":\"1234567895\",\"event_type\":\"alert\",\"host\":\"sniper 3d\",\"os\":\"fedora\",\"id\":35}\n{\"index\":{\"_id\":6}}\n{\"@timestamp\":\"1234578896\",\"host_ip\":\"10.0.0.1\",\"event_type\":\"alert\",\"host\":\"doom\",\"bool\":true,\"os\":\"redhat\",\"id\":36}\n{\"index\":{\"_id\":7}}\n{\"@timestamp\":\"1234567897\",\"event_type\":\"failure\",\"missing_keyword\":\"test\",\"host\":\"doom\",\"bool\":true,\"os\":\"redhat\",\"id\":37}\n{\"index\":{\"_id\":8}}\n{\"@timestamp\":\"1234577898\",\"event_type\":\"success\",\"host\":\"doom\",\"os\":\"win10\",\"id\":38,\"date\":\"1671235200000\"}\n{\"index\":{\"_id\":9}}\n{\"@timestamp\":\"1234577899\",\"host_ip\":\"10.0.0.5\",\"event_type\":\"success\",\"host\":\"GTA\",\"bool\":true,\"os\":\"win10\",\"id\":39}\n----\n====\n\nA sample query specifies at least one join key, using the <<eql-by-keyword,`by`\nkeyword>>, and up to five filters:\n\n[source,console]\n----\nGET /my-index*/_eql/search\n{\n  \"query\": \"\"\"\n    sample by host\n      [any where uptime > 0]\n      [any where port > 100]\n      [any where bool == true]\n  \"\"\"\n}\n----\n// TEST[continued]\n\nBy default, the response\u2019s `hits.sequences` property contains up to 10 samples.\nEach sample has a set of `join_keys` and an array with one matching event for\neach of the filters. Events are returned in the order of the filters they match:\n\n[source,console-result]\n----\n{\n  ...\n  \"hits\": {\n    \"total\": {\n      \"value\": 2,\n      \"relation\": \"eq\"\n    },\n    \"sequences\": [\n      {\n        \"join_keys\": [\n          \"doom\"                                      <1>\n        ],\n        \"events\": [\n          {                                           <2>\n            \"_index\": \"my-index-000001\",\n            \"_id\": \"7\",\n            \"_source\": {\n              \"@timestamp\": \"1234567897\",\n              \"@timestamp_pretty\": \"17-12-2022\",\n              \"missing_keyword\": \"yyy\",\n              \"event_type\": \"failure\",\n              \"host\": \"doom\",\n              \"uptime\": 15,\n              \"port\": 1234,\n              \"bool\": true,\n              \"os\": \"redhat\",\n              \"version\": \"20.2.0\",\n              \"id\": 17\n            }\n          },\n          {                                           <3>\n            \"_index\": \"my-index-000001\",\n            \"_id\": \"1\",\n            \"_source\": {\n              \"@timestamp\": \"1234567891\",\n              \"@timestamp_pretty\": \"12-12-2022\",\n              \"missing_keyword\": \"test\",\n              \"type_test\": \"abc\",\n              \"ip\": \"10.0.0.1\",\n              \"event_type\": \"alert\",\n              \"host\": \"doom\",\n              \"uptime\": 0,\n              \"port\": 1234,\n              \"os\": \"win10\",\n              \"version\": \"1.0.0\",\n              \"id\": 11\n            }\n          },\n          {                                           <4>\n            \"_index\": \"my-index-000001\",\n            \"_id\": \"6\",\n            \"_source\": {\n              \"@timestamp\": \"1234568896\",\n              \"@timestamp_pretty\": \"17-12-2022\",\n              \"event_type\": \"alert\",\n              \"host\": \"doom\",\n              \"port\": 65123,\n              \"bool\": true,\n              \"os\": \"redhat\",\n              \"version\": \"20.10.0\",\n              \"id\": 16\n            }\n          }\n        ]\n      },\n      {\n        \"join_keys\": [\n          \"farcry\"                                    <5>\n        ],\n        \"events\": [\n          {\n            \"_index\": \"my-index-000001\",\n            \"_id\": \"3\",\n            \"_source\": {\n              \"@timestamp\": \"1234567893\",\n              \"@timestamp_pretty\": \"12-12-2022\",\n              \"event_type\": \"alert\",\n              \"type_test\": \"abc\",\n              \"host\": \"farcry\",\n              \"uptime\": 1,\n              \"port\": 1234,\n              \"bool\": false,\n              \"os\": \"win10\",\n              \"version\": \"2.0.0\",\n              \"id\": 13\n            }\n          },\n          {\n            \"_index\": \"my-index-000001\",\n            \"_id\": \"10\",\n            \"_source\": {\n              \"@timestamp\": \"1234567893\",\n              \"missing_keyword\": null,\n              \"ip\": \"10.0.0.5\",\n              \"event_type\": \"alert\",\n              \"host\": \"farcry\",\n              \"uptime\": 1,\n              \"port\": 1234,\n              \"bool\": true,\n              \"os\": \"win10\",\n              \"version\": \"1.2.3\",\n              \"id\": 110\n            }\n          },\n          {\n            \"_index\": \"my-index-000003\",\n            \"_id\": \"3\",\n            \"_source\": {\n              \"@timestamp\": \"1334567893\",\n              \"event_type\": \"alert\",\n              \"host\": \"farcry\",\n              \"bool\": true,\n              \"os\": \"win10\",\n              \"id\": 33\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n----\n// TESTRESPONSE[skip:Response is illustrative only]\n\n<1> The events in the first sample have a value of `doom` for `host`.\n<2> This event matches the first filter.\n<3> This event matches the second filter.\n<4> This event matches the third filter.\n<5> The events in the second sample have a value of `farcry` for `host`.\n\nYou can specify multiple join keys:\n\n[source,console]\n----\nGET /my-index*/_eql/search\n{\n  \"query\": \"\"\"\n    sample by host\n      [any where uptime > 0]   by os\n      [any where port > 100]   by op_sys\n      [any where bool == true] by os\n  \"\"\"\n}\n----\n// TEST[continued]\n\nThis query will return samples where each of the events shares the same value\nfor `os` or `op_sys`, as well as for `host`. For example:\n\n[source,console-result]\n----\n{\n  ...\n  \"hits\": {\n    \"total\": {\n      \"value\": 2,\n      \"relation\": \"eq\"\n    },\n    \"sequences\": [\n      {\n        \"join_keys\": [\n          \"doom\",                                      <1>\n          \"redhat\"\n        ],\n        \"events\": [\n          {\n            \"_index\": \"my-index-000001\",\n            \"_id\": \"7\",\n            \"_source\": {\n              \"@timestamp\": \"1234567897\",\n              \"@timestamp_pretty\": \"17-12-2022\",\n              \"missing_keyword\": \"yyy\",\n              \"event_type\": \"failure\",\n              \"host\": \"doom\",\n              \"uptime\": 15,\n              \"port\": 1234,\n              \"bool\": true,\n              \"os\": \"redhat\",\n              \"version\": \"20.2.0\",\n              \"id\": 17\n            }\n          },\n          {\n            \"_index\": \"my-index-000002\",\n            \"_id\": \"6\",\n            \"_source\": {\n              \"@timestamp\": \"1234568996\",\n              \"@timestamp_pretty\": \"2022-12-17\",\n              \"ip\": \"10.0.0.5\",\n              \"event_type\": \"alert\",\n              \"host\": \"doom\",\n              \"port\": 65123,\n              \"bool\": true,\n              \"op_sys\": \"redhat\",\n              \"id\": 26\n            }\n          },\n          {\n            \"_index\": \"my-index-000001\",\n            \"_id\": \"6\",\n            \"_source\": {\n              \"@timestamp\": \"1234568896\",\n              \"@timestamp_pretty\": \"17-12-2022\",\n              \"event_type\": \"alert\",\n              \"host\": \"doom\",\n              \"port\": 65123,\n              \"bool\": true,\n              \"os\": \"redhat\",\n              \"version\": \"20.10.0\",\n              \"id\": 16\n            }\n          }\n        ]\n      },\n      {\n        \"join_keys\": [\n          \"farcry\",\n          \"win10\"\n        ],\n        \"events\": [\n          {\n            \"_index\": \"my-index-000001\",\n            \"_id\": \"3\",\n            \"_source\": {\n              \"@timestamp\": \"1234567893\",\n              \"@timestamp_pretty\": \"12-12-2022\",\n              \"event_type\": \"alert\",\n              \"type_test\": \"abc\",\n              \"host\": \"farcry\",\n              \"uptime\": 1,\n              \"port\": 1234,\n              \"bool\": false,\n              \"os\": \"win10\",\n              \"version\": \"2.0.0\",\n              \"id\": 13\n            }\n          },\n          {\n            \"_index\": \"my-index-000002\",\n            \"_id\": \"3\",\n            \"_source\": {\n              \"@timestamp\": \"1234567993\",\n              \"type_test\": \"abc\",\n              \"@timestamp_pretty\": \"2022-12-17\",\n              \"event_type\": \"alert\",\n              \"host\": \"farcry\",\n              \"uptime\": 1,\n              \"port\": 1234,\n              \"bool\": false,\n              \"op_sys\": \"win10\",\n              \"id\": 23\n            }\n          },\n          {\n            \"_index\": \"my-index-000001\",\n            \"_id\": \"10\",\n            \"_source\": {\n              \"@timestamp\": \"1234567893\",\n              \"missing_keyword\": null,\n              \"ip\": \"10.0.0.5\",\n              \"event_type\": \"alert\",\n              \"host\": \"farcry\",\n              \"uptime\": 1,\n              \"port\": 1234,\n              \"bool\": true,\n              \"os\": \"win10\",\n              \"version\": \"1.2.3\",\n              \"id\": 110\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n----\n// TESTRESPONSE[skip:Response is illustrative only]\n\n<1> The events in this sample have a value of `doom` for `host` and a value of\n`redhat` for `os` or `op_sys`.\n\nBy default, the response of a sample query contains up to 10 samples, with one\nsample per unique set of join keys. Use the `size` parameter to get a smaller or\nlarger set of samples. To retrieve more than one sample per set of join keys,\nuse the `max_samples_per_key` parameter. Pipes are not supported for sample\nqueries.\n\n[source,console]\n----\nGET /my-index*/_eql/search\n{\n  \"max_samples_per_key\": 2,     <1>\n  \"size\": 20,                   <2>\n  \"query\": \"\"\"\n    sample\n      [any where uptime > 0]   by host,os\n      [any where port > 100]   by host,op_sys\n      [any where bool == true] by host,os\n  \"\"\"\n}\n----\n// TEST[continued]\n\n<1> Retrieve up to 2 samples per set of join keys.\n<2> Retrieve up to 20 samples in total.\n\n[discrete]\n[[retrieve-selected-fields]]\n=== Retrieve selected fields\n\nBy default, each hit in the search response includes the document `_source`,\nwhich is the entire JSON object that was provided when indexing the document.\n\nYou can use the <<common-options-response-filtering,`filter_path`>> query\nparameter to filter the API response. For example, the following search returns\nonly the timestamp and PID from the `_source` of each matching event.\n\n[source,console]\n----\nGET /my-data-stream/_eql/search?filter_path=hits.events._source.@timestamp,hits.events._source.process.pid\n{\n  \"query\": \"\"\"\n    process where process.name == \"regsvr32.exe\"\n  \"\"\"\n}\n----\n// TEST[setup:sec_logs]\n\nThe API returns the following response.\n\n[source,console-result]\n----\n{\n  \"hits\": {\n    \"events\": [\n      {\n        \"_source\": {\n          \"@timestamp\": \"2099-12-07T11:07:09.000Z\",\n          \"process\": {\n            \"pid\": 2012\n          }\n        }\n      },\n      {\n        \"_source\": {\n          \"@timestamp\": \"2099-12-07T11:07:10.000Z\",\n          \"process\": {\n            \"pid\": 2012\n          }\n        }\n      }\n    ]\n  }\n}\n----\n\nYou can also use the `fields` parameter to retrieve and format specific fields\nin the response. This field is identical to the search API's\n<<search-fields,`fields` parameter>>.\n\ninclude::{es-ref-dir}/search/search-your-data/retrieve-selected-fields.asciidoc[tag=fields-param-desc]\n\nThe following search request uses the `fields` parameter to retrieve values for\nthe `event.type` field, all fields starting with `process.`, and the\n`@timestamp` field. The request also uses the `filter_path` query parameter to\nexclude the `_source` of each hit.\n\n[source,console]\n----\nGET /my-data-stream/_eql/search?filter_path=-hits.events._source\n{\n  \"query\": \"\"\"\n    process where process.name == \"regsvr32.exe\"\n  \"\"\",\n  \"fields\": [\n    \"event.type\",\n    \"process.*\",                <1>\n    {\n      \"field\": \"@timestamp\",\n      \"format\": \"epoch_millis\"  <2>\n    }\n  ]\n}\n----\n// TEST[setup:sec_logs]\n\ninclude::{es-ref-dir}/search/search-your-data/retrieve-selected-fields.asciidoc[tag=fields-param-callouts]\n\nThe response includes values as a flat list in the `fields` section for each\nhit.\n\n[source,console-result]\n----\n{\n  ...\n  \"hits\": {\n    \"total\": ...,\n    \"events\": [\n      {\n        \"_index\": \".ds-my-data-stream-2099.12.07-000001\",\n        \"_id\": \"OQmfCaduce8zoHT93o4H\",\n        \"fields\": {\n          \"process.name\": [\n            \"regsvr32.exe\"\n          ],\n          \"process.name.keyword\": [\n            \"regsvr32.exe\"\n          ],\n          \"@timestamp\": [\n            \"4100324829000\"\n          ],\n          \"process.command_line\": [\n            \"regsvr32.exe  /s /u /i:https://...RegSvr32.sct scrobj.dll\"\n          ],\n          \"process.command_line.keyword\": [\n            \"regsvr32.exe  /s /u /i:https://...RegSvr32.sct scrobj.dll\"\n          ],\n          \"process.executable.keyword\": [\n            \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\"\n          ],\n          \"process.pid\": [\n            2012\n          ],\n          \"process.executable\": [\n            \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\"\n          ]\n        }\n      },\n      ....\n    ]\n  }\n}\n----\n// TESTRESPONSE[s/  \\.\\.\\.\\n/\"is_partial\": false, \"is_running\": false, \"took\": $body.took, \"timed_out\": false,/]\n// TESTRESPONSE[s/\"total\": \\.\\.\\.,/\"total\": { \"value\": 2, \"relation\": \"eq\" },/]\n// TESTRESPONSE[s/\"_index\": \".ds-my-data-stream-2099.12.07-000001\"/\"_index\": $body.hits.events.0._index/]\n// TESTRESPONSE[s/\"_id\": \"OQmfCaduce8zoHT93o4H\"/\"_id\": $body.hits.events.0._id/]\n// TESTRESPONSE[s/      \\.\\.\\.\\.\\n/$body.hits.events.1/]\n\n[discrete]\n[[eql-use-runtime-fields]]\n=== Use runtime fields\n\nUse the `runtime_mappings` parameter to extract and create <<runtime,runtime\nfields>> during a search. Use the `fields` parameter to include runtime fields\nin the response.\n\nThe following search creates a `day_of_week` runtime field from the `@timestamp`\nand returns it in the response.\n\n[source,console]\n----\nGET /my-data-stream/_eql/search?filter_path=-hits.events._source\n{\n  \"runtime_mappings\": {\n    \"day_of_week\": {\n      \"type\": \"keyword\",\n      \"script\": \"emit(doc['@timestamp'].value.dayOfWeekEnum.toString())\"\n    }\n  },\n  \"query\": \"\"\"\n    process where process.name == \"regsvr32.exe\"\n  \"\"\",\n  \"fields\": [\n    \"@timestamp\",\n    \"day_of_week\"\n  ]\n}\n----\n// TEST[setup:sec_logs]\n\nThe API returns:\n\n[source,console-result]\n----\n{\n  ...\n  \"hits\": {\n    \"total\": ...,\n    \"events\": [\n      {\n        \"_index\": \".ds-my-data-stream-2099.12.07-000001\",\n        \"_id\": \"OQmfCaduce8zoHT93o4H\",\n        \"fields\": {\n          \"@timestamp\": [\n            \"2099-12-07T11:07:09.000Z\"\n          ],\n          \"day_of_week\": [\n            \"MONDAY\"\n          ]\n        }\n      },\n      ....\n    ]\n  }\n}\n----\n// TESTRESPONSE[s/  \\.\\.\\.\\n/\"is_partial\": false, \"is_running\": false, \"took\": $body.took, \"timed_out\": false,/]\n// TESTRESPONSE[s/\"total\": \\.\\.\\.,/\"total\": { \"value\": 2, \"relation\": \"eq\" },/]\n// TESTRESPONSE[s/\"_index\": \".ds-my-data-stream-2099.12.07-000001\"/\"_index\": $body.hits.events.0._index/]\n// TESTRESPONSE[s/\"_id\": \"OQmfCaduce8zoHT93o4H\"/\"_id\": $body.hits.events.0._id/]\n// TESTRESPONSE[s/      \\.\\.\\.\\.\\n/$body.hits.events.1/]\n\n\n[discrete]\n[[specify-a-timestamp-or-event-category-field]]\n=== Specify a timestamp or event category field\n\nThe EQL search API uses the `@timestamp` and `event.category` fields from the\n{ecs-ref}[ECS] by default. To specify different fields, use the\n`timestamp_field` and `event_category_field` parameters:\n\n[source,console]\n----\nGET /my-data-stream/_eql/search\n{\n  \"timestamp_field\": \"file.accessed\",\n  \"event_category_field\": \"file.type\",\n  \"query\": \"\"\"\n    file where (file.size > 1 and file.type == \"file\")\n  \"\"\"\n}\n----\n// TEST[setup:sec_logs]\n\nThe event category field must be mapped as a <<keyword,`keyword`>> family field\ntype. The timestamp field should be mapped as a <<date,`date`>> field type.\n<<date_nanos,`date_nanos`>> timestamp fields are not supported. You cannot use a\n<<nested,`nested`>> field or the sub-fields of a `nested` field as the timestamp\nor event category field.\n\n[discrete]\n[[eql-search-specify-a-sort-tiebreaker]]\n=== Specify a sort tiebreaker\n\nBy default, the EQL search API returns matching hits by timestamp. If two or\nmore events share the same timestamp, {es} uses a tiebreaker field value to sort\nthe events in ascending order. {es} orders events with no\ntiebreaker value after events with a value.\n\nIf you don't specify a tiebreaker field or the events also share the same\ntiebreaker value, {es} considers the events concurrent and may\nnot return them in a consistent sort order.\n\nTo specify a tiebreaker field, use the `tiebreaker_field` parameter. If you use\nthe {ecs-ref}[ECS], we recommend using `event.sequence` as the tiebreaker field.\n\n[source,console]\n----\nGET /my-data-stream/_eql/search\n{\n  \"tiebreaker_field\": \"event.sequence\",\n  \"query\": \"\"\"\n    process where process.name == \"cmd.exe\" and stringContains(process.executable, \"System32\")\n  \"\"\"\n}\n----\n// TEST[setup:sec_logs]\n\n[discrete]\n[[eql-search-filter-query-dsl]]\n=== Filter using Query DSL\n\nThe `filter` parameter uses <<query-dsl,Query DSL>> to limit the documents on\nwhich an EQL query runs.\n\n[source,console]\n----\nGET /my-data-stream/_eql/search\n{\n  \"filter\": {\n    \"range\": {\n      \"@timestamp\": {\n        \"gte\": \"now-1d/d\",\n        \"lt\": \"now/d\"\n      }\n    }\n  },\n  \"query\": \"\"\"\n    file where (file.type == \"file\" and file.name == \"cmd.exe\")\n  \"\"\"\n}\n----\n// TEST[setup:sec_logs]\n\n[discrete]\n[[eql-search-async]]\n=== Run an async EQL search\n\nBy default, EQL search requests are synchronous and wait for complete results\nbefore returning a response. However, complete results can take longer for\nsearches across large data sets or <<data-tiers,frozen>> data.\n\nTo avoid long waits, run an async EQL search. Set `wait_for_completion_timeout`\nto a duration you'd like to wait for synchronous results.\n\n[source,console]\n----\nGET /my-data-stream/_eql/search\n{\n  \"wait_for_completion_timeout\": \"2s\",\n  \"query\": \"\"\"\n    process where process.name == \"cmd.exe\"\n  \"\"\"\n}\n----\n// TEST[setup:sec_logs]\n\nIf the request doesn't finish within the timeout period, the search becomes async\nand returns a response that includes:\n\n* A search ID\n* An `is_partial` value of `true`, indicating the search results are\n  incomplete\n* An `is_running` value of `true`, indicating the search is ongoing\n\nThe async search continues to run in the background without blocking other\nrequests.\n\n[source,console-result]\n----\n{\n  \"id\": \"FmNJRUZ1YWZCU3dHY1BIOUhaenVSRkEaaXFlZ3h4c1RTWFNocDdnY2FSaERnUTozNDE=\",\n  \"is_partial\": true,\n  \"is_running\": true,\n  \"took\": 2000,\n  \"timed_out\": false,\n  \"hits\": ...\n}\n----\n// TESTRESPONSE[s/FmNJRUZ1YWZCU3dHY1BIOUhaenVSRkEaaXFlZ3h4c1RTWFNocDdnY2FSaERnUTozNDE=/$body.id/]\n// TESTRESPONSE[s/\"is_partial\": true/\"is_partial\": $body.is_partial/]\n// TESTRESPONSE[s/\"is_running\": true/\"is_running\": $body.is_running/]\n// TESTRESPONSE[s/\"took\": 2000/\"took\": $body.took/]\n// TESTRESPONSE[s/\"hits\": \\.\\.\\./\"hits\": $body.hits/]\n\nTo check the progress of an async search, use the <<get-async-eql-search-api,get\nasync EQL search API>> with the search ID. Specify how long you'd like for\ncomplete results in the `wait_for_completion_timeout` parameter.\n[source,console]\n----\nGET /_eql/search/FmNJRUZ1YWZCU3dHY1BIOUhaenVSRkEaaXFlZ3h4c1RTWFNocDdnY2FSaERnUTozNDE=?wait_for_completion_timeout=2s\n----\n// TEST[skip: no access to search ID]\n\nIf the response's `is_running` value is `false`, the async search has finished.\nIf the `is_partial` value is `false`, the returned search results are\ncomplete.\n\n[source,console-result]\n----\n{\n  \"id\": \"FmNJRUZ1YWZCU3dHY1BIOUhaenVSRkEaaXFlZ3h4c1RTWFNocDdnY2FSaERnUTozNDE=\",\n  \"is_partial\": false,\n  \"is_running\": false,\n  \"took\": 2000,\n  \"timed_out\": false,\n  \"hits\": ...\n}\n----\n// TESTRESPONSE[s/FmNJRUZ1YWZCU3dHY1BIOUhaenVSRkEaaXFlZ3h4c1RTWFNocDdnY2FSaERnUTozNDE=/$body.id/]\n// TESTRESPONSE[s/\"took\": 2000/\"took\": $body.took/]\n// TESTRESPONSE[s/\"hits\": \\.\\.\\./\"hits\": $body.hits/]\n\nAnother more lightweight way to check the progress of an async search is to use\nthe <<get-async-eql-status-api,get async EQL status API>> with the search ID.\n\n[source,console]\n----\nGET /_eql/search/status/FmNJRUZ1YWZCU3dHY1BIOUhaenVSRkEaaXFlZ3h4c1RTWFNocDdnY2FSaERnUTozNDE=\n----\n// TEST[skip: no access to search ID]\n\n[source,console-result]\n----\n{\n  \"id\": \"FmNJRUZ1YWZCU3dHY1BIOUhaenVSRkEaaXFlZ3h4c1RTWFNocDdnY2FSaERnUTozNDE=\",\n  \"is_running\": false,\n  \"is_partial\": false,\n  \"expiration_time_in_millis\": 1611690295000,\n  \"completion_status\": 200\n}\n----\n// TESTRESPONSE[s/FmNJRUZ1YWZCU3dHY1BIOUhaenVSRkEaaXFlZ3h4c1RTWFNocDdnY2FSaERnUTozNDE=/$body.id/]\n// TESTRESPONSE[s/\"expiration_time_in_millis\": 1611690295000/\"expiration_time_in_millis\": $body.expiration_time_in_millis/]\n\n[discrete]\n[[eql-search-store-async-eql-search]]\n=== Change the search retention period\n\nBy default, the EQL search API stores async searches for five days. After this\nperiod, any searches and their results are deleted. Use the `keep_alive`\nparameter to change this retention period:\n\n[source,console]\n----\nGET /my-data-stream/_eql/search\n{\n  \"keep_alive\": \"2d\",\n  \"wait_for_completion_timeout\": \"2s\",\n  \"query\": \"\"\"\n    process where process.name == \"cmd.exe\"\n  \"\"\"\n}\n----\n// TEST[setup:sec_logs]\n\nYou can use the <<get-async-eql-search-api,get async EQL search API>>'s\n`keep_alive` parameter to later change the retention period. The new retention\nperiod starts after the get request runs.\n\n[source,console]\n----\nGET /_eql/search/FmNJRUZ1YWZCU3dHY1BIOUhaenVSRkEaaXFlZ3h4c1RTWFNocDdnY2FSaERnUTozNDE=?keep_alive=5d\n----\n// TEST[skip: no access to search ID]\n\nUse the <<delete-async-eql-search-api,delete async EQL search API>> to\nmanually delete an async EQL search before the `keep_alive` period ends. If the\nsearch is still ongoing, {es} cancels the search request.\n\n[source,console]\n----\nDELETE /_eql/search/FmNJRUZ1YWZCU3dHY1BIOUhaenVSRkEaaXFlZ3h4c1RTWFNocDdnY2FSaERnUTozNDE=\n----\n// TEST[skip: no access to search ID]\n\n[discrete]\n[[eql-search-store-sync-eql-search]]\n=== Store synchronous EQL searches\n\nBy default, the EQL search API only stores async searches. To save a synchronous\nsearch, set `keep_on_completion` to `true`:\n\n[source,console]\n----\nGET /my-data-stream/_eql/search\n{\n  \"keep_on_completion\": true,\n  \"wait_for_completion_timeout\": \"2s\",\n  \"query\": \"\"\"\n    process where process.name == \"cmd.exe\"\n  \"\"\"\n}\n----\n// TEST[setup:sec_logs]\n\nThe response includes a search ID. `is_partial` and `is_running` are `false`,\nindicating the EQL search was synchronous and returned complete results.\n\n[source,console-result]\n----\n{\n  \"id\": \"FjlmbndxNmJjU0RPdExBTGg0elNOOEEaQk9xSjJBQzBRMldZa1VVQ2pPa01YUToxMDY=\",\n  \"is_partial\": false,\n  \"is_running\": false,\n  \"took\": 52,\n  \"timed_out\": false,\n  \"hits\": ...\n}\n----\n// TESTRESPONSE[s/FjlmbndxNmJjU0RPdExBTGg0elNOOEEaQk9xSjJBQzBRMldZa1VVQ2pPa01YUToxMDY=/$body.id/]\n// TESTRESPONSE[s/\"took\": 52/\"took\": $body.took/]\n// TESTRESPONSE[s/\"hits\": \\.\\.\\./\"hits\": $body.hits/]\n\nUse the <<get-async-eql-search-api,get async EQL search API>> to get the\nsame results later:\n\n[source,console]\n----\nGET /_eql/search/FjlmbndxNmJjU0RPdExBTGg0elNOOEEaQk9xSjJBQzBRMldZa1VVQ2pPa01YUToxMDY=\n----\n// TEST[skip: no access to search ID]\n\nSaved synchronous searches are still subject to the `keep_alive` parameter's\nretention period. When this period ends, the search and its results are deleted.\n\nYou can also check only the status of the saved synchronous search without\nresults by using <<get-async-eql-status-api,get async EQL status API>>.\n\nYou can also manually delete saved synchronous searches using the\n<<delete-async-eql-search-api,delete async EQL search API>>.\n\n[discrete]\n[[run-eql-search-across-clusters]]\n=== Run an EQL search across clusters\n\nexperimental::[]\n\nThe EQL search API supports <<modules-cross-cluster-search,cross-cluster search>>.\nHowever, the local and <<remote-clusters,remote clusters>>\nmust use the same {es} version\nif they have versions prior to 7.17.7 (included) or prior to 8.5.1 (included).\n\nThe following <<cluster-update-settings,cluster update settings>> request\nadds two remote clusters: `cluster_one` and `cluster_two`.\n\n[source,console]\n----\nPUT /_cluster/settings\n{\n  \"persistent\": {\n    \"cluster\": {\n      \"remote\": {\n        \"cluster_one\": {\n          \"seeds\": [\n            \"127.0.0.1:9300\"\n          ]\n        },\n        \"cluster_two\": {\n          \"seeds\": [\n            \"127.0.0.1:9301\"\n          ]\n        }\n      }\n    }\n  }\n}\n----\n// TEST[setup:host]\n// TEST[s/127.0.0.1:930\\d+/\\${transport_host}/]\n\nTo target a data stream or index on a remote cluster, use the\n`<cluster>:<target>` syntax.\n\n[source,console]\n----\nGET /cluster_one:my-data-stream,cluster_two:my-data-stream/_eql/search\n{\n  \"query\": \"\"\"\n    process where process.name == \"regsvr32.exe\"\n  \"\"\"\n}\n----\n// TEST[continued]\n// TEST[setup:sec_logs]\n// TEST[teardown:data_stream_cleanup]\n\n[discrete]\n[[eql-circuit-breaker]]\n=== EQL circuit breaker settings\n\nThe relevant circuit breaker settings can be found in the <<circuit-breakers-page-eql, Circuit Breakers page>>.\n\ninclude::syntax.asciidoc[]\ninclude::functions.asciidoc[]\ninclude::pipes.asciidoc[]\ninclude::detect-threats-with-eql.asciidoc[]\n"
}