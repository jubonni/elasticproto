{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.900579",
        "size": 7816,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-roles.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "mapping-roles",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[mapping-roles]]\n=== Mapping users and groups to roles\n\nRole mapping is supported by all realms except `native` and `file`.\n\nThe native and file realms assign roles directly to users.\nNative realms use <<managing-native-users,user management APIs>>.\nFile realms use <<roles-management-file,File-based role management>>.\n\nYou can map roles through the\n<<mapping-roles-api, Role mapping API>> (recommended) or a <<mapping-roles-file, Role mapping file>>.\n\n\nThe PKI, LDAP, AD, Kerberos, OpenID Connect, JWT, and SAML realms support the\n<<mapping-roles-api, Role mapping API>>. Only PKI, LDAP, and AD realms\nsupport <<mapping-roles-file, Role mapping files>>.\n\nThe PKI, LDAP, AD, Kerberos, OpenID Connect, JWT, and\nSAML realms also support <<authorization_realms,delegated authorization>>.\nYou can either map roles for a realm or use delegated authorization; you cannot use both simultaneously.\n\nTo use role mapping, you create roles and role mapping rules.\nRole mapping rules can be based on realm name, realm type, username, groups,\nother user metadata, or combinations of those values.\n\nNOTE: When <<anonymous-access,anonymous access>> is enabled, the roles\nof the anonymous user are assigned to all the other users as well.\n\nIf there are role-mapping rules created through the API as well as a role mapping file,\nthe rules are combined.\nIt's possible for a single user to have some roles that were mapped through the API,\nand others assigned based on the role mapping file.\nYou can define role-mappings via an\n<<mapping-roles-api, API>> or manage them through <<mapping-roles-file, files>>.\nThese two sources of role-mapping are combined inside of the {es}\n{security-features}, so it is\npossible for a single user to have some roles that have been mapped through\nthe API, and other roles that are mapped through files.\n\nNOTE: Users with no roles assigned will be unauthorized for any action.\nIn other words, they may be able to authenticate, but they will have no roles.\nNo roles means no privileges, and no privileges means no authorizations to\nmake requests.\n\nWhen you use role mappings to assign roles to users, the roles must exist.\nThere are two sources of roles.\nThe available roles should either be added using the\n<<security-role-apis,role management APIs>> or defined in the\n<<roles-management-file,roles file>>. Either role-mapping method can use\neither role management method. For example, when you use the role mapping API,\nyou are able to map users to both API-managed roles and file-managed roles\n(and likewise for file-based role-mappings).\n\n[[mapping-roles-api]]\n==== Using the role mapping API\n\nYou can define role-mappings through the\n<<security-api-put-role-mapping,add role mapping API>>.\n\n[[mapping-roles-file]]\n==== Using role mapping files\n\nTo use file based role-mappings, you must configure the mappings in a YAML file\nand copy it to each node in the cluster. Tools like Puppet or Chef can help with\nthis.\n\nBy default, role mappings are stored in `ES_PATH_CONF/role_mapping.yml`,\nwhere `ES_PATH_CONF` is `ES_HOME/config` (zip/tar installations) or\n`/etc/elasticsearch` (package installations). To specify a different location,\nyou configure the `files.role_mapping` setting in the\n<<ref-ad-settings,Active Directory>>,\n<<ref-ldap-settings,LDAP>>, and\n<<ref-pki-settings,PKI>> realm settings in\n`elasticsearch.yml`.\n\nWithin the role mapping file, the security roles are keys and groups and users\nare values. The mappings can have a many-to-many relationship. When you map roles\nto groups, the roles of a user in that group are the combination of the roles\nassigned to that group and the roles assigned to that user.\n\nBy default, {es} checks role mapping files for changes every 5 seconds.\nYou can change this default behavior by changing the\n`resource.reload.interval.high` setting in the `elasticsearch.yml` file. Since\nthis is a common setting in Elasticsearch, changing its value might effect other\nschedules in the system.\n\nWhile the _role mapping APIs_ is the preferred way to manage role mappings, using\nthe `role_mapping.yml` file becomes useful in a couple of use cases:\n\n. If you want to define fixed role mappings that no one (besides an administrator\nwith physical access to the {es} nodes) would be able to change.\n\n. If cluster administration depends on users from external realms and these users\nneed to have their roles mapped to them even when the cluster is RED. For instance\nan administrator that authenticates via LDAP or PKI and gets assigned an\nadministrator role so that they can perform corrective actions.\n\nPlease note however, that the `role_mapping.yml` file is provided\nas a minimal administrative function and is not intended to cover and be used to\ndefine roles for all use cases.\n\nIMPORTANT: You cannot view, edit, or remove any roles that are defined in the role\nmapping files by using the role mapping APIs.\n\n==== Realm specific details\n[discrete]\n[[ldap-role-mapping]]\n===== Active Directory and LDAP realms\n\nTo specify users and groups in the role mappings, you use their\n_Distinguished Names_ (DNs). A DN is a string that uniquely identifies the user\nor group, for example `\"cn=John Doe,cn=contractors,dc=example,dc=com\"`.\n\nNOTE: The {es} {security-features} support only Active Directory security groups.\nYou cannot map distribution groups to roles.\n\nFor example, the following snippet uses the file-based method to map the\n`admins` group to the `monitoring` role and map the `John Doe` user, the\n`users` group, and the `admins` group to the `user` role.\n\n[source, yaml]\n------------------------------------------------------------\nmonitoring: <1>\n  - \"cn=admins,dc=example,dc=com\" <2>\nuser:\n  - \"cn=John Doe,cn=contractors,dc=example,dc=com\" <3>\n  - \"cn=users,dc=example,dc=com\"\n  - \"cn=admins,dc=example,dc=com\"\n------------------------------------------------------------\n<1> The name of a role.\n<2> The distinguished name of an LDAP group or an Active Directory security group.\n<3> The distinguished name of an LDAP or Active Directory user.\n\nYou can use the role-mapping API to define equivalent mappings as follows:\n\n[source,console]\n--------------------------------------------------\nPUT /_security/role_mapping/admins\n{\n  \"roles\" : [ \"monitoring\", \"user\" ],\n  \"rules\" : { \"field\" : { \"groups\" : \"cn=admins,dc=example,dc=com\" } },\n  \"enabled\": true\n}\n--------------------------------------------------\n\n[source,console]\n--------------------------------------------------\nPUT /_security/role_mapping/basic_users\n{\n  \"roles\" : [ \"user\" ],\n  \"rules\" : { \"any\" : [\n      { \"field\" : { \"dn\" : \"cn=John Doe,cn=contractors,dc=example,dc=com\" } },\n      { \"field\" : { \"groups\" : \"cn=users,dc=example,dc=com\" } }\n  ] },\n  \"enabled\": true\n}\n--------------------------------------------------\n\n[discrete]\n[[pki-role-mapping]]\n===== PKI realms\n\nPKI realms support mapping users to roles, but you cannot map groups as\nthe PKI realm has no notion of a group.\n\nThis is an example using a file-based mapping:\n\n[source, yaml]\n------------------------------------------------------------\nmonitoring:\n  - \"cn=Admin,ou=example,o=com\"\nuser:\n  - \"cn=John Doe,ou=example,o=com\"\n------------------------------------------------------------\n\nThe following example creates equivalent mappings using the API:\n\n[source,console]\n--------------------------------------------------\nPUT /_security/role_mapping/admin_user\n{\n  \"roles\" : [ \"monitoring\" ],\n  \"rules\" : { \"field\" : { \"dn\" : \"cn=Admin,ou=example,o=com\" } },\n  \"enabled\": true\n}\n--------------------------------------------------\n\n[source,console]\n--------------------------------------------------\nPUT /_security/role_mapping/basic_user\n{\n  \"roles\" : [ \"user\" ],\n  \"rules\" : { \"field\" : { \"dn\" : \"cn=John Doe,ou=example,o=com\" } },\n  \"enabled\": true\n}\n--------------------------------------------------\n"
}