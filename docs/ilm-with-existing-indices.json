{
    "meta": {
        "size": 6681,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-with-existing-indices.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "ilm-with-existing-indices",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[ilm-with-existing-indices]]\n== Manage existing indices\n\nIf you've been using Curator or some other mechanism to manage periodic indices,\nyou have a couple options when migrating to {ilm-init}:\n\n* Set up your index templates to use an {ilm-init} policy to manage your new indices.\nOnce {ilm-init} is managing your current write index, you can apply an appropriate policy to your old indices.\n\n* Reindex into an {ilm-init}-managed index.\n\nNOTE: Starting in Curator version 5.7, Curator ignores {ilm-init} managed indices.\n\n[discrete]\n[[ilm-existing-indices-apply]]\n=== Apply policies to existing time series indices\n\nThe simplest way to transition to managing your periodic indices with {ilm-init} is\nto <<apply-policy-template, configure an index template>> to apply a lifecycle policy to new indices.\nOnce the index you are writing to is being managed by {ilm-init},\nyou can <<apply-policy-multiple, manually apply a policy>> to your older indices.\n\nDefine a separate policy for your older indices that omits the rollover action.\nRollover is used to manage where new data goes, so isn't applicable.\n\nKeep in mind that policies applied to existing indices compare the `min_age` for each phase to\nthe original creation date of the index, and might proceed through multiple phases immediately.\nIf your policy performs resource-intensive operations like force merge,\nyou don't want to have a lot of indices performing those operations all at once\nwhen you switch over to {ilm-init}.\n\nYou can specify different `min_age` values in the policy you use for existing indices,\nor set <<index-lifecycle-origination-date, `index.lifecycle.origination_date`>>\nto control how the index age is calculated.\n\nOnce all pre-{ilm-init} indices have been aged out and removed,\nyou can delete the policy you used to manage them.\n\nNOTE: If you are using {beats} or {ls}, enabling {ilm-init} in version 7.0 and onward\nsets up {ilm-init} to manage new indices automatically.\nIf you are using {beats} through {ls},\nyou might need to change your {ls} output configuration and invoke the {beats} setup\nto use {ilm-init} for new data.\n\n[discrete]\n[[ilm-existing-indices-reindex]]\n=== Reindex into a managed index\n\nAn alternative to <<ilm-existing-indices-apply,applying policies to existing indices>> is to\nreindex your data into an {ilm-init}-managed index.\nYou might want to do this if creating periodic indices with very small amounts of data\nhas led to excessive shard counts, or if continually indexing into the same index has led to large shards\nand performance issues.\n\nFirst, you need to set up the new {ilm-init}-managed index:\n\n. Update your index template to include the necessary {ilm-init} settings.\n. Bootstrap an initial index as the write index.\n. Stop writing to the old indices and index new documents using the alias that points to bootstrapped index.\n\nTo reindex into the managed index:\n\n. Pause indexing new documents if you do not want to mix new and old data in the {ilm-init}-managed index.\nMixing old and new data in one index is safe,\nbut a combined index needs to be retained until you are ready to delete the new data.\n\n. Reduce the {ilm-init} poll interval to ensure that the index doesn't\ngrow too large while waiting for the rollover check.\nBy default, {ilm-init} checks to see what actions need to be taken every 10 minutes.\n+\n--\n[source,console]\n-----------------------\nPUT _cluster/settings\n{\n  \"persistent\": {\n    \"indices.lifecycle.poll_interval\": \"1m\" <1>\n  }\n}\n-----------------------\n// TEST[skip:don't want to overwrite this setting for other tests]\n<1> Check once a minute to see if {ilm-init} actions such as rollover need to be performed.\n--\n\n. Reindex your data using the <<docs-reindex,reindex API>>.\nIf you want to partition the data in the order in which it was originally indexed,\nyou can run separate reindex requests.\n+\n--\nIMPORTANT: Documents retain their original IDs. If you don't use automatically generated document IDs,\nand are reindexing from multiple source indices, you might need to do additional processing to\nensure that document IDs don't conflict. One way to do this is to use a\n<<reindex-scripts,script>> in the reindex call to append the original index name\nto the document ID.\n\n//////////////////////////\n[source,console]\n-----------------------\nPUT _index_template/mylogs_template\n{\n  \"index_patterns\": [\n    \"mylogs-*\"\n  ],\n  \"template\": {\n    \"settings\": {\n      \"number_of_shards\": 1,\n      \"number_of_replicas\": 1,\n      \"index\": {\n        \"lifecycle\": {\n          \"name\": \"mylogs_condensed_policy\", <2>\n          \"rollover_alias\": \"mylogs\" <3>\n        }\n      }\n    },\n    \"mappings\": {\n      \"properties\": {\n        \"message\": {\n          \"type\": \"text\"\n        },\n        \"@timestamp\": {\n          \"type\": \"date\"\n        }\n      }\n    }\n  }\n}\n-----------------------\n\n[source,console]\n-----------------------\nPOST mylogs-pre-ilm-2019.06.24/_doc\n{\n  \"@timestamp\": \"2019-06-24T10:34:00\",\n  \"message\": \"this is one log message\"\n}\n-----------------------\n// TEST[continued]\n\n[source,console]\n-----------------------\nPOST mylogs-pre-ilm-2019.06.25/_doc\n{\n  \"@timestamp\": \"2019-06-25T17:42:00\",\n  \"message\": \"this is another log message\"\n}\n-----------------------\n// TEST[continued]\n\n[source,console]\n--------------------------------------------------\nDELETE _index_template/mylogs_template\n--------------------------------------------------\n// TEST[continued]\n\n//////////////////////////\n\n[source,console]\n-----------------------\nPOST _reindex\n{\n  \"source\": {\n    \"index\": \"mylogs-*\" <1>\n  },\n  \"dest\": {\n    \"index\": \"mylogs\", <2>\n    \"op_type\": \"create\" <3>\n  }\n}\n-----------------------\n// TEST[continued]\n\n<1> Matches your existing indices. Using the prefix for\n    the new indices makes using this index pattern much easier.\n<2> The alias that points to your bootstrapped index.\n<3> Halts reindexing if multiple documents have the same ID.\n    This is recommended to prevent accidentally overwriting documents\n    if documents in different source indices have the same ID.\n--\n\n. When reindexing is complete, set the {ilm-init} poll interval back to its default value to\nprevent unnecessary load on the master node:\n+\n[source,console]\n-----------------------\nPUT _cluster/settings\n{\n  \"persistent\": {\n    \"indices.lifecycle.poll_interval\": null\n  }\n}\n\n-----------------------\n// TEST[skip:don't want to overwrite this setting for other tests]\n\n. Resume indexing new data using the same alias.\n+\nQuerying using this alias will now search your new data and all of the reindexed data.\n\n. Once you have verified that all of the reindexed data is available in the new managed indices,\nyou can safely remove the old indices.\n"
}