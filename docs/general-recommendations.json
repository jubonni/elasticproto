{
    "meta": {
        "size": 2112,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/general-recommendations.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "general-recommendations",
        "version": "8.15"
    },
    "doc": "[[general-recommendations]]\n== General recommendations\n\n[discrete]\n[[large-size]]\n=== Don't return large result sets\n\nElasticsearch is designed as a search engine, which makes it very good at\ngetting back the top documents that match a query. However, it is not as good\nfor workloads that fall into the database domain, such as retrieving all\ndocuments that match a particular query. If you need to do this, make sure to\nuse the <<scroll-search-results,Scroll>> API.\n\n[discrete]\n[[maximum-document-size]]\n=== Avoid large documents\n\nGiven that the default <<http-settings,`http.max_content_length`>> is set to\n100MB, Elasticsearch will refuse to index any document that is larger than\nthat. You might decide to increase that particular setting, but Lucene still\nhas a limit of about 2GB.\n\nEven without considering hard limits, large documents are usually not\npractical. Large documents put more stress on network, memory usage and disk,\neven for search requests that do not request the `_source` since Elasticsearch\nneeds to fetch the `_id` of the document in all cases, and the cost of getting\nthis field is bigger for large documents due to how the filesystem cache works.\nIndexing this document can use an amount of memory that is a multiplier of the\noriginal size of the document. Proximity search (phrase queries for instance)\nand <<highlighting,highlighting>> also become more expensive\nsince their cost directly depends on the size of the original document.\n\nIt is sometimes useful to reconsider what the unit of information should be.\nFor instance, the fact you want to make books searchable doesn't necessarily\nmean that a document should consist of a whole book. It might be a better idea\nto use chapters or even paragraphs as documents, and then have a property in\nthese documents that identifies which book they belong to. This does not only\navoid the issues with large documents, it also makes the search experience\nbetter. For instance if a user searches for two words `foo` and `bar`, a match\nacross different chapters is probably very poor, while a match within the same\nparagraph is likely good.\n"
}