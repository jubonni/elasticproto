{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.798068",
        "size": 27588,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/update-node-certs.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "update-node-certs",
        "version": "8.15"
    },
    "doc": "[[update-node-certs]]\n== Updating node security certificates\nYou might need to update your TLS certificates if your current node\ncertificates expire soon, you're adding new nodes to your secured cluster, or\na security breach has broken the trust of your certificate chain. Use the \n<<security-api-ssl,SSL certificate>> API to check when your certificates are\nexpiring.\n\nIn instances where you have access to the original Certificate Authority (CA) key and certificate that you used to sign your existing node certificates (and where you can still trust your CA), you can\n<<update-node-certs-same,use that CA to sign the new certificates>>.\n\nIf you have to trust a new CA from your organization, or you need to generate\na new CA yourself, you need to use this new CA to sign the new node\ncertificates and instruct your nodes to trust the new CA. In this case, you'll\n<<update-node-certs-different,sign node certificates with your new CA>> and\ninstruct your nodes to trust this certificate chain.\n\nDepending on which certificates are expiring, you might need to update the\ncertificates for the transport layer, the HTTP layer, or both. \n\nRegardless of the scenario, {es} monitors the SSL resources for updates\nby default, on a five-second interval. You can just copy the new\ncertificate and key files (or keystore) into the {es} configuration directory\nand your nodes will detect the changes and reload the keys and certificates. \n\nBecause {es} doesn't reload the `elasticsearch.yml` configuration,\nyou must use *the same file names* if you want to take advantage of automatic certificate and key reloading. \n\nIf you need to update the `elasticsearch.yml` configuration or change\npasswords for keys or keystores that are stored in the\n<<secure-settings,secure settings>>, then you must complete a\n<<use-rolling-restarts,rolling restart>>. {es} will not automatically reload changes for\npasswords stored in the secure settings. \n\n[[use-rolling-restarts]]\n.Rolling restarts are preferred\n****\nWhile it's possible to do an in-place update for security certificates, using\na <<restart-cluster-rolling,rolling restart>> on your cluster is safer. An in-place update avoids some\ncomplications of a rolling restart, but incurs the following risks:\n\n* If you use PEM files, your certificate and key are in separate files. You\nmust update both files _simultaneously_ or the node might experience a temporary\nperiod where it cannot establish new connections.\n* Updating the certificate and key does not automatically force existing\nconnections to refresh. This means that even if you make a mistake, a node can\nseem like it's functioning but only because it still has existing connections.\nIt's possible that a node will be unable to connect with other nodes, rendering\nit unable to recover from a network outage or node restart.\n****\n\n[[update-node-certs-same]]\n=== Update certificates with the same CA\n++++\n<titleabbrev>With the same CA</titleabbrev>\n++++\n\nThis procedure assumes that the you have access to the CA certificate and key\nthat was originally generated (or otherwise held by your organization) and used\nto sign the node certificates currently in use. It also assumes that the\nclients connecting to {es} on the HTTP layer are configured to trust the CA\ncertificate.\n\nIf you have access to the CA used to sign your existing certificates, you only\nneed to replace the certificates and keys for each node in your cluster. If you\nreplace your existing certificates and keys on each node and use the same\nfilenames, {es} reloads the files starts using the new certificates and keys.\n\nYou don't have to restart each node, but doing so forces new TLS connections and is <<use-rolling-restarts,a recommended practice>> when updating certificates.\nTherefore, the following steps include a node restart after updating each\ncertificate.\n\nThe following steps provide instructions for generating new node certificates\nand keys for both the transport layer and the HTTP layer. You might only need\nto replace one of these layer's certificates depending on which of your\ncertificates are expiring.\n\n[[cert-password-updates]] \nIMPORTANT: If your keystore is password protected, the password\nis stored in the {es} secure settings, _and_ the password needs to change, then\nyou must perform a <<restart-cluster-rolling,rolling restart>> on your cluster.\nYou must also use a different file name for the keystore so that {es} doesn't\nreload the file before the node is restarted.\n\nTIP: If your CA has changed, complete the steps in \n<<update-node-certs-different,update security certificates with a different CA>>.\n\n[[node-certs-same-transport]]\n==== Generate a new certificate for the transport layer\nThe following examples use PKCS#12 files, but the same steps apply to JKS\nkeystores.\n\n. Open the `ES_PATH_CONF/elasticsearch.yml` file and check the names and\nlocations of the keystores that are currently in use. You'll use the same names\nfor your new certificate.\n+\nIn this example, the keystore and truststore are pointing to different files.\nYour configuration might use the same file that contains the certificate and CA.\nIn this case, include the path to that file for both the keystore and truststore.\n+\n[NOTE]\n====\nThese instructions assume that the provided certificate is signed by a trusted\nCA and the verification mode is set to `certificate`. This setting ensures that\nnodes to not attempt to perform hostname verification.\n====\n+\n[source,yaml]\n----\nxpack.security.transport.ssl.keystore.path: config/elastic-certificates.p12\nxpack.security.transport.ssl.keystore.type: PKCS12\nxpack.security.transport.ssl.truststore.path: config/elastic-stack-ca.p12\nxpack.security.transport.ssl.truststore.type: PKCS12\nxpack.security.transport.ssl.verification_mode: certificate\n----\n\n. Using your existing CA, generate a keystore for your nodes. You must\nuse the CA that was used to sign the certificate currently in use.\n+\n[source,shell]\n----\n./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12\n----\n+\n[%collapsible%open]\n.Command parameters\n====\n   `--ca <ca_file>`:: Name of the CA keystore used to sign your certificates.\n   If you used the `elasticsearch-certutil` tool to generate your existing CA,\n   the keystore name defaults to `elastic-stack-ca.p12`.\n====\n\n   a. Enter a name for the output file or accept the default of\n   `elastic-certificates.p12`.\n\n   b. When prompted, enter a password for the node keystore.\n\n. If you entered a password when creating the node keystore that is different \nfrom the current keystore password, run the following command to store the\npassword in the {es} keystore:\n+\n--\n[source,shell]\n----\n./bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password\n----\n--\n\n. [[start-rolling-restart,step 4]]On the current node in your cluster where you're updating the keystore,\nstart a <<restart-cluster-rolling,rolling restart>>.\n+\nStop at the step indicating *Perform any needed changes*, and then proceed to\nthe next step in this procedure.\n\n. [[replace-keystores]]Replace your existing keystore with the new keystore,\nensuring that the file names match. For example, `elastic-certificates.p12`.\n+\nIMPORTANT: If your \n<<cert-password-updates,keystore password is changing>>, then save the\nkeystore with a new filename so that {es} doesn't attempt to reload the file\nbefore you update the password.\n\n. If you needed to save the new keystore with a new filename, update the\n`ES_PATH_CONF/elasticsearch.yml` file to use the filename of the new keystore.\nFor example:\n+\n[source,yaml]\n----\nxpack.security.transport.ssl.keystore.path: config/elastic-certificates.p12\nxpack.security.transport.ssl.keystore.type: PKCS12\nxpack.security.transport.ssl.truststore.path: config/elastic-stack-ca.p12\nxpack.security.transport.ssl.truststore.type: PKCS12\n----\n\n. Start the node where you updated the keystore.\n\n. [[verify-keystore,step 8]](Optional) Use the\n<<security-api-ssl,SSL certificate API>> to verify that {es} loaded the new\nkeystore.\n+\n--\n\n[source, console]\n----\nGET /_ssl/certificates\n----\n// TEST[skip:creates a lot of noise]\n--\n\n. If you're only updating certificates for the transport layer (and not the HTTP layer), then complete <<start-rolling-restart>> through <<verify-keystore>> one node at a time until you've updated all keystores in your cluster. You can then\ncomplete the remaining steps for a <<restart-cluster-rolling,rolling restart>>.\n+\nOtherwise, do not complete a rolling restart. Instead, proceed to the steps for\ngenerating a new certificate for the HTTP layer.\n\n[discrete]\n[[transport-layer-sameca-whatsnext]]\n==== What's next?\nWell done! You've updated the keystore for the transport layer. You can also\n<<node-certs-same-http,update the keystore for the HTTP layer>> if\nnecessary. If you're not updating the keystore for the HTTP layer, then you're\nall set. \n\n[[node-certs-same-http]]\n==== Generate a new certificate for the HTTP layer\nOther components such as {kib} or any of the Elastic language clients verify\nthis certificate when they connect to {es}.\n\nNOTE: If your organization has its own CA, you'll need to \n<<certutil-csr,generate Certificate Signing Requests (CSRs)>>. CSRs contain\ninformation that your CA uses to generate and sign a certificate.\n\n. On any node in your cluster where {es} is installed, run the {es} HTTP\ncertificate tool.\n+\n[source,shell]\n----\n./bin/elasticsearch-certutil http\n----\n+\nThis command generates a `.zip` file that contains certificates and keys\nto use with {es} and {kib}. Each folder contains a `README.txt`\nexplaining how to use these files.\n\n   a. When asked if you want to generate a CSR, enter `n`.\n\n   b. When asked if you want to use an existing CA, enter `y`.\n\n   c. Enter the absolute path to your CA, such as the path to the\n    `elastic-stack-ca.p12` file.\n\n   d. Enter the password for your CA.\n\n   e. Enter an expiration value for your certificate. You can enter the\n   validity period in years, months, or days. For example, enter `1y` for one\n   year.\n\n   f. When asked if you want to generate one certificate per node, enter `y`.\n+\nEach certificate will have its own private key, and will be issued for a\nspecific hostname or IP address.\n\n   g. When prompted, enter the name of the first node in your cluster. It's\n   helpful to use the same node name as the value for the `node.name`\n   parameter in the `elasticsearch.yml` file.\n\n   h. Enter all hostnames used to connect to your first node. These hostnames\n   will be added as DNS names in the Subject Alternative Name (SAN) field in your certificate.\n+\nList every hostname and variant used to connect to your cluster over HTTPS.\n\n   i. Enter the IP addresses that clients can use to connect to your node.\n\n   j. Repeat these steps for each additional node in your cluster.\n\n. After generating a certificate for each of your nodes, enter a password for\n   your private key when prompted.\n\n. Unzip the generated `elasticsearch-ssl-http.zip` file. This compressed file\n   contains two directories; one each for {es} and {kib}. Within the `/elasticsearch`\n   directory is a directory for each node that you specified with its own\n   `http.p12` file. For example:\n+\n--\n[source,txt]\n----\n/node1\n|_ README.txt\n|_ http.p12\n|_ sample-elasticsearch.yml\n----\n\n[source,txt]\n----\n/node2\n|_ README.txt\n|_ http.p12\n|_ sample-elasticsearch.yml\n----\n\n[source,txt]\n----\n/node3\n|_ README.txt\n|_ http.p12\n|_ sample-elasticsearch.yml\n----\n--\n\n. If necessary, rename the `http.p12` file to match the name of your existing\ncertificate for HTTP client communications. For example, `node1-http.p12`.\n\n. [[start-rolling-restart-http,step 5]]On the current node in your cluster where you're updating the keystore,\nstart a <<restart-cluster-rolling,rolling restart>>.\n+\nStop at the step indicating *Perform any needed changes*, and then proceed to\nthe next step in this procedure.\n\n. Replace your existing keystore with the new keystore, ensuring that the\nfile names match. For example, `node1-http.p12`.\n+\nIMPORTANT: If your \n<<cert-password-updates,keystore password is changing>>, then save the\nkeystore with a new filename so that {es} doesn't attempt to reload the file\nbefore you update the password.\n\n. If you needed to save the new keystore with a new filename, update the\n`ES_PATH_CONF/elasticsearch.yml` file to use the filename of the new keystore.\nFor example:\n+\n[source,yaml]\n----\nxpack.security.http.ssl.enabled: true\nxpack.security.http.ssl.keystore.path: node1-http.p12\n----\n\n. If your keystore password is changing, add the password for your private key\nto the secure settings in {es}.\n+\n[source,shell]\n----\n./bin/elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password\n----\n\n. Start the node where you updated the keystore.\n+\n--\nUse the <<cat-nodes,cat nodes API>> to confirm that the node joined the cluster:\n\n[source,console]\n----\nGET _cat/nodes\n----\n\n--\n\n. [[verify-keystore-http,step 10]](Optional) Use the <<security-api-ssl,SSL certificate API>> to verify that {es} loaded the new keystore.\n+\n--\n\n[source, console]\n----\nGET /_ssl/certificates\n----\n// TEST[skip:creates a lot of noise]\n--\n\n. One node at a time, complete <<start-rolling-restart-http>> through\n<<verify-keystore-http>> until you've updated all keystores in your cluster.\n\n. Complete the remaining steps for a <<restart-cluster-rolling,rolling restart>>,\nbeginning with the step to *Reenable shard allocation*.\n\n[[update-node-certs-different]]\n=== Update security certificates with a different CA\n++++\n<titleabbrev>With a different CA</titleabbrev>\n++++\nIf you have to trust a new CA from your organization, or you need to generate a new CA yourself, use this new CA to sign the new node certificates and instruct your nodes to trust the new CA. \n\n[[node-certs-different-transport]]\n==== Generate a new certificate for the transport layer\nCreate a new CA certificate, or get the CA certificate of your organization,\nand add it to your existing CA truststore. After you finish updating your certificates for all nodes, you can remove the old CA\ncertificate from your truststore (but not before!).\n\nNOTE: The following examples use PKCS#12 files, but the same steps apply to JKS\nkeystores.\n\n. Open the `ES_PATH_CONF/elasticsearch.yml` file and check the names and\nlocations of the keystores that are currently in use. You'll use the same names\nfor your new keystores.\n+\nIn this example, the keystore and truststore are using different files.\nYour configuration might use the same file for both the keystore and the \ntruststore.\n+\n[NOTE]\n====\nThese instructions assume that the provided certificate is signed by a trusted\nCA and the verification mode is set to `certificate`. This setting ensures that\nnodes to not attempt to perform hostname verification.\n====\n+\n[source,yaml]\n----\nxpack.security.transport.ssl.keystore.path: config/elastic-certificates.p12\nxpack.security.transport.ssl.keystore.type: PKCS12\nxpack.security.transport.ssl.truststore.path: config/elastic-stack-ca.p12\nxpack.security.transport.ssl.truststore.type: PKCS12\nxpack.security.transport.ssl.verification_mode: certificate\n----\n\n. On *any* node in your cluster, generate a new CA certificate. You only need\nto complete this step one time. If you're using the CA certificate of your\norganization, then skip this step.\n+\n[source,shell]\n----\n./bin/elasticsearch-certutil ca --pem\n----\n+\n[%collapsible%open]\n.Command parameters\n====\n   `--pem`:: Generates a directory containing a CA certificate and key in PEM\n   format instead of PKCS#12. \n====\n\n    a. Enter a name for the compressed output file that will contain your\n    certificate and key, or accept the default name of `elastic-stack-ca.zip`.\n\n    b. Unzip the output file. The resulting directory contains a CA certificate\n    (`ca.crt`) and a private key (`ca.key`).\n+\n--\nIMPORTANT: Keep these file in a secure location as they contain the private key\nfor your CA. \n--\n\n. On *every* node in your cluster, import the new `ca.crt` certificate into your\nexisting CA truststore. This step ensures that your cluster trusts the new CA\ncertificate. This example uses the Java `keytool` utility to import the\ncertificate into the `elastic-stack-ca.p12` CA truststore.\n+\n[source,shell]\n----\nkeytool -importcert -trustcacerts -noprompt -keystore elastic-stack-ca.p12 \\\n-storepass <password>  -alias new-ca -file ca.crt\n----\n+\n[%collapsible%open]\n.Command parameters\n====\n   `-keystore`:: Name of the truststore that you are importing the new CA\n   certificate into. \n\n   `-storepass`:: Password for the CA truststore. \n\n   `-alias`:: Name that you want to assign to the new CA certificate entry in the keystore.\n\n   `-file`:: Name of the new CA certificate to import.\n====\n\n. [[check-ca-truststore]] Check that the new CA certificate was added to your\ntruststore. \n+\n[source,shell]\n----\nkeytool -keystore config/elastic-stack-ca.p12 -list\n----\nWhen prompted, enter the password for the CA truststore.\n+\nThe output should contain both the existing CA certificate and your new\ncertificate. If you previously used the `elasticsearch-certutil` tool to\ngenerate your keystore, the alias of the old CA defaults to `ca` and the type of\nentry is `PrivateKeyEntry`.\n\n[discrete]\n[[node-certs-different-nodes]]\n==== Generate a new certificate for each node in your cluster\nNow that your CA truststore is updated, use your new CA certificate to sign\na certificate for your nodes.\n\nNOTE: If your organization has its own CA, you'll need to \n<<certutil-csr,generate Certificate Signing Requests (CSRs)>>. CSRs contain\ninformation that your CA uses to generate and sign a security certificate.\n\n. Using the new CA certificate and key, create a new certificate for your nodes.\n+\n[source,shell]\n----\n./bin/elasticsearch-certutil cert --ca-cert ca/ca.crt --ca-key ca/ca.key\n----\n+\n[%collapsible%open]\n.Command parameters\n====\n   `--ca-cert`:: Specifies the path to your new CA certificate (`ca.crt`) in PEM\n   format. You must also specify the `--ca-key` parameter.\n\n   `--ca-key`:: Specifies the path to the private key (`ca.key`) for your CA\n   certificate. You must also specify the `--ca-cert` parameter.\n====\n\n   a. Enter a name for the output file or accept the default of\n   `elastic-certificates.p12`.\n\n   b. When prompted, enter a password for your node certificate.\n\n. [[start-rolling-restart-newca,step 2]]On the current node in your cluster where\nyou're updating the keystore, start a\n<<restart-cluster-rolling,rolling restart>>.\n+\nStop at the step indicating *Perform any needed changes*, and then proceed to\nthe next step in this procedure.\n\n. Replace your existing keystore with the new keystore, ensuring that the\nfile names match. For example, `elastic-certificates.p12`.\n+\nIMPORTANT: If your \n<<cert-password-updates,keystore password is changing>>, then save the\nkeystore with a new filename so that {es} doesn't attempt to reload the file\nbefore you update the password.\n\n. If you needed to save the new keystore with a new filename, update the\n`ES_PATH_CONF/elasticsearch.yml` file to use the filename of the new keystore.\nFor example:\n+\n[source,yaml]\n----\nxpack.security.transport.ssl.keystore.path: config/elastic-certificates.p12\nxpack.security.transport.ssl.keystore.type: PKCS12\nxpack.security.transport.ssl.truststore.path: config/elastic-stack-ca.p12\nxpack.security.transport.ssl.truststore.type: PKCS12\n----\n\n. Start the node where you updated the keystore.\n\n. [[verify-keystore-newca,step 6]](Optional) Use the <<security-api-ssl,SSL certificate API>> to verify that {es} loaded the new keystore.\n+\n--\n\n[source, console]\n----\nGET /_ssl/certificates\n----\n// TEST[skip:creates a lot of noise]\n--\n\n. If you're only updating certificates for the transport layer (and not the HTTP\nlayer), then complete <<start-rolling-restart-newca>> through\n<<verify-keystore-newca>> one node at a time until you've updated all keystores\nin your cluster. You can then complete the remaining steps for a\n<<restart-cluster-rolling,rolling restart>>.\n+\nOtherwise, do not complete a rolling restart. Instead, proceed to the steps for\ngenerating a new certificate for the HTTP layer.\n\n. (Optional) After replacing keystores on each node in your cluster,\n<<check-ca-truststore,list the certificates in your truststore>> and then remove\nthe old CA certificate.\n+\nIf you previously used the `elasticsearch-certutil` tool to generate your\nkeystore, the alias of the old CA defaults to `ca` and the type of entry is\n`PrivateKeyEntry`.\n+\n[source,shell]\n----\nkeytool -delete -noprompt -alias ca  -keystore config/elastic-stack-ca.p12 \\\n-storepass <password>\n----\n+\n[%collapsible%open]\n.Command parameters\n====\n   `-alias`:: Name of the keystore alias for the old CA certificate that you want to remove from your\n   truststore.\n====\n\n[discrete]\n[[transport-layer-newca-whatsnext]]\n==== What's next?\nWell done! You've updated the keystore for the transport layer. You can also\n<<node-certs-different-http,update the keystore for the HTTP layer>> if\nnecessary. If you're not updating the keystore for the HTTP layer, then you're\nall set. \n\n[[node-certs-different-http]]\n==== Generate a new certificate for the HTTP layer\nYou can generate certificates for the HTTP layer using your new CA certificate\nand private key. Other components such as {kib} or any of the Elastic language\nclients verify this certificate when they connect to {es}.\n\nNOTE: If your organization has its own CA, you'll need to \n<<certutil-csr,generate Certificate Signing Requests (CSRs)>>. CSRs contain\ninformation that your CA uses to generate and sign a security certificate\ninstead of using self-signed certificates that the `elasticsearch-certutil` tool\ngenerates.\n\n.Update clients to trust the new CA\n****\nAfter generating (but before using) new certificates for the HTTP layer, you\nneed to go to all the clients that connect to {es} (such as {beats}, {ls}, and\nany language clients) and configure them to also trust the new CA (`ca.crt`)\nthat you generated.\n\nThis process is different for each client, so refer to your client's\ndocumentation for trusting certificates. You'll\n<<node-certs-different-kibana,update HTTP encryption between {kib} and {es}>>\nafter generating the necessary certificates in this procedure.\n****\n\n. On any node in your cluster where {es} is installed, run the {es} HTTP\ncertificate tool.\n+\n[source,shell]\n----\n./bin/elasticsearch-certutil http\n----\n+\nThis command generates a `.zip` file that contains certificates and keys\nto use with {es} and {kib}. Each folder contains a `README.txt`\nexplaining how to use these files.\n\n   a. When asked if you want to generate a CSR, enter `n`.\n\n   b. When asked if you want to use an existing CA, enter `y`.\n\n   c. Enter the absolute path to your *new* CA certificate, such as the path to\n   the `ca.crt` file.\n\n   d. Enter the absolute path to your new CA certificate private key, such as\n   the path to the `ca.key` file.\n\n   e. Enter an expiration value for your certificate. You can enter the\n   validity period in years, months, or days. For example, enter `1y` for one\n   year.\n\n   f. When asked if you want to generate one certificate per node, enter `y`.\n+\nEach certificate will have its own private key, and will be issued for a\nspecific hostname or IP address.\n\n   g. When prompted, enter the name of the first node in your cluster. Use the\n   same node name as the value for the `node.name` parameter in the\n   `elasticsearch.yml` file.\n\n   h. Enter all hostnames used to connect to your first node. These hostnames\n   will be added as DNS names in the Subject Alternative Name (SAN) field in your certificate.\n+\nList every hostname and variant used to connect to your cluster over HTTPS.\n\n   i. Enter the IP addresses that clients can use to connect to your node.\n\n   j. Repeat these steps for each additional node in your cluster.\n\n. After generating a certificate for each of your nodes, enter a password for\n   your keystore when prompted.\n\n. Unzip the generated `elasticsearch-ssl-http.zip` file. This compressed file\n   contains one directory for both {es} and {kib}. Within the `/elasticsearch`\n   directory is a directory for each node that you specified with its own\n   `http.p12` file. For example:\n+\n--\n[source,txt]\n----\n/node1\n|_ README.txt\n|_ http.p12\n|_ sample-elasticsearch.yml\n----\n\n[source,txt]\n----\n/node2\n|_ README.txt\n|_ http.p12\n|_ sample-elasticsearch.yml\n----\n\n[source,txt]\n----\n/node3\n|_ README.txt\n|_ http.p12\n|_ sample-elasticsearch.yml\n----\n--\n\n. If necessary, rename each `http.p12` file to match the name of your existing\ncertificate for HTTP client communications. For example, `node1-http.p12`.\n\n. [[start-rolling-restart-http-newca,step 5]]On the current node in your cluster where you're updating the keystore,\nstart a <<restart-cluster-rolling,rolling restart>>.\n+\nStop at the step indicating *Perform any needed changes*, and then proceed to\nthe next step in this procedure.\n\n. Replace your existing keystore with the new keystore, ensuring that the\nfile names match. For example, `node1-http.p12`.\n+\nIMPORTANT: If your \n<<cert-password-updates,keystore password is changing>>, then save the\nkeystore with a new filename so that {es} doesn't attempt to reload the file\nbefore you update the password.\n\n. If you needed to save the new keystore with a new filename, update the\n`ES_PATH_CONF/elasticsearch.yml` file to use the filename of the new keystore.\nFor example:\n+\n[source,yaml]\n----\nxpack.security.http.ssl.enabled: true\nxpack.security.http.ssl.keystore.path: node1-http.p12\n----\n\n. If your keystore password is changing, add the password for your private key\nto the secure settings in {es}.\n+\n[source,shell]\n----\n./bin/elasticsearch-keystore add xpack.security.http.ssl.keystore.secure_password\n----\n\n. Start the node where you updated the keystore.\n+\n--\nUse the <<cat-nodes,cat nodes API>> to confirm that the node joined the cluster:\n\n[source,console]\n----\nGET _cat/nodes\n----\n\n--\n\n. [[verify-keystore-http-newca,step 10]](Optional) Use the <<security-api-ssl,SSL certificate API>> to verify that\n{es} loaded the new keystore.\n+\n--\n\n[source, console]\n----\nGET /_ssl/certificates\n----\n// TEST[skip:creates a lot of noise]\n--\n\n. One node at a time, complete <<start-rolling-restart-http-newca>> through\n<<verify-keystore-http-newca>> until you've updated all keystores in your cluster.\n\n. Complete the remaining steps for a <<restart-cluster-rolling,rolling restart>>,\nbeginning with the step to *Reenable shard allocation*.\n\n[discrete]\n[[http-kibana-newca-whatsnext]]\n==== What's next?\nWell done! You've updated the keystore for the HTTP layer. You can now\n<<node-certs-different-kibana,update encryption between {kib} and {es}>>.\n\n[[node-certs-different-kibana]]\n==== Update encryption between {kib} and {es}\n\nWhen you ran the `elasticsearch-certutil` tool with the `http` option, it\ncreated a `/kibana` directory containing an `elasticsearch-ca.pem` file. You\nuse this file to configure {kib} to trust the {es} CA for the HTTP\nlayer.\n\n. Copy the `elasticsearch-ca.pem` file to the {kib} configuration directory,\nas defined by the `KBN_PATH_CONF` path.\n+\nNOTE: `KBN_PATH_CONF` contains the path for the {kib} configuration files. If\nyou installed {kib} using archive distributions (`zip` or `tar.gz`), the\npath defaults to `KBN_HOME/config`. If you used package distributions\n(Debian or RPM), the path defaults to `/etc/kibana`.\n\n. If you modified the filename for the `elasticsearch-ca.pem` file, edit\n`kibana.yml` and update the configuration to specify the location of the\nsecurity certificate for the HTTP layer.\n+\n[source,yaml]\n----\nelasticsearch.ssl.certificateAuthorities: KBN_PATH_CONF/elasticsearch-ca.pem\n----\n\n. Restart {kib}.\n"
}