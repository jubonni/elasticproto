{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.888068",
        "size": 4053,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/painless-watcher-condition-context.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "painless-watcher-condition-context",
        "version": "8.15"
    },
    "doc": "[[painless-watcher-condition-context]]\n=== Watcher condition context\n\nUse a Painless script as a {ref}/condition-script.html[watch condition]\nthat determines whether to execute a watch or a particular action within a watch.\nCondition scripts return a Boolean value to indicate the status of the condition.\n\ninclude::painless-watcher-context-variables.asciidoc[]\n\n*Return*\n\n`boolean`::\n        Expects `true` if the condition is met, and `false` if it is not.\n\n*API*\n\nThe standard <<painless-api-reference-shared, Painless API>> is available.\n\n*Example*\n\nTo run the examples, first follow the steps in\n<<painless-context-examples, context examples>>.\n\n[source,console]\n----\nPOST _watcher/watch/_execute\n{\n  \"watch\" : {\n    \"trigger\" : { \"schedule\" : { \"interval\" : \"24h\" } },\n    \"input\" : {\n      \"search\" : {\n        \"request\" : {\n          \"indices\" : [ \"seats\" ],\n          \"body\" : {\n            \"query\" : {\n              \"term\": { \"sold\": \"true\"}\n            },\n            \"aggs\" : {\n              \"theatres\" : {\n                \"terms\" : { \"field\" : \"play\" },\n                \"aggs\" : {\n                  \"money\" : {\n                    \"sum\": { \"field\" : \"cost\" }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"condition\" : {\n      \"script\" :\n      \"\"\"\n        return ctx.payload.aggregations.theatres.buckets.stream()       <1>\n          .filter(theatre -> theatre.money.value < 15000 ||\n                             theatre.money.value > 50000)               <2>\n          .count() > 0                                                  <3>\n      \"\"\"\n    },\n    \"actions\" : {\n      \"my_log\" : {\n        \"logging\" : {\n          \"text\" : \"The output of the search was : {{ctx.payload.aggregations.theatres.buckets}}\"\n        }\n      }\n    }\n  }\n}\n----\n// TEST[setup:seats]\n\n<1> The Java Stream API is used in the condition. This API allows manipulation of\nthe elements of the list in a pipeline.\n<2> The stream filter removes items that do not meet the filter criteria.\n<3> If there is at least one item in the list, the condition evaluates to true and the watch is executed.\n\nThe following action condition script controls execution of the my_log action based\non the value of the seats sold for the plays in the data set. The script aggregates\nthe total sold seats for each play and returns true if there is at least one play\nthat has sold over $10,000.\n\n[source,console]\n----\nPOST _watcher/watch/_execute\n{\n  \"watch\" : {\n    \"trigger\" : { \"schedule\" : { \"interval\" : \"24h\" } },\n    \"input\" : {\n      \"search\" : {\n        \"request\" : {\n          \"indices\" : [ \"seats\" ],\n          \"body\" : {\n            \"query\" : {\n              \"term\": { \"sold\": \"true\"}\n            },\n            \"size\": 0,\n            \"aggs\" : {\n              \"theatres\" : {\n                \"terms\" : { \"field\" : \"play\" },\n                \"aggs\" : {\n                  \"money\" : {\n                    \"sum\": {\n                      \"field\" : \"cost\",\n                      \"script\": {\n                       \"source\": \"doc.cost.value * doc.number.value\"\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"actions\" : {\n      \"my_log\" : {\n        \"condition\": {                                                <1>\n          \"script\" :\n          \"\"\"\n            return ctx.payload.aggregations.theatres.buckets.stream()\n              .anyMatch(theatre -> theatre.money.value > 10000)       <2>\n          \"\"\"\n        },\n        \"logging\" : {\n          \"text\" : \"At least one play has grossed over $10,000: {{ctx.payload.aggregations.theatres.buckets}}\"\n        }\n      }\n    }\n  }\n}\n----\n// TEST[setup:seats]\n\nThis example uses a nearly identical condition as the previous example. The\ndifferences below are subtle and are worth calling out.\n\n<1> The location of the condition is no longer at the top level, but is within\nan individual action.\n<2> Instead of a filter, `anyMatch` is used to return a boolean value\n"
}