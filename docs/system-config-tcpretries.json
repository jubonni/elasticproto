{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.638067",
        "size": 3419,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/system-config-tcpretries.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "system-config-tcpretries",
        "version": "8.15"
    },
    "doc": "[[system-config-tcpretries]]\n=== TCP retransmission timeout\n\nEach pair of {es} nodes communicates via a number of TCP connections which\n<<long-lived-connections,remain open>> until one of the nodes shuts down or\ncommunication between the nodes is disrupted by a failure in the underlying\ninfrastructure.\n\nTCP provides reliable communication over occasionally unreliable networks by\nhiding temporary network disruptions from the communicating applications. Your\noperating system will retransmit any lost messages a number of times before\ninforming the sender of any problem. {es} must wait while the retransmissions\nare happening and can only react once the operating system decides to give up.\nUsers must therefore also wait for a sequence of retransmissions to complete.\n\nMost Linux distributions default to retransmitting any lost packets 15 times.\nRetransmissions back off exponentially, so these 15 retransmissions take over\n900 seconds to complete. This means it takes Linux many minutes to detect a\nnetwork partition or a failed node with this method. Windows defaults to just 5\nretransmissions which corresponds with a timeout of around 13 seconds.\n\nThe Linux default allows for communication over networks that may experience\nvery long periods of packet loss, but this default is excessive and even harmful\non the high quality networks used by most {es} installations. When a cluster\ndetects a node failure it reacts by reallocating lost shards, rerouting\nsearches, and maybe electing a new master node. Highly available clusters must\nbe able to detect node failures promptly, which can be achieved by reducing the\npermitted number of retransmissions. Connections to\n<<remote-clusters,remote clusters>> should also prefer to detect\nfailures much more quickly than the Linux default allows. Linux users should\ntherefore reduce the maximum number of TCP retransmissions.\n\nYou can decrease the maximum number of TCP retransmissions to `5` by running the\nfollowing command as `root`. Five retransmissions corresponds with a timeout of\naround 13 seconds.\n\n[source,sh]\n-------------------------------------\nsysctl -w net.ipv4.tcp_retries2=5\n-------------------------------------\n\nTo set this value permanently, update the `net.ipv4.tcp_retries2` setting in\n`/etc/sysctl.conf`. To verify after rebooting, run\n`sysctl net.ipv4.tcp_retries2`.\n\nIMPORTANT: This setting applies to all TCP connections and will affect the\nreliability of communication with systems other than {es} clusters too. If your\nclusters communicate with external systems over a low quality network then you\nmay need to select a higher value for `net.ipv4.tcp_retries2`. For this reason,\n{es} does not adjust this setting automatically.\n\n==== Related configuration\n\n{es} also implements its own internal health checks with timeouts that are much\nshorter than the default retransmission timeout on Linux. Since these are\napplication-level health checks their timeouts must allow for application-level\neffects such as garbage collection pauses. You should not reduce any timeouts\nrelated to these application-level health checks.\n\nYou must also ensure your network infrastructure does not interfere with the\nlong-lived connections between nodes, <<long-lived-connections,even if those\nconnections appear to be idle>>. Devices which drop connections when they reach\na certain age are a common source of problems to {es} clusters, and must not be\nused.\n\n"
}