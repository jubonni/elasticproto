{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.025076",
        "size": 4261,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/api-java-put-watch.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "api-java-put-watch",
        "version": "8.15"
    },
    "doc": "[discrete]\n[[api-java-put-watch]]\n=== Create or update watch API\n\nThe create or update watch API either registers a new watch in {watcher} or\nupdate an existing one. Once registered, a new document will be added to the\n`.watches` index, representing the watch, and the watch trigger will immediately\nbe registered with the relevant trigger engine (typically the scheduler, for the\n`schedule` trigger).\n\nIMPORTANT:  Putting a watch must be done via this API only. Do not add a watch\n            directly to the `.watches` index using Elasticsearch's Index API.\n            When the {es} {security-features} are enabled, make sure no `write`\n            privileges are granted to anyone over the `.watches` index.\n\n\nThe following example adds a watch with the `my-watch` id that has the following\ncharacteristics:\n\n* The watch schedule triggers every minute.\n* The watch search input looks for any 404 HTTP responses that occurred in the\n  last five minutes.\n* The watch condition checks if any hits where found.\n* When hits are found, the watch action sends an email to the administrator.\n\n[source,java]\n--------------------------------------------------\nWatchSourceBuilder watchSourceBuilder = WatchSourceBuilders.watchBuilder();\n\n// Set the trigger\nwatchSourceBuilder.trigger(TriggerBuilders.schedule(Schedules.cron(\"0 0/1 * * * ?\")));\n\n// Create the search request to use for the input\nSearchRequest request = Requests.searchRequest(\"idx\").source(searchSource()\n        .query(boolQuery()\n                .must(matchQuery(\"response\", 404))\n                .filter(rangeQuery(\"date\").gt(\"{{ctx.trigger.scheduled_time}}\"))\n                .filter(rangeQuery(\"date\").lt(\"{{ctx.execution_time}}\"))\n        ));\n\n// Create the search input\nSearchInput input = new SearchInput(new WatcherSearchTemplateRequest(new String[]{\"idx\"}, null, SearchType.DEFAULT,\n    WatcherSearchTemplateRequest.DEFAULT_INDICES_OPTIONS, new BytesArray(request.source().toString())), null, null, null);\n\n// Set the input\nwatchSourceBuilder.input(input);\n\n// Set the condition\nwatchSourceBuilder.condition(new ScriptCondition(new Script(\"ctx.payload.hits.total > 1\")));\n\n// Create the email template to use for the action\nEmailTemplate.Builder emailBuilder = EmailTemplate.builder();\nemailBuilder.to(\"someone@domain.host.com\");\nemailBuilder.subject(\"404 recently encountered\");\nEmailAction.Builder emailActionBuilder = EmailAction.builder(emailBuilder.build());\n\n// Add the action\nwatchSourceBuilder.addAction(\"email_someone\", emailActionBuilder);\n\nPutWatchResponse putWatchResponse = watcherClient.preparePutWatch(\"my-watch\")\n    .setSource(watchSourceBuilder)\n    .get();\n--------------------------------------------------\n\nWhile the above snippet flashes out all the concrete classes that make our watch,\nusing the available builder classes along with static imports can significantly\nsimplify and compact your code:\n\n[source,java]\n--------------------------------------------------\nPutWatchResponse putWatchResponse2 = watcherClient.preparePutWatch(\"my-watch\")\n        .setSource(watchBuilder()\n                .trigger(schedule(cron(\"0 0/1 * * * ?\")))\n                .input(searchInput(new WatcherSearchTemplateRequest(new String[]{\"idx\"}, null, SearchType.DEFAULT,\n                        WatcherSearchTemplateRequest.DEFAULT_INDICES_OPTIONS, searchSource()\n                        .query(boolQuery()\n                                .must(matchQuery(\"response\", 404))\n                                .filter(rangeQuery(\"date\").gt(\"{{ctx.trigger.scheduled_time}}\"))\n                                .filter(rangeQuery(\"date\").lt(\"{{ctx.execution_time}}\"))\n                        ).buildAsBytes())))\n                .condition(compareCondition(\"ctx.payload.hits.total\", CompareCondition.Op.GT, 1L))\n                .addAction(\"email_someone\", emailAction(EmailTemplate.builder()\n                        .to(\"someone@domain.host.com\")\n                        .subject(\"404 recently encountered\"))))\n        .get();\n--------------------------------------------------\n\n* Use `TriggerBuilders` and `Schedules` classes to define the trigger\n* Use `InputBuilders` class to define the input\n* Use `ConditionBuilders` class to define the condition\n* Use `ActionBuilders` to define the actions\n"
}