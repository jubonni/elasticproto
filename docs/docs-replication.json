{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.027272",
        "size": 11836,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-replication.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "docs-replication",
        "version": "8.15"
    },
    "doc": "\n[[docs-replication]]\n=== Reading and Writing documents\n\n[discrete]\n==== Introduction\n\nEach index in Elasticsearch is <<scalability,divided into shards>>\nand each shard can have multiple copies. These copies are known as a _replication group_ and must be kept in sync when documents\nare added or removed. If we fail to do so, reading from one copy will result in very different results than reading from another.\nThe process of keeping the shard copies in sync and serving reads from them is what we call the _data replication model_.\n\nElasticsearch\u2019s data replication model is based on the _primary-backup model_ and is described very well in the\nhttps://www.microsoft.com/en-us/research/publication/pacifica-replication-in-log-based-distributed-storage-systems/[PacificA paper] of\nMicrosoft Research. That model is based on having a single copy from the replication group that acts as the primary shard.\nThe other copies are called _replica shards_. The primary serves as the main entry point for all indexing operations. It is in charge of\nvalidating them and making sure they are correct. Once an index operation has been accepted by the primary, the primary is also\nresponsible for replicating the operation to the other copies.\n\nThis purpose of this section is to give a high level overview of the Elasticsearch replication model and discuss the implications\nit has for various interactions between write and read operations.\n\n[discrete]\n[[basic-write-model]]\n==== Basic write model\n\nEvery indexing operation in Elasticsearch is first resolved to a replication group using <<index-routing,routing>>,\ntypically based on the document ID. Once the replication group has been determined, the operation is forwarded\ninternally to the current _primary shard_ of the group. This stage of indexing is referred to as the _coordinating stage_.\n\nimage::images/data_processing_flow.png[An example of a basic write model.]\n\nThe next stage of indexing is the _primary stage_, performed on the primary shard. The primary shard is responsible\nfor validating the operation and forwarding it to the other replicas. Since replicas can be offline, the primary\nis not required to replicate to all replicas. Instead, Elasticsearch maintains a list of shard copies that should\nreceive the operation. This list is called the _in-sync copies_ and is maintained by the master node. As the name implies,\nthese are the set of \"good\" shard copies that are guaranteed to have processed all of the index and delete operations that\nhave been acknowledged to the user. The primary is responsible for maintaining this invariant and thus has to replicate all\noperations to each copy in this set.\n\nThe primary shard follows this basic flow:\n\n. Validate incoming operation and reject it if structurally invalid (Example: have an object field where a number is expected)\n. Execute the operation locally i.e. indexing or deleting the relevant document. This will also validate the content of fields\n   and reject if needed (Example: a keyword value is too long for indexing in Lucene).\n. Forward the operation to each replica in the current in-sync copies set. If there are multiple replicas, this is done in parallel.\n. Once all in-sync replicas have successfully performed the operation and responded to the primary, the primary acknowledges the successful\n   completion of the request to the client.\n\nEach in-sync replica copy performs the indexing operation locally so that it has a copy. This stage of indexing is the\n_replica stage_.\n\nThese indexing stages (coordinating, primary, and replica) are sequential. To enable internal retries, the lifetime of each stage\nencompasses the lifetime of each subsequent stage. For example, the coordinating stage is not complete until each primary\nstage, which may be spread out across different primary shards, has completed. Each primary stage will not complete until the\nin-sync replicas have finished indexing the docs locally and responded to the replica requests.\n\n[discrete]\n===== Failure handling\n\nMany things can go wrong during indexing -- disks can get corrupted, nodes can be disconnected from each other, or some\nconfiguration mistake could cause an operation to fail on a replica despite it being successful on the primary. These\nare infrequent but the primary has to respond to them.\n\nIn the case that the primary itself fails, the node hosting the primary will send a message to the master about it. The indexing\noperation will wait (up to 1 minute, by <<dynamic-index-settings,default>>) for the master to promote one of the replicas to be a\nnew primary. The operation will then be forwarded to the new primary for processing. Note that the master also monitors the\nhealth of the nodes and may decide to proactively demote a primary. This typically happens when the node holding the primary\nis isolated from the cluster by a networking issue. See <<demoted-primary,here>> for more details.\n\nOnce the operation has been successfully performed on the primary, the primary has to deal with potential failures\nwhen executing it on the replica shards. This may be caused by an actual failure on the replica or due to a network\nissue preventing the operation from reaching the replica (or preventing the replica from responding). All of these\nshare the same end result: a replica which is part of the in-sync replica set misses an operation that is about to\nbe acknowledged. In order to avoid violating the invariant, the primary sends a message to the master requesting\nthat the problematic shard be removed from the in-sync replica set. Only once removal of the shard has been acknowledged\nby the master does the primary acknowledge the operation. Note that the master will also instruct another node to start\nbuilding a new shard copy in order to restore the system to a healthy state.\n\n[[demoted-primary]]\nWhile forwarding an operation to the replicas, the primary will use the replicas to validate that it is still the\nactive primary. If the primary has been isolated due to a network partition (or a long GC) it may continue to process\nincoming indexing operations before realising that it has been demoted. Operations that come from a stale primary\nwill be rejected by the replicas. When the primary receives a response from the replica rejecting its request because\nit is no longer the primary then it will reach out to the master and will learn that it has been replaced. The\noperation is then routed to the new primary.\n\n.What happens if there are no replicas?\n************\nThis is a valid scenario that can happen due to index configuration or simply\nbecause all the replicas have failed. In that case the primary is processing operations without any external validation,\nwhich may seem problematic. On the other hand, the primary cannot fail other shards on its own but request the master to do\nso on its behalf. This means that the master knows that the primary is the only single good copy. We are therefore guaranteed\nthat the master will not promote any other (out-of-date) shard copy to be a new primary and that any operation indexed\ninto the primary will not be lost. Of course, since at that point we are running with only single copy of the data, physical hardware\nissues can cause data loss. See <<index-wait-for-active-shards>> for some mitigation options.\n************\n\n[discrete]\n==== Basic read model\n\nReads in Elasticsearch can be very lightweight lookups by ID or a heavy search request with complex aggregations that\ntake non-trivial CPU power. One of the beauties of the primary-backup model is that it keeps all shard copies identical\n(with the exception of in-flight operations). As such, a single in-sync copy is sufficient to serve read requests.\n\nWhen a read request is received by a node, that node is responsible for forwarding it to the nodes that hold the relevant shards,\ncollating the responses, and responding to the client. We call that node the _coordinating node_ for that request. The basic flow\nis as follows:\n\n. Resolve the read requests to the relevant shards. Note that since most searches will be sent to one or more indices,\n   they typically need to read from multiple shards, each representing a different subset of the data.\n. Select an active copy of each relevant shard, from the shard replication group. This can be either the primary or\n   a replica. By default, {es} uses <<search-adaptive-replica,adaptive replica\n   selection>> to select the shard copies.\n. Send shard level read requests to the selected copies.\n. Combine the results and respond. Note that in the case of get by ID look up, only one shard is relevant and this step can be skipped.\n\n[discrete]\n[[shard-failures]]\n===== Shard failures\n\nWhen a shard fails to respond to a read request, the coordinating node sends the\nrequest to another shard copy in the same replication group. Repeated failures\ncan result in no available shard copies.\n\nTo ensure fast responses, the following APIs will\nrespond with partial results if one or more shards fail:\n\n* <<search-search, Search>>\n* <<search-multi-search, Multi Search>>\n* <<docs-multi-get, Multi Get>>\n\nResponses containing partial results still provide a `200 OK` HTTP status code.\nShard failures are indicated by the `timed_out` and `_shards` fields of\nthe response header.\n\n[discrete]\n==== A few simple implications\n\nEach of these basic flows determines how Elasticsearch behaves as a system for both reads and writes. Furthermore, since read\nand write requests can be executed concurrently, these two basic flows interact with each other. This has a few inherent implications:\n\nEfficient reads:: Under normal operation each read operation is performed once for each relevant replication group.\n   Only under failure conditions do multiple copies of the same shard execute the same search.\n\nRead unacknowledged:: Since the primary first indexes locally and then replicates the request, it is possible for a\n  concurrent read to already see the change before it has been acknowledged.\n\nTwo copies by default:: This model can be fault tolerant while maintaining only two copies of the data. This is in contrast to\n  quorum-based system where the minimum number of copies for fault tolerance is 3.\n\n[discrete]\n==== Failures\n\nUnder failures, the following is possible:\n\nA single shard can slow down indexing:: Because the primary waits for all replicas in the in-sync copies set during each operation,\n  a single slow shard can slow down the entire replication group. This is the price we pay for the read efficiency mentioned above.\n  Of course a single slow shard will also slow down unlucky searches that have been routed to it.\n\nDirty reads:: An isolated primary can expose writes that will not be acknowledged. This is caused by the fact that an isolated\n  primary will only realize that it is isolated once it sends requests to its replicas or when reaching out to the master.\n  At that point the operation is already indexed into the primary and can be read by a concurrent read. Elasticsearch mitigates\n  this risk by pinging the master every second (by default) and rejecting indexing operations if no master is known.\n\n[discrete]\n==== The Tip of the Iceberg\n\nThis document provides a high level overview of how Elasticsearch deals with data. Of course, there is much more\ngoing on under the hood. Things like primary terms, cluster state publishing, and master election all play a role in\nkeeping this system behaving correctly. This document also doesn't cover known and important\nbugs (both closed and open). We recognize that https://github.com/elastic/elasticsearch/issues?q=label%3Aresiliency[GitHub is hard to keep up with].\nTo help people stay on top of those, we maintain a dedicated https://www.elastic.co/guide/en/elasticsearch/resiliency/current/index.html[resiliency page]\non our website. We strongly advise reading it.\n"
}