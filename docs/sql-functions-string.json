{
    "meta": {
        "timestamp": "2024-11-01T03:07:10.351271",
        "size": 15241,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-functions-string.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "sql-functions-string",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[sql-functions-string]]\n=== String Functions\n\nFunctions for performing string manipulation.\n\n[[sql-functions-string-ascii]]\n==== `ASCII`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nASCII(string_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> string expression. If `null`, the function returns `null`.\n\n*Output*: integer\n\n*Description*: Returns the ASCII code value of the leftmost character of `string_exp` as an integer.\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringAscii]\n--------------------------------------------------\n\n[[sql-functions-string-bit-length]]\n==== `BIT_LENGTH`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nBIT_LENGTH(string_exp) <1>\n--------------------------------------------------\n*Input*:\n\n<1> string expression. If `null`, the function returns `null`.\n\n*Output*: integer\n\n*Description*: Returns the length in bits of the `string_exp` input expression.\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringBitLength]\n--------------------------------------------------\n\n[[sql-functions-string-char]]\n==== `CHAR`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nCHAR(code) <1>\n--------------------------------------------------\n*Input*:\n\n<1> integer expression between `0` and `255`. If `null`, negative, or greater\nthan `255`, the function returns `null`.\n\n*Output*: string\n\n*Description*: Returns the character that has the ASCII code value specified by the numeric input.\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringChar]\n--------------------------------------------------\n\n[[sql-functions-string-char-length]]\n==== `CHAR_LENGTH`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nCHAR_LENGTH(string_exp) <1>\n--------------------------------------------------\n*Input*:\n\n<1> string expression. If `null`, the function returns `null`.\n\n*Output*: integer\n\n*Description*: Returns the length in characters of the input, if the string expression is of a character data type; otherwise, returns the length in bytes of the string expression (the smallest integer not less than the number of bits divided by 8).\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringCharLength]\n--------------------------------------------------\n\n[[sql-functions-string-concat]]\n==== `CONCAT`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nCONCAT(\n    string_exp1, <1>\n    string_exp2) <2>\n--------------------------------------------------\n*Input*:\n\n<1> string expression. Treats `null` as an empty string.\n<2> string expression. Treats `null` as an empty string.\n\n*Output*: string\n\n*Description*: Returns a character string that is the result of concatenating `string_exp1` to `string_exp2`.\n\nThe resulting string cannot exceed a byte length of 1 MB.\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringConcat]\n--------------------------------------------------\n\n[[sql-functions-string-insert]]\n==== `INSERT`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nINSERT(\n    source,      <1>\n    start,       <2>\n    length,      <3>\n    replacement) <4>\n--------------------------------------------------\n*Input*:\n\n<1> string expression. If `null`, the function returns `null`.\n<2> integer expression. If `null`, the function returns `null`.\n<3> integer expression. If `null`, the function returns `null`.\n<4> string expression. If `null`, the function returns `null`.\n\n*Output*: string\n\n*Description*: Returns a string where `length` characters have been deleted from `source`, beginning at `start`, and where `replacement` has been inserted into `source`, beginning at `start`.\n\nThe resulting string cannot exceed a byte length of 1 MB.\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringInsert]\n--------------------------------------------------\n\n[[sql-functions-string-lcase]]\n==== `LCASE`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nLCASE(string_exp) <1>\n--------------------------------------------------\n*Input*:\n\n<1> string expression. If `null`, the function returns `null`.\n\n*Output*: string\n\n*Description*: Returns a string equal to that in `string_exp`, with all uppercase characters converted to lowercase.\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringLCase]\n--------------------------------------------------\n\n[[sql-functions-string-left]]\n==== `LEFT`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nLEFT(\n    string_exp, <1>\n    count)      <2>\n--------------------------------------------------\n*Input*:\n\n<1> string expression. If `null`, the function returns `null`.\n<2> integer expression. If `null`, the function returns `null`. If `0` or\nnegative, the function returns an empty string.\n\n*Output*: string\n\n*Description*: Returns the leftmost count characters of `string_exp`.\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringLeft]\n--------------------------------------------------\n\n[[sql-functions-string-length]]\n==== `LENGTH`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nLENGTH(string_exp) <1>\n--------------------------------------------------\n*Input*:\n\n<1> string expression. If `null`, the function returns `null`.\n\n*Output*: integer\n\n*Description*: Returns the number of characters in `string_exp`, excluding trailing blanks.\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringLength]\n--------------------------------------------------\n\n[[sql-functions-string-locate]]\n==== `LOCATE`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nLOCATE(\n    pattern, <1>\n    source   <2>\n    [, start]<3>\n)\n--------------------------------------------------\n*Input*:\n\n<1> string expression.  If `null`, the function returns `null`.\n<2> string expression.  If `null`, the function returns `null`.\n<3> integer expression; optional. If `null`, `0`, `1`, negative, or not\nspecified, the search starts at the first character position.\n\n*Output*: integer\n\n*Description*: Returns the starting position of the first occurrence of\n`pattern` within `source`. The optional `start` specifies the character position\nto start the search with. If the `pattern` is not found within `source`, the\nfunction returns `0`.\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringLocateWoStart]\n--------------------------------------------------\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringLocateWithStart]\n--------------------------------------------------\n\n[[sql-functions-string-ltrim]]\n==== `LTRIM`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nLTRIM(string_exp) <1>\n--------------------------------------------------\n*Input*:\n\n<1> string expression. If `null`, the function returns `null`.\n\n*Output*: string\n\n*Description*: Returns the characters of `string_exp`, with leading blanks removed.\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringLTrim]\n--------------------------------------------------\n\n[[sql-functions-string-octet-length]]\n==== `OCTET_LENGTH`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nOCTET_LENGTH(string_exp) <1>\n--------------------------------------------------\n*Input*:\n\n<1> string expression. If `null`, the function returns `null`.\n\n*Output*: integer\n\n*Description*: Returns the length in bytes of the `string_exp` input expression.\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringOctetLength]\n--------------------------------------------------\n\n[[sql-functions-string-position]]\n==== `POSITION`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nPOSITION(\n    string_exp1, <1>\n    string_exp2) <2>\n--------------------------------------------------\n*Input*:\n\n<1> string expression. If `null`, the function returns `null`.\n<2> string expression. If `null`, the function returns `null`.\n\n*Output*: integer\n\n*Description*: Returns the position of the `string_exp1` in `string_exp2`. The result is an exact numeric.\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringPosition]\n--------------------------------------------------\n\n[[sql-functions-string-repeat]]\n==== `REPEAT`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nREPEAT(\n    string_exp, <1>\n    count)      <2>\n--------------------------------------------------\n*Input*:\n\n<1> string expression. If `null`, the function returns `null`.\n<2> integer expression. If `0`, negative, or `null`, the function returns `null`.\n\n*Output*: string\n\n*Description*: Returns a character string composed of `string_exp` repeated `count` times.\n\nThe resulting string cannot exceed a byte length of 1 MB.\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringRepeat]\n--------------------------------------------------\n\n[[sql-functions-string-replace]]\n==== `REPLACE`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nREPLACE(\n    source,      <1>\n    pattern,     <2>\n    replacement) <3>\n--------------------------------------------------\n*Input*:\n\n<1> string expression. If `null`, the function returns `null`.\n<2> string expression. If `null`, the function returns `null`.\n<3> string expression. If `null`, the function returns `null`.\n\n*Output*: string\n\n*Description*: Search `source` for occurrences of `pattern`, and replace with `replacement`.\n\nThe resulting string cannot exceed a byte length of 1 MB.\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringReplace]\n--------------------------------------------------\n\n[[sql-functions-string-right]]\n==== `RIGHT`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nRIGHT(\n    string_exp, <1>\n    count)      <2>\n--------------------------------------------------\n*Input*:\n\n<1> string expression. If `null`, the function returns `null`.\n<2> integer expression. If `null`, the function returns `null`. If `0` or\nnegative, the function returns an empty string.\n\n*Output*: string\n\n*Description*: Returns the rightmost count characters of `string_exp`.\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringRight]\n--------------------------------------------------\n\n[[sql-functions-string-rtrim]]\n==== `RTRIM`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nRTRIM(string_exp) <1>\n--------------------------------------------------\n*Input*:\n\n<1> string expression. If `null`, the function returns `null`.\n\n*Output*: string\n\n*Description*: Returns the characters of `string_exp` with trailing blanks removed.\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringRTrim]\n--------------------------------------------------\n\n[[sql-functions-string-space]]\n==== `SPACE`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nSPACE(count) <1>\n--------------------------------------------------\n*Input*:\n\n<1> integer expression. If `null` or negative, the function returns `null`.\n\n*Output*: string\n\n*Description*: Returns a character string consisting of `count` spaces.\n\nThe resulting string cannot exceed a byte length of 1 MB.\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringSpace]\n--------------------------------------------------\n\n[[sql-functions-string-startswith]]\n==== `STARTS_WITH`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nSTARTS_WITH(\n    source,   <1>\n    pattern)  <2>\n--------------------------------------------------\n*Input*:\n\n<1> string expression. If `null`, the function returns `null`.\n<2> string expression. If `null`, the function returns `null`.\n\n*Output*: boolean value\n\n*Description*: Returns `true` if the source expression starts with the specified\npattern, `false` otherwise. The matching is case sensitive.\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringStartsWithTrue]\n--------------------------------------------------\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringStartsWithFalse]\n--------------------------------------------------\n\n[[sql-functions-string-substring]]\n==== `SUBSTRING`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nSUBSTRING(\n    source, <1>\n    start,  <2>\n    length) <3>\n--------------------------------------------------\n*Input*:\n\n<1> string expression. If `null`, the function returns `null`.\n<2> integer expression. If `null`, the function returns `null`.\n<3> integer expression. If `null`, the function returns `null`.\n\n*Output*: string\n\n*Description*: Returns a character string that is derived from `source`, beginning at the character position specified by `start` for `length` characters.\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringSubString]\n--------------------------------------------------\n[[sql-functions-string-trim]]\n==== `TRIM`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nTRIM(string_exp) <1>\n--------------------------------------------------\n*Input*:\n\n<1> string expression. If `null`, the function returns `null`.\n\n*Output*: string\n\n*Description*: Returns the characters of `string_exp`, with leading and trailing blanks removed.\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringTrim]\n--------------------------------------------------\n\n[[sql-functions-string-ucase]]\n==== `UCASE`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nUCASE(string_exp) <1>\n--------------------------------------------------\n*Input*:\n\n<1> string expression. If `null`, the function returns `null`.\n\n*Output*: string\n\n*Description*: Returns a string equal to that of the input, with all lowercase characters converted to uppercase.\n\n[source, sql]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[stringUCase]\n--------------------------------------------------\n"
}