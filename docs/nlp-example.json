{
    "meta": {
        "size": 11494,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/nlp-example.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "nlp-example",
        "version": "8.15"
    },
    "doc": "[[nlp-example]]\n=== Tutorial: Natural language processing (NLP)\n++++\n<titleabbrev>NLP tutorial</titleabbrev>\n++++\n\nThis guide focuses on a concrete task: getting a machine learning trained model loaded into Elasticsearch and set up to enrich your documents.\n\nElasticsearch supports many different ways to use machine learning models.\nIn this guide, we will use a trained model to enrich documents at ingest time using ingest pipelines configured within Kibana's *Content* UI.\n\nIn this guide, we'll accomplish the above using the following steps:\n\n- *Set up a Cloud deployment*: We will use Elastic Cloud to host our deployment, as it makes it easy to scale machine learning nodes.\n- *Load a model with Eland*: We will use the Eland Elasticsearch client to import our chosen model into Elasticsearch.\nOnce we've verified that the model is loaded, we will be able to use it in an ingest pipeline.\n- *Setup an ML inference pipeline*: We will create an Elasticsearch index with a predefined mapping and add an inference pipeline.\n- *Show enriched results*: We will ingest some data into our index and observe that the pipeline enriches our documents.\n\nFollow the instructions to load a text classification model and set it up to enrich some photo comment data.\nOnce you're comfortable with the steps involved, use this guide as a blueprint for working with other machine learning trained models.\n\n*Table of contents*:\n\n* <<nlp-example-cloud-deployment>>\n* <<nlp-example-clone-eland>>\n* <<nlp-example-deploy-model>>\n* <<nlp-example-create-index-and-define-ml-inference-pipeline>>\n* <<nlp-example-index-documents>>\n* <<nlp-example-summary>>\n* <<nlp-example-learn-more>>\n\n[discrete#nlp-example-cloud-deployment]\n==== Create an {ecloud} deployment\n\nYour deployment will need a machine learning instance to upload and deploy trained models.\n\nIf your team already has an Elastic Cloud deployment, make sure it has at least one machine learning instance.\nIf it does not, *Edit* your deployment to add capacity.\nFor this tutorial, we'll need at least 2GB of RAM on a single machine learning instance.\n\nIf your team does not have an Elastic Cloud deployment, start by signing up for a https://cloud.elastic.co/registration[free Elastic Cloud trial^].\nAfter creating an account, you'll have an active subscription and you'll be prompted to create your first deployment.\n\nFollow the steps to *Create* a new deployment.\nMake sure to add capacity to the *Machine Learning instances* under the *Advanced settings* before creating the deployment.\nTo simplify scaling, turn on the *Autoscale this deployment* feature.\nIf you use autoscaling, you should increase the minimum RAM for the machine learning instance.\nFor this tutorial, we'll need at least 2GB of RAM.\nFor more details, refer to {cloud}/ec-create-deployment.html[Create a deployment^] in the Elastic Cloud documentation.\n\nEnriching documents using machine learning was introduced in Enterprise Search *8.5.0*, so be sure to use version *8.5.0 or later*.\n\n[discrete#nlp-example-clone-eland]\n==== Clone Eland\n\nElastic's https://github.com/elastic/eland[Eland^] tool makes it easy to upload trained models to your deployment via Docker.\n\nEland is a specialized Elasticsearch client for exploring and manipulating data, which we can use to upload trained models into Elasticsearch.\n\nTo clone and build Eland using Docker, run the following commands:\n\n[source,sh]\n----\ngit clone git@github.com:elastic/eland.git\ncd eland\ndocker build -t elastic/eland .\n----\n\n[discrete#nlp-example-deploy-model]\n==== Deploy the trained model\n\nNow that you have a deployment and a way to upload models, you will need to choose a trained model that fits your data.\nhttps://huggingface.co/[Hugging Face^] has a large repository of publicly available trained models.\nThe model you choose will depend on your data and what you would like to do with it.\n\nFor the purposes of this guide, let's say we have a data set of photo comments.\nIn order to promote a positive atmosphere on our platform, we'd like the first few comments on each photo to be positive comments.\nFor this task, the https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english?text=I+like+you.+I+love+you[`distilbert-base-uncased-finetuned-sst-2-english`^] model is a good fit.\n\nTo upload this model to your deployment, you need a few pieces of data:\n\n- The deployment URL.\n  You can get this via the *Copy endpoint* link next to *Elasticsearch* on the deployment management screen.\n  It will look like `https://ml-test.es.us-west1.gcp.cloud.es.io:443`.\n  Make sure to append the port if it isn't present, as Eland requires the URL to have a scheme, host, and port.\n  443 is the default port for HTTPS.\n- The deployment username and password for your deployment.\n  This is displayed one time when the deployment is created.\n  It will look like `elastic` and `xUjaFNTyycG34tQx5Iq9JIIA`.\n- The trained model id.\n  This comes from Hugging Face.\n  It will look like `distilbert-base-uncased-finetuned-sst-2-english`.\n- The trained model task type.\n  This is the kind of machine learning task the model is designed to achieve.\n  It will be one of: `fill_mask`, `ner`, `text_classification`, `text_embedding`, and `zero_shot_classification`.\n  For our use case, we will use `text_classification`.\n\nWe can now upload our chosen model to Elasticsearch by providing these options to Eland.\n\n[source,sh]\n----\ndocker run -it --rm --network host \\\n    elastic/eland \\\n    eland_import_hub_model \\\n      --url https://ml-test.es.us-west1.gcp.cloud.es.io:443 \\\n      -u elastic -p <PASSWORD> \\\n      --hub-model-id distilbert-base-uncased-finetuned-sst-2-english \\\n      --task-type text_classification \\\n      --start\n----\n\nThis script should take roughly 2-3 minutes to run.\nOnce your model has been successfully deployed to your Elastic deployment, navigate to Kibana's *Trained Models* page to verify it is ready.\nYou can find this page under *Machine Learning > Analytics* menu and then *Trained Models > Model Management*.\nIf you do not see your model in the list, you may need to click *Synchronize your jobs and trained models*.\nYour model is now ready to be used.\n\n[discrete#nlp-example-create-index-and-define-ml-inference-pipeline]\n==== Create an index and define an ML inference pipeline\n\nWe are now ready to use Kibana's *Content* UI to enrich our documents with inference data.\nBefore we ingest photo comments into Elasticsearch, we will first create an ML inference pipeline.\nThe pipeline will enrich the incoming photo comments with inference data indicating if the comments are positive.\n\nLet's say our photo comments look like this when they are uploaded as a document into Elasticsearch:\n\n[source,js]\n----\n{\n  \"photo_id\": \"78sdv71-8vdkjaj-knew629-vc8459p\",\n  \"body\": \"your dog is so cute!\",\n  ...\n}\n----\n// NOTCONSOLE\n\nWe want to run our documents through an inference processor that uses the trained model we uploaded to determine if the comments are positive.\nTo do this, we first need to set up an Elasticsearch index.\n\n* From the Kibana home page, start by clicking the Search card.\n* Click the button to *Create an Elasticsearch index*.\n* Choose to *Use the API* and give your index a name.\nIt will automatically be prefixed with `search-`.\nFor this demo, we will name the index `search-photo-comments`.\n* After clicking *Create Index*, you will be redirected to the overview page for your new index.\n\nTo configure the ML inference pipeline, we need the index to have an existing field mapping so we can choose which field to analyze.\nThis can be done via the <<indices-put-mapping, index mapping API>> in the Kibana Dev Tools or simply through a cURL command:\n\n[source,js]\n----\nPUT search-photo-comments/_mapping\n{\n  \"properties\": {\n    \"photo_id\": { \"type\": \"keyword\" },\n    \"body\": { \"type\": \"text\" }\n  }\n}\n----\n// NOTCONSOLE\n\nNow it's time to create an inference pipeline.\n\n1. From the overview page for your `search-photo-comments` index in \"Search\", click the *Pipelines* tab.\nBy default, Elasticsearch does not create any index-specific ingest pipelines.\n2. Because we want to customize these pipelines, we need to *Copy and customize* the `ent-search-generic-ingestion` ingest pipeline.\nFind this option above the settings for the `ent-search-generic-ingestion` ingest pipeline.\nThis will create two new index-specific ingest pipelines.\n\nNext, we'll add an inference pipeline.\n\n1. Locate the section *Machine Learning Inference Pipelines*, then select *Add inference pipeline*.\n2. Give your inference pipeline a name, select the trained model we uploaded, and select the `body` field to be analyzed.\n3. Optionally, choose a field name to store the output.\nWe'll call it `positivity_result`.\n\nYou can also run example documents through a simulator and review the pipeline before creating it.\n\n[discrete#nlp-example-index-documents]\n==== Index documents\n\nAt this point, everything is ready to enrich documents at index time.\n\nFrom the Kibana Dev Console, or simply using a cURL command, we can index a document.\nWe'll use a `_run_ml_inference` flag to tell the `search-photo-comments` pipeline to run the index-specific ML inference pipeline that we created.\nThis field will not be indexed in the document.\n\n[source,js]\n----\nPOST search-photo-comments/_doc/my-new-doc?pipeline=search-photo-comments\n{\n  \"photo_id\": \"78sdv71-8vdkjaj-knew629-vc8459p\",\n  \"body\": \"your dog is so cute!\",\n  \"_run_ml_inference\": true\n}\n----\n// NOTCONSOLE\n\nOnce the document is indexed, use the API to retrieve it and view the enriched data.\n\n[source,js]\n----\nGET search-photo-comments/_doc/my-new-doc\n----\n// NOTCONSOLE\n\n[source,js]\n----\n{\n  \"_index\": \"search-photo-comments\",\n  \"_id\": \"_MQggoQBKYghsSwHbDvG\",\n  ...\n  \"_source\": {\n    ...\n    \"photo_id\": \"78sdv71-8vdkjaj-knew629-vc8459p\",\n    \"body\": \"your dog is so cute!\",\n    \"ml\": {\n      \"inference\": {\n        \"positivity_result\": {\n          \"predicted_value\": \"POSITIVE\",\n          \"prediction_probability\": 0.9998022925461774,\n          \"model_id\": \"distilbert-base-uncased-finetuned-sst-2-english\"\n        }\n      }\n    }\n  }\n}\n----\n// NOTCONSOLE\n\nThe document has new fields with the enriched data.\nThe `ml.inference.positivity_result` field is an object with the analysis from the machine learning model.\nThe model we used predicted with 99.98% confidence that the analyzed text is positive.\n\nFrom here, we can write search queries to boost on `ml.inference.positivity_result.predicted_value`.\nThis field will also be stored in a top-level `positivity_result` field if the model was confident enough.\n\n[discrete#nlp-example-summary]\n==== Summary\n\nIn this guide, we covered how to:\n\n- Set up a deployment on Elastic Cloud with a machine learning instance.\n- Deploy a machine learning trained model using the Eland Elasticsearch client.\n- Configure an inference pipeline to use the trained model with Elasticsearch.\n- Enrich documents with inference results from the trained model at ingest time.\n- Query your search engine and sort by `positivity_result`.\n\n[discrete#nlp-example-learn-more]\n==== Learn more\n\n* {ml-docs}/ml-nlp-model-ref.html[Compatible third party models^]\n* {ml-docs}/ml-nlp-overview.html[NLP Overview^]\n* https://github.com/elastic/eland#docker[Docker section of Eland readme^]\n* {ml-docs}/ml-nlp-deploy-models.html[Deploying a model ML guide^]\n* {ml-docs}/ml-nlp-import-model.html#ml-nlp-authentication[Eland Authentication methods^]\n* <<ingest-pipeline-search-inference-add-inference-processors,Adding inference pipelines>>\n"
}