{
    "meta": {
        "timestamp": "2024-11-01T03:07:10.009272",
        "size": 10090,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-rank-feature-query.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "query-dsl-rank-feature-query",
        "version": "8.15"
    },
    "doc": "[[query-dsl-rank-feature-query]]\n=== Rank feature query\n++++\n<titleabbrev>Rank feature</titleabbrev>\n++++\n\nBoosts the <<relevance-scores,relevance score>> of documents based on the\nnumeric value of a <<rank-feature,`rank_feature`>> or\n<<rank-features,`rank_features`>> field.\n\nThe `rank_feature` query is typically used in the `should` clause of a\n<<query-dsl-bool-query,`bool`>> query so its relevance scores are added to other\nscores from the `bool` query.\n\nWith `positive_score_impact` set to `false` for a `rank_feature` or\n`rank_features` field, we recommend that every document that participates\nin a query has a value for this field. Otherwise, if a `rank_feature` query\nis used in the should clause, it doesn't add anything to a score of\na document with a missing value, but adds some boost for a document\ncontaining a feature. This is contrary to what we want \u2013 as we consider these\nfeatures negative, we want to rank documents containing them lower than documents\nmissing them.\n\nUnlike the <<query-dsl-function-score-query,`function_score`>> query or other\nways to change <<relevance-scores,relevance scores>>, the\n`rank_feature` query efficiently skips non-competitive hits when the\n<<track-total-hits,`track_total_hits`>> parameter is **not** `true`. This can\ndramatically improve query speed.\n\n[[rank-feature-query-functions]]\n==== Rank feature functions\n\nTo calculate relevance scores based on rank feature fields, the `rank_feature`\nquery supports the following mathematical functions:\n\n* <<rank-feature-query-saturation,Saturation>>\n* <<rank-feature-query-logarithm,Logarithm>>\n* <<rank-feature-query-sigmoid,Sigmoid>>\n* <<rank-feature-query-linear,Linear>>\n\nIf you don't know where to start, we recommend using the `saturation` function.\nIf no function is provided, the `rank_feature` query uses the `saturation`\nfunction by default.\n\n[[rank-feature-query-ex-request]]\n==== Example request\n\n[[rank-feature-query-index-setup]]\n===== Index setup\n\nTo use the `rank_feature` query, your index must include a\n<<rank-feature,`rank_feature`>> or <<rank-features,`rank_features`>> field\nmapping. To see how you can set up an index for the `rank_feature` query, try\nthe following example.\n\nCreate a `test` index with the following field mappings:\n\n- `pagerank`, a <<rank-feature,`rank_feature`>> field which measures the\nimportance of a website\n- `url_length`, a <<rank-feature,`rank_feature`>> field which contains the\nlength of the website's URL. For this example, a long URL correlates negatively\nto relevance, indicated by a `positive_score_impact` value of `false`.\n- `topics`, a <<rank-features,`rank_features`>> field which contains a list of\ntopics and a measure of how well each document is connected to this topic\n\n[source,console]\n----\nPUT /test\n{\n  \"mappings\": {\n    \"properties\": {\n      \"pagerank\": {\n        \"type\": \"rank_feature\"\n      },\n      \"url_length\": {\n        \"type\": \"rank_feature\",\n        \"positive_score_impact\": false\n      },\n      \"topics\": {\n        \"type\": \"rank_features\"\n      }\n    }\n  }\n}\n----\n// TESTSETUP\n\n\nIndex several documents to the `test` index.\n\n[source,console]\n----\nPUT /test/_doc/1?refresh\n{\n  \"url\": \"https://en.wikipedia.org/wiki/2016_Summer_Olympics\",\n  \"content\": \"Rio 2016\",\n  \"pagerank\": 50.3,\n  \"url_length\": 42,\n  \"topics\": {\n    \"sports\": 50,\n    \"brazil\": 30\n  }\n}\n\nPUT /test/_doc/2?refresh\n{\n  \"url\": \"https://en.wikipedia.org/wiki/2016_Brazilian_Grand_Prix\",\n  \"content\": \"Formula One motor race held on 13 November 2016\",\n  \"pagerank\": 50.3,\n  \"url_length\": 47,\n  \"topics\": {\n    \"sports\": 35,\n    \"formula one\": 65,\n    \"brazil\": 20\n  }\n}\n\nPUT /test/_doc/3?refresh\n{\n  \"url\": \"https://en.wikipedia.org/wiki/Deadpool_(film)\",\n  \"content\": \"Deadpool is a 2016 American superhero film\",\n  \"pagerank\": 50.3,\n  \"url_length\": 37,\n  \"topics\": {\n    \"movies\": 60,\n    \"super hero\": 65\n  }\n}\n----\n\n[[rank-feature-query-ex-query]]\n===== Example query\n\nThe following query searches for `2016` and boosts relevance scores based on\n`pagerank`, `url_length`, and the `sports` topic.\n\n[source,console]\n----\nGET /test/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"content\": \"2016\"\n          }\n        }\n      ],\n      \"should\": [\n        {\n          \"rank_feature\": {\n            \"field\": \"pagerank\"\n          }\n        },\n        {\n          \"rank_feature\": {\n            \"field\": \"url_length\",\n            \"boost\": 0.1\n          }\n        },\n        {\n          \"rank_feature\": {\n            \"field\": \"topics.sports\",\n            \"boost\": 0.4\n          }\n        }\n      ]\n    }\n  }\n}\n----\n\n\n[[rank-feature-top-level-params]]\n==== Top-level parameters for `rank_feature`\n\n`field`::\n(Required, string) <<rank-feature,`rank_feature`>> or\n<<rank-features,`rank_features`>> field used to boost\n<<relevance-scores,relevance scores>>.\n\n`boost`::\n+\n--\n(Optional, float) Floating point number used to decrease or increase\n<<relevance-scores,relevance scores>>. Defaults to `1.0`.\n\nBoost values are relative to the default value of `1.0`. A boost value between\n`0` and `1.0` decreases the relevance score. A value greater than `1.0`\nincreases the relevance score.\n--\n\n`saturation`::\n+\n--\n(Optional, <<rank-feature-query-saturation,function object>>) Saturation\nfunction used to boost <<relevance-scores,relevance scores>> based on the\nvalue of the rank feature `field`. If no function is provided, the `rank_feature`\nquery defaults to the `saturation` function. See\n<<rank-feature-query-saturation,Saturation>> for more information.\n\nOnly one function `saturation`, `log`, `sigmoid` or `linear` can be provided.\n--\n\n`log`::\n+\n--\n(Optional, <<rank-feature-query-logarithm,function object>>) Logarithmic\nfunction used to boost <<relevance-scores,relevance scores>> based on the\nvalue of the rank feature `field`. See\n<<rank-feature-query-logarithm,Logarithm>> for more information.\n\nOnly one function `saturation`, `log`, `sigmoid` or `linear` can be provided.\n--\n\n`sigmoid`::\n+\n--\n(Optional, <<rank-feature-query-sigmoid,function object>>) Sigmoid function used\nto boost <<relevance-scores,relevance scores>> based on the value of the\nrank feature `field`. See <<rank-feature-query-sigmoid,Sigmoid>> for more\ninformation.\n\nOnly one function `saturation`, `log`, `sigmoid` or `linear` can be provided.\n--\n\n`linear`::\n+\n--\n(Optional, <<rank-feature-query-linear,function object>>) Linear function used\nto boost <<relevance-scores,relevance scores>> based on the value of the\nrank feature `field`. See <<rank-feature-query-linear,Linear>> for more\ninformation.\n\nOnly one function `saturation`, `log`, `sigmoid` or `linear` can be provided.\n--\n\n\n[[rank-feature-query-notes]]\n==== Notes\n\n[[rank-feature-query-saturation]]\n===== Saturation\nThe `saturation` function gives a score equal to `S / (S + pivot)`, where `S` is\nthe value of the rank feature field and `pivot` is a configurable pivot value so\nthat the result will be less than `0.5` if `S` is less than pivot and greater\nthan `0.5` otherwise. Scores are always `(0,1)`.\n\nIf the rank feature has a negative score impact then the function will be\ncomputed as `pivot / (S + pivot)`, which decreases when `S` increases.\n\n[source,console]\n--------------------------------------------------\nGET /test/_search\n{\n  \"query\": {\n    \"rank_feature\": {\n      \"field\": \"pagerank\",\n      \"saturation\": {\n        \"pivot\": 8\n      }\n    }\n  }\n}\n--------------------------------------------------\n\nIf a `pivot` value is not provided, {es} computes a default value equal to the\napproximate geometric mean of all rank feature values in the index. We recommend\nusing this default value if you haven't had the opportunity to train a good\npivot value.\n\n[source,console]\n--------------------------------------------------\nGET /test/_search\n{\n  \"query\": {\n    \"rank_feature\": {\n      \"field\": \"pagerank\",\n      \"saturation\": {}\n    }\n  }\n}\n--------------------------------------------------\n\n[[rank-feature-query-logarithm]]\n===== Logarithm\nThe `log` function gives a score equal to `log(scaling_factor + S)`, where `S`\nis the value of the rank feature field and `scaling_factor` is a configurable\nscaling factor. Scores are unbounded.\n\nThis function only supports rank features that have a positive score impact.\n\n[source,console]\n--------------------------------------------------\nGET /test/_search\n{\n  \"query\": {\n    \"rank_feature\": {\n      \"field\": \"pagerank\",\n      \"log\": {\n        \"scaling_factor\": 4\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n[[rank-feature-query-sigmoid]]\n===== Sigmoid\nThe `sigmoid` function is an extension of `saturation` which adds a configurable\nexponent. Scores are computed as `S^exp^ / (S^exp^ + pivot^exp^)`. Like for the\n`saturation` function, `pivot` is the value of `S` that gives a score of `0.5`\nand scores are `(0,1)`.\n\nThe `exponent` must be positive and is typically in `[0.5, 1]`. A\ngood value should be computed via training. If you don't have the opportunity to\ndo so, we recommend you use the `saturation` function instead.\n\n[source,console]\n--------------------------------------------------\nGET /test/_search\n{\n  \"query\": {\n    \"rank_feature\": {\n      \"field\": \"pagerank\",\n      \"sigmoid\": {\n        \"pivot\": 7,\n        \"exponent\": 0.6\n      }\n    }\n  }\n}\n--------------------------------------------------\n[[rank-feature-query-linear]]\n===== Linear\nThe `linear` function is the simplest function, and gives a score equal\nto the indexed value of `S`, where `S` is the value of the rank feature\nfield.\nIf a rank feature field is indexed with `\"positive_score_impact\": true`,\nits indexed value is equal to `S` and rounded to preserve only\n9 significant bits for the precision.\nIf a rank feature field is indexed with `\"positive_score_impact\": false`,\nits indexed value is equal to `1/S` and rounded to preserve only 9 significant\nbits for the precision.\n\n[source,console]\n--------------------------------------------------\nGET /test/_search\n{\n  \"query\": {\n    \"rank_feature\": {\n      \"field\": \"pagerank\",\n      \"linear\": {}\n    }\n  }\n}\n--------------------------------------------------\n"
}