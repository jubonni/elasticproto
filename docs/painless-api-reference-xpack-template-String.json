{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.816066",
        "size": 5361,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/painless-api-reference-xpack-template-String.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "painless-api-reference-xpack-template-String",
        "version": "8.15"
    },
    "doc": "// This file is auto-generated. Do not edit.\n\n\n[role=\"exclude\",id=\"painless-api-reference-xpack-template-java-lang\"]\n=== Xpack Template API for package java.lang\nSee the <<painless-api-reference-xpack-template, Xpack Template API>> for a high-level overview of all packages and classes.\n\n[[painless-api-reference-xpack-template-String]]\n==== String\n* static String {java11-javadoc}/java.base/java/lang/String.html#copyValueOf(char%5B%5D)[copyValueOf](char[])\n* static String {java11-javadoc}/java.base/java/lang/String.html#copyValueOf(char%5B%5D,int,int)[copyValueOf](char[], int, int)\n* static String {java11-javadoc}/java.base/java/lang/String.html#format(java.lang.String,java.lang.Object%5B%5D)[format](String, def[])\n* static String {java11-javadoc}/java.base/java/lang/String.html#format(java.util.Locale,java.lang.String,java.lang.Object%5B%5D)[format](Locale, String, def[])\n* static String {java11-javadoc}/java.base/java/lang/String.html#join(java.lang.CharSequence,java.lang.Iterable)[join](CharSequence, Iterable)\n* static String {java11-javadoc}/java.base/java/lang/String.html#valueOf(java.lang.Object)[valueOf](def)\n* {java11-javadoc}/java.base/java/lang/String.html#<init>()[String]()\n* char {java11-javadoc}/java.base/java/lang/CharSequence.html#charAt(int)[charAt](int)\n* IntStream {java11-javadoc}/java.base/java/lang/CharSequence.html#chars()[chars]()\n* int {java11-javadoc}/java.base/java/lang/String.html#codePointAt(int)[codePointAt](int)\n* int {java11-javadoc}/java.base/java/lang/String.html#codePointBefore(int)[codePointBefore](int)\n* int {java11-javadoc}/java.base/java/lang/String.html#codePointCount(int,int)[codePointCount](int, int)\n* IntStream {java11-javadoc}/java.base/java/lang/CharSequence.html#codePoints()[codePoints]()\n* int {java11-javadoc}/java.base/java/lang/String.html#compareTo(java.lang.String)[compareTo](String)\n* int {java11-javadoc}/java.base/java/lang/String.html#compareToIgnoreCase(java.lang.String)[compareToIgnoreCase](String)\n* String {java11-javadoc}/java.base/java/lang/String.html#concat(java.lang.String)[concat](String)\n* boolean {java11-javadoc}/java.base/java/lang/String.html#contains(java.lang.CharSequence)[contains](CharSequence)\n* boolean {java11-javadoc}/java.base/java/lang/String.html#contentEquals(java.lang.CharSequence)[contentEquals](CharSequence)\n* String decodeBase64()\n* String encodeBase64()\n* boolean {java11-javadoc}/java.base/java/lang/String.html#endsWith(java.lang.String)[endsWith](String)\n* boolean {java11-javadoc}/java.base/java/lang/Object.html#equals(java.lang.Object)[equals](Object)\n* boolean {java11-javadoc}/java.base/java/lang/String.html#equalsIgnoreCase(java.lang.String)[equalsIgnoreCase](String)\n* void {java11-javadoc}/java.base/java/lang/String.html#getChars(int,int,char%5B%5D,int)[getChars](int, int, char[], int)\n* int {java11-javadoc}/java.base/java/lang/Object.html#hashCode()[hashCode]()\n* int {java11-javadoc}/java.base/java/lang/String.html#indexOf(java.lang.String)[indexOf](String)\n* int {java11-javadoc}/java.base/java/lang/String.html#indexOf(java.lang.String,int)[indexOf](String, int)\n* boolean {java11-javadoc}/java.base/java/lang/String.html#isEmpty()[isEmpty]()\n* int {java11-javadoc}/java.base/java/lang/String.html#lastIndexOf(java.lang.String)[lastIndexOf](String)\n* int {java11-javadoc}/java.base/java/lang/String.html#lastIndexOf(java.lang.String,int)[lastIndexOf](String, int)\n* int {java11-javadoc}/java.base/java/lang/CharSequence.html#length()[length]()\n* int {java11-javadoc}/java.base/java/lang/String.html#offsetByCodePoints(int,int)[offsetByCodePoints](int, int)\n* boolean {java11-javadoc}/java.base/java/lang/String.html#regionMatches(int,java.lang.String,int,int)[regionMatches](int, String, int, int)\n* boolean {java11-javadoc}/java.base/java/lang/String.html#regionMatches(boolean,int,java.lang.String,int,int)[regionMatches](boolean, int, String, int, int)\n* String {java11-javadoc}/java.base/java/lang/String.html#replace(java.lang.CharSequence,java.lang.CharSequence)[replace](CharSequence, CharSequence)\n* String replaceAll(Pattern, Function)\n* String replaceFirst(Pattern, Function)\n* String[] splitOnToken(String)\n* String[] splitOnToken(String, int)\n* boolean {java11-javadoc}/java.base/java/lang/String.html#startsWith(java.lang.String)[startsWith](String)\n* boolean {java11-javadoc}/java.base/java/lang/String.html#startsWith(java.lang.String,int)[startsWith](String, int)\n* CharSequence {java11-javadoc}/java.base/java/lang/CharSequence.html#subSequence(int,int)[subSequence](int, int)\n* String {java11-javadoc}/java.base/java/lang/String.html#substring(int)[substring](int)\n* String {java11-javadoc}/java.base/java/lang/String.html#substring(int,int)[substring](int, int)\n* char[] {java11-javadoc}/java.base/java/lang/String.html#toCharArray()[toCharArray]()\n* String {java11-javadoc}/java.base/java/lang/String.html#toLowerCase()[toLowerCase]()\n* String {java11-javadoc}/java.base/java/lang/String.html#toLowerCase(java.util.Locale)[toLowerCase](Locale)\n* String {java11-javadoc}/java.base/java/lang/CharSequence.html#toString()[toString]()\n* String {java11-javadoc}/java.base/java/lang/String.html#toUpperCase()[toUpperCase]()\n* String {java11-javadoc}/java.base/java/lang/String.html#toUpperCase(java.util.Locale)[toUpperCase](Locale)\n* String {java11-javadoc}/java.base/java/lang/String.html#trim()[trim]()\n\n\n"
}