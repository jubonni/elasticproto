{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.832070",
        "size": 3560,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-valuecount-aggregation.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "search-aggregations-metrics-valuecount-aggregation",
        "version": "8.15"
    },
    "doc": "[[search-aggregations-metrics-valuecount-aggregation]]\n=== Value count aggregation\n++++\n<titleabbrev>Value count</titleabbrev>\n++++\n\nA `single-value` metrics aggregation that counts the number of values that are extracted from the aggregated documents.\nThese values can be extracted either from specific fields in the documents, or be generated by a provided script. Typically,\nthis aggregator will be used in conjunction with other single-value aggregations. For example, when computing the `avg`\none might be interested in the number of values the average is computed over.\n\n`value_count` does not de-duplicate values, so even if a field has duplicates each value will be counted individually.\n\n[source,console]\n--------------------------------------------------\nPOST /sales/_search?size=0\n{\n  \"aggs\" : {\n    \"types_count\" : { \"value_count\" : { \"field\" : \"type\" } }\n  }\n}\n--------------------------------------------------\n// TEST[setup:sales]\n\nResponse:\n\n[source,console-result]\n--------------------------------------------------\n{\n  ...\n  \"aggregations\": {\n    \"types_count\": {\n      \"value\": 7\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\\.\\.\\./\"took\": $body.took,\"timed_out\": false,\"_shards\": $body._shards,\"hits\": $body.hits,/]\n\nThe name of the aggregation (`types_count` above) also serves as the key by which the aggregation result can be\nretrieved from the returned response.\n\n==== Script\n\nIf you need to count something more complex than the values in a single field\nyou should run the aggregation on a <<runtime,runtime field>>.\n\n[source,console]\n----\nPOST /sales/_search\n{\n  \"size\": 0,\n  \"runtime_mappings\": {\n    \"tags\": {\n      \"type\": \"keyword\",\n      \"script\": \"\"\"\n        emit(doc['type'].value);\n        if (doc['promoted'].value) {\n          emit('hot');\n        }\n      \"\"\"\n    }\n  },\n  \"aggs\": {\n    \"tags_count\": {\n      \"value_count\": {\n        \"field\": \"tags\"\n      }\n    }\n  }\n}\n----\n// TEST[setup:sales]\n// TEST[s/_search/_search?filter_path=aggregations/]\n\n////\n[source,console-result]\n----\n{\n  \"aggregations\": {\n    \"tags_count\": {\n      \"value\": 12\n    }\n  }\n}\n----\n////\n\n[[search-aggregations-metrics-valuecount-aggregation-histogram-fields]]\n==== Histogram fields\nWhen the `value_count` aggregation is computed on <<histogram,histogram fields>>, the result of the aggregation is the sum of all numbers\nin the `counts` array of the histogram.\n\nFor example, for the following index that stores pre-aggregated histograms with latency metrics for different networks:\n\n[source,console]\n--------------------------------------------------\nPUT metrics_index/_doc/1\n{\n  \"network.name\" : \"net-1\",\n  \"latency_histo\" : {\n      \"values\" : [0.1, 0.2, 0.3, 0.4, 0.5],\n      \"counts\" : [3, 7, 23, 12, 6] <1>\n   }\n}\n\nPUT metrics_index/_doc/2\n{\n  \"network.name\" : \"net-2\",\n  \"latency_histo\" : {\n      \"values\" :  [0.1, 0.2, 0.3, 0.4, 0.5],\n      \"counts\" : [8, 17, 8, 7, 6] <1>\n   }\n}\n\nPOST /metrics_index/_search?size=0\n{\n  \"aggs\": {\n    \"total_requests\": {\n      \"value_count\": { \"field\": \"latency_histo\" }\n    }\n  }\n}\n--------------------------------------------------\n\nFor each histogram field the `value_count` aggregation will sum all numbers in the `counts` array <1>.\nEventually, it will add all values for all histograms and return the following result:\n\n[source,console-result]\n--------------------------------------------------\n{\n  ...\n  \"aggregations\": {\n    \"total_requests\": {\n      \"value\": 97\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[skip:test not setup]\n"
}