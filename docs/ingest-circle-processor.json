{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.151579",
        "size": 5177,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest-circle-processor.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "ingest-circle-processor",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[ingest-circle-processor]]\n=== Circle processor\n++++\n<titleabbrev>Circle</titleabbrev>\n++++\n\nConverts circle definitions of shapes to regular polygons which approximate them.\n\n[[circle-processor-options]]\n.Circle Processor Options\n[options=\"header\"]\n|======\n| Name                        | Required  | Default  | Description\n| `field`                     | yes       | -        | The field to interpret as a circle. Either a string in WKT format or a map for GeoJSON.\n| `target_field`              | no        | `field`  | The field to assign the polygon shape to, by default `field` is updated in-place\n| `ignore_missing`            | no        | `false`  | If `true` and `field` does not exist, the processor quietly exits without modifying the document\n| `error_distance`            | yes       | -        | The difference between the resulting inscribed distance from center to side and the circle's radius (measured in meters for `geo_shape`, unit-less for `shape`)\n| `shape_type`                | yes       | -        | Which field mapping type is to be used when processing the circle: `geo_shape` or `shape`\ninclude::common-options.asciidoc[]\n|======\n\n\nimage:images/spatial/error_distance.png[]\n\n[source,console]\n--------------------------------------------------\nPUT circles\n{\n  \"mappings\": {\n    \"properties\": {\n      \"circle\": {\n        \"type\": \"geo_shape\"\n      }\n    }\n  }\n}\n\nPUT _ingest/pipeline/polygonize_circles\n{\n  \"description\": \"translate circle to polygon\",\n  \"processors\": [\n    {\n      \"circle\": {\n        \"field\": \"circle\",\n        \"error_distance\": 28.0,\n        \"shape_type\": \"geo_shape\"\n      }\n    }\n  ]\n}\n--------------------------------------------------\n\nUsing the above pipeline, we can attempt to index a document into the `circles` index.\nThe circle can be represented as either a WKT circle or a GeoJSON circle. The resulting\npolygon will be represented and indexed using the same format as the input circle. WKT will\nbe translated to a WKT polygon, and GeoJSON circles will be translated to GeoJSON polygons.\n\nIMPORTANT: Circles that contain a pole are not supported.\n\n==== Example: Circle defined in Well Known Text\n\nIn this example a circle defined in WKT format is indexed\n\n[source,console]\n--------------------------------------------------\nPUT circles/_doc/1?pipeline=polygonize_circles\n{\n  \"circle\": \"CIRCLE (30 10 40)\"\n}\n\nGET circles/_doc/1\n--------------------------------------------------\n// TEST[continued]\n\nThe response from the above index request:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"found\": true,\n  \"_index\": \"circles\",\n  \"_id\": \"1\",\n  \"_version\": 1,\n  \"_seq_no\": 22,\n  \"_primary_term\": 1,\n  \"_source\": {\n    \"circle\": \"POLYGON ((30.000365257263184 10.0, 30.000111397193788 10.00034284530941, 29.999706043744222 10.000213571721195, 29.999706043744222 9.999786428278805, 30.000111397193788 9.99965715469059, 30.000365257263184 10.0))\"\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"_seq_no\": \\d+/\"_seq_no\" : $body._seq_no/ s/\"_primary_term\": 1/\"_primary_term\" : $body._primary_term/]\n\n==== Example: Circle defined in GeoJSON\n\nIn this example a circle defined in GeoJSON format is indexed\n\n[source,console]\n--------------------------------------------------\nPUT circles/_doc/2?pipeline=polygonize_circles\n{\n  \"circle\": {\n    \"type\": \"circle\",\n    \"radius\": \"40m\",\n    \"coordinates\": [30, 10]\n  }\n}\n\nGET circles/_doc/2\n--------------------------------------------------\n// TEST[continued]\n\nThe response from the above index request:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"found\": true,\n  \"_index\": \"circles\",\n  \"_id\": \"2\",\n  \"_version\": 1,\n  \"_seq_no\": 22,\n  \"_primary_term\": 1,\n  \"_source\": {\n    \"circle\": {\n      \"coordinates\": [\n        [\n          [30.000365257263184, 10.0],\n          [30.000111397193788, 10.00034284530941],\n          [29.999706043744222, 10.000213571721195],\n          [29.999706043744222, 9.999786428278805],\n          [30.000111397193788, 9.99965715469059],\n          [30.000365257263184, 10.0]\n        ]\n      ],\n      \"type\": \"Polygon\"\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"_seq_no\": \\d+/\"_seq_no\" : $body._seq_no/ s/\"_primary_term\": 1/\"_primary_term\" : $body._primary_term/]\n\n[[circle-processor-notes]]\n==== Notes on Accuracy\n\nAccuracy of the polygon that represents the circle is defined as `error_distance`. The smaller this\ndifference is, the closer to a perfect circle the polygon is.\n\nBelow is a table that aims to help capture how the radius of the circle affects the resulting number of sides\nof the polygon given different inputs.\n\nThe minimum number of sides is `4` and the maximum is `1000`.\n\n[[circle-processor-accuracy]]\n.Circle Processor Accuracy\n[options=\"header\"]\n|======\n| error_distance | radius in meters   | number of sides of polygon\n| 1.00           | 1.0                | 4\n| 1.00           | 10.0               | 14\n| 1.00           | 100.0              | 45\n| 1.00           | 1000.0             | 141\n| 1.00           | 10000.0            | 445\n| 1.00           | 100000.0           | 1000\n|======\n"
}