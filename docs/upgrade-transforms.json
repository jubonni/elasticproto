{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.805068",
        "size": 3217,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/upgrade-transforms.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "upgrade-transforms",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[upgrade-transforms]]\n= Upgrade {transforms} API\n\n[subs=\"attributes\"]\n++++\n<titleabbrev>Upgrade {transforms}</titleabbrev>\n++++\n\nUpgrades all {transforms}.\n\n[[upgrade-transforms-request]]\n== {api-request-title}\n\n`POST _transform/_upgrade`\n\n[[upgrade-transforms-prereqs]]\n== {api-prereq-title}\n\nRequires the following privileges:\n\n* cluster: `manage_transform` (the `transform_admin` built-in role grants this\n  privilege)\n\n\n[[upgrade-transforms-desc]]\n== {api-description-title}\n\n{transforms-cap} are compatible across minor versions and between supported\nmajor versions. However, over time, the format of {transform} configuration\ninformation may change. This API identifies {transforms} which have a legacy\nconfiguration format and upgrades them to the latest version; including clean up\nof the internal data structures that store {transform} state and checkpoints.\n{transform-cap} upgrade does not affect the source and destination indices.\n\nNOTE: From {es} 8.10.0,  a new version number is used to\ntrack the configuration and state changes in the {transform} plugin. This new\nversion number is decoupled from the product version and will increment\nindependently.\n\nIf a {transform} upgrade step fails, the upgrade stops, and an error is returned\nabout the underlying issue. Resolve the issue then re-run the process again. A\nsummary is returned when the upgrade is finished.\n\nTo ensure {ctransforms} remain running during a major version upgrade of the\ncluster \u2013 for example, from 7.16 to 8.0 \u2013 it is recommended to upgrade\n{transforms} before upgrading the cluster. You may want to perform a recent\ncluster backup prior to the upgrade.\n\n\n[IMPORTANT]\n====\n\n* When {es} {security-features} are enabled, your {transform} remembers the\nroles of the user who created or updated it last. In contrast to\n<<update-transform,update transform>>, a {transform} upgrade does not change the\nstored roles, therefore the role used to read source data and write to the\ndestination index remains unchanged.\n\n====\n\n\n[[upgrade-transforms-query-parms]]\n== {api-query-parms-title}\n\n`dry_run`::\n(Optional, Boolean) When `true`, only checks for updates but does not execute\nthem. Defaults to `false`.\n\n`timeout`::\n(Optional, time)\nPeriod to wait for a response. If no response is received before the timeout\nexpires, the request fails and returns an error. Defaults to `30s`.\n\n\n[[upgrade-transforms-response-body]]\n== {api-response-body-title}\n\n`needs_update`::\n  (integer) The number of {transforms} that need to be upgraded.\n\n`no_action`::\n  (integer) The number of {transforms} that don't require upgrading.\n\n`updated`::\n  (integer) The number of {transforms} that have been upgraded.\n\n\n\n[[upgrade-transforms-example]]\n== {api-examples-title}\n\nTo upgrade the legacy {transforms} to the latest configuration format, perform\nthe following API call:\n\n[source,console]\n--------------------------------------------------\nPOST _transform/_upgrade\n--------------------------------------------------\n// TEST[setup:simple_kibana_continuous_pivot]\n\nWhen all {transforms} are upgraded, you receive a summary:\n\n[source,console-result]\n----\n{\n  \"needs_update\": 0,\n  \"updated\": 2,\n  \"no_action\": 1\n}\n----\n// TESTRESPONSE[skip:TBD]\n"
}