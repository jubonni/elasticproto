{
    "meta": {
        "size": 3471,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/manually-configure-security.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "manually-configure-security",
        "version": "8.15"
    },
    "doc": "[[manually-configure-security]]\n== Manually configure security\n\nSecurity needs vary depending on whether you're developing locally on your\nlaptop or securing all communications in a production environment. Regardless\nof where you're deploying the {stack} (\"ELK\"), running a secure cluster is\nincredibly important to protect your data. That's why security is\n<<configuring-stack-security,enabled and configured by default>> in {es} 8.0\nand later.\n\nIf you want to enable security on an existing, unsecured cluster, use your own \nCertificate Authority (CA), or would rather manually configure security, the \nfollowing scenarios provide steps for configuring TLS on the transport layer,\nplus securing HTTPS traffic if you want it.\n\nIf you configure security manually _before_ starting your {es} nodes, the\nauto-configuration process will respect your security configuration. You can\nadjust your TLS configuration at any time, such as \n<<update-node-certs,updating node certificates>>.\n\nimage::images/elastic-security-overview.png[Elastic Security layers]\n\n[discrete]\n[[security-minimal-overview]]\n=== Minimal security ({es} Development)\n\nIf you've been working with {es} and want to enable security on your existing,\nunsecured cluster, start here. You'll set passwords for the built-in users to prevent \nunauthorized access to your local cluster, and also configure password \nauthentication for {kib}.\n\n// tag::minimal-security-note[]\nIMPORTANT: The minimal security scenario is not sufficient for\n<<dev-vs-prod-mode,production mode>> clusters. If your cluster has multiple\nnodes, you must enable minimal security and then\n<<security-basic-setup,configure Transport Layer Security (TLS)>> between\nnodes.\n\n// end::minimal-security-note[]\n\n<<security-minimal-setup,Set up minimal security>>\n\n[discrete]\n[[security-basic-overview]]\n=== Basic security ({es} + {kib})\n\nThis scenario configures TLS for communication between\nnodes. This security layer requires that nodes verify security certificates,\nwhich prevents unauthorized nodes from joining your {es} cluster.\n\nYour external HTTP traffic between {es} and {kib} won't be encrypted, but\ninternode communication will be secured.\n\n<<security-basic-setup,Set up basic security>>\n\n[discrete]\n[[security-basic-https-overview]]\n=== Basic security plus secured HTTPS traffic ({stack})\n\nThis scenario builds on the one for basic security and secures all HTTP\ntraffic with TLS. In addition to configuring TLS on the transport interface of\nyour {es} cluster, you configure TLS on the HTTP interface for both\n{es} and {kib}.\n\nNOTE: If you need mutual (bidirectional) TLS on the HTTP layer, then you'll\nneed to configure mutual authenticated encryption.\n\nYou then configure {kib} and Beats to communicate with\n{es} using TLS so that all communications are encrypted. This level\nof security is strong, and ensures that any communications in and out of your\ncluster are secure.\n\n<<security-basic-setup-https,Set up basic security plus HTTPS traffic>>\n\ninclude::securing-communications/security-minimal-setup.asciidoc[]\n\ninclude::securing-communications/security-basic-setup.asciidoc[]\n\ninclude::securing-communications/security-basic-setup-https.asciidoc[]\n\ninclude::securing-communications/change-passwords-native-users.asciidoc[]\n\ninclude::securing-communications/enabling-cipher-suites.asciidoc[]\n\ninclude::securing-communications/tls-versions-jdk.asciidoc[]\n\ninclude::reference/files.asciidoc[]\n\ninclude::fips-140-compliance.asciidoc[]"
}