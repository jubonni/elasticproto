{
    "meta": {
        "timestamp": "2024-11-01T03:07:08.798273",
        "size": 6411,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/boolean.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "boolean",
        "version": "8.15"
    },
    "doc": "[[boolean]]\n=== Boolean field type\n++++\n<titleabbrev>Boolean</titleabbrev>\n++++\n\nBoolean fields accept JSON `true` and `false` values, but can also accept\nstrings which are interpreted as either true or false:\n\n[horizontal]\nFalse values::\n\n    `false`, `\"false\"`, `\"\"` (empty string)\n\nTrue values::\n\n    `true`, `\"true\"`\n\nFor example:\n\n[source,console]\n----\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"is_published\": {\n        \"type\": \"boolean\"\n      }\n    }\n  }\n}\n\nPOST my-index-000001/_doc/1?refresh\n{\n  \"is_published\": \"true\" <1>\n}\n\nGET my-index-000001/_search\n{\n  \"query\": {\n    \"term\": {\n      \"is_published\": true <2>\n    }\n  }\n}\n----\n// TEST[s/_search/_search?filter_path=hits.hits/]\n<1> Indexing a document with `\"true\"`, which is interpreted as `true`.\n<2> Searching for documents with a JSON `true`.\n\n////\n[source,console-result]\n----\n{\n  \"hits\": {\n    \"hits\": [\n      {\n        \"_id\": \"1\",\n        \"_index\": \"my-index-000001\",\n        \"_score\": \"$body.hits.hits.0._score\",\n        \"_source\": {\n          \"is_published\": \"true\"\n        }\n      }\n    ]\n  }\n}\n----\n////\n\nAggregations like the <<search-aggregations-bucket-terms-aggregation,`terms`\naggregation>>  use `1` and `0` for the `key`, and the strings `\"true\"` and\n`\"false\"` for the `key_as_string`. Boolean fields when used in scripts,\nreturn `true` and `false`:\n\n[source,console]\n----\nPOST my-index-000001/_doc/1?refresh\n{\n  \"is_published\": true\n}\n\nPOST my-index-000001/_doc/2?refresh\n{\n  \"is_published\": false\n}\n\nGET my-index-000001/_search\n{\n  \"aggs\": {\n    \"publish_state\": {\n      \"terms\": {\n        \"field\": \"is_published\"\n      }\n    }\n  },\n  \"sort\": [ \"is_published\" ],\n  \"fields\": [\n    {\"field\": \"weight\"}\n  ],\n  \"runtime_mappings\": {\n    \"weight\": {\n      \"type\": \"long\",\n      \"script\": \"emit(doc['is_published'].value ? 10 : 0)\"\n    }\n  }\n}\n----\n// TEST[s/_search/_search?filter_path=aggregations,hits.hits/]\n\n////\n[source,console-result]\n----\n{\n  \"aggregations\": {\n    \"publish_state\": {\n      \"doc_count_error_upper_bound\": 0,\n      \"sum_other_doc_count\": 0,\n      \"buckets\": [\n        {\n          \"key\": 0,\n          \"key_as_string\": \"false\",\n          \"doc_count\": 1\n        },\n        {\n          \"key\": 1,\n          \"key_as_string\": \"true\",\n          \"doc_count\": 1\n        }\n      ]\n    }\n  },\n  \"hits\": {\n    \"hits\": [\n      {\n        \"_id\": \"2\",\n        \"_index\": \"my-index-000001\",\n        \"_score\": null,\n        \"_source\": {\n          \"is_published\": false\n        },\n        \"sort\": [0],\n        \"fields\": {\"weight\": [0]}\n      },\n      {\n        \"_id\": \"1\",\n        \"_index\": \"my-index-000001\",\n        \"_score\": null,\n        \"_source\": {\n          \"is_published\": true\n        },\n        \"sort\": [1],\n        \"fields\": {\"weight\": [10]}\n      }\n    ]\n  }\n}\n----\n////\n\n[[boolean-params]]\n==== Parameters for `boolean` fields\n\nThe following parameters are accepted by `boolean` fields:\n\n[horizontal]\n\n<<doc-values,`doc_values`>>::\n\n    Should the field be stored on disk in a column-stride fashion, so that it\n    can later be used for sorting, aggregations, or scripting? Accepts `true`\n    (default) or `false`.\n\n<<mapping-index,`index`>>::\n\n    Should the field be quickly searchable? Accepts `true` (default) and\n    `false`. Fields that only have <<doc-values,`doc_values`>>\n    enabled can still be queried using term or range-based queries,\n    albeit slower.\n\n<<ignore-malformed, `ignore_malformed`>>::\n\n    Trying to index the wrong data type into a field throws an exception by\n    default, and rejects the whole document. If this parameter is set to true,\n    it allows the exception to be ignored. The malformed field is not indexed,\n    but other fields in the document are processed normally. Accepts `true` or `false`.\n    Note that this cannot be set if the `script` parameter is used.\n\n<<null-value,`null_value`>>::\n\n    Accepts any of the true or false values listed above. The value is\n    substituted for any explicit `null` values. Defaults to `null`, which\n    means the field is treated as missing. Note that this cannot be set\n    if the `script` parameter is used.\n\n`on_script_error`::\n\n    Defines what to do if the script defined by the `script` parameter\n    throws an error at indexing time. Accepts `fail` (default), which\n    will cause the entire document to be rejected, and `continue`, which\n    will register the field in the document's\n    <<mapping-ignored-field,`_ignored`>> metadata field and continue\n    indexing. This parameter can only be set if the `script` field is\n    also set.\n\n`script`::\n\n    If this parameter is set, then the field will index values generated\n    by this script, rather than reading the values directly from the\n    source. If a value is set for this field on the input document, then\n    the document will be rejected with an error.\n    Scripts are in the same format as their\n    <<runtime-mapping-fields,runtime equivalent>>.\n\n<<mapping-store,`store`>>::\n\n    Whether the field value should be stored and retrievable separately from\n    the <<mapping-source-field,`_source`>> field. Accepts `true` or `false`\n    (default).\n\n<<mapping-field-meta,`meta`>>::\n\n    Metadata about the field.\n\n`time_series_dimension`::\n(Optional, Boolean)\n+\n--\ninclude::keyword.asciidoc[tag=dimension]\n--\n\n[[boolean-synthetic-source]]\n==== Synthetic `_source`\n\nIMPORTANT: Synthetic `_source` is Generally Available only for TSDB indices\n(indices that have `index.mode` set to `time_series`). For other indices\nsynthetic `_source` is in technical preview. Features in technical preview may\nbe changed or removed in a future release. Elastic will work to fix\nany issues, but features in technical preview are not subject to the support SLA\nof official GA features.\n\n`boolean` fields support <<synthetic-source,synthetic `_source`>> in their\ndefault configuration.\n\nSynthetic source may sort `boolean` field values. For example:\n[source,console,id=synthetic-source-boolean-example]\n----\nPUT idx\n{\n  \"settings\": {\n    \"index\": {\n      \"mapping\": {\n        \"source\": {\n          \"mode\": \"synthetic\"\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"bool\": { \"type\": \"boolean\" }\n    }\n  }\n}\nPUT idx/_doc/1\n{\n  \"bool\": [true, false, true, false]\n}\n----\n// TEST[s/$/\\nGET idx\\/_doc\\/1?filter_path=_source\\n/]\n\nWill become:\n[source,console-result]\n----\n{\n  \"bool\": [false, false, true, true]\n}\n----\n// TEST[s/^/{\"_source\":/ s/\\n$/}/]\n"
}