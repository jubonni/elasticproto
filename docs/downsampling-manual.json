{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.441580",
        "size": 24009,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/downsampling-manual.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "downsampling-manual",
        "version": "8.15"
    },
    "doc": "[[downsampling-manual]]\n=== Run downsampling manually\n++++\n<titleabbrev>Run downsampling manually</titleabbrev>\n++++\n\n////\n[source,console]\n----\nDELETE _data_stream/my-data-stream\nDELETE _index_template/my-data-stream-template\nDELETE _ingest/pipeline/my-timestamp-pipeline\n----\n// TEARDOWN\n////\n\nThe recommended way to <<downsampling,downsample>> a <<tsds,time-series data stream (TSDS)>> is\n<<downsampling-ilm,through index lifecycle management (ILM)>>. However, if\nyou're not using ILM, you can downsample a TSDS manually. This guide shows you\nhow, using typical Kubernetes cluster monitoring data.\n\nTo test out manual downsampling, follow these steps:\n\n. Check the <<downsampling-manual-prereqs,prerequisites>>.\n. <<downsampling-manual-create-index>>.\n. <<downsampling-manual-ingest-data>>.\n. <<downsampling-manual-run>>.\n. <<downsampling-manual-view-results>>.\n\n[discrete]\n[[downsampling-manual-prereqs]]\n==== Prerequisites\n\n* Refer to the <<tsds-prereqs,TSDS prerequisites>>.\n* It is not possible to downsample a <<data-streams,data stream>> directly, nor\nmultiple indices at once. It's only possible to downsample one time series index\n(TSDS backing index).\n* In order to downsample an index, it needs to be read-only. For a TSDS write\nindex, this means it needs to be rolled over and made read-only first.\n* Downsampling uses UTC timestamps.\n* Downsampling needs at least one metric field to exist in the time series\nindex.\n\n[discrete]\n[[downsampling-manual-create-index]]\n==== Create a time series data stream\n\nFirst, you'll create a TSDS. For simplicity, in the time series mapping all\n`time_series_metric` parameters are set to type `gauge`, but\n<<time-series-metric,other values>> such as `counter` and `histogram` may also\nbe used. The `time_series_metric` values determine the kind of statistical\nrepresentations that are used during downsampling.\n\nThe index template includes a set of static\n<<time-series-dimension,time series dimensions>>: `host`, `namespace`,\n`node`, and `pod`. The time series dimensions are not changed by the\ndownsampling process.\n\n[source,console]\n----\nPUT _index_template/my-data-stream-template\n{\n  \"index_patterns\": [\n    \"my-data-stream*\"\n  ],\n  \"data_stream\": {},\n  \"template\": {\n    \"settings\": {\n      \"index\": {\n        \"mode\": \"time_series\",\n        \"routing_path\": [\n          \"kubernetes.namespace\",\n          \"kubernetes.host\",\n          \"kubernetes.node\",\n          \"kubernetes.pod\"\n        ],\n        \"number_of_replicas\": 0,\n        \"number_of_shards\": 2\n      }\n    },\n    \"mappings\": {\n      \"properties\": {\n        \"@timestamp\": {\n          \"type\": \"date\"\n        },\n        \"kubernetes\": {\n          \"properties\": {\n            \"container\": {\n              \"properties\": {\n                \"cpu\": {\n                  \"properties\": {\n                    \"usage\": {\n                      \"properties\": {\n                        \"core\": {\n                          \"properties\": {\n                            \"ns\": {\n                              \"type\": \"long\"\n                            }\n                          }\n                        },\n                        \"limit\": {\n                          \"properties\": {\n                            \"pct\": {\n                              \"type\": \"float\"\n                            }\n                          }\n                        },\n                        \"nanocores\": {\n                          \"type\": \"long\",\n                          \"time_series_metric\": \"gauge\"\n                        },\n                        \"node\": {\n                          \"properties\": {\n                            \"pct\": {\n                              \"type\": \"float\"\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                },\n                \"memory\": {\n                  \"properties\": {\n                    \"available\": {\n                      \"properties\": {\n                        \"bytes\": {\n                          \"type\": \"long\",\n                          \"time_series_metric\": \"gauge\"\n                        }\n                      }\n                    },\n                    \"majorpagefaults\": {\n                      \"type\": \"long\"\n                    },\n                    \"pagefaults\": {\n                      \"type\": \"long\",\n                      \"time_series_metric\": \"gauge\"\n                    },\n                    \"rss\": {\n                      \"properties\": {\n                        \"bytes\": {\n                          \"type\": \"long\",\n                          \"time_series_metric\": \"gauge\"\n                        }\n                      }\n                    },\n                    \"usage\": {\n                      \"properties\": {\n                        \"bytes\": {\n                          \"type\": \"long\",\n                          \"time_series_metric\": \"gauge\"\n                        },\n                        \"limit\": {\n                          \"properties\": {\n                            \"pct\": {\n                              \"type\": \"float\"\n                            }\n                          }\n                        },\n                        \"node\": {\n                          \"properties\": {\n                            \"pct\": {\n                              \"type\": \"float\"\n                            }\n                          }\n                        }\n                      }\n                    },\n                    \"workingset\": {\n                      \"properties\": {\n                        \"bytes\": {\n                          \"type\": \"long\",\n                          \"time_series_metric\": \"gauge\"\n                        }\n                      }\n                    }\n                  }\n                },\n                \"name\": {\n                  \"type\": \"keyword\"\n                },\n                \"start_time\": {\n                  \"type\": \"date\"\n                }\n              }\n            },\n            \"host\": {\n              \"type\": \"keyword\",\n              \"time_series_dimension\": true\n            },\n            \"namespace\": {\n              \"type\": \"keyword\",\n              \"time_series_dimension\": true\n            },\n            \"node\": {\n              \"type\": \"keyword\",\n              \"time_series_dimension\": true\n            },\n            \"pod\": {\n              \"type\": \"keyword\",\n              \"time_series_dimension\": true\n            }\n          }\n        }\n      }\n    }\n  }\n}\n----\n\n[discrete]\n[[downsampling-manual-ingest-data]]\n==== Ingest time series data\n\nBecause time series data streams have been designed to\n<<tsds-accepted-time-range,only accept recent data>>, in this example, you'll\nuse an ingest pipeline to time-shift the data as it gets indexed. As a result,\nthe indexed data will have an `@timestamp` from the last 15 minutes.\n\nCreate the pipeline with this request:\n\n[source,console]\n----\nPUT _ingest/pipeline/my-timestamp-pipeline\n{\n  \"description\": \"Shifts the @timestamp to the last 15 minutes\",\n  \"processors\": [\n    {\n      \"set\": {\n        \"field\": \"ingest_time\",\n        \"value\": \"{{_ingest.timestamp}}\"\n      }\n    },\n    {\n      \"script\": {\n        \"lang\": \"painless\",\n        \"source\": \"\"\"\n          def delta = ChronoUnit.SECONDS.between(\n            ZonedDateTime.parse(\"2022-06-21T15:49:00Z\"),\n            ZonedDateTime.parse(ctx[\"ingest_time\"])\n          );\n          ctx[\"@timestamp\"] = ZonedDateTime.parse(ctx[\"@timestamp\"]).plus(delta,ChronoUnit.SECONDS).toString();\n        \"\"\"\n      }\n    }\n  ]\n}\n----\n// TEST[continued]\n\nNext, use a bulk API request to automatically create your TSDS and index a set\nof ten documents:\n\n[source,console]\n----\nPUT /my-data-stream/_bulk?refresh&pipeline=my-timestamp-pipeline\n{\"create\": {}}\n{\"@timestamp\":\"2022-06-21T15:49:00Z\",\"kubernetes\":{\"host\":\"gke-apps-0\",\"node\":\"gke-apps-0-0\",\"pod\":\"gke-apps-0-0-0\",\"container\":{\"cpu\":{\"usage\":{\"nanocores\":91153,\"core\":{\"ns\":12828317850},\"node\":{\"pct\":2.77905e-05},\"limit\":{\"pct\":2.77905e-05}}},\"memory\":{\"available\":{\"bytes\":463314616},\"usage\":{\"bytes\":307007078,\"node\":{\"pct\":0.01770037710617187},\"limit\":{\"pct\":9.923134671484496e-05}},\"workingset\":{\"bytes\":585236},\"rss\":{\"bytes\":102728},\"pagefaults\":120901,\"majorpagefaults\":0},\"start_time\":\"2021-03-30T07:59:06Z\",\"name\":\"container-name-44\"},\"namespace\":\"namespace26\"}}\n{\"create\": {}}\n{\"@timestamp\":\"2022-06-21T15:45:50Z\",\"kubernetes\":{\"host\":\"gke-apps-0\",\"node\":\"gke-apps-0-0\",\"pod\":\"gke-apps-0-0-0\",\"container\":{\"cpu\":{\"usage\":{\"nanocores\":124501,\"core\":{\"ns\":12828317850},\"node\":{\"pct\":2.77905e-05},\"limit\":{\"pct\":2.77905e-05}}},\"memory\":{\"available\":{\"bytes\":982546514},\"usage\":{\"bytes\":360035574,\"node\":{\"pct\":0.01770037710617187},\"limit\":{\"pct\":9.923134671484496e-05}},\"workingset\":{\"bytes\":1339884},\"rss\":{\"bytes\":381174},\"pagefaults\":178473,\"majorpagefaults\":0},\"start_time\":\"2021-03-30T07:59:06Z\",\"name\":\"container-name-44\"},\"namespace\":\"namespace26\"}}\n{\"create\": {}}\n{\"@timestamp\":\"2022-06-21T15:44:50Z\",\"kubernetes\":{\"host\":\"gke-apps-0\",\"node\":\"gke-apps-0-0\",\"pod\":\"gke-apps-0-0-0\",\"container\":{\"cpu\":{\"usage\":{\"nanocores\":38907,\"core\":{\"ns\":12828317850},\"node\":{\"pct\":2.77905e-05},\"limit\":{\"pct\":2.77905e-05}}},\"memory\":{\"available\":{\"bytes\":862723768},\"usage\":{\"bytes\":379572388,\"node\":{\"pct\":0.01770037710617187},\"limit\":{\"pct\":9.923134671484496e-05}},\"workingset\":{\"bytes\":431227},\"rss\":{\"bytes\":386580},\"pagefaults\":233166,\"majorpagefaults\":0},\"start_time\":\"2021-03-30T07:59:06Z\",\"name\":\"container-name-44\"},\"namespace\":\"namespace26\"}}\n{\"create\": {}}\n{\"@timestamp\":\"2022-06-21T15:44:40Z\",\"kubernetes\":{\"host\":\"gke-apps-0\",\"node\":\"gke-apps-0-0\",\"pod\":\"gke-apps-0-0-0\",\"container\":{\"cpu\":{\"usage\":{\"nanocores\":86706,\"core\":{\"ns\":12828317850},\"node\":{\"pct\":2.77905e-05},\"limit\":{\"pct\":2.77905e-05}}},\"memory\":{\"available\":{\"bytes\":567160996},\"usage\":{\"bytes\":103266017,\"node\":{\"pct\":0.01770037710617187},\"limit\":{\"pct\":9.923134671484496e-05}},\"workingset\":{\"bytes\":1724908},\"rss\":{\"bytes\":105431},\"pagefaults\":233166,\"majorpagefaults\":0},\"start_time\":\"2021-03-30T07:59:06Z\",\"name\":\"container-name-44\"},\"namespace\":\"namespace26\"}}\n{\"create\": {}}\n{\"@timestamp\":\"2022-06-21T15:44:00Z\",\"kubernetes\":{\"host\":\"gke-apps-0\",\"node\":\"gke-apps-0-0\",\"pod\":\"gke-apps-0-0-0\",\"container\":{\"cpu\":{\"usage\":{\"nanocores\":150069,\"core\":{\"ns\":12828317850},\"node\":{\"pct\":2.77905e-05},\"limit\":{\"pct\":2.77905e-05}}},\"memory\":{\"available\":{\"bytes\":639054643},\"usage\":{\"bytes\":265142477,\"node\":{\"pct\":0.01770037710617187},\"limit\":{\"pct\":9.923134671484496e-05}},\"workingset\":{\"bytes\":1786511},\"rss\":{\"bytes\":189235},\"pagefaults\":138172,\"majorpagefaults\":0},\"start_time\":\"2021-03-30T07:59:06Z\",\"name\":\"container-name-44\"},\"namespace\":\"namespace26\"}}\n{\"create\": {}}\n{\"@timestamp\":\"2022-06-21T15:42:40Z\",\"kubernetes\":{\"host\":\"gke-apps-0\",\"node\":\"gke-apps-0-0\",\"pod\":\"gke-apps-0-0-0\",\"container\":{\"cpu\":{\"usage\":{\"nanocores\":82260,\"core\":{\"ns\":12828317850},\"node\":{\"pct\":2.77905e-05},\"limit\":{\"pct\":2.77905e-05}}},\"memory\":{\"available\":{\"bytes\":854735585},\"usage\":{\"bytes\":309798052,\"node\":{\"pct\":0.01770037710617187},\"limit\":{\"pct\":9.923134671484496e-05}},\"workingset\":{\"bytes\":924058},\"rss\":{\"bytes\":110838},\"pagefaults\":259073,\"majorpagefaults\":0},\"start_time\":\"2021-03-30T07:59:06Z\",\"name\":\"container-name-44\"},\"namespace\":\"namespace26\"}}\n{\"create\": {}}\n{\"@timestamp\":\"2022-06-21T15:42:10Z\",\"kubernetes\":{\"host\":\"gke-apps-0\",\"node\":\"gke-apps-0-0\",\"pod\":\"gke-apps-0-0-0\",\"container\":{\"cpu\":{\"usage\":{\"nanocores\":153404,\"core\":{\"ns\":12828317850},\"node\":{\"pct\":2.77905e-05},\"limit\":{\"pct\":2.77905e-05}}},\"memory\":{\"available\":{\"bytes\":279586406},\"usage\":{\"bytes\":214904955,\"node\":{\"pct\":0.01770037710617187},\"limit\":{\"pct\":9.923134671484496e-05}},\"workingset\":{\"bytes\":1047265},\"rss\":{\"bytes\":91914},\"pagefaults\":302252,\"majorpagefaults\":0},\"start_time\":\"2021-03-30T07:59:06Z\",\"name\":\"container-name-44\"},\"namespace\":\"namespace26\"}}\n{\"create\": {}}\n{\"@timestamp\":\"2022-06-21T15:40:20Z\",\"kubernetes\":{\"host\":\"gke-apps-0\",\"node\":\"gke-apps-0-0\",\"pod\":\"gke-apps-0-0-0\",\"container\":{\"cpu\":{\"usage\":{\"nanocores\":125613,\"core\":{\"ns\":12828317850},\"node\":{\"pct\":2.77905e-05},\"limit\":{\"pct\":2.77905e-05}}},\"memory\":{\"available\":{\"bytes\":822782853},\"usage\":{\"bytes\":100475044,\"node\":{\"pct\":0.01770037710617187},\"limit\":{\"pct\":9.923134671484496e-05}},\"workingset\":{\"bytes\":2109932},\"rss\":{\"bytes\":278446},\"pagefaults\":74843,\"majorpagefaults\":0},\"start_time\":\"2021-03-30T07:59:06Z\",\"name\":\"container-name-44\"},\"namespace\":\"namespace26\"}}\n{\"create\": {}}\n{\"@timestamp\":\"2022-06-21T15:40:10Z\",\"kubernetes\":{\"host\":\"gke-apps-0\",\"node\":\"gke-apps-0-0\",\"pod\":\"gke-apps-0-0-0\",\"container\":{\"cpu\":{\"usage\":{\"nanocores\":100046,\"core\":{\"ns\":12828317850},\"node\":{\"pct\":2.77905e-05},\"limit\":{\"pct\":2.77905e-05}}},\"memory\":{\"available\":{\"bytes\":567160996},\"usage\":{\"bytes\":362826547,\"node\":{\"pct\":0.01770037710617187},\"limit\":{\"pct\":9.923134671484496e-05}},\"workingset\":{\"bytes\":1986724},\"rss\":{\"bytes\":402801},\"pagefaults\":296495,\"majorpagefaults\":0},\"start_time\":\"2021-03-30T07:59:06Z\",\"name\":\"container-name-44\"},\"namespace\":\"namespace26\"}}\n{\"create\": {}}\n{\"@timestamp\":\"2022-06-21T15:38:30Z\",\"kubernetes\":{\"host\":\"gke-apps-0\",\"node\":\"gke-apps-0-0\",\"pod\":\"gke-apps-0-0-0\",\"container\":{\"cpu\":{\"usage\":{\"nanocores\":40018,\"core\":{\"ns\":12828317850},\"node\":{\"pct\":2.77905e-05},\"limit\":{\"pct\":2.77905e-05}}},\"memory\":{\"available\":{\"bytes\":1062428344},\"usage\":{\"bytes\":265142477,\"node\":{\"pct\":0.01770037710617187},\"limit\":{\"pct\":9.923134671484496e-05}},\"workingset\":{\"bytes\":2294743},\"rss\":{\"bytes\":340623},\"pagefaults\":224530,\"majorpagefaults\":0},\"start_time\":\"2021-03-30T07:59:06Z\",\"name\":\"container-name-44\"},\"namespace\":\"namespace26\"}}\n----\n// TEST[continued]\n\nYou can use the search API to check if the documents have been indexed\ncorrectly:\n\n[source,console]\n----\nGET /my-data-stream/_search\n----\n// TEST[continued]\n\nRun the following aggregation on the data to calculate some interesting\nstatistics:\n\n[source,console]\n----\nGET /my-data-stream/_search\n{\n    \"size\": 0,\n    \"aggs\": {\n        \"tsid\": {\n            \"terms\": {\n                \"field\": \"_tsid\"\n            },\n            \"aggs\": {\n                \"over_time\": {\n                    \"date_histogram\": {\n                        \"field\": \"@timestamp\",\n                        \"fixed_interval\": \"1d\"\n                    },\n                    \"aggs\": {\n                        \"min\": {\n                            \"min\": {\n                                \"field\": \"kubernetes.container.memory.usage.bytes\"\n                            }\n                        },\n                        \"max\": {\n                            \"max\": {\n                                \"field\": \"kubernetes.container.memory.usage.bytes\"\n                            }\n                        },\n                        \"avg\": {\n                            \"avg\": {\n                                \"field\": \"kubernetes.container.memory.usage.bytes\"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n----\n// TEST[continued]\n\n[discrete]\n[[downsampling-manual-run]]\n==== Downsample the TSDS\n\nA TSDS can't be downsampled directly. You need to downsample its backing indices\ninstead. You can see the backing index for your data stream by running:\n\n[source,console]\n----\nGET /_data_stream/my-data-stream\n----\n// TEST[continued]\n\nThis returns:\n\n[source,console-result]\n----\n{\n  \"data_streams\": [\n    {\n      \"name\": \"my-data-stream\",\n      \"timestamp_field\": {\n        \"name\": \"@timestamp\"\n      },\n      \"indices\": [\n        {\n          \"index_name\": \".ds-my-data-stream-2023.07.26-000001\", <1>\n          \"index_uuid\": \"ltOJGmqgTVm4T-Buoe7Acg\",\n          \"prefer_ilm\": true,\n          \"managed_by\": \"Unmanaged\"\n        }\n      ],\n      \"generation\": 1,\n      \"status\": \"GREEN\",\n      \"next_generation_managed_by\": \"Unmanaged\",\n      \"prefer_ilm\": true,\n      \"template\": \"my-data-stream-template\",\n      \"hidden\": false,\n      \"system\": false,\n      \"allow_custom_routing\": false,\n      \"replicated\": false,\n      \"rollover_on_write\": false,\n      \"time_series\": {\n        \"temporal_ranges\": [\n          {\n            \"start\": \"2023-07-26T09:26:42.000Z\",\n            \"end\": \"2023-07-26T13:26:42.000Z\"\n          }\n        ]\n      }\n    }\n  ]\n}\n----\n// TESTRESPONSE[s/\".ds-my-data-stream-2023.07.26-000001\"/$body.data_streams.0.indices.0.index_name/]\n// TESTRESPONSE[s/\"ltOJGmqgTVm4T-Buoe7Acg\"/$body.data_streams.0.indices.0.index_uuid/]\n// TESTRESPONSE[s/\"2023-07-26T09:26:42.000Z\"/$body.data_streams.0.time_series.temporal_ranges.0.start/]\n// TESTRESPONSE[s/\"2023-07-26T13:26:42.000Z\"/$body.data_streams.0.time_series.temporal_ranges.0.end/]\n// TESTRESPONSE[s/\"replicated\": false/\"replicated\": false,\"failure_store\":{\"enabled\": false, \"indices\": [], \"rollover_on_write\": true}/]\n<1> The backing index for this data stream.\n\nBefore a backing index can be downsampled, the TSDS needs to be rolled over and\nthe old index needs to be made read-only.\n\nRoll over the TSDS using the <<indices-rollover-index,rollover API>>:\n\n[source,console]\n----\nPOST /my-data-stream/_rollover/\n----\n// TEST[continued]\n\nCopy the name of the `old_index` from the response. In the following steps,\nreplace the index name with that of your `old_index`.\n\nThe old index needs to be set to read-only mode. Run the following request:\n\n[source,console]\n----\nPUT /.ds-my-data-stream-2023.07.26-000001/_block/write\n----\n// TEST[skip:We don't know the index name at test time]\n\nNext, use the <<indices-downsample-data-stream,downsample API>> to downsample\nthe index, setting the time series interval to one hour:\n\n[source,console]\n----\nPOST /.ds-my-data-stream-2023.07.26-000001/_downsample/.ds-my-data-stream-2023.07.26-000001-downsample\n{\n  \"fixed_interval\": \"1h\"\n}\n----\n// TEST[skip:We don't know the index name at test time]\n\nNow you can <<modify-data-streams-api,modify the data stream>>, and replace the\noriginal index with the downsampled one:\n\n[source,console]\n----\nPOST _data_stream/_modify\n{\n  \"actions\": [\n    {\n      \"remove_backing_index\": {\n        \"data_stream\": \"my-data-stream\",\n        \"index\": \".ds-my-data-stream-2023.07.26-000001\"\n      }\n    },\n    {\n      \"add_backing_index\": {\n        \"data_stream\": \"my-data-stream\",\n        \"index\": \".ds-my-data-stream-2023.07.26-000001-downsample\"\n      }\n    }\n  ]\n}\n----\n// TEST[skip:We don't know the index name at test time]\n\nYou can now delete the old backing index. But be aware this will delete the\noriginal data. Don't delete the index if you may need the original data in the\nfuture.\n\n[discrete]\n[[downsampling-manual-view-results]]\n==== View the results\n\nRe-run the earlier search query (note that when querying downsampled indices\nthere are <<querying-downsampled-indices-notes,a few nuances to be aware of>>):\n\n[source,console]\n----\nGET /my-data-stream/_search\n----\n// TEST[skip:Because we've skipped the previous steps]\n\nThe TSDS with the new downsampled backing index contains just one document. For\ncounters, this document would only have the last value. For gauges, the field\ntype is now `aggregate_metric_double`. You see the `min`, `max`, `sum`, and\n`value_count` statistics based off of the original sampled metrics:\n\n[source,console-result]\n----\n{\n  \"took\": 2,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 4,\n    \"successful\": 4,\n    \"skipped\": 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\": {\n      \"value\": 1,\n      \"relation\": \"eq\"\n    },\n    \"max_score\": 1,\n    \"hits\": [\n      {\n        \"_index\": \".ds-my-data-stream-2023.07.26-000001-downsample\",\n        \"_id\": \"0eL0wC_4-45SnTNFAAABiZHbD4A\",\n        \"_score\": 1,\n        \"_source\": {\n          \"@timestamp\": \"2023-07-26T11:00:00.000Z\",\n          \"_doc_count\": 10,\n          \"ingest_time\": \"2023-07-26T11:26:42.715Z\",\n          \"kubernetes\": {\n            \"container\": {\n              \"cpu\": {\n                \"usage\": {\n                  \"core\": {\n                    \"ns\": 12828317850\n                  },\n                  \"limit\": {\n                    \"pct\": 0.0000277905\n                  },\n                  \"nanocores\": {\n                    \"min\": 38907,\n                    \"max\": 153404,\n                    \"sum\": 992677,\n                    \"value_count\": 10\n                  },\n                  \"node\": {\n                    \"pct\": 0.0000277905\n                  }\n                }\n              },\n              \"memory\": {\n                \"available\": {\n                  \"bytes\": {\n                    \"min\": 279586406,\n                    \"max\": 1062428344,\n                    \"sum\": 7101494721,\n                    \"value_count\": 10\n                  }\n                },\n                \"majorpagefaults\": 0,\n                \"pagefaults\": {\n                  \"min\": 74843,\n                  \"max\": 302252,\n                  \"sum\": 2061071,\n                  \"value_count\": 10\n                },\n                \"rss\": {\n                  \"bytes\": {\n                    \"min\": 91914,\n                    \"max\": 402801,\n                    \"sum\": 2389770,\n                    \"value_count\": 10\n                  }\n                },\n                \"usage\": {\n                  \"bytes\": {\n                    \"min\": 100475044,\n                    \"max\": 379572388,\n                    \"sum\": 2668170609,\n                    \"value_count\": 10\n                  },\n                  \"limit\": {\n                    \"pct\": 0.00009923134\n                  },\n                  \"node\": {\n                    \"pct\": 0.017700378\n                  }\n                },\n                \"workingset\": {\n                  \"bytes\": {\n                    \"min\": 431227,\n                    \"max\": 2294743,\n                    \"sum\": 14230488,\n                    \"value_count\": 10\n                  }\n                }\n              },\n              \"name\": \"container-name-44\",\n              \"start_time\": \"2021-03-30T07:59:06.000Z\"\n            },\n            \"host\": \"gke-apps-0\",\n            \"namespace\": \"namespace26\",\n            \"node\": \"gke-apps-0-0\",\n            \"pod\": \"gke-apps-0-0-0\"\n          }\n        }\n      }\n    ]\n  }\n}\n----\n// TEST[skip:Because we've skipped the previous step]\n\nRe-run the earlier aggregation. Even though the aggregation runs on the\ndownsampled TSDS that only contains 1 document, it returns the same results as\nthe earlier aggregation on the original TSDS.\n\n[source,console]\n----\nGET /my-data-stream/_search\n{\n    \"size\": 0,\n    \"aggs\": {\n        \"tsid\": {\n            \"terms\": {\n                \"field\": \"_tsid\"\n            },\n            \"aggs\": {\n                \"over_time\": {\n                    \"date_histogram\": {\n                        \"field\": \"@timestamp\",\n                        \"fixed_interval\": \"1d\"\n                    },\n                    \"aggs\": {\n                        \"min\": {\n                            \"min\": {\n                                \"field\": \"kubernetes.container.memory.usage.bytes\"\n                            }\n                        },\n                        \"max\": {\n                            \"max\": {\n                                \"field\": \"kubernetes.container.memory.usage.bytes\"\n                            }\n                        },\n                        \"avg\": {\n                            \"avg\": {\n                                \"field\": \"kubernetes.container.memory.usage.bytes\"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n----\n// TEST[skip:Because we've skipped the previous steps]\n\nThis example demonstrates how downsampling can dramatically reduce the number of\ndocuments stored for time series data, within whatever time boundaries you\nchoose. It's also possible to perform downsampling on already downsampled data,\nto further reduce storage and associated costs, as the time series data ages and\nthe data resolution becomes less critical.\n\nThe recommended way to downsample a TSDS is with ILM. To learn more, try the\n<<downsampling-ilm,Run downsampling with ILM>> example.\n"
}