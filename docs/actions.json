{
    "meta": {
        "timestamp": "2024-11-01T03:07:08.714278",
        "size": 11014,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/actions.html",
        "type": "documentation",
        "role": [
            "xpack",
            "xpack",
            "xpack"
        ],
        "has_code": true,
        "title": "actions",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[actions]]\n== {watcher} actions\n++++\n<titleabbrev>Actions</titleabbrev>\n++++\n\nWhen a watch's condition is met, its actions are executed unless it is being\n<<actions-ack-throttle,throttled>>. A watch can perform multiple actions.\nThe actions are executed one at a time and each action executes independently.\nAny failures encountered while executing an action are recorded in the\naction result and in the watch history.\n\nNOTE:\tIf no actions are defined for a watch, no actions are executed.\n        However, a `watch_record` is still written to the watch history.\n\nActions have access to the payload in the execution context. They can use it to\nsupport their execution in any way they need. For example, the payload might\nserve as a model for a templated email body.\n\n{watcher} supports the following actions:\n\n* <<actions-email,`email`>>\n* <<actions-webhook,`webhook`>>\n* <<actions-index,`index`>>\n* <<actions-logging,`logging`>>\n* <<actions-slack,`slack`>>\n* <<actions-pagerduty,`pagerduty`>>\n* <<actions-jira,`jira`>>\n\n[discrete]\n[[actions-ack-throttle]]\n=== Acknowledgement and throttling\n\nDuring the watch execution, once the condition is met, a decision is made per\nconfigured action as to whether it should be throttled. The main purpose of\naction throttling is to prevent too many executions of the same action for the\nsame watch.\n\nFor example, suppose you have a watch that detects errors in an application's log\nentries. The watch is triggered every five minutes and searches for errors during\nthe last hour. In this case, if there are errors, there is a period of time where\nthe watch is checked and its actions are executed multiple times based on the same\nerrors. As a result, the system administrator receives multiple notifications about\nthe same issue, which can be annoying.\n\nTo address this issue, {watcher} supports time-based throttling. You can define\na throttling period as part of the action configuration to limit how often the\naction is executed. When you set a throttling period, {watcher} prevents repeated\nexecution of the action if it has already executed within the throttling period\ntime frame (`now - throttling period`).\n\nThe following snippet shows a watch for the scenario described above - associating\na throttle period with the `email_administrator` action:\n\n[source,console]\n--------------------------------------------------\nPUT _watcher/watch/error_logs_alert\n{\n  \"metadata\" : {\n    \"color\" : \"red\"\n  },\n  \"trigger\" : {\n    \"schedule\" : {\n      \"interval\" : \"5m\"\n    }\n  },\n  \"input\" : {\n    \"search\" : {\n      \"request\" : {\n        \"indices\" : \"log-events\",\n        \"body\" : {\n          \"size\" : 0,\n          \"query\" : { \"match\" : { \"status\" : \"error\" } }\n        }\n      }\n    }\n  },\n  \"condition\" : {\n    \"compare\" : { \"ctx.payload.hits.total\" : { \"gt\" : 5 }}\n  },\n  \"actions\" : {\n    \"email_administrator\" : {\n      \"throttle_period\": \"15m\", <1>\n      \"email\" : { <2>\n        \"to\" : \"sys.admino@host.domain\",\n        \"subject\" : \"Encountered {{ctx.payload.hits.total}} errors\",\n        \"body\" : \"Too many error in the system, see attached data\",\n        \"attachments\" : {\n          \"attached_data\" : {\n            \"data\" : {\n              \"format\" : \"json\"\n            }\n          }\n        },\n        \"priority\" : \"high\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n<1> There will be at least 15 minutes between subsequent `email_administrator`\n\t\taction executions.\n<2> See <<actions-email>> for more information.\n\nYou can also define a throttle period at the watch level. The watch-level\nthrottle period serves as the default throttle period for all of the actions\ndefined in the watch:\n\n[source,console]\n--------------------------------------------------\nPUT _watcher/watch/log_event_watch\n{\n  \"trigger\" : {\n    \"schedule\" : { \"interval\" : \"5m\" }\n  },\n  \"input\" : {\n    \"search\" : {\n      \"request\" : {\n        \"indices\" : \"log-events\",\n        \"body\" : {\n          \"size\" : 0,\n          \"query\" : { \"match\" : { \"status\" : \"error\" } }\n        }\n      }\n    }\n  },\n  \"condition\" : {\n    \"compare\" : { \"ctx.payload.hits.total\" : { \"gt\" : 5 }}\n  },\n  \"throttle_period\" : \"15m\", <1>\n  \"actions\" : {\n    \"email_administrator\" : {\n      \"email\" : {\n        \"to\" : \"sys.admino@host.domain\",\n        \"subject\" : \"Encountered {{ctx.payload.hits.total}} errors\",\n        \"body\" : \"Too many error in the system, see attached data\",\n        \"attachments\" : {\n          \"attached_data\" : {\n            \"data\" : {\n              \"format\" : \"json\"\n            }\n          }\n        },\n        \"priority\" : \"high\"\n      }\n    },\n    \"notify_pager\" : {\n      \"webhook\" : {\n        \"method\" : \"POST\",\n        \"host\" : \"pager.service.domain\",\n        \"port\" : 1234,\n        \"path\" : \"/{{watch_id}}\",\n        \"body\" : \"Encountered {{ctx.payload.hits.total}} errors\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n<1> There will be at least 15 minutes between subsequent action executions\n\t\t(applies to both `email_administrator` and `notify_pager` actions)\n\nIf you do not define a throttle period at the action or watch level, the global\ndefault throttle period is applied. Initially, this is set to 5 seconds. To\nchange the global default, configure the `xpack.watcher.execution.default_throttle_period`\nsetting in `elasticsearch.yml`:\n\n[source,yaml]\n--------------------------------------------------\nxpack.watcher.execution.default_throttle_period: 15m\n--------------------------------------------------\n\n{watcher} also supports acknowledgement-based throttling. You can acknowledge a\nwatch using the <<watcher-api-ack-watch,ack watch API>> to prevent the\nwatch actions from being executed again while the watch condition remains `true`.\nThis essentially tells {watcher} \"I received the notification and I'm handling\nit, please do not notify me about this error again\". An acknowledged watch action\nremains in the `acked` state until the watch's condition evaluates to `false`.\nWhen that happens, the action's state changes to `awaits_successful_execution`.\n\nTo acknowledge an action, you use the <<watcher-api-ack-watch,ack watch API>>:\n\n[source,console]\n----------------------------------------------------------------------\nPOST _watcher/watch/<id>/_ack/<action_ids>\n----------------------------------------------------------------------\n// TEST[skip:https://github.com/elastic/x-plugins/issues/2513]\n\nWhere `<id>` is the id of the watch and `<action_ids>` is a comma-separated list\nof the action ids you want to acknowledge. To acknowledge all actions, omit the\n`actions` parameter.\n\nThe following diagram illustrates the throttling decisions made for each action\nof a watch during its execution:\n\nimage::images/action-throttling.jpg[align=\"center\"]\n\n[discrete]\n[[actions-ssl-openjdk]]\n=== Using SSL/TLS with OpenJDK\n\nAs each distributor is free to choose how to package OpenJDK, it may happen,\nthat even despite the exact same version, an OpenJDK distribution contains\ndifferent parts under different Linux distributions.\n\nThis can lead to issues with any action or input that uses TLS, like the `jira`,\n`pagerduty`, `slack`, or `webhook` one, because of missing CA certs.\nIf you encounter TLS errors, when writing watches that connect to TLS endpoints,\nyou should try to upgrade to the latest available OpenJDK distribution for your\nplatform and if that does not help, try to upgrade to Oracle JDK.\n\n\n[role=\"xpack\"]\n[[action-foreach]]\n=== Running an action for each element in an array\n\nYou can use the `foreach` field in an action to trigger the configured action\nfor every element within that array.\n\nIn order to protect from long running watches, you can use the `max_iterations` \nfield to limit the maximum amount of runs that each watch executes. If this limit \nis reached, the execution is gracefully stopped. If not set, this field defaults \nto one hundred.\n\n[source,console]\n--------------------------------------------------\nPUT _watcher/watch/log_event_watch\n{\n  \"trigger\" : {\n    \"schedule\" : { \"interval\" : \"5m\" }\n  },\n  \"input\" : {\n    \"search\" : {\n      \"request\" : {\n        \"indices\" : \"log-events\",\n        \"body\" : {\n          \"query\" : { \"match\" : { \"status\" : \"error\" } }\n        }\n      }\n    }\n  },\n  \"condition\" : {\n    \"compare\" : { \"ctx.payload.hits.total\" : { \"gt\" : 0 } }\n  },\n  \"actions\" : {\n    \"log_hits\" : {\n      \"foreach\" : \"ctx.payload.hits.hits\", <1>\n      \"max_iterations\" : 500,\n      \"logging\" : {\n        \"text\" : \"Found id {{ctx.payload._id}} with field {{ctx.payload._source.my_field}}\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n<1> The logging statement will be executed for each of the returned search hits.\n\n[role=\"xpack\"]\n[[action-conditions]]\n=== Adding conditions to {watcher} actions\n++++\n<titleabbrev>Adding conditions to actions</titleabbrev>\n++++\n\nWhen a watch is triggered, its condition determines whether or not to execute the\nwatch actions. Within each action, you can also add a condition per action. These\nadditional conditions enable a single alert to execute different actions depending\non a their respective conditions. The following watch would always send an email, when\nhits are found from the input search, but only trigger the `notify_pager` action when\nthere are more than 5 hits in the search result.\n\n[source,console]\n--------------------------------------------------\nPUT _watcher/watch/log_event_watch\n{\n  \"trigger\" : {\n    \"schedule\" : { \"interval\" : \"5m\" }\n  },\n  \"input\" : {\n    \"search\" : {\n      \"request\" : {\n        \"indices\" : \"log-events\",\n        \"body\" : {\n          \"size\" : 0,\n          \"query\" : { \"match\" : { \"status\" : \"error\" } }\n        }\n      }\n    }\n  },\n  \"condition\" : {\n    \"compare\" : { \"ctx.payload.hits.total\" : { \"gt\" : 0 } }\n  },\n  \"actions\" : {\n    \"email_administrator\" : {\n      \"email\" : {\n        \"to\" : \"sys.admino@host.domain\",\n        \"subject\" : \"Encountered {{ctx.payload.hits.total}} errors\",\n        \"body\" : \"Too many error in the system, see attached data\",\n        \"attachments\" : {\n          \"attached_data\" : {\n            \"data\" : {\n              \"format\" : \"json\"\n            }\n          }\n        },\n        \"priority\" : \"high\"\n      }\n    },\n    \"notify_pager\" : {\n      \"condition\": { <1>\n        \"compare\" : { \"ctx.payload.hits.total\" : { \"gt\" : 5 } }\n      },\n      \"webhook\" : {\n        \"method\" : \"POST\",\n        \"host\" : \"pager.service.domain\",\n        \"port\" : 1234,\n        \"path\" : \"/{{watch_id}}\",\n        \"body\" : \"Encountered {{ctx.payload.hits.total}} errors\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n<1> A `condition` that only applies to the `notify_pager` action, which\n    restricts its execution to when the condition succeeds (at least 5 hits in this case).\n\n\ninclude::actions/email.asciidoc[]\n\ninclude::actions/webhook.asciidoc[]\n\ninclude::actions/index.asciidoc[]\n\ninclude::actions/logging.asciidoc[]\n\ninclude::actions/slack.asciidoc[]\n\ninclude::actions/pagerduty.asciidoc[]\n\ninclude::actions/jira.asciidoc[]\n\n"
}