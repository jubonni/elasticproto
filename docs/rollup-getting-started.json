{
    "meta": {
        "size": 11415,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-getting-started.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "rollup-getting-started",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[rollup-getting-started]]\n=== Getting started with {rollups}\n++++\n<titleabbrev>Getting started</titleabbrev>\n++++\n\ndeprecated::[8.11.0,\"Rollups will be removed in a future version. Please <<rollup-migrating-to-downsampling,migrate>> to <<downsampling,downsampling>> instead.\"]\n\nWARNING: From 8.15.0 invoking the put job API in a cluster with no rollup usage will fail with a message about Rollup's\ndeprecation and planned removal. A cluster either needs to contain a rollup job or a rollup index in order for the\nput job API to be allowed to execute.\n\nTo use the Rollup feature, you need to create one or more \"Rollup Jobs\". These jobs run continuously in the background\nand rollup the index or indices that you specify, placing the rolled documents in a secondary index (also of your choosing).\n\nImagine you have a series of daily indices that hold sensor data (`sensor-2017-01-01`, `sensor-2017-01-02`, etc). A sample document might\nlook like this:\n\n[source,js]\n--------------------------------------------------\n{\n  \"timestamp\": 1516729294000,\n  \"temperature\": 200,\n  \"voltage\": 5.2,\n  \"node\": \"a\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\n[discrete]\n==== Creating a rollup job\n\nWe'd like to rollup these documents into hourly summaries, which will allow us to generate reports and dashboards with any time interval\none hour or greater. A rollup job might look like this:\n\n[source,console]\n--------------------------------------------------\nPUT _rollup/job/sensor\n{\n  \"index_pattern\": \"sensor-*\",\n  \"rollup_index\": \"sensor_rollup\",\n  \"cron\": \"*/30 * * * * ?\",\n  \"page_size\": 1000,\n  \"groups\": {\n    \"date_histogram\": {\n      \"field\": \"timestamp\",\n      \"fixed_interval\": \"60m\"\n    },\n    \"terms\": {\n      \"fields\": [ \"node\" ]\n    }\n  },\n  \"metrics\": [\n    {\n      \"field\": \"temperature\",\n      \"metrics\": [ \"min\", \"max\", \"sum\" ]\n    },\n    {\n      \"field\": \"voltage\",\n      \"metrics\": [ \"avg\" ]\n    }\n  ]\n}\n--------------------------------------------------\n// TEST[setup:sensor_index]\n\nWe give the job the ID of \"sensor\" (in the url: `PUT _rollup/job/sensor`), and tell it to rollup the index pattern `\"sensor-*\"`.\nThis job will find and rollup any index that matches that pattern. Rollup summaries are then stored in the `\"sensor_rollup\"` index.\n\nThe `cron` parameter controls when and how often the job activates. When a rollup job's cron schedule triggers, it will begin rolling up\nfrom where it left off after the last activation. So if you configure the cron to run every 30 seconds, the job will process the last 30\nseconds worth of data that was indexed into the `sensor-*` indices.\n\nIf instead the cron was configured to run once a day at midnight, the job would process the last 24 hours worth of data. The choice is largely\npreference, based on how \"realtime\" you want the rollups, and if you wish to process continuously or move it to off-peak hours.\n\nNext, we define a set of `groups`. Essentially, we are defining the dimensions\nthat we wish to pivot on at a later date when querying the data. The grouping in\nthis job allows us to use `date_histogram` aggregations on the `timestamp` field,\nrolled up at hourly intervals. It also allows us to run terms aggregations on\nthe `node` field.\n\n.Date histogram interval vs cron schedule\n**********************************\nYou'll note that the job's cron is configured to run every 30 seconds, but the date_histogram is configured to\nrollup at 60 minute intervals. How do these relate?\n\nThe date_histogram controls the granularity of the saved data. Data will be rolled up into hourly intervals, and you will be unable\nto query with finer granularity. The cron simply controls when the process looks for new data to rollup. Every 30 seconds it will see\nif there is a new hour's worth of data and roll it up. If not, the job goes back to sleep.\n\nOften, it doesn't make sense to define such a small cron (30s) on a large interval (1h), because the majority of the activations will\nsimply go back to sleep. But there's nothing wrong with it either, the job will do the right thing.\n\n**********************************\n\nAfter defining which groups should be generated for the data, you next configure\nwhich metrics should be collected. By default, only the `doc_counts` are\ncollected for each group. To make rollup useful, you will often add metrics\nlike averages, mins, maxes, etc. In this example, the metrics are fairly\nstraightforward: we want to save the min/max/sum of the `temperature`\nfield, and the average of the `voltage` field.\n\n.Averages aren't composable?!\n**********************************\nIf you've worked with rollups before, you may be cautious around averages. If an\naverage is saved for a 10 minute interval, it usually isn't useful for larger\nintervals. You cannot average six 10-minute averages to find a hourly average;\nthe average of averages is not equal to the total average.\n\nFor this reason, other systems tend to either omit the ability to average or\nstore the average at multiple intervals to support more flexible querying.\n\nInstead, the {rollup-features} save the `count` and `sum` for the defined time\ninterval. This allows us to reconstruct the average at any interval greater-than\nor equal to the defined interval. This gives maximum flexibility for minimal\nstorage costs... and you don't have to worry about average accuracies (no\naverage of averages here!)\n**********************************\n\nFor more details about the job syntax, see <<rollup-put-job>>.\n\nAfter you execute the above command and create the job, you'll receive the following response:\n\n[source,console-result]\n----\n{\n  \"acknowledged\": true\n}\n----\n\n[discrete]\n==== Starting the job\n\nAfter the job is created, it will be sitting in an inactive state. Jobs need to be started before they begin processing data (this allows\nyou to stop them later as a way to temporarily pause, without deleting the configuration).\n\nTo start the job, execute this command:\n\n[source,console]\n--------------------------------------------------\nPOST _rollup/job/sensor/_start\n--------------------------------------------------\n// TEST[setup:sensor_rollup_job]\n\n[discrete]\n==== Searching the rolled results\n\nAfter the job has run and processed some data, we can use the <<rollup-search>> endpoint to do some searching. The Rollup feature is designed\nso that you can use the same Query DSL syntax that you are accustomed to... it just happens to run on the rolled up data instead.\n\nFor example, take this query:\n\n[source,console]\n--------------------------------------------------\nGET /sensor_rollup/_rollup_search\n{\n  \"size\": 0,\n  \"aggregations\": {\n    \"max_temperature\": {\n      \"max\": {\n        \"field\": \"temperature\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[setup:sensor_prefab_data]\n\nIt's a simple aggregation that calculates the maximum of the `temperature` field. But you'll notice that it is being sent to the `sensor_rollup`\nindex instead of the raw `sensor-*` indices. And you'll also notice that it is using the `_rollup_search` endpoint. Otherwise the syntax\nis exactly as you'd expect.\n\nIf you were to execute that query, you'd receive a result that looks like a normal aggregation response:\n\n[source,console-result]\n----\n{\n  \"took\" : 102,\n  \"timed_out\" : false,\n  \"terminated_early\" : false,\n  \"_shards\" : ... ,\n  \"hits\" : {\n    \"total\" : {\n        \"value\": 0,\n        \"relation\": \"eq\"\n    },\n    \"max_score\" : 0.0,\n    \"hits\" : [ ]\n  },\n  \"aggregations\" : {\n    \"max_temperature\" : {\n      \"value\" : 202.0\n    }\n  }\n}\n----\n// TESTRESPONSE[s/\"took\" : 102/\"took\" : $body.$_path/]\n// TESTRESPONSE[s/\"_shards\" : \\.\\.\\. /\"_shards\" : $body.$_path/]\n\nThe only notable difference is that Rollup search results have zero `hits`, because we aren't really searching the original, live data any\nmore. Otherwise it's identical syntax.\n\nThere are a few interesting takeaways here. Firstly, even though the data was rolled up with hourly intervals and partitioned by\nnode name, the query we ran is just calculating the max temperature across all documents. The `groups` that were configured in the job\nare not mandatory elements of a query, they are just extra dimensions you can partition on. Second, the request and response syntax\nis nearly identical to normal DSL, making it easy to integrate into dashboards and applications.\n\nFinally, we can use those grouping fields we defined to construct a more complicated query:\n\n[source,console]\n--------------------------------------------------\nGET /sensor_rollup/_rollup_search\n{\n  \"size\": 0,\n  \"aggregations\": {\n    \"timeline\": {\n      \"date_histogram\": {\n        \"field\": \"timestamp\",\n        \"fixed_interval\": \"7d\"\n      },\n      \"aggs\": {\n        \"nodes\": {\n          \"terms\": {\n            \"field\": \"node\"\n          },\n          \"aggs\": {\n            \"max_temperature\": {\n              \"max\": {\n                \"field\": \"temperature\"\n              }\n            },\n            \"avg_voltage\": {\n              \"avg\": {\n                \"field\": \"voltage\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[setup:sensor_prefab_data]\n\nWhich returns a corresponding response:\n\n[source,console-result]\n----\n{\n   \"took\" : 93,\n   \"timed_out\" : false,\n   \"terminated_early\" : false,\n   \"_shards\" : ... ,\n   \"hits\" : {\n     \"total\" : {\n        \"value\": 0,\n        \"relation\": \"eq\"\n     },\n     \"max_score\" : 0.0,\n     \"hits\" : [ ]\n   },\n   \"aggregations\" : {\n     \"timeline\" : {\n       \"buckets\" : [\n         {\n           \"key_as_string\" : \"2018-01-18T00:00:00.000Z\",\n           \"key\" : 1516233600000,\n           \"doc_count\" : 6,\n           \"nodes\" : {\n             \"doc_count_error_upper_bound\" : 0,\n             \"sum_other_doc_count\" : 0,\n             \"buckets\" : [\n               {\n                 \"key\" : \"a\",\n                 \"doc_count\" : 2,\n                 \"max_temperature\" : {\n                   \"value\" : 202.0\n                 },\n                 \"avg_voltage\" : {\n                   \"value\" : 5.1499998569488525\n                 }\n               },\n               {\n                 \"key\" : \"b\",\n                 \"doc_count\" : 2,\n                 \"max_temperature\" : {\n                   \"value\" : 201.0\n                 },\n                 \"avg_voltage\" : {\n                   \"value\" : 5.700000047683716\n                 }\n               },\n               {\n                 \"key\" : \"c\",\n                 \"doc_count\" : 2,\n                 \"max_temperature\" : {\n                   \"value\" : 202.0\n                 },\n                 \"avg_voltage\" : {\n                   \"value\" : 4.099999904632568\n                 }\n               }\n             ]\n           }\n         }\n       ]\n     }\n   }\n}\n\n----\n// TESTRESPONSE[s/\"took\" : 93/\"took\" : $body.$_path/]\n// TESTRESPONSE[s/\"_shards\" : \\.\\.\\. /\"_shards\" : $body.$_path/]\n\nIn addition to being more complicated (date histogram and a terms aggregation, plus an additional average metric), you'll notice\nthe date_histogram uses a `7d` interval instead of `60m`.\n\n[discrete]\n==== Conclusion\n\nThis quickstart should have provided a concise overview of the core functionality that Rollup exposes. There are more tips and things\nto consider when setting up Rollups, which you can find throughout the rest of this section. You may also explore the <<rollup-api-quickref,REST API>>\nfor an overview of what is available.\n"
}