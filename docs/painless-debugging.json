{
    "meta": {
        "size": 3775,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/painless-debugging.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "painless-debugging",
        "version": "8.15"
    },
    "doc": "[[painless-debugging]]\n=== Painless Debugging\n\n==== Debug.Explain\n\nPainless doesn't have a\n{wikipedia}/Read%E2%80%93eval%E2%80%93print_loop[REPL]\nand while it'd be nice for it to have one day, it wouldn't tell you the\nwhole story around debugging painless scripts embedded in Elasticsearch because\nthe data that the scripts have access to or \"context\" is so important. For now\nthe best way to debug embedded scripts is by throwing exceptions at choice\nplaces. While you can throw your own exceptions\n(`throw new Exception('whatever')`), Painless's sandbox prevents you from\naccessing useful information like the type of an object. So Painless has a\nutility method, `Debug.explain` which throws the exception for you. For\nexample, you can use {ref}/search-explain.html[`_explain`] to explore the\ncontext available to a {ref}/query-dsl-script-query.html[script query].\n\n[source,console]\n---------------------------------------------------------\nPUT /hockey/_doc/1?refresh\n{\"first\":\"johnny\",\"last\":\"gaudreau\",\"goals\":[9,27,1],\"assists\":[17,46,0],\"gp\":[26,82,1]}\n\nPOST /hockey/_explain/1\n{\n  \"query\": {\n    \"script\": {\n      \"script\": \"Debug.explain(doc.goals)\"\n    }\n  }\n}\n---------------------------------------------------------\n// TEST[s/_explain\\/1/_explain\\/1?error_trace=false/ catch:/painless_explain_error/]\n// The test system sends error_trace=true by default for easier debugging so\n// we have to override it to get a normal shaped response\n\nWhich shows that the class of `doc.first` is\n`org.elasticsearch.index.fielddata.ScriptDocValues.Longs` by responding with:\n\n[source,console-result]\n---------------------------------------------------------\n{\n   \"error\": {\n      \"type\": \"script_exception\",\n      \"to_string\": \"[1, 9, 27]\",\n      \"painless_class\": \"org.elasticsearch.index.fielddata.ScriptDocValues.Longs\",\n      \"java_class\": \"org.elasticsearch.index.fielddata.ScriptDocValues$Longs\",\n      ...\n   },\n   \"status\": 400\n}\n---------------------------------------------------------\n// TESTRESPONSE[s/\\.\\.\\./\"script_stack\": $body.error.script_stack, \"script\": $body.error.script, \"lang\": $body.error.lang, \"position\": $body.error.position, \"caused_by\": $body.error.caused_by, \"root_cause\": $body.error.root_cause, \"reason\": $body.error.reason/]\n\nYou can use the same trick to see that `_source` is a `LinkedHashMap`\nin the `_update` API:\n\n[source,console]\n---------------------------------------------------------\nPOST /hockey/_update/1\n{\n  \"script\": \"Debug.explain(ctx._source)\"\n}\n---------------------------------------------------------\n// TEST[continued s/_update\\/1/_update\\/1?error_trace=false/ catch:/painless_explain_error/]\n\nThe response looks like:\n\n[source,console-result]\n---------------------------------------------------------\n{\n  \"error\" : {\n    \"root_cause\": ...,\n    \"type\": \"illegal_argument_exception\",\n    \"reason\": \"failed to execute script\",\n    \"caused_by\": {\n      \"type\": \"script_exception\",\n      \"to_string\": \"{gp=[26, 82, 1], last=gaudreau, assists=[17, 46, 0], first=johnny, goals=[9, 27, 1]}\",\n      \"painless_class\": \"java.util.LinkedHashMap\",\n      \"java_class\": \"java.util.LinkedHashMap\",\n      ...\n    }\n  },\n  \"status\": 400\n}\n---------------------------------------------------------\n// TESTRESPONSE[s/\"root_cause\": \\.\\.\\./\"root_cause\": $body.error.root_cause/]\n// TESTRESPONSE[s/\\.\\.\\./\"script_stack\": $body.error.caused_by.script_stack, \"script\": $body.error.caused_by.script, \"lang\": $body.error.caused_by.lang, \"position\": $body.error.caused_by.position, \"caused_by\": $body.error.caused_by.caused_by, \"reason\": $body.error.caused_by.reason/]\n// TESTRESPONSE[s/\"to_string\": \".+\"/\"to_string\": $body.error.caused_by.to_string/]\n\nOnce you have a class you can go to <<painless-api-reference>> to see a list of\navailable methods.\n"
}