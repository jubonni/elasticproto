{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.830274",
        "size": 1823,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/breaking_80_painless_changes.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "breaking_80_painless_changes",
        "version": "8.15"
    },
    "doc": "[discrete]\n[[breaking_80_painless_changes]]\n==== Painless changes\n\n.The `JodaCompatibleZonedDateTime` class has been removed.\n[%collapsible]\n====\n*Details* +\nAs a transition from Joda datetime to Java datetime, scripting used\nan intermediate class called `JodaCompatibleZonedDateTime`. This class\nhas been removed and is replaced by `ZonedDateTime`. Any use of casting\nto a `JodaCompatibleZonedDateTime` or use of method calls only available\nin `JodaCompatibleZonedDateTime` in a script will result in a compilation\nerror, and may not allow the upgraded node to start.\n\n*Impact* +\nBefore upgrading, replace `getDayOfWeek` with `getDayOfWeekEnum().value` in any\nscripts. Any use of `getDayOfWeek` expecting a return value of `int` will result\nin a compilation error or runtime error and may not allow the upgraded node to\nstart.\n\nThe following `JodaCompatibleZonedDateTime` methods must be replaced using\n`ZonedDateTime` methods prior to upgrade:\n\n* `getMillis()` -> `toInstant().toEpochMilli()`\n* `getCenturyOfEra()` -> `get(ChronoField.YEAR_OF_ERA) / 100`\n* `getEra()` -> `get(ChronoField.ERA)`\n* `getHourOfDay()` -> `getHour()`\n* `getMillisOfDay()` -> `get(ChronoField.MILLI_OF_DAY)`\n* `getMillisOfSecond()` -> `get(ChronoField.MILLI_OF_SECOND)`\n* `getMinuteOfDay()` -> `get(ChronoField.MINUTE_OF_DAY)`\n* `getMinuteOfHour()` -> `getMinute()`\n* `getMonthOfYear()` -> `getMonthValue()`\n* `getSecondOfDay()` -> `get(ChronoField.SECOND_OF_DAY)`\n* `getSecondOfMinute()` -> `getSecond()`\n* `getWeekOfWeekyear()` -> `get(IsoFields.WEEK_OF_WEEK_BASED_YEAR)`\n* `getWeekyear()` -> `get(IsoFields.WEEK_BASED_YEAR)`\n* `getYearOfCentury()` -> `get(ChronoField.YEAR_OF_ERA) % 100`\n* `getYearOfEra()` -> `get(ChronoField.YEAR_OF_ERA)`\n* `toString(String)` -> a DateTimeFormatter\n* `toString(String, Locale)` -> a DateTimeFormatter\n====\n"
}