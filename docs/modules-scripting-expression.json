{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.209271",
        "size": 5565,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-expression.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "modules-scripting-expression",
        "version": "8.15"
    },
    "doc": "[[modules-scripting-expression]]\n== Lucene expressions language\n\nLucene's expressions compile a `javascript` expression to bytecode. They are\ndesigned for high-performance custom ranking and sorting functions and are\nenabled for `inline` and `stored` scripting by default.\n\n[discrete]\n=== Performance\n\nExpressions were designed to have competitive performance with custom Lucene code.\nThis performance is due to having low per-document overhead as opposed to other\nscripting engines: expressions do more \"up-front\".\n\nThis allows for very fast execution, even faster than if you had written a `native` script.\n\n[discrete]\n=== Syntax\n\nExpressions support a subset of javascript syntax: a single expression.\n\nSee the https://lucene.apache.org/core/{lucene_version_path}/expressions/index.html?org/apache/lucene/expressions/js/package-summary.html[expressions module documentation]\nfor details on what operators and functions are available.\n\nVariables in `expression` scripts are available to access:\n\n* document fields, e.g. `doc['myfield'].value`\n* variables and methods that the field supports, e.g. `doc['myfield'].empty`\n* Parameters passed into the script, e.g. `mymodifier`\n* The current document's score, `_score` (only available when used in a `script_score`)\n\nYou can use Expressions scripts for `script_score`, `script_fields`, sort scripts, and numeric aggregation\nscripts, simply set the `lang` parameter to `expression`.\n\n[discrete]\n=== Numeric field API\n[cols=\"<,<\",options=\"header\",]\n|=======================================================================\n|Expression |Description\n|`doc['field_name'].value` |The value of the field, as a `double`\n\n|`doc['field_name'].empty` |A boolean indicating if the field has no\nvalues within the doc.\n\n|`doc['field_name'].length` |The number of values in this document.\n\n|`doc['field_name'].min()` |The minimum value of the field in this document.\n\n|`doc['field_name'].max()` |The maximum value of the field in this document.\n\n|`doc['field_name'].median()` |The median value of the field in this document.\n\n|`doc['field_name'].avg()` |The average of the values in this document.\n\n|`doc['field_name'].sum()` |The sum of the values in this document.\n|=======================================================================\n\nWhen a document is missing the field completely, by default the value will be treated as `0`.\nYou can treat it as another value instead, e.g. `doc['myfield'].empty ? 100 : doc['myfield'].value`\n\nWhen a document has multiple values for the field, by default the minimum value is returned.\nYou can choose a different value instead, e.g. `doc['myfield'].sum()`.\n\nWhen a document is missing the field completely, by default the value will be treated as `0`.\n\nBoolean fields are exposed as numerics, with `true` mapped to `1` and `false` mapped to `0`.\nFor example: `doc['on_sale'].value ? doc['price'].value * 0.5 : doc['price'].value`\n\n[discrete]\n=== Date field API\nDate fields are treated as the number of milliseconds since January 1, 1970 and\nsupport the Numeric Fields API above, plus access to some date-specific fields:\n\n[cols=\"<,<\",options=\"header\",]\n|=======================================================================\n|Expression |Description\n|`doc['field_name'].date.centuryOfEra`|Century (1-2920000)\n\n|`doc['field_name'].date.dayOfMonth`|Day (1-31), e.g. `1` for the first of the month.\n\n|`doc['field_name'].date.dayOfWeek`|Day of the week (1-7), e.g. `1` for Monday.\n\n|`doc['field_name'].date.dayOfYear`|Day of the year, e.g. `1` for January 1.\n\n|`doc['field_name'].date.era`|Era: `0` for BC, `1` for AD.\n\n|`doc['field_name'].date.hourOfDay`|Hour (0-23).\n\n|`doc['field_name'].date.millisOfDay`|Milliseconds within the day (0-86399999).\n\n|`doc['field_name'].date.millisOfSecond`|Milliseconds within the second (0-999).\n\n|`doc['field_name'].date.minuteOfDay`|Minute within the day (0-1439).\n\n|`doc['field_name'].date.minuteOfHour`|Minute within the hour (0-59).\n\n|`doc['field_name'].date.monthOfYear`|Month within the year (1-12), e.g. `1` for January.\n\n|`doc['field_name'].date.secondOfDay`|Second within the day (0-86399).\n\n|`doc['field_name'].date.secondOfMinute`|Second within the minute (0-59).\n\n|`doc['field_name'].date.year`|Year (-292000000 - 292000000).\n\n|`doc['field_name'].date.yearOfCentury`|Year within the century (1-100).\n\n|`doc['field_name'].date.yearOfEra`|Year within the era (1-292000000).\n|=======================================================================\n\nThe following example shows the difference in years between the `date` fields date0 and date1:\n\n`doc['date1'].date.year - doc['date0'].date.year`\n\n[discrete]\n[[geo-point-field-api]]\n=== `geo_point` field API\n[cols=\"<,<\",options=\"header\",]\n|=======================================================================\n|Expression |Description\n|`doc['field_name'].empty` |A boolean indicating if the field has no\nvalues within the doc.\n\n|`doc['field_name'].lat` |The latitude of the geo point.\n\n|`doc['field_name'].lon` |The longitude of the geo point.\n|=======================================================================\n\nThe following example computes distance in kilometers from Washington, DC:\n\n`haversin(38.9072, 77.0369, doc['field_name'].lat, doc['field_name'].lon)`\n\nIn this example the coordinates could have been passed as parameters to the script,\ne.g. based on geolocation of the user.\n\n[discrete]\n=== Limitations\n\nThere are a few limitations relative to other script languages:\n\n* Only numeric, `boolean`, `date`, and `geo_point` fields may be accessed\n* Stored fields are not available\n"
}