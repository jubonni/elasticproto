{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.115271",
        "size": 15864,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/discovery-ec2.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "discovery-ec2",
        "version": "8.15"
    },
    "doc": "[[discovery-ec2]]\n=== EC2 Discovery plugin\n\nThe EC2 discovery plugin provides a list of seed addresses to the\n{ref}/discovery-hosts-providers.html[discovery process] by querying the\nhttps://github.com/aws/aws-sdk-java[AWS API] for a list of EC2 instances\nmatching certain criteria determined by the <<discovery-ec2-usage,plugin\nsettings>>.\n\n*If you are looking for a hosted solution of {es} on AWS, please visit\nhttps://www.elastic.co/cloud.*\n\n:plugin_name: discovery-ec2\ninclude::install_remove.asciidoc[]\n\n[[discovery-ec2-usage]]\n==== Using the EC2 discovery plugin\n\nThe `discovery-ec2` plugin allows {es} to find the master-eligible nodes in a\ncluster running on AWS EC2 by querying the\nhttps://github.com/aws/aws-sdk-java[AWS API] for the addresses of the EC2\ninstances running these nodes.\n\nIt is normally a good idea to restrict the discovery process just to the\nmaster-eligible nodes in the cluster. This plugin allows you to identify these\nnodes by certain criteria including their tags, their membership of security\ngroups, and their placement within availability zones. The discovery process\nwill work correctly even if it finds master-ineligible nodes, but master\nelections will be more efficient if this can be avoided.\n\nThe interaction with the AWS API can be authenticated using the\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html[instance\nrole], or else custom credentials can be supplied.\n\n===== Enabling EC2 discovery\n\nTo enable EC2 discovery, configure {es} to use the `ec2` seed hosts provider:\n\n[source,yaml]\n----\ndiscovery.seed_providers: ec2\n----\n\n===== Configuring EC2 discovery\n\nEC2 discovery supports a number of settings. Some settings are sensitive and\nmust be stored in the {ref}/secure-settings.html[{es} keystore]. For example,\nto authenticate using a particular access key and secret key, add these keys to\nthe keystore by running the following commands:\n\n[source,sh]\n----\nbin/elasticsearch-keystore add discovery.ec2.access_key\nbin/elasticsearch-keystore add discovery.ec2.secret_key\n----\n\nThe available settings for the EC2 discovery plugin are as follows.\n\n`discovery.ec2.access_key` ({ref}/secure-settings.html[Secure], {ref}/secure-settings.html#reloadable-secure-settings[reloadable])::\n\n    An EC2 access key. If set, you must also set `discovery.ec2.secret_key`.\n    If unset, `discovery-ec2` will instead use the instance role. This setting\n    is sensitive and must be stored in the {es} keystore.\n\n`discovery.ec2.secret_key` ({ref}/secure-settings.html[Secure], {ref}/secure-settings.html#reloadable-secure-settings[reloadable])::\n\n    An EC2 secret key. If set, you must also set `discovery.ec2.access_key`.\n    This setting is sensitive and must be stored in the {es} keystore.\n\n`discovery.ec2.session_token` ({ref}/secure-settings.html[Secure], {ref}/secure-settings.html#reloadable-secure-settings[reloadable])::\n\n    An EC2 session token. If set, you must also set `discovery.ec2.access_key`\n    and `discovery.ec2.secret_key`. This setting is sensitive and must be\n    stored in the {es} keystore.\n\n`discovery.ec2.endpoint`::\n\n    The EC2 service endpoint to which to connect. See\n    https://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region to find\n    the appropriate endpoint for the region. This setting defaults to\n    `ec2.us-east-1.amazonaws.com` which is appropriate for clusters running in\n    the `us-east-1` region.\n\n`discovery.ec2.protocol`::\n\n    The protocol to use to connect to the EC2 service endpoint, which may be\n    either `http` or `https`. Defaults to `https`.\n\n`discovery.ec2.proxy.host`::\n\n    The address or host name of an HTTP proxy through which to connect to EC2.\n    If not set, no proxy is used.\n\n`discovery.ec2.proxy.port`::\n\n    When the address of an HTTP proxy is given in `discovery.ec2.proxy.host`,\n    this setting determines the port to use to connect to the proxy. Defaults to\n    `80`.\n\n`discovery.ec2.proxy.scheme`::\n\n    The scheme to use when connecting to the EC2 service endpoint through proxy specified\n    in `discovery.ec2.proxy.host`. Valid values are `http` or `https`. Defaults to `http`.\n\n`discovery.ec2.proxy.username` ({ref}/secure-settings.html[Secure], {ref}/secure-settings.html#reloadable-secure-settings[reloadable])::\n\n    When the address of an HTTP proxy is given in `discovery.ec2.proxy.host`,\n    this setting determines the username to use to connect to the proxy. When\n    not set, no username is used. This setting is sensitive and must be stored\n    in the {es} keystore.\n\n`discovery.ec2.proxy.password` ({ref}/secure-settings.html[Secure], {ref}/secure-settings.html#reloadable-secure-settings[reloadable])::\n\n    When the address of an HTTP proxy is given in `discovery.ec2.proxy.host`,\n    this setting determines the password to use to connect to the proxy. When\n    not set, no password is used. This setting is sensitive and must be stored\n    in the {es} keystore.\n\n`discovery.ec2.read_timeout`::\n\n    The socket timeout for connections to EC2,\n    {time-units}[including the units]. For example, a\n    value of `60s` specifies a 60-second timeout. Defaults to 50 seconds.\n\n`discovery.ec2.groups`::\n\n    A list of the names or IDs of the security groups to use for discovery. The\n    `discovery.ec2.any_group` setting determines the behaviour of this setting.\n    Defaults to an empty list, meaning that security group membership is\n    ignored by EC2 discovery.\n\n`discovery.ec2.any_group`::\n\n    Defaults to `true`, meaning that instances belonging to _any_ of the\n    security groups specified in `discovery.ec2.groups` will be used for\n    discovery. If set to `false`, only instances that belong to _all_ of the\n    security groups specified in `discovery.ec2.groups` will be used for\n    discovery.\n\n`discovery.ec2.host_type`::\n\n+\n--\n\nEach EC2 instance has a number of different addresses that might be suitable\nfor discovery. This setting allows you to select which of these addresses is\nused by the discovery process. It can be set to one of `private_ip`,\n`public_ip`, `private_dns`, `public_dns` or `tag:TAGNAME` where `TAGNAME`\nrefers to a name of a tag. This setting defaults to `private_ip`.\n\nIf you set `discovery.ec2.host_type` to a value of the form `tag:TAGNAME` then\nthe value of the tag `TAGNAME` attached to each instance will be used as that\ninstance's address for discovery. Instances which do not have this tag set will\nbe ignored by the discovery process.\n\nFor example if you tag some EC2 instances with a tag named\n`elasticsearch-host-name` and set `host_type: tag:elasticsearch-host-name` then\nthe `discovery-ec2` plugin will read each instance's host name from the value\nof the `elasticsearch-host-name` tag.\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html[Read more\nabout EC2 Tags].\n\n--\n\n`discovery.ec2.availability_zones`::\n\n    A list of the names of the availability zones to use for discovery. The\n    name of an availability zone is the\n    https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html[region\n    code followed by a letter], such as `us-east-1a`. Only instances placed in\n    one of the given availability zones will be used for discovery.\n\n[[discovery-ec2-filtering]]\n`discovery.ec2.tag.TAGNAME`::\n\n+\n--\n\nA list of the values of a tag called `TAGNAME` to use for discovery. If set,\nonly instances that are tagged with one of the given values will be used for\ndiscovery. For instance, the following settings will only use nodes with a\n`role` tag set to `master` and an `environment` tag set to either `dev` or\n`staging`.\n\n[source,yaml]\n----\ndiscovery.ec2.tag.role: master\ndiscovery.ec2.tag.environment: dev,staging\n----\n\nNOTE: The names of tags used for discovery may only contain ASCII letters,\nnumbers, hyphens and underscores. In particular you cannot use tags whose name\nincludes a colon.\n\n--\n\n`discovery.ec2.node_cache_time`::\n\n    Sets the length of time for which the collection of discovered instances is\n    cached. {es} waits at least this long between requests for discovery\n    information from the EC2 API. AWS may reject discovery requests if they are\n    made too often, and this would cause discovery to fail. Defaults to `10s`.\n\nAll **secure** settings of this plugin are\n{ref}/secure-settings.html#reloadable-secure-settings[reloadable], allowing you\nto update the secure settings for this plugin without needing to restart each\nnode.\n\n\n[[discovery-ec2-permissions]]\n===== Recommended EC2 permissions\n\nThe `discovery-ec2` plugin works by making a `DescribeInstances` call to the AWS\nEC2 API. You must configure your AWS account to allow this, which is normally\ndone using an IAM policy. You can create a custom policy via the IAM Management\nConsole. It should look similar to this.\n\n[source,js]\n----\n{\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"ec2:DescribeInstances\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": [\n        \"*\"\n      ]\n    }\n  ],\n  \"Version\": \"2012-10-17\"\n}\n----\n// NOTCONSOLE\n\n[[discovery-ec2-attributes]]\n===== Automatic node attributes\n\nThe `discovery-ec2` plugin can automatically set the `aws_availability_zone`\nnode attribute to the availability zone of each node. This node attribute\nallows you to ensure that each shard has copies allocated redundantly across\nmultiple availability zones by using the\n{ref}/modules-cluster.html#shard-allocation-awareness[Allocation Awareness]\nfeature.\n\nIn order to enable the automatic definition of the `aws_availability_zone`\nattribute, set `cloud.node.auto_attributes` to `true`. For example:\n\n[source,yaml]\n----\ncloud.node.auto_attributes: true\ncluster.routing.allocation.awareness.attributes: aws_availability_zone\n----\n\nThe `aws_availability_zone` attribute can be automatically set like this when\nusing any discovery type. It is not necessary to set `discovery.seed_providers:\nec2`. However this feature does require that the `discovery-ec2` plugin is\ninstalled.\n\n[[discovery-ec2-network-host]]\n===== Binding to the correct address\n\nIt is important to define `network.host` correctly when deploying a cluster on\nEC2. By default each {es} node only binds to `localhost`, which will prevent it\nfrom being discovered by nodes running on any other instances.\n\nYou can use the {ref}/modules-network.html[core network host settings] to bind\neach node to the desired address, or you can set `network.host` to one of the\nfollowing EC2-specific settings provided by the `discovery-ec2` plugin:\n\n[cols=\"<,<\",options=\"header\",]\n|==================================================================\n|EC2 Host Value      |Description\n|`_ec2:privateIpv4_` |The private IP address (ipv4) of the machine.\n|`_ec2:privateDns_`  |The private host of the machine.\n|`_ec2:publicIpv4_`  |The public IP address (ipv4) of the machine.\n|`_ec2:publicDns_`   |The public host of the machine.\n|`_ec2:privateIp_`   |Equivalent to `_ec2:privateIpv4_`.\n|`_ec2:publicIp_`    |Equivalent to `_ec2:publicIpv4_`.\n|`_ec2_`             |Equivalent to `_ec2:privateIpv4_`.\n|==================================================================\n\nThese values are acceptable when using any discovery type. They do not require\nyou to set `discovery.seed_providers: ec2`. However they do require that the\n`discovery-ec2` plugin is installed.\n\n[[cloud-aws-best-practices]]\n==== Best Practices in AWS\n\nThis section contains some other information about designing and managing an\n{es} cluster on your own AWS infrastructure. If you would prefer to avoid these\noperational details then you may be interested in a hosted {es} installation\navailable on AWS-based infrastructure from https://www.elastic.co/cloud.\n\n===== Storage\n\nEC2 instances offer a number of different kinds of storage. Please be aware of\nthe following when selecting the storage for your cluster:\n\n* https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html[Instance\nStore] is recommended for {es} clusters as it offers excellent performance and\nis cheaper than EBS-based storage. {es} is designed to work well with this kind\nof ephemeral storage because it replicates each shard across multiple nodes. If\na node fails and its Instance Store is lost then {es} will rebuild any lost\nshards from other copies.\n\n* https://aws.amazon.com/ebs/[EBS-based storage] may be acceptable\nfor smaller clusters (1-2 nodes). Be sure to use provisioned IOPS to ensure\nyour cluster has satisfactory performance.\n\n* https://aws.amazon.com/efs/[EFS-based storage] is not\nrecommended or supported as it does not offer satisfactory performance.\nHistorically, shared network filesystems such as EFS have not always offered\nprecisely the behaviour that {es} requires of its filesystem, and this has been\nknown to lead to index corruption. Although EFS offers durability, shared\nstorage, and the ability to grow and shrink filesystems dynamically, you can\nachieve the same benefits using {es} directly.\n\n===== Choice of AMI\n\nPrefer the https://aws.amazon.com/amazon-linux-2/[Amazon Linux 2 AMIs] as these\nallow you to benefit from the lightweight nature, support, and EC2-specific\nperformance enhancements that these images offer.\n\n===== Networking\n\n* Smaller instance types have limited network performance, in terms of both\nhttps://lab.getbase.com/how-we-discovered-limitations-on-the-aws-tcp-stack/[bandwidth\nand number of connections]. If networking is a bottleneck, avoid\nhttps://aws.amazon.com/ec2/instance-types/[instance types] with networking\nlabelled as `Moderate` or `Low`.\n\n* It is a good idea to distribute your nodes across multiple\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html[availability\nzones] and use {ref}/modules-cluster.html#shard-allocation-awareness[shard\nallocation awareness] to ensure that each shard has copies in more than one\navailability zone.\n\n* Do not span a cluster across regions. {es} expects that node-to-node\nconnections within a cluster are reasonably reliable and offer high bandwidth\nand low latency, and these properties do not hold for connections between\nregions. Although an {es} cluster will behave correctly when node-to-node\nconnections are unreliable or slow, it is not optimised for this case and its\nperformance may suffer. If you wish to geographically distribute your data, you\nshould provision multiple clusters and use features such as\n{ref}/modules-cross-cluster-search.html[cross-cluster search] and\n{ref}/xpack-ccr.html[cross-cluster replication].\n\n===== Other recommendations\n\n* If you have split your nodes into roles, consider\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html[tagging the\nEC2 instances] by role to make it easier to filter and view your EC2 instances\nin the AWS console.\n\n* Consider\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination[enabling\ntermination protection] for all of your data and master-eligible nodes. This\nwill help to prevent accidental termination of these nodes which could\ntemporarily reduce the resilience of the cluster and which could cause a\npotentially disruptive reallocation of shards.\n\n* If running your cluster using one or more\nhttps://docs.aws.amazon.com/autoscaling/ec2/userguide/AutoScalingGroup.html[auto-scaling\ngroups], consider protecting your data and master-eligible nodes\nhttps://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection-instance[against\ntermination during scale-in]. This will help to prevent automatic termination\nof these nodes which could temporarily reduce the resilience of the cluster and\nwhich could cause a potentially disruptive reallocation of shards. If these\ninstances are protected against termination during scale-in then you can use\n{ref}/shard-allocation-filtering.html[shard allocation filtering] to gracefully\nmigrate any data off these nodes before terminating them manually.\n"
}