{
    "meta": {
        "size": 4566,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-serialdiff-aggregation.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "search-aggregations-pipeline-serialdiff-aggregation",
        "version": "8.15"
    },
    "doc": "[[search-aggregations-pipeline-serialdiff-aggregation]]\n=== Serial differencing aggregation\n++++\n<titleabbrev>Serial differencing</titleabbrev>\n++++\n\nSerial differencing is a technique where values in a time series are subtracted from itself at\ndifferent time lags or periods. For example, the datapoint f(x) = f(x~t~) - f(x~t-n~), where n is the period being used.\n\nA period of 1 is equivalent to a derivative with no time normalization: it is simply the change from one point to the\nnext. Single periods are useful for removing constant, linear trends.\n\nSingle periods are also useful for transforming data into a stationary series. In this example, the Dow Jones is\nplotted over ~250 days. The raw data is not stationary, which would make it difficult to use with some techniques.\n\nBy calculating the first-difference, we de-trend the data (e.g. remove a constant, linear trend). We can see that the\ndata becomes a stationary series (e.g. the first difference is randomly distributed around zero, and doesn't seem to\nexhibit any pattern/behavior). The transformation reveals that the dataset is following a random-walk; the value is the\nprevious value +/- a random amount. This insight allows selection of further tools for analysis.\n\n[[serialdiff_dow]]\n.Dow Jones plotted and made stationary with first-differencing\nimage::images/pipeline_serialdiff/dow.png[]\n\nLarger periods can be used to remove seasonal / cyclic behavior. In this example, a population of lemmings was\nsynthetically generated with a sine wave + constant linear trend + random noise. The sine wave has a period of 30 days.\n\nThe first-difference removes the constant trend, leaving just a sine wave. The 30th-difference is then applied to the\nfirst-difference to remove the cyclic behavior, leaving a stationary series which is amenable to other analysis.\n\n[[serialdiff_lemmings]]\n.Lemmings data plotted made stationary with 1st and 30th difference\nimage::images/pipeline_serialdiff/lemmings.png[]\n\n\n\n==== Syntax\n\nA `serial_diff` aggregation looks like this in isolation:\n\n[source,js]\n--------------------------------------------------\n{\n  \"serial_diff\": {\n    \"buckets_path\": \"the_sum\",\n    \"lag\": 7\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\n[[serial-diff-params]]\n.`serial_diff` Parameters\n[options=\"header\"]\n|===\n|Parameter Name |Description |Required |Default Value\n|`buckets_path` |Path to the metric of interest (see <<buckets-path-syntax, `buckets_path` Syntax>> for more details |Required |\n|`lag` |The historical bucket to subtract from the current value. E.g. a lag of 7 will subtract the current value from\n the value 7 buckets ago. Must be a positive, non-zero integer |Optional |`1`\n|`gap_policy` |Determines what should happen when a gap in the data is encountered. |Optional |`insert_zeros`\n|`format` |{javadoc}/java.base/java/text/DecimalFormat.html[DecimalFormat pattern] for the\noutput value. If specified, the formatted value is returned in the aggregation's\n`value_as_string` property |Optional | `null`\n|===\n\n`serial_diff` aggregations must be embedded inside of a `histogram` or `date_histogram` aggregation:\n\n[source,console]\n--------------------------------------------------\nPOST /_search\n{\n   \"size\": 0,\n   \"aggs\": {\n      \"my_date_histo\": {                  <1>\n         \"date_histogram\": {\n            \"field\": \"timestamp\",\n            \"calendar_interval\": \"day\"\n         },\n         \"aggs\": {\n            \"the_sum\": {\n               \"sum\": {\n                  \"field\": \"lemmings\"     <2>\n               }\n            },\n            \"thirtieth_difference\": {\n               \"serial_diff\": {                <3>\n                  \"buckets_path\": \"the_sum\",\n                  \"lag\" : 30\n               }\n            }\n         }\n      }\n   }\n}\n--------------------------------------------------\n\n<1> A `date_histogram` named \"my_date_histo\" is constructed on the \"timestamp\" field, with one-day intervals\n<2> A `sum` metric is used to calculate the sum of a field. This could be any metric (sum, min, max, etc)\n<3> Finally, we specify a `serial_diff` aggregation which uses \"the_sum\" metric as its input.\n\nSerial differences are built by first specifying a `histogram` or `date_histogram` over a field. You can then optionally\nadd normal metrics, such as a `sum`, inside of that histogram. Finally, the `serial_diff` is embedded inside the histogram.\nThe `buckets_path` parameter is then used to \"point\" at one of the sibling metrics inside of the histogram (see\n<<buckets-path-syntax>> for a description of the syntax for `buckets_path`.\n"
}