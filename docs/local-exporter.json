{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.557068",
        "size": 4645,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/local-exporter.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "local-exporter",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[local-exporter]]\n=== Local exporters\n\ninclude::production.asciidoc[tag=monitoring-rec]\n\nThe `local` exporter is the default exporter in {monitoring}. It routes data\nback into the same (local) cluster. In other words, it uses the production\ncluster as the monitoring cluster. For example:\n\n[source,yaml]\n---------------------------------------------------\nxpack.monitoring.exporters.my_local_exporter: <1>\n  type: local\n---------------------------------------------------\n<1> The exporter name uniquely defines the exporter, but it is otherwise unused.\n\nThis exporter exists to provide a convenient option when hardware is simply not\navailable. It is also a way for developers to get an idea of what their actions\ndo for pre-production clusters when they do not have the time or resources to\nprovide a separate monitoring cluster. However, this exporter has disadvantages\nthat impact the local cluster:\n\n* All indexing impacts the local cluster and the nodes that hold the monitoring\nindices' shards.\n* Most collectors run on the elected master node. Therefore most indexing occurs\nwith the elected master node as the coordinating node, which is a bad practice.\n* Any usage of {monitoring} for {kib} uses the local cluster's resources for\nsearches and aggregations, which means that they might not be available for\nnon-monitoring tasks.\n* If the local cluster goes down, the monitoring cluster has inherently gone\ndown with it (and vice versa), which generally defeats the purpose of monitoring.\n\nFor the `local` exporter, all setup occurs only on the elected master node. This\nmeans that if you do not see any monitoring templates or ingest pipelines, the\nelected master node is having issues or it is not configured in the same way.\nUnlike the `http` exporter, the `local` exporter has the advantage of accessing\nthe monitoring cluster's up-to-date cluster state. It can therefore always check\nthat the templates and ingest pipelines exist without a performance penalty. If\nthe elected master node encounters errors while trying to create the monitoring\nresources, it logs errors, ignores that collection, and tries again after the\nnext collection.\n\nThe elected master node is the only node to set up resources for the `local`\nexporter. Therefore all other nodes wait for the resources to be set up before\nindexing any monitoring data from their own collectors. Each of these nodes logs\na message indicating that they are waiting for the resources to be set up.\n\nOne benefit of the `local` exporter is that it lives within the cluster and\ntherefore no extra configuration is required when the cluster is secured with\n{stack} {security-features}. All operations, including indexing operations, that\noccur from a `local` exporter make use of the internal transport mechanisms\nwithin {es}. This behavior enables the exporter to be used without providing any\nuser credentials when {security-features} are enabled.\n\nFor more information about the configuration options for the `local` exporter,\nsee <<local-exporter-settings>>.\n\n[[local-exporter-cleaner]]\n==== Cleaner service\n\nOne feature of the `local` exporter, which is not present in the `http` exporter,\nis a cleaner service. The cleaner service runs once per day at 01:00 AM UTC on\nthe elected master node.\n\nThe role of the cleaner service is to clean, or curate, the monitoring indices\nthat are older than a configurable amount of time (the default is `7d`). This\ncleaner exists as part of the `local` exporter as a safety mechanism. The `http`\nexporter does not make use of it because it could enable a single misconfigured\nnode to prematurely curate data from other production clusters that share the\nsame monitoring cluster.\n\nIn a dedicated monitoring cluster, you can use the cleaner service without\nhaving to monitor the monitoring cluster itself. For example:\n\n[source,yaml]\n---------------------------------------------------\nxpack.monitoring.collection.enabled: false <1>\nxpack.monitoring.history.duration: 3d <2>\n---------------------------------------------------\n\n<1> Disables the collection of data on the monitoring cluster.\n<2> Lowers the default history duration from `7d` to `3d`. The minimum value is\n`1d`. This setting can be modified only when using a Gold or higher level\nlicense. For the Basic license level, it uses the default of 7 days.\n\nTo disable the cleaner service, add a disabled local exporter:\n\n[source,yaml]\n----\nxpack.monitoring.exporters.my_local.type: local <1>\nxpack.monitoring.exporters.my_local.enabled: false <2>\n----\n\n<1> Adds a local exporter named `my_local`\n<2> Disables the local exporter. This also disables the cleaner service.\n"
}