{
    "meta": {
        "timestamp": "2024-11-01T03:07:10.243271",
        "size": 9603,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-shrink-index.html",
        "type": "documentation",
        "role": [
            "child_attributes"
        ],
        "has_code": true,
        "title": "indices-shrink-index",
        "version": "8.15"
    },
    "doc": "[[indices-shrink-index]]\n=== Shrink index API\n++++\n<titleabbrev>Shrink index</titleabbrev>\n++++\n\nShrinks an existing index into a new index with fewer primary shards.\n\n\n[source,console]\n----\nPOST /my-index-000001/_shrink/shrunk-my-index-000001\n----\n// TEST[s/^/PUT my-index-000001\\n{\"settings\":{\"index.number_of_shards\":2,\"blocks.write\":true}}\\n/]\n\n\n[[shrink-index-api-request]]\n==== {api-request-title}\n\n`POST /<index>/_shrink/<target-index>`\n\n`PUT /<index>/_shrink/<target-index>`\n\n\n[[shrink-index-api-prereqs]]\n==== {api-prereq-title}\n\n* If the {es} {security-features} are enabled, you must have the `manage`\n<<privileges-list-indices,index privilege>> for the index.\n\n* Before you can shrink an index:\n\n** The index must be read-only.\n** A copy of every shard in the index must reside on the same node.\n** The index must have a `green` <<cluster-health,health status>>.\n\nTo make shard allocation easier, we recommend you also remove the index's\nreplica shards. You can later re-add replica shards as part of the shrink\noperation.\n\nYou can use the following <<indices-update-settings,update index settings API>>\nrequest to remove an index's replica shards, and relocate the index's remaining\nshards to the same node.\n\n[source,console]\n--------------------------------------------------\nPUT /my_source_index/_settings\n{\n  \"settings\": {\n    \"index.number_of_replicas\": 0,                                <1>\n    \"index.routing.allocation.require._name\": \"shrink_node_name\"  <2>\n  }\n}\n--------------------------------------------------\n// TEST[s/^/PUT my_source_index\\n{\"settings\":{\"index.number_of_shards\":2}}\\n/]\n\n<1> Removes replica shards for the index.\n<2> Relocates the index's shards to the `shrink_node_name` node.\n    See <<shard-allocation-filtering>>.\n\nIt can take a while to relocate the source index. Progress can be tracked\nwith the <<cat-recovery,`_cat recovery` API>>, or the <<cluster-health,\n`cluster health` API>> can be used to wait until all shards have relocated\nwith the `wait_for_no_relocating_shards` parameter.\n\nYou can then make the index read-only with the following request using the\n<<add-index-block,add index block>> API:\n\n[source,console]\n--------------------------------------------------\nPUT /my_source_index/_block/write\n--------------------------------------------------\n// TEST[continued]\n\n[[shrink-index-api-desc]]\n==== {api-description-title}\n\nThe shrink index API allows you to shrink an existing index into a new index\nwith fewer primary shards. The requested number of primary shards in the target index\nmust be a factor of the number of shards in the source index. For example an index with\n`8` primary shards can be shrunk into `4`, `2` or `1` primary shards or an index\nwith `15` primary shards can be shrunk into `5`, `3` or `1`. If the number\nof shards in the index is a prime number it can only be shrunk into a single\nprimary shard. Before shrinking, a (primary or replica) copy of every shard\nin the index must be present on the same node.\n\nThe current write index on a data stream cannot be shrunk. In order to shrink\nthe current write index, the data stream must first be\n<<data-streams-rollover,rolled over>> so that a new write index is created\nand then the previous write index can be shrunk.\n\n[[how-shrink-works]]\n===== How shrinking works\n\nA shrink operation:\n\n. Creates a new target index with the same definition as the source\n  index, but with a smaller number of primary shards.\n\n. Hard-links segments from the source index into the target index. (If\n  the file system doesn't support hard-linking, then all segments are copied\n  into the new index, which is a much more time consuming process. Also if using\n  multiple data paths, shards on different data paths require a full copy of\n  segment files if they are not on the same disk since hardlinks don\u2019t work across\n  disks)\n\n. Recovers the target index as though it were a closed index which\n  had just been re-opened. Recovers shards to <<indices-get-settings,Index Setting>> \n  `.routing.allocation.initial_recovery._id`.\n\n\n[[_shrinking_an_index]]\n===== Shrink an index\n\nTo shrink `my_source_index` into a new index called `my_target_index`, issue\nthe following request:\n\n[source,console]\n--------------------------------------------------\nPOST /my_source_index/_shrink/my_target_index\n{\n  \"settings\": {\n    \"index.routing.allocation.require._name\": null, <1>\n    \"index.blocks.write\": null <2>\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\n<1> Clear the allocation requirement copied from the source index.\n<2> Clear the index write block copied from the source index.\n\nThe above request returns immediately once the target index has been added to\nthe cluster state -- it doesn't wait for the shrink operation to start.\n\n[IMPORTANT]\n=====================================\n\nIndices can only be shrunk if they satisfy the following requirements:\n\n* The target index must not exist.\n\n* The source index must have more primary shards than the target index.\n\n* The number of primary shards in the target index must be a factor of the\n  number of primary shards in the source index. The source index must have\n  more primary shards than the target index.\n\n* The index must not contain more than `2,147,483,519` documents in total\n  across all shards that will be shrunk into a single shard on the target index\n  as this is the maximum number of docs that can fit into a single shard.\n\n* The node handling the shrink process must have sufficient free disk space to\n  accommodate a second copy of the existing index.\n\n=====================================\n\nThe `_shrink` API is similar to the <<indices-create-index, `create index` API>>\nand accepts `settings` and `aliases` parameters for the target index:\n\n[source,console]\n--------------------------------------------------\nPOST /my_source_index/_shrink/my_target_index\n{\n  \"settings\": {\n    \"index.number_of_replicas\": 1,\n    \"index.number_of_shards\": 1, <1>\n    \"index.codec\": \"best_compression\" <2>\n  },\n  \"aliases\": {\n    \"my_search_indices\": {}\n  }\n}\n--------------------------------------------------\n// TEST[s/^/PUT my_source_index\\n{\"settings\": {\"index.number_of_shards\":5,\"index.blocks.write\": true}}\\n/]\n\n<1> The number of shards in the target index. This must be a factor of the\n    number of shards in the source index.\n<2> Best compression will only take effect when new writes are made to the\n    index, such as when <<indices-forcemerge,force-merging>> the shard to a single\n    segment.\n\n\nNOTE: Mappings may not be specified in the `_shrink` request.\n\n\n[[monitor-shrink]]\n===== Monitor the shrink process\n\nThe shrink process can be monitored with the <<cat-recovery,`_cat recovery`\nAPI>>, or the <<cluster-health, `cluster health` API>> can be used to wait\nuntil all primary shards have been allocated by setting the  `wait_for_status`\nparameter to `yellow`.\n\nThe `_shrink` API returns as soon as the target index has been added to the\ncluster state, before any shards have been allocated. At this point, all\nshards are in the state `unassigned`. If, for any reason, the target index\ncan't be allocated on the shrink node, its primary shard will remain\n`unassigned` until it can be allocated on that node.\n\nOnce the primary shard is allocated, it moves to state `initializing`, and the\nshrink process begins. When the shrink operation completes, the shard will\nbecome `active`. At that point, Elasticsearch will try to allocate any\nreplicas and may decide to relocate the primary shard to another node.\n\n\n[[shrink-wait-active-shards]]\n===== Wait for active shards\n\nBecause the shrink operation creates a new index to shrink the shards to,\nthe <<create-index-wait-for-active-shards,wait for active shards>> setting\non index creation applies to the shrink index action as well.\n\n\n[[shrink-index-api-path-params]]\n==== {api-path-parms-title}\n\n`<index>`::\n(Required, string)\nName of the source index to shrink.\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=target-index]\n\n[[shrink-index-api-query-params]]\n==== {api-query-parms-title}\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=wait_for_active_shards]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=timeoutparms]\n\n[role=\"child_attributes\"]\n[[shrink-index-api-request-body]]\n==== {api-request-body-title}\n\n`aliases`::\n(Optional, object of objects) Aliases for the resulting index.\n+\ninclude::{es-ref-dir}/indices/create-index.asciidoc[tag=aliases-props]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=target-index-settings]\n\n`max_primary_shard_size`::\n(Optional, <<byte-units, byte units>>)\nThe max primary shard size for the target index. Used to find the optimum number of shards for the target index.\nWhen this parameter is set, each shard's storage in the target index will not be greater than the parameter.\nThe shards count of the target index will still be a factor of the source index's shards count, but if the parameter\nis less than the single shard size in the source index, the shards count for the target index will be equal to the source index's shards count.\nFor example, when this parameter is set to 50gb, if the source index has 60 primary shards with totaling 100gb, then the\ntarget index will have 2 primary shards, with each shard size of 50gb; if the source index has 60 primary shards\nwith totaling 1000gb, then the target index will have 20 primary shards; if the source index has 60 primary shards\nwith totaling 4000gb, then the target index will still have 60 primary shards. This parameter conflicts\nwith `number_of_shards` in the `settings`, only one of them may be set.\n"
}