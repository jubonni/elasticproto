{
    "meta": {
        "size": 5634,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/painless-variables.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "painless-variables",
        "version": "8.15"
    },
    "doc": "[[painless-variables]]\n=== Variables\n\nA variable loads and stores a value for evaluation during\n<<painless-operators, operations>>.\n\n[[variable-declaration]]\n==== Declaration\n\nDeclare a variable before use with the format of <<painless-types, type>>\nfollowed by <<painless-identifiers, identifier>>. Declare an\n<<array-type, array type>> variable using an opening `[` token and a closing `]`\ntoken for each dimension directly after the identifier. Specify a\ncomma-separated list of identifiers following the type to declare multiple\nvariables in a single statement. Use an\n<<variable-assignment, assignment operator>> combined with a declaration to\nimmediately assign a value to a variable. A variable not immediately assigned a\nvalue will have a default value assigned implicitly based on the type.\n\n*Errors*\n\n* If a variable is used prior to or without declaration.\n\n*Grammar*\n\n[source,ANTLR4]\n----\ndeclaration : type ID assignment? (',' ID assignment?)*;\ntype: ID ('.' ID)* ('[' ']')*;\nassignment: '=' expression;\n----\n\n*Examples*\n\n* Different variations of variable declaration.\n+\n[source,Painless]\n----\nint x;           <1>\nList y;          <2>\nint x, y = 5, z; <3>\ndef d;           <4>\nint i = 10;      <5>\nfloat[] f;       <6>\nMap[][] m;       <7>\n----\n+\n<1> declare `int x`;\n    store default `null` to `x`\n<2> declare `List y`;\n    store default `null` to `y`\n<3> declare `int x`;\n    store default `int 0` to `x`;\n    declare `int y`;\n    store `int 5` to `y`;\n    declare `int z`;\n    store default `int 0` to `z`;\n<4> declare `def d`;\n    store default `null` to `d`\n<5> declare `int i`;\n    store `int 10` to `i`\n<6> declare `float[] f`;\n    store default `null` to `f`\n<7> declare `Map[][] m`;\n    store default `null` to `m`\n\n[[variable-assignment]]\n==== Assignment\n\nUse the `assignment operator '='` to store a value in a variable for use in\nsubsequent operations. Any operation that produces a value can be assigned to\nany variable as long as the <<painless-types, types>> are the same or the\nresultant type can be <<painless-casting, implicitly cast>> to the variable\ntype.\n\n*Errors*\n\n* If the type of value is unable to match the type of variable.\n\n*Grammar*\n\n[source,ANTLR4]\n----\nassignment: ID '=' expression\n----\n\n*Examples*\n\n* Variable assignment with an integer literal.\n+\n[source,Painless]\n----\nint i;  <1>\ni = 10; <2>\n----\n+\n<1> declare `int i`;\n    store default `int 0` to `i`\n<2> store `int 10` to `i`\n+\n* Declaration combined with immediate assignment.\n+\n[source,Painless]\n----\nint i = 10;     <1>\ndouble j = 2.0; <2>\n----\n+\n<1> declare `int i`;\n    store `int 10` to `i`\n<2> declare `double j`;\n    store `double 2.0` to `j`\n+\n* Assignment of one variable to another using primitive type values.\n+\n[source,Painless]\n----\nint i = 10; <1>\nint j = i;  <2>\n----\n+\n<1> declare `int i`;\n    store `int 10` to `i`\n<2> declare `int j`;\n    load from `i` -> `int 10`;\n    store `int 10` to `j`\n+\n* Assignment with reference types using the\n  <<new-instance-operator, new instance operator>>.\n+\n[source,Painless]\n----\nArrayList l = new ArrayList(); <1>\nMap m = new HashMap();         <2>\n----\n+\n<1> declare `ArrayList l`;\n    allocate `ArrayList` instance -> `ArrayList reference`;\n    store `ArrayList reference` to `l`\n<2> declare `Map m`;\n    allocate `HashMap` instance -> `HashMap reference`;\n    implicit cast `HashMap reference` to `Map reference` -> `Map reference`;\n    store `Map reference` to `m`\n+\n* Assignment of one variable to another using reference type values.\n+\n[source,Painless]\n----\nList l = new ArrayList(); <1>\nList k = l;               <2>\nList m;                   <3>\nm = k;                    <4>\n----\n+\n<1> declare `List l`;\n    allocate `ArrayList` instance -> `ArrayList reference`;\n    implicit cast `ArrayList reference` to `List reference` -> `List reference`;\n    store `List reference` to `l`\n<2> declare `List k`;\n    load from `l` -> `List reference`;\n    store `List reference` to `k`;\n    (note `l` and `k` refer to the same instance known as a shallow-copy)\n<3> declare `List m`;\n    store default `null` to `m`\n<4> load from `k` -> `List reference`;\n    store `List reference` to `m`;\n    (note `l`, `k`, and `m` refer to the same instance)\n+\n* Assignment with array type variables using the\n  <<new-array-operator, new array operator>>.\n+\n[source,Painless]\n----\nint[] ia1;                   <1>\nia1 = new int[2];            <2>\nia1[0] = 1;                  <3>\nint[] ib1 = ia1;             <4>\nint[][] ic2 = new int[2][5]; <5>\nic2[1][3] = 2;               <6>\nic2[0] = ia1;                <7>\n----\n+\n<1> declare `int[] ia1`;\n    store default `null` to `ia1`\n<2> allocate `1-d int array` instance with `length [2]`\n            -> `1-d int array reference`;\n    store `1-d int array reference` to `ia1`\n<3> load from `ia1` -> `1-d int array reference`;\n    store `int 1` to `index [0]` of `1-d int array reference`\n<4> declare `int[] ib1`;\n    load from `ia1` -> `1-d int array reference`;\n    store `1-d int array reference` to `ib1`;\n    (note `ia1` and `ib1` refer to the same instance known as a shallow copy)\n<5> declare `int[][] ic2`;\n    allocate `2-d int array` instance with `length [2, 5]`\n            -> `2-d int array reference`;\n    store `2-d int array reference` to `ic2`\n<6> load from `ic2` -> `2-d int array reference`;\n    store `int 2` to `index [1, 3]` of `2-d int array reference`\n<7> load from `ia1` -> `1-d int array reference`;\n    load from `ic2` -> `2-d int array reference`;\n    store `1-d int array reference` to\n            `index [0]` of `2-d int array reference`;\n    (note `ia1`, `ib1`, and `index [0]` of `ia2` refer to the same instance)\n"
}