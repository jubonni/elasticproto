{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.130579",
        "size": 4901,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/painless-runtime-fields-context.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "painless-runtime-fields-context",
        "version": "8.15"
    },
    "doc": "[[painless-runtime-fields-context]]\n=== Runtime fields context\nUse a Painless script to calculate and emit\n<<painless-runtime-fields,runtime field>> values.\n\nSee the {ref}/runtime.html[runtime fields] documentation for more information\nabout how to use runtime fields.\n\n*Methods*\n\n--\n[[runtime-emit-method]]\n// tag::runtime-field-emit[]\n`emit`:: (Required)\n        Accepts the values from the script valuation. Scripts can call the\n        `emit` method multiple times to emit multiple values.\n+\nThe `emit` method applies only to scripts used in a\n<<painless-execute-runtime-context,runtime fields context>>.\n+\nIMPORTANT: The `emit` method cannot accept `null` values. Do not call this\nmethod if the referenced fields do not have any values.\n+\n.Signatures of `emit`\n[%collapsible%open]\n====\nThe signature for `emit` depends on the `type` of the field.\n\n[horizontal]\n`boolean`::   `emit(boolean)`\n`date`::      `emit(long)`\n`double`::    `emit(double)`\n`geo_point`:: `emit(double lat, double lon)`\n`ip`::        `emit(String)`\n`long`::      `emit(long)`\n`keyword`::   `emit(String)`\n====\n// end::runtime-field-emit[]\n--\n\n--\n`grok`::\n        Defines a {ref}/grok-processor.html[grok pattern] to extract structured fields out of a single text field within a document. A grok pattern is like a regular expression that supports aliased expressions that can be reused. See {ref}/runtime-examples.html#runtime-examples-grok[Define a runtime field with a grok pattern].\n+\n.Properties of `grok`\n[%collapsible%open]\n====\n`extract`::\n        Indicates the values to return. This method applies only to `grok` and\n        `dissect` methods.\n====\n--\n\n--\n`dissect`::\n        Defines a {ref}/dissect-processor.html[dissect pattern]. Dissect operates much like grok, but does not accept regular expressions. See {ref}/runtime-examples.html#runtime-examples-dissect[Define a runtime field with a dissect pattern].\n+\n.Properties of `dissect`\n[%collapsible%open]\n====\n`extract`::\n        Indicates the values to return. This method applies only to `grok` and\n        `dissect` methods.\n====\n--\n\n*Variables*\n\n`params` (`Map`, read-only)::\n        User-defined parameters passed in as part of the query.\n\n`doc` (`Map`, read-only)::\n        Contains the fields of the specified document where each field is a\n        `List` of values.\n\n{ref}/mapping-source-field.html[`params['_source']`] (`Map`, read-only)::\n        Contains extracted JSON in a `Map` and `List` structure for the fields\n        existing in a stored document.\n\n*Return*\n\n`void`::\n        No expected return value.\n\n*API*\n\nBoth the standard <<painless-api-reference-shared, Painless API>> and\n<<painless-api-reference-field, Specialized Field API>> are available.\n\n\n*Example*\n\nTo run the examples, first follow the steps in\n<<painless-context-examples, context examples>>.\n\nThen, run the following request to define a runtime field named `day_of_week`.\nThis field contains a script with the same `source` defined in\n<<painless-field-context,Field context>>, but also uses an `emit` function\nthat runtime fields require when defining a Painless script.\n\nBecause `day_of_week` is a runtime field, it isn't indexed, and the included\nscript only runs at query time:\n\n[source,console]\n----\nPUT seats/_mapping\n{\n  \"runtime\": {\n    \"day_of_week\": {\n      \"type\": \"keyword\",\n      \"script\": {\n        \"source\": \"emit(doc['datetime'].value.getDayOfWeekEnum().toString())\"\n      }\n    }\n  }\n}\n----\n// TEST[setup:seats]\n\nAfter defining the runtime field and script in the mappings, you can run a\nquery that includes a terms aggregation for `day_of_week`. When the query runs,\n{es} evaluates the included Painless script and dynamically generates a value\nbased on the script definition:\n\n[source,console]\n----\nGET seats/_search\n{\n  \"size\": 0,\n  \"fields\": [\n    \"time\",\n    \"day_of_week\"\n    ],\n    \"aggs\": {\n      \"day_of_week\": {\n        \"terms\": {\n          \"field\": \"day_of_week\",\n          \"size\": 10\n        }\n      }\n    }\n}\n----\n// TEST[continued]\n\nThe response includes `day_of_week` for each hit. {es} calculates the value for\nthis field dynamically at search time by operating on the `datetime` field\ndefined in the mappings.\n\n[source,console-result]\n----\n{\n  ...\n  \"hits\" : {\n    \"total\" : {\n      \"value\" : 11,\n      \"relation\" : \"eq\"\n    },\n    \"max_score\" : null,\n    \"hits\" : [ ]\n  },\n  \"aggregations\" : {\n    \"day_of_week\" : {\n      \"doc_count_error_upper_bound\" : 0,\n      \"sum_other_doc_count\" : 0,\n      \"buckets\" : [\n        {\n          \"key\" : \"TUESDAY\",\n          \"doc_count\" : 5\n        },\n        {\n          \"key\" : \"THURSDAY\",\n          \"doc_count\" : 4\n        },\n        {\n          \"key\" : \"MONDAY\",\n          \"doc_count\" : 1\n        },\n        {\n          \"key\" : \"SUNDAY\",\n          \"doc_count\" : 1\n        }\n      ]\n    }\n  }\n}\n----\n// TESTRESPONSE[s/\\.\\.\\./\"took\" : $body.took,\"timed_out\" : $body.timed_out,\"_shards\" : $body._shards,/]\n"
}