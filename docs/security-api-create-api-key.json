{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.000271",
        "size": 8101,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-create-api-key.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": false,
        "title": "security-api-create-api-key",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[security-api-create-api-key]]\n=== Create API key API\n++++\n<titleabbrev>Create API keys</titleabbrev>\n++++\n\nCreates an API key for access without requiring basic authentication.\n\n[[security-api-create-api-key-request]]\n==== {api-request-title}\n\n`POST /_security/api_key`\n\n`PUT /_security/api_key`\n\n[[security-api-create-api-key-prereqs]]\n==== {api-prereq-title}\n\n* To use this API, you must have at least the `manage_own_api_key` cluster privilege.\n\nIMPORTANT: If the credential that is used to authenticate this request is\nan API key, the derived API key cannot have any privileges. If you specify privileges, the API returns an error.\nSee the note under <<api-key-role-descriptors,`role_descriptors`>>.\n\n[[security-api-create-api-key-desc]]\n==== {api-description-title}\n\nThe API keys are created by the {es} API key service, which is automatically enabled.\nFor instructions on disabling the API key service, see <<api-key-service-settings>>.\n\nA successful request returns a JSON structure that contains the\nAPI key, its unique id, and its name. If applicable, it also returns expiration\ninformation for the API key in milliseconds.\n\nNOTE: By default, API keys never expire. You can specify expiration information\nwhen you create the API keys.\n\nSee <<api-key-service-settings>> for configuration settings related to API key\nservice.\n\n\n[[security-api-create-api-key-request-body]]\n==== {api-request-body-title}\n\nThe following parameters can be specified in the body of a POST or PUT request:\n\n`name`::\n(Required, string) Specifies the name for this API key.\n\n[[api-key-role-descriptors]]\n`role_descriptors`::\n(Optional, object) The role descriptors for this API\nkey. This parameter is optional. When it is not specified or is an empty array,\nthen the API key will have a _point in time snapshot of permissions of the\nauthenticated user_. If you supply role descriptors then the resultant permissions\nwould be an intersection of API keys permissions and authenticated user's permissions\nthereby limiting the access scope for API keys.\n+\n--\nNOTE: Due to the way in which this permission intersection is calculated, it is not\npossible to create an API key that is a child of another API key, unless the derived\nkey is created without any privileges. In this case, you must explicitly specify a\nrole descriptor with no privileges. The derived API key can be used for\nauthentication; it will not have authority to call {es} APIs.\n\n--\n+\n`applications`::: (list) A list of application privilege entries.\n`application` (required):::: (string) The name of the application to which this entry applies\n`privileges` (required):::: (list) A list of strings, where each element is the name of an application\nprivilege or action.\n`resources` (required):::: (list) A list resources to which the privileges are applied.\n\n`cluster`::: (list) A list of cluster privileges. These privileges define the\ncluster level actions that API keys are able to execute.\n\n`global`::: (object) An object defining global privileges. A global privilege is\na form of cluster privilege that is request-aware. Support for global privileges\nis currently limited to the management of application privileges.\nThis field is optional.\n\n`indices`::: (list) A list of indices permissions entries.\n`field_security`:::: (object) The document fields that the API keys have\nread access to. For more information, see\n<<field-and-document-access-control>>.\n`names` (required):::: (list) A list of indices (or index name patterns) to which the\npermissions in this entry apply.\n`privileges`(required):::: (list) The index level privileges that the API keys\nhave on the specified indices.\n`query`:::: A search query that defines the documents the API keys have\nread access to. A document within the specified indices must match this query in\norder for it to be accessible by the API keys.\n\n`metadata`::: (object) Optional meta-data. Within the `metadata` object, keys\nthat begin with `_` are reserved for system usage.\n\n`restriction`::: (object) Optional restriction for when the role descriptor is allowed to be effective. For more information, see\n<<role-restriction>>.\n`workflows`:::: (list) A list of workflows to which the API key is restricted.\nFor a full list see <<workflows-restriction>>.\n+\n--\nNOTE: In order to use role restriction, an API key must be created with a *single role descriptor*.\n--\n+\n\n`run_as`::: (list) A list of users that the API keys can impersonate.\nFor more information, see\n<<run-as-privilege>>.\n\n`expiration`::\n(Optional, string) Expiration time for the API key. By default, API keys never\nexpire.\n\n`metadata`::\n(Optional, object) Arbitrary metadata that you want to associate with the API key.\nIt supports nested data structure.\nWithin the `metadata` object, keys beginning with `_` are reserved for\nsystem usage.\n\n[[security-api-create-api-key-example]]\n==== {api-examples-title}\n\nThe following example creates an API key:\n\n[source,console]\n----\nPOST /_security/api_key\n{\n  \"name\": \"my-api-key\",\n  \"expiration\": \"1d\",   <1>\n  \"role_descriptors\": { <2>\n    \"role-a\": {\n      \"cluster\": [\"all\"],\n      \"indices\": [\n        {\n          \"names\": [\"index-a*\"],\n          \"privileges\": [\"read\"]\n        }\n      ]\n    },\n    \"role-b\": {\n      \"cluster\": [\"all\"],\n      \"indices\": [\n        {\n          \"names\": [\"index-b*\"],\n          \"privileges\": [\"all\"]\n        }\n      ]\n    }\n  },\n  \"metadata\": {\n    \"application\": \"my-application\",\n    \"environment\": {\n       \"level\": 1,\n       \"trusted\": true,\n       \"tags\": [\"dev\", \"staging\"]\n    }\n  }\n}\n----\n<1> Optional expiration for the API key being generated. If expiration is not\n provided then the API keys do not expire.\n<2> Optional role descriptors for this API key. If not provided, permissions\n of the authenticated user are applied.\n\nA successful call returns a JSON structure that provides\nAPI key information.\n\n[source,console-result]\n----\n{\n  \"id\": \"VuaCfGcBCdbkQm-e5aOx\",        <1>\n  \"name\": \"my-api-key\",\n  \"expiration\": 1544068612110,         <2>\n  \"api_key\": \"ui2lp2axTNmsyakw9tvNnw\", <3>\n  \"encoded\": \"VnVhQ2ZHY0JDZGJrUW0tZTVhT3g6dWkybHAyYXhUTm1zeWFrdzl0dk5udw==\"  <4>\n}\n----\n// TESTRESPONSE[s/VuaCfGcBCdbkQm-e5aOx/$body.id/]\n// TESTRESPONSE[s/1544068612110/$body.expiration/]\n// TESTRESPONSE[s/ui2lp2axTNmsyakw9tvNnw/$body.api_key/]\n// TESTRESPONSE[s/VnVhQ2ZHY0JDZGJrUW0tZTVhT3g6dWkybHAyYXhUTm1zeWFrdzl0dk5udw==/$body.encoded/]\n<1> Unique `id` for this API key\n<2> Optional expiration in milliseconds for this API key\n<3> Generated API key\n<4> API key credentials which is the Base64-encoding of the UTF-8\nrepresentation of the `id` and `api_key` joined by a colon (`:`).\n\nTo use the generated API key, send a request with an `Authorization` header that\ncontains an `ApiKey` prefix followed by the API key credentials\n(the `encoded` value from the response).\n\n[source,shell]\n----\ncurl -H \"Authorization: ApiKey VnVhQ2ZHY0JDZGJrUW0tZTVhT3g6dWkybHAyYXhUTm1zeWFrdzl0dk5udw==\" \\\nhttp://localhost:9200/_cluster/health\\?pretty <1>\n----\n// NOTCONSOLE\n<1> If your node has `xpack.security.http.ssl.enabled` set to `true`, then you\nmust specify `https` when creating your API key\n\nOn a Unix-like system, the `encoded` value can be created with the following\ncommand:\n\n[[concat-api-key]]\n[source,shell]\n----\necho -n \"VuaCfGcBCdbkQm-e5aOx:ui2lp2axTNmsyakw9tvNnw\" | base64 <1>\n----\n<1> Use `-n` so that the `echo` command doesn't print the trailing newline\ncharacter\n\n//tag::create-api-key-with-role-restriction-example[]\nThe following example creates an API key with a <<role-restriction, restriction>> to the `search_application_query` workflow,\nwhich allows to call only <<search-application-search, Search Application Search API>>:\n\n[source,console]\n----\nPOST /_security/api_key\n{\n  \"name\": \"my-restricted-api-key\",\n  \"role_descriptors\": {\n    \"my-restricted-role-descriptor\": {\n      \"indices\": [\n        {\n          \"names\": [\"my-search-app\"],\n          \"privileges\": [\"read\"]\n        }\n      ],\n      \"restriction\":  {\n        \"workflows\": [\"search_application_query\"]\n      }\n    }\n  }\n}\n----\n//end::create-api-key-with-role-restriction-example[]\n"
}