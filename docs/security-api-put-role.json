{
    "meta": {
        "timestamp": "2024-11-01T02:49:24.790066",
        "size": 6314,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-role.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "security-api-put-role",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[security-api-put-role]]\n=== Create or update roles API\n++++\n<titleabbrev>Create or update roles</titleabbrev>\n++++\n\nAdds and updates roles in the native realm.\n\n[[security-api-put-role-request]]\n==== {api-request-title}\n\n`POST /_security/role/<name>` +\n\n`PUT /_security/role/<name>`\n\n\n[[security-api-put-role-prereqs]]\n==== {api-prereq-title}\n\n* To use this API, you must have at least the `manage_security` cluster\nprivilege.\n\n[[security-api-put-role-desc]]\n==== {api-description-title}\n\nThe role management APIs are generally the preferred way to manage roles, rather than using\n<<roles-management-file,file-based role management>>. The create\nor update roles API cannot update roles that are defined in roles files.\n\n[[security-api-put-role-path-params]]\n==== {api-path-parms-title}\n\n`name`::\n  (string) The name of the role.\n\n\n[[security-api-put-role-request-body]]\n==== {api-request-body-title}\n\nThe following parameters can be specified in the body of a PUT or POST request\nand pertain to adding a role:\n\n`applications`:: (list) A list of application privilege entries.\n`application` (required)::: (string) The name of the application to which this entry applies\n`privileges`::: (list) A list of strings, where each element is the name of an application\nprivilege or action.\n`resources`::: (list) A list resources to which the privileges are applied.\n\n`cluster`:: (list) A list of cluster privileges. These privileges define the\ncluster level actions that users with this role are able to execute.\n\n`description`:: (string) A description of the role.\nThe maximum length is `1000` chars.\n\n`global`:: (object) An object defining global privileges. A global privilege is\na form of cluster privilege that is request-aware. Support for global privileges\nis currently limited to the management of application privileges.\nThis field is optional.\n\n`indices`:: (list) A list of indices permissions entries.\n`field_security`::: (object) The document fields that the owners of the role have\nread access to. For more information, see\n<<field-and-document-access-control>>.\n`names` (required)::: (list) A list of indices (or index name patterns) to which the\npermissions in this entry apply.\n`privileges`(required)::: (list) The index level privileges that the owners of the role\nhave on the specified indices.\n`query`::: A search query that defines the documents the owners of the role have\nread access to. A document within the specified indices must match this query in\norder for it to be accessible by the owners of the role.\n\n`metadata`:: (object) Optional meta-data. Within the `metadata` object, keys\nthat begin with `_` are reserved for system usage.\n\n`run_as`:: (list) A list of users that the owners of this role can impersonate.\nFor more information, see\n<<run-as-privilege>>.\n\n`remote_indices`:: (list) A list of remote indices permissions entries.\n+\n--\nNOTE: Remote indices are effective for <<remote-clusters-api-key,remote clusters configured with the API key based model>>.\nThey have no effect for remote clusters configured with the <<remote-clusters-cert,certificate based model>>.\n--\n`clusters` (required)::: (list) A list of cluster aliases to which the permissions\nin this entry apply.\n`field_security`::: (object) The document fields that the owners of the role have\nread access to. For more information, see\n<<field-and-document-access-control>>.\n`names` (required)::: (list) A list of indices (or index name patterns) on the remote clusters\n(specified with `clusters`) to which the permissions in this entry apply.\n`privileges`(required)::: (list) The index level privileges that the owners of the role\nhave on the specified indices.\n`query`::: A search query that defines the documents the owners of the role have\nread access to. A document within the specified indices must match this query in\norder for it to be accessible by the owners of the role.\n\nFor more information, see <<defining-roles>>.\n\n[[security-api-put-role-example]]\n==== {api-examples-title}\n\nThe following example adds a role called `my_admin_role`:\n\n[source,console]\n--------------------------------------------------\nPOST /_security/role/my_admin_role\n{\n  \"description\": \"Grants full access to all management features within the cluster.\",\n  \"cluster\": [\"all\"],\n  \"indices\": [\n    {\n      \"names\": [ \"index1\", \"index2\" ],\n      \"privileges\": [\"all\"],\n      \"field_security\" : { // optional\n        \"grant\" : [ \"title\", \"body\" ]\n      },\n      \"query\": \"{\\\"match\\\": {\\\"title\\\": \\\"foo\\\"}}\" // optional\n    }\n  ],\n  \"applications\": [\n    {\n      \"application\": \"myapp\",\n      \"privileges\": [ \"admin\", \"read\" ],\n      \"resources\": [ \"*\" ]\n    }\n  ],\n  \"run_as\": [ \"other_user\" ], // optional\n  \"metadata\" : { // optional\n    \"version\" : 1\n  }\n}\n--------------------------------------------------\n\nA successful call returns a JSON structure that shows whether the role has been\ncreated or updated.\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"role\": {\n    \"created\": true <1>\n  }\n}\n--------------------------------------------------\n\n<1> When an existing role is updated, `created` is set to false.\n\nThe following example configures a role that can run SQL in JDBC:\n\n// tag::sql-queries-permission[]\n[source,console]\n--------------------------------------------------\nPOST /_security/role/cli_or_drivers_minimal\n{\n  \"cluster\": [\"cluster:monitor/main\"],\n  \"indices\": [\n    {\n      \"names\": [\"test\"],\n      \"privileges\": [\"read\", \"indices:admin/get\"]\n    }\n  ]\n}\n--------------------------------------------------\n// end::sql-queries-permission[]\n\nThe following example configures a role with remote indices privileges on a remote cluster:\n[source,console]\n--------------------------------------------------\nPOST /_security/role/role_with_remote_indices\n{\n  \"remote_indices\": [\n    {\n      \"clusters\": [ \"my_remote\" ], <1>\n      \"names\": [\"logs*\"], <2>\n      \"privileges\": [\"read\", \"read_cross_cluster\", \"view_index_metadata\"] <3>\n    }\n  ]\n}\n--------------------------------------------------\n\n<1> The remote indices privileges apply to remote cluster with the alias `my_remote`.\n<2> Privileges are granted for indices matching pattern `logs*` on the remote cluster ( `my_remote`).\n<3> The actual <<privileges-list-indices,index privileges>> granted for `logs*` on `my_remote`.\n"
}