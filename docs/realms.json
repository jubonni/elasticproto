{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.281579",
        "size": 3395,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/realms.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": false,
        "title": "realms",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[realms]]\n=== Realms\n\nThe {stack-security-features} authenticate users by using realms and one or more\n<<token-authentication-services,token-based authentication services>>.\n\nA _realm_ is used to resolve and authenticate users based on authentication\ntokens. The {security-features} provide the following built-in realms:\n\n_native_::\nAn internal realm where users are stored in a dedicated {es} index.\nThis realm supports an authentication token in the form of username and password,\nand is available by default when no realms are explicitly configured. The users\nare managed via the <<security-user-apis,user management APIs>>.\nSee <<native-realm>>.\n\n_ldap_::\nA realm that uses an external LDAP server to authenticate the\nusers. This realm supports an authentication token in the form of username and\npassword, and requires explicit configuration in order to be used. See\n<<ldap-realm>>.\n\n_active_directory_::\nA realm that uses an external Active Directory Server to authenticate the\nusers. With this realm, users are authenticated by usernames and passwords.\nSee <<active-directory-realm>>.\n\n_pki_::\nA realm that authenticates users using Public Key Infrastructure (PKI). This\nrealm works in conjunction with SSL/TLS and identifies the users through the\nDistinguished Name (DN) of the client's X.509 certificates. See <<pki-realm>>.\n\n_file_::\nAn internal realm where users are defined in files stored on each node in the\n{es} cluster. This realm supports an authentication token in the form\nof username and password and is always available. See <<file-realm>>.\n\n_saml_::\nA realm that facilitates authentication using the SAML 2.0 Web SSO protocol.\nThis realm is designed to support authentication through {kib} and is not\nintended for use in the REST API. See <<saml-realm>>.\n\n_kerberos_::\nA realm that authenticates a user using Kerberos authentication. Users are\nauthenticated on the basis of Kerberos tickets. See <<kerberos-realm>>.\n\n_oidc_::\nA realm that facilitates authentication using OpenID Connect. It enables {es} to serve as an OpenID Connect Relying Party (RP) and provide single sign-on (SSO) support in {kib}. See <<oidc-guide>>.\n\n_jwt_::\nA realm that facilitates using JWT identity tokens as authentication bearer tokens.\nCompatible tokens are OpenID Connect ID Tokens, or custom JWTs containing the same claims.\nSee <<jwt-auth-realm>>.\n\nThe {security-features} also support custom realms. If you need to integrate\nwith another authentication system, you can build a custom realm plugin. For\nmore information, see <<custom-realms>>.\n\n==== Internal and external realms\n\nRealm types can roughly be classified in two categories:\n\nInternal::  Realms that are internal to Elasticsearch and don't require any\ncommunication with external parties. They are fully managed by the {stack}\n{security-features}. There can only be a maximum of one configured realm per\ninternal realm type. The {security-features} provide two internal realm\ntypes: `native` and `file`.\n\nExternal::  Realms that require interaction with parties/components external to\n{es}, typically, with enterprise grade identity management systems. Unlike\ninternal realms, there can be as many external realms as one would like - each\nwith its own unique name and configuration. The {security-features} provide the\nfollowing external realm types: `ldap`, `active_directory`, `saml`, `kerberos`,\nand `pki`.\n"
}