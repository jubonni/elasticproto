{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.375072",
        "size": 10383,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-rollover.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "ilm-rollover",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[ilm-rollover]]\n=== Rollover\n\nPhases allowed: hot.\n\nRolls over a target to a new index when the existing index satisfies\nthe specified rollover conditions.\n\n[NOTE]\n====\nWhen an index is rolled over, the previous index's age is updated to reflect the rollover time. \nThis date, rather than the index's `creation_date`, is used in {ilm} \n`min_age` phase calculations. <<min-age-calculation,Learn more>>.\n====\n\nIMPORTANT: If the rollover action is used on a <<ccr-put-follow,follower index>>,\npolicy execution waits until the leader index rolls over (or is\n<<skipping-rollover, otherwise marked complete>>),\nthen converts the follower index into a regular index with the\n<<ilm-unfollow, Unfollow action>>.\n\nA rollover target can be a <<data-streams, data stream>> or an <<aliases,index\nalias>>. When targeting a data stream, the new index becomes the data stream's\nwrite index and its generation is incremented.\n\nTo roll over an index alias, the alias and its write index must meet the\nfollowing conditions:\n\n* The index name must match the pattern '^.*-\\\\d+$', for example (`my-index-000001`).\n* The `index.lifecycle.rollover_alias` must be configured as the alias to roll over.\n* The index must be the <<write-index,write index>> for the alias.\n\nFor example, if `my-index-000001` has the alias `my_data`,\nthe following settings must be configured.\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"settings\": {\n    \"index.lifecycle.name\": \"my_policy\",\n    \"index.lifecycle.rollover_alias\": \"my_data\"\n  },\n  \"aliases\": {\n    \"my_data\": {\n      \"is_write_index\": true\n    }\n  }\n}\n--------------------------------------------------\n\n[[ilm-rollover-options]]\n==== Options\n\nA rollover action must specify at least one `max_*` condition, it may include zero\nor more `min_*` conditions. An empty rollover action is invalid.\n\nThe index will roll over once any `max_*` condition is satisfied and all\n`min_*` conditions are satisfied. Note, however, that empty indices are not rolled\nover by default.\n\n// tag::rollover-conditions[]\n`max_age`::\n(Optional,  <<time-units, time units>>)\nTriggers rollover after the maximum elapsed time from index creation is reached.\nThe elapsed time is always calculated since the index creation time, even if the\nindex origination date is configured to a custom date, such as when using the\n<<index-lifecycle-parse-origination-date, index.lifecycle.parse_origination_date>> or\n<<index-lifecycle-origination-date, index.lifecycle.origination_date>> settings.\n\n`max_docs`::\n(Optional, integer)\nTriggers rollover after the specified maximum number of documents is reached.\nDocuments added since the last refresh are not included in the document count.\nThe document count does *not* include documents in replica shards.\n\n`max_size`::\n(Optional, <<byte-units, byte units>>)\nTriggers rollover when the index reaches a certain size.\nThis is the total size of all primary shards in the index.\nReplicas are not counted toward the maximum index size.\n+\nTIP: To see the current index size, use the <<cat-indices, _cat indices>> API.\nThe `pri.store.size` value shows the combined size of all primary shards.\n\n`max_primary_shard_size`::\n(Optional, <<byte-units, byte units>>)\nTriggers rollover when the largest primary shard in the index reaches a certain size.\nThis is the maximum size of the primary shards in the index. As with `max_size`,\nreplicas are ignored.\n+\nTIP: To see the current shard size, use the <<cat-shards, _cat shards>> API.\nThe `store` value shows the size each shard, and `prirep` indicates whether a\nshard is a primary (`p`) or a replica (`r`).\n\n`max_primary_shard_docs`::\n(Optional, integer)\nTriggers rollover when the largest primary shard in the index reaches a certain number of documents.\nThis is the maximum docs of the primary shards in the index. As with `max_docs`,\nreplicas are ignored.\n+\nTIP: To see the current shard docs, use the <<cat-shards, _cat shards>> API.\nThe `docs` value shows the number of documents each shard.\n\n`min_age`::\n(Optional,  <<time-units, time units>>)\nPrevents rollover until after the minimum elapsed time from index creation is reached.\nSee notes on `max_age`.\n\n`min_docs`::\n(Optional, integer)\nPrevents rollover until after the specified minimum number of documents is reached.\nSee notes on `max_docs`.\n\n`min_size`::\n(Optional, <<byte-units, byte units>>)\nPrevents rollover until the index reaches a certain size.\nSee notes on `max_size`.\n\n`min_primary_shard_size`::\n(Optional, <<byte-units, byte units>>)\nPrevents rollover until the largest primary shard in the index reaches a certain size.\nSee notes on `max_primary_shard_size`.\n\n`min_primary_shard_docs`::\n(Optional, integer)\nPrevents rollover until the largest primary shard in the index reaches a certain number of documents.\nSee notes on `max_primary_shard_docs`.\n\n// end::rollover-conditions[]\n\nIMPORTANT: Empty indices will not be rolled over, even if they have an associated `max_age` that\nwould otherwise result in a roll over occurring. A policy can override this behavior, and explicitly\nopt in to rolling over empty indices, by adding a `\"min_docs\": 0` condition. This can also be\ndisabled on a cluster-wide basis by setting `indices.lifecycle.rollover.only_if_has_documents` to\n`false`.\n\nIMPORTANT: The rollover action implicitly always rolls over a data stream or alias if one or more shards contain\n200000000 or more documents. Normally a shard will reach 50GB long before it reaches 200M documents,\nbut this isn't the case for space efficient data sets. Search performance will very likely suffer\nif a shard contains more than 200M documents. This is the reason of the builtin limit.\n\n[[ilm-rollover-ex]]\n==== Example\n\n[[ilm-rollover-primar-shardsize-ex]]\n===== Roll over based on largest primary shard size\n\nThis example rolls the index over when its largest primary shard is at least 50 gigabytes.\n\n[source,console]\n--------------------------------------------------\nPUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\" : {\n            \"max_primary_shard_size\": \"50gb\"\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n[[ilm-rollover-size-ex]]\n===== Roll over based on index size\n\nThis example rolls the index over when it is at least 100 gigabytes.\n\n[source,console]\n--------------------------------------------------\nPUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\" : {\n            \"max_size\": \"100gb\"\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n[ilm-rollover-documents-ex]]\n===== Roll over based on document count\n\nThis example rolls the index over when it contains at least one hundred million documents.\n\n[source,console]\n--------------------------------------------------\nPUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\" : {\n            \"max_docs\": 100000000\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n[ilm-rollover-documents-ex]]\n===== Roll over based on document count of the largest primary shard\n\nThis example rolls the index over when it contains at least ten million documents of the largest primary shard.\n\n[source,console]\n--------------------------------------------------\nPUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\" : {\n            \"max_primary_shard_docs\": 10000000\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n[ilm-rollover-age-ex]]\n===== Roll over based on index age\n\nThis example rolls the index over if it was created at least 7 days ago.\n\n[source,console]\n--------------------------------------------------\nPUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\" : {\n            \"max_age\": \"7d\"\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n[ilm-rollover-conditions-ex]]\n===== Roll over using multiple conditions\n\nWhen you specify multiple rollover conditions,\nthe index is rolled over when _any_ of the `max_*` and _all_ of the `min_*` conditions are met.\nThis example rolls the index over if it is at least 7 days old or at least 100 gigabytes,\nbut only as long as the index contains at least 1000 documents.\n\n[source,console]\n--------------------------------------------------\nPUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\" : {\n            \"max_age\": \"7d\",\n            \"max_size\": \"100gb\",\n            \"min_docs\": 1000\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n[ilm-rollover-conditions-ex]]\n===== Roll over while maintaining shard sizes\n\nThis example rolls the index over when the primary shard size is at least 50gb,\nor when the index is at least 30 days old, but only as long as a primary shard is at least 1gb.\nFor low-volume indices, this prevents the creation of many small shards.\n\n[source,console]\n--------------------------------------------------\nPUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\" : {\n            \"max_primary_shard_size\": \"50gb\",\n            \"max_age\": \"30d\",\n            \"min_primary_shard_size\": \"1gb\"\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n[ilm-rollover-block-ex]]\n===== Rollover condition blocks phase transition\n\nThe rollover action only completes if one of its conditions is met.\nThis means that any subsequent phases are blocked until rollover succeeds.\n\nFor example, the following policy deletes the index one day after it rolls over.\nIt does not delete the index one day after it was created.\n\n[source,console]\n--------------------------------------------------\nPUT /_ilm/policy/rollover_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\": {\n            \"max_size\": \"50gb\"\n          }\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"1d\",\n        \"actions\": {\n          \"delete\": {}\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n"
}