{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.973579",
        "size": 3568,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-info-content.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "ml-info-content",
        "version": "8.15"
    },
    "doc": "[\"appendix\",role=\"exclude\",id=\"ml-info-functions\"]\n= Information content functions\n\nThe information content functions detect anomalies in the amount of information\nthat is contained in strings within a bucket. These functions can be used as\na more sophisticated method to identify incidences of data exfiltration or\nC2C activity, when analyzing the size in bytes of the data might not be sufficient.\n\nThe {ml-features} include the following information content functions:\n\n* `info_content`, `high_info_content`, `low_info_content`\n\n[discrete]\n[[ml-info-content]]\n== Info_content, High_info_content, Low_info_content\n\nThe `info_content` function detects anomalies in the amount of information that\nis contained in strings in a bucket.\n\nIf you want to monitor for unusually high amounts of information,\nuse `high_info_content`.\nIf want to look at drops in information content, use `low_info_content`.\n\nThese functions support the following properties:\n\n* `field_name` (required)\n* `by_field_name` (optional)\n* `over_field_name` (optional)\n* `partition_field_name` (optional)\n\nFor more information about those properties, see the\n{ref}/ml-put-job.html#ml-put-job-request-body[create {anomaly-jobs} API].\n\n.Example 1: Analyzing subdomain strings with the info_content function\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"info_content\",\n  \"field_name\" : \"subdomain\",\n  \"over_field_name\" : \"highest_registered_domain\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf you use this `info_content` function in a detector in your {anomaly-job}, it\nmodels information that is present in the `subdomain` string. It detects\nanomalies where the information content is unusual compared to the other\n`highest_registered_domain` values. An anomaly could indicate an abuse of the\nDNS protocol, such as malicious command and control activity.\n\nNOTE: In this example, both high and low values are considered anomalous.\nIn many use cases, the `high_info_content` function is often a more appropriate\nchoice.\n\n.Example 2: Analyzing query strings with the high_info_content function\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"high_info_content\",\n  \"field_name\" : \"query\",\n  \"over_field_name\" : \"src_ip\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf you use this `high_info_content` function in a detector in your {anomaly-job},\nit models information content that is held in the DNS query string. It detects\n`src_ip` values where the information content is unusually high compared to\nother `src_ip` values. This example is similar to the example for the\n`info_content` function, but it reports anomalies only where the amount of\ninformation content is higher than expected.\n\n.Example 3: Analyzing message strings with the low_info_content function\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"low_info_content\",\n  \"field_name\" : \"message\",\n  \"by_field_name\" : \"logfilename\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf you use this `low_info_content` function in a detector in your {anomaly-job},\nit models information content that is present in the message string for each\n`logfilename`. It detects anomalies where the information content is low\ncompared to its past behavior. For example, this function detects unusually low\namounts of information in a collection of rolling log files. Low information\nmight indicate that a process has entered an infinite loop or that logging\nfeatures have been disabled.\n"
}