{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.785067",
        "size": 8524,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-update-cross-cluster-api-key.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "security-api-update-cross-cluster-api-key",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[security-api-update-cross-cluster-api-key]]\n=== Update Cross-Cluster API key API\n\n++++\n<titleabbrev>Update Cross-Cluster API key</titleabbrev>\n++++\n\nUpdate an existing cross-cluster API Key that is used for <<remote-clusters-api-key,API key based remote cluster>> access.\n\n\n[[security-api-update-cross-cluster-api-key-request]]\n==== {api-request-title}\n\n`PUT /_security/cross_cluster/api_key/<id>`\n\n[[security-api-update-cross-cluster-api-key-prereqs]]\n==== {api-prereq-title}\n\n* To use this API, you must have at least the `manage_security` cluster privilege.\nUsers can only update API keys that they created.\nTo update another user's API key, use the <<run-as-privilege,`run_as` feature>>\nto submit a request on behalf of another user.\n\nIMPORTANT: It's not possible to use an API key as the authentication credential for this API.\nTo update an API key, the owner user's credentials are required.\n\n[[security-api-update-cross-cluster-api-key-desc]]\n==== {api-description-title}\n\nUse this API to update cross-cluster API keys created by the <<security-api-create-cross-cluster-api-key,Create Cross-Cluster API key API>>.\nIt's not possible to update expired API keys, or API keys that have been invalidated by\n<<security-api-invalidate-api-key,invalidate API Key>>.\n\nThis API supports updates to an API key's access scope, metadata and expiration.\nThe owner user's information, e.g. `username`, `realm`, is also updated automatically on every call.\n\nNOTE: This API cannot update <<security-api-create-api-key,REST API keys>>, which should be updated by\neither <<security-api-update-api-key>> or <<security-api-bulk-update-api-keys>> API.\n\n[[security-api-update-cross-cluster-api-key-path-params]]\n==== {api-path-parms-title}\n\n`id`::\n(Required, string) The ID of the API key to update.\n\n[[security-api-update-cross-cluster-api-key-request-body]]\n==== {api-request-body-title}\n\nYou can specify the following parameters in the request body. The parameters are optional. But they cannot all be absent.\n\n[[security-api-update-cross-cluster-api-key-api-key-role-descriptors]]\n`access`::\n(Optional, object) The access to be granted to this API key. The access is\ncomposed of permissions for cross cluster search and cross cluster replication.\nAt least one of them must be specified.\nWhen specified, the new access assignment fully replaces the previously assigned access.\nRefer to the <<cross-cluster-api-key-access,parameter of the same of the Create Cross-Cluster API key API>>\nfor the field's structure.\n\n`metadata`::\n(Optional, object) Arbitrary metadata that you want to associate with the API key.\nIt supports nested data structure.\nWithin the `metadata` object, top-level keys beginning with `_` are reserved for system usage.\nWhen specified, this fully replaces metadata previously associated with the API key.\n\n`expiration`::\n(Optional, string) Expiration time for the API key. By default, API keys never expire. Can be omitted to leave unchanged.\n\n[[security-api-update-cross-cluster-api-key-response-body]]\n==== {api-response-body-title}\n\n`updated`::\n(boolean) If `true`, the API key was updated.\nIf `false`, the API key didn't change because no change was detected.\n\n[[security-api-update-cross-cluster-api-key-example]]\n==== {api-examples-title}\n\nIf you create a cross-cluster API key as follows:\n\n[source,console]\n------------------------------------------------------------\nPOST /_security/cross_cluster/api_key\n{\n  \"name\": \"my-cross-cluster-api-key\",\n  \"access\": {\n    \"search\": [\n      {\n        \"names\": [\"logs*\"]\n      }\n    ]\n  },\n  \"metadata\": {\n    \"application\": \"search\"\n  }\n}\n------------------------------------------------------------\n\nA successful call returns a JSON structure that provides API key information.\nFor example:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"id\": \"VuaCfGcBCdbkQm-e5aOx\",\n  \"name\": \"my-cross-cluster-api-key\",\n  \"api_key\": \"ui2lp2axTNmsyakw9tvNnw\",\n  \"encoded\": \"VnVhQ2ZHY0JDZGJrUW0tZTVhT3g6dWkybHAyYXhUTm1zeWFrdzl0dk5udw==\"\n}\n--------------------------------------------------\n// TESTRESPONSE[s/VuaCfGcBCdbkQm-e5aOx/$body.id/]\n// TESTRESPONSE[s/ui2lp2axTNmsyakw9tvNnw/$body.api_key/]\n// TESTRESPONSE[s/VnVhQ2ZHY0JDZGJrUW0tZTVhT3g6dWkybHAyYXhUTm1zeWFrdzl0dk5udw==/$body.encoded/]\n\nInformation of the API key, including its exact role descriptor can be inspected with\nthe <<security-api-get-api-key,Get API key API>>\n\n[source,console]\n--------------------------------------------------\nGET /_security/api_key?id=VuaCfGcBCdbkQm-e5aOx\n--------------------------------------------------\n// TEST[s/VuaCfGcBCdbkQm-e5aOx/$body.id/]\n// TEST[continued]\n\nA successful call returns a JSON structure that contains the information of the API key:\n\n[source,js]\n--------------------------------------------------\n{\n  \"api_keys\": [\n    {\n      \"id\": \"VuaCfGcBCdbkQm-e5aOx\",\n      \"name\": \"my-cross-cluster-api-key\",\n      \"type\": \"cross_cluster\",\n      \"creation\": 1548550550158,\n      \"expiration\": null,\n      \"invalidated\": false,\n      \"username\": \"myuser\",\n      \"realm\": \"native1\",\n      \"metadata\": {\n        \"application\": \"search\"\n      },\n      \"role_descriptors\": {\n        \"cross_cluster\": {  <1>\n          \"cluster\": [\n              \"cross_cluster_search\"\n          ],\n          \"indices\": [\n            {\n              \"names\": [\n                \"logs*\"\n              ],\n              \"privileges\": [\n                \"read\", \"read_cross_cluster\", \"view_index_metadata\"\n              ],\n              \"allow_restricted_indices\": false\n            }\n          ],\n          \"applications\": [ ],\n          \"run_as\": [ ],\n          \"metadata\": { },\n          \"transient_metadata\": {\n            \"enabled\": true\n          }\n        }\n      },\n      \"access\": {  <2>\n        \"search\": [\n          {\n            \"names\": [\n              \"logs*\"\n            ],\n            \"allow_restricted_indices\": false\n          }\n        ]\n      }\n    }\n  ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n<1> Role descriptor corresponding to the specified `access` scope at creation time.\nIn this example, it grants cross cluster search permission for the `logs*` index pattern.\n<2> The `access` corresponds to the value specified at API key creation time.\n\n\nThe following example updates the API key created above, assigning it new access scope and metadata:\n\n[source,console]\n----\nPUT /_security/cross_cluster/api_key/VuaCfGcBCdbkQm-e5aOx\n{\n  \"access\": {\n    \"replication\": [\n      {\n        \"names\": [\"archive\"]\n      }\n    ]\n  },\n  \"metadata\": {\n    \"application\": \"replication\"\n  }\n}\n----\n// TEST[s/VuaCfGcBCdbkQm-e5aOx/\\${body.api_keys.0.id}/]\n// TEST[continued]\n\nA successful call returns a JSON structure indicating that the API key was updated:\n\n[source,console-result]\n----\n{\n  \"updated\": true\n}\n----\n\nThe API key's permissions after the update can be inspected again with the <<security-api-get-api-key,Get API key API>>\nand it will be:\n\n[source,js]\n--------------------------------------------------\n{\n  \"api_keys\": [\n    {\n      \"id\": \"VuaCfGcBCdbkQm-e5aOx\",\n      \"name\": \"my-cross-cluster-api-key\",\n      \"type\": \"cross_cluster\",\n      \"creation\": 1548550550158,\n      \"expiration\": null,\n      \"invalidated\": false,\n      \"username\": \"myuser\",\n      \"realm\": \"native1\",\n      \"metadata\": {\n        \"application\": \"replication\"\n      },\n      \"role_descriptors\": {\n        \"cross_cluster\": {  <1>\n          \"cluster\": [\n              \"cross_cluster_replication\"\n          ],\n          \"indices\": [\n            {\n              \"names\": [\n                \"archive*\"\n              ],\n              \"privileges\": [\n                \"cross_cluster_replication\", \"cross_cluster_replication_internal\"\n              ],\n              \"allow_restricted_indices\": false\n            }\n          ],\n          \"applications\": [ ],\n          \"run_as\": [ ],\n          \"metadata\": { },\n          \"transient_metadata\": {\n            \"enabled\": true\n          }\n        }\n      },\n      \"access\": {  <2>\n        \"replication\": [\n          {\n            \"names\": [\n              \"archive*\"\n            ],\n            \"allow_restricted_indices\": false\n          }\n        ]\n      }\n    }\n  ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n<1> Role descriptor is updated to be the `access` scope specified at update time.\nIn this example, it is updated to grant the cross cluster replication permission\nfor the `archive*` index pattern.\n<2> The `access` corresponds to the value specified at API key update time.\n"
}