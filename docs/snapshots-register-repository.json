{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.082067",
        "size": 11636,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/snapshots-register-repository.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "snapshots-register-repository",
        "version": "8.15"
    },
    "doc": "[[snapshots-register-repository]]\n== Register a snapshot repository\n++++\n<titleabbrev>Register a repository</titleabbrev>\n++++\n\nThis guide shows you how to register a snapshot repository. A snapshot\nrepository is an off-cluster storage location for your snapshots. You must\nregister a repository before you can take or restore snapshots.\n\nIn this guide, you\u2019ll learn how to:\n\n* Register a snapshot repository\n* Verify that a repository is functional\n* Clean up a repository to remove unneeded files\n\n[discrete]\n[[snapshot-repo-prereqs]]\n=== Prerequisites\n\n// tag::kib-snapshot-prereqs[]\n* To use {kib}'s **Snapshot and Restore** feature, you must have the following\npermissions:\n\n** <<privileges-list-cluster,Cluster privileges>>: `monitor`, `manage_slm`,\n`cluster:admin/snapshot`, and `cluster:admin/repository`\n\n** <<privileges-list-indices,Index privilege>>: `all` on the `monitor` index\n// end::kib-snapshot-prereqs[]\n\ninclude::apis/put-repo-api.asciidoc[tag=put-repo-api-prereqs]\n\n[discrete]\n[[snapshot-repo-considerations]]\n=== Considerations\n\nWhen registering a snapshot repository, keep the following in mind:\n\n* Each snapshot repository is separate and independent. {es} doesn't share\ndata between repositories.\n\n* {blank}\n+\n--\n// tag::multi-cluster-repo[]\nClusters should only register a particular snapshot repository bucket once. \nIf you register the same snapshot repository with multiple clusters, only one\ncluster should have write access to the repository. On other clusters, register\nthe repository as read-only.\n\nThis prevents multiple clusters from writing to the repository at the same time\nand corrupting the repository\u2019s contents. It also prevents {es} from caching the\nrepository's contents, which means that changes made by other clusters will\nbecome visible straight away.\n// end::multi-cluster-repo[]\n--\n\n* When upgrading {es} to a newer version you can continue to use the same\nrepository you were using before the upgrade. If the repository is accessed by\nmultiple clusters, they should all have the same version. Once a repository has\nbeen modified by a particular version of {es}, it may not work correctly when\naccessed by older versions. However, you will be able to recover from a failed\nupgrade by restoring a snapshot taken before the upgrade into a cluster running\nthe pre-upgrade version, even if you have taken more snapshots during or after\nthe upgrade.\n\n[discrete]\n[[manage-snapshot-repos]]\n=== Manage snapshot repositories\n\nYou can register and manage snapshot repositories in two ways:\n\n* {kib}'s **Snapshot and Restore** feature\n* {es}'s <<snapshot-restore-repo-apis,snapshot repository management APIs>>\n\nTo manage repositories in {kib}, go to the main menu and click **Stack\nManagement** > **Snapshot and Restore** > **Repositories**. To register a\nsnapshot repository, click **Register repository**.\n\nYou can also register a repository using the <<put-snapshot-repo-api,Create\nsnapshot repository API>>.\n\n[discrete]\n[[snapshot-repo-types]]\n=== Snapshot repository types\n\nSupported snapshot repository types vary based on your deployment type:\n\n* <<ess-repo-types>>\n* <<self-managed-repo-types>>\n\n[discrete]\n[[ess-repo-types]]\n==== {ess} repository types\n\n{ess-trial}[{ess} deployments] automatically register the\n{cloud}/ec-snapshot-restore.html[`found-snapshots`] repository. {ess} uses this\nrepository and the `cloud-snapshot-policy` to take periodic snapshots of your\ncluster. You can also use the `found-snapshots` repository for your own\n<<automate-snapshots-slm,{slm-init} policies>> or to store searchable snapshots.\n\nThe `found-snapshots` repository is specific to each deployment. However, you\ncan restore snapshots from another deployment's `found-snapshots` repository if\nthe deployments are under the same account and in the same region. See the Cloud\n{cloud}/ec-snapshot-restore.html[Snapshot and restore] documentation to learn more.\n\n{ess} deployments also support the following repository types:\n\n* {cloud}/ec-azure-snapshotting.html[Azure]\n* {cloud}/ec-gcs-snapshotting.html[Google Cloud Storage]\n* {cloud}/ec-aws-custom-repository.html[AWS S3]\n* <<snapshots-source-only-repository,Source-only>>\n\n[discrete]\n[[self-managed-repo-types]]\n==== Self-managed repository types\n\nIf you manage your own {es} cluster, you can use the following built-in\nsnapshot repository types:\n\n* <<repository-azure,Azure>>\n* <<repository-gcs,Google Cloud Storage>>\n* <<repository-s3,AWS S3>>\n* <<snapshots-filesystem-repository,Shared file system>>\n* <<snapshots-read-only-repository,Read-only URL>>\n* <<snapshots-source-only-repository,Source-only>>\n\n[[snapshots-repository-plugins]]\nOther repository types are available through official plugins:\n\n* {plugins}/repository-hdfs.html[Hadoop Distributed File System (HDFS)]\n\nYou can also use alternative storage implementations with these repository\ntypes, as long as the alternative implementation is fully compatible. For\ninstance, https://minio.io[MinIO] provides an alternative implementation of the\nAWS S3 API and you can use MinIO with the <<repository-s3,`s3` repository\ntype>>.\n\nNote that some storage systems claim to be compatible with these repository\ntypes without emulating their behaviour in full. {es} requires full\ncompatibility. In particular the alternative implementation must support the\nsame set of API endpoints, return the same errors in case of failures, and\noffer equivalent consistency guarantees and performance even when accessed\nconcurrently by multiple nodes. Incompatible error codes, consistency or\nperformance may be particularly hard to track down since errors, consistency\nfailures, and performance issues are usually rare and hard to reproduce.\n\nYou can perform some basic checks of the suitability of your storage system\nusing the <<repo-analysis-api>> API. If this API does not complete\nsuccessfully, or indicates poor performance, then your storage system is not\nfully compatible and is therefore unsuitable for use as a snapshot repository.\nYou will need to work with the supplier of your storage system to address any\nincompatibilities you encounter.\n\n[discrete]\n[[snapshots-repository-verification]]\n=== Verify a repository\n\nWhen you register a snapshot repository, {es} automatically verifies that the\nrepository is available and functional on all master and data nodes.\n\nTo disable this verification, set the <<put-snapshot-repo-api,create snapshot\nrepository API>>'s `verify` query parameter to `false`. You can't disable\nrepository verification in {kib}.\n\n[source,console]\n----\nPUT _snapshot/my_unverified_backup?verify=false\n{\n  \"type\": \"fs\",\n  \"settings\": {\n    \"location\": \"my_unverified_backup_location\"\n  }\n}\n----\n// TEST[setup:setup-repository]\n// TEST[s/my_unverified_backup_location/my_repository/]\n\nIf wanted, you can manually run the repository verification check. To verify a\nrepository in {kib}, go to the **Repositories** list page and click the name of\na repository. Then click **Verify repository**. You can also use the\n<<verify-snapshot-repo-api,verify snapshot repository API>>.\n\n[source,console]\n----\nPOST _snapshot/my_unverified_backup/_verify\n----\n// TEST[continued]\n// TEST[s/my_unverified_backup_location/my_repository/]\n\nIf successful, the request returns a list of nodes used to verify the\nrepository. If verification fails, the request returns an error.\n\nYou can test a repository more thoroughly using the\n<<repo-analysis-api,repository analysis API>>.\n\n[discrete]\n[[snapshots-repository-cleanup]]\n=== Clean up a repository\n\nRepositories can over time accumulate data that is not referenced by any existing snapshot. This is a result of the data safety guarantees\nthe snapshot functionality provides in failure scenarios during snapshot creation and the decentralized nature of the snapshot creation\nprocess. This unreferenced data does in no way negatively impact the performance or safety of a snapshot repository but leads to higher\nthan necessary storage use. To remove this unreferenced data, you can run a cleanup operation on the repository. This will\ntrigger a complete accounting of the repository's contents and delete any unreferenced data.\n\nTo run the repository cleanup operation in {kib}, go to the **Repositories**\nlist page and click the name of a repository. Then click **Clean up\nrepository**.\n\nYou can also use the <<clean-up-snapshot-repo-api,clean up snapshot repository\nAPI>>.\n\n[source,console]\n----\nPOST _snapshot/my_repository/_cleanup\n----\n// TEST[setup:setup-snapshots]\n\nThe API returns:\n\n[source,console-result]\n----\n{\n  \"results\": {\n    \"deleted_bytes\": 20,\n    \"deleted_blobs\": 5\n  }\n}\n----\n// TESTRESPONSE[s/\"deleted_bytes\": 20/\"deleted_bytes\": $body.results.deleted_bytes/]\n// TESTRESPONSE[s/\"deleted_blobs\": 5/\"deleted_blobs\": $body.results.deleted_bytes/]\n\nDepending on the concrete repository implementation the numbers shown for bytes free as well as the number of blobs removed will either\nbe an approximation or an exact result. Any non-zero value for the number of blobs removed implies that unreferenced blobs were found and\nsubsequently cleaned up.\n\nPlease note that most of the cleanup operations executed by this endpoint are automatically executed when deleting any snapshot from a\nrepository. If you regularly delete snapshots, you will in most cases not get any or only minor space savings from using this functionality\nand should lower your frequency of invoking it accordingly.\n\n[discrete]\n[[snapshots-repository-backup]]\n=== Back up a repository\n\nYou may wish to make an independent backup of your repository, for instance so\nthat you have an archive copy of its contents that you can use to recreate the\nrepository in its current state at a later date.\n\nYou must ensure that {es} does not write to the repository while you are taking\nthe backup of its contents. If {es} writes any data to the repository during\nthe backup then the contents of the backup may not be consistent and it may not\nbe possible to recover any data from it in future. Prevent writes to the\nrepository by unregistering the repository from the cluster which has write\naccess to it.\n\nAlternatively, if your repository supports it, you may take an atomic snapshot\nof the underlying filesystem and then take a backup of this filesystem\nsnapshot. It is very important that the filesystem snapshot is taken\natomically.\n\nWARNING: Do not rely on repository backups that were taken by methods other\nthan the one described in this section. If you use another method to make a\ncopy of your repository contents then the resulting copy may capture an\ninconsistent view of your data. Restoring a repository from such a copy may\nfail, reporting errors, or may succeed having silently lost some of your data.\n\nWARNING: Do not use filesystem snapshots of individual nodes as a backup\nmechanism. You must use the {es} snapshot and restore feature to copy the\ncluster contents to a separate repository. Then, if desired, you can take a\nfilesystem snapshot of this repository.\n\nWhen restoring a repository from a backup, you must not register the repository\nwith {es} until the repository contents are fully restored. If you alter the\ncontents of a repository while it is registered with {es} then the repository\nmay become unreadable or may silently lose some of its contents. After\nrestoring a repository from a backup, use the <<verify-repo-integrity-api>> API\nto verify its integrity before you start to use the repository.\n\ninclude::repository-azure.asciidoc[]\ninclude::repository-gcs.asciidoc[]\ninclude::repository-s3.asciidoc[]\ninclude::repository-shared-file-system.asciidoc[]\ninclude::repository-read-only-url.asciidoc[]\ninclude::repository-source-only.asciidoc[]\n"
}