{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.334067",
        "size": 5765,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-shard-routing.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "search-shard-routing",
        "version": "8.15"
    },
    "doc": "[[search-shard-routing]]\n=== Search shard routing\n\nTo protect against hardware failure and increase search capacity, {es} can store\ncopies of an index's data across multiple shards on multiple nodes. When running\na search request, {es} selects a node containing a copy of the index's data and\nforwards the search request to that node's shards. This process is known as\n_search shard routing_ or _routing_.\n\n[discrete]\n[[search-adaptive-replica]]\n==== Adaptive replica selection\n\nBy default, {es} uses _adaptive replica selection_ to route search requests.\nThis method selects an eligible node using <<shard-allocation-awareness,shard\nallocation awareness>> and the following criteria:\n\n* Response time of prior requests between the coordinating node\nand the eligible node\n* How long the eligible node took to run previous searches\n* Queue size of the eligible node's `search` <<modules-threadpool,threadpool>>\n\nAdaptive replica selection is designed to decrease search latency. However, you\ncan disable adaptive replica selection by setting\n`cluster.routing.use_adaptive_replica_selection` to `false` using the\n<<cluster-update-settings,cluster settings API>>. If disabled, {es} routes\nsearch requests using a round-robin method, which may result in slower searches.\n\n[discrete]\n[[shard-and-node-preference]]\n==== Set a preference\n\nBy default, adaptive replica selection chooses from all eligible nodes and\nshards. However, you may only want data from a local node or want to route\nsearches to a specific node based on its hardware. Or you may want to send\nrepeated searches to the same shard to take advantage of caching.\n\nTo limit the set of nodes and shards eligible for a search request, use\nthe search API's <<search-preference,`preference`>> query parameter.\n\nFor example, the following request searches `my-index-000001` with a\n`preference` of `_local`. This restricts the search to shards on the\nlocal node. If the local node contains no shard copies of the index's data, the\nrequest uses adaptive replica selection to another eligible node\nas a fallback.\n\n[source,console]\n----\nGET /my-index-000001/_search?preference=_local\n{\n  \"query\": {\n    \"match\": {\n      \"user.id\": \"kimchy\"\n    }\n  }\n}\n----\n// TEST[setup:my_index]\n\nYou can also use the `preference` parameter to route searches to specific shards\nbased on a provided string. If the cluster state and selected shards\ndo not change, searches using the same `preference` string are routed to the\nsame shards in the same order.\n\nWe recommend using a unique `preference` string, such as a user name or web\nsession ID. This string cannot start with a `_`.\n\nTIP: You can use this option to serve cached results for frequently used and\nresource-intensive searches. If the shard's data doesn't change, repeated\nsearches with the same `preference` string retrieve results from the same\n<<shard-request-cache,shard request cache>>. For time series use cases, such as\nlogging, data in older indices is rarely updated and can be served directly from\nthis cache.\n\nThe following request searches `my-index-000001` with a `preference` string of\n`my-custom-shard-string`.\n\n[source,console]\n----\nGET /my-index-000001/_search?preference=my-custom-shard-string\n{\n  \"query\": {\n    \"match\": {\n      \"user.id\": \"kimchy\"\n    }\n  }\n}\n----\n// TEST[setup:my_index]\n\nNOTE: If the cluster state or selected shards change, the same `preference`\nstring may not route searches to the same shards in the same order. This can\noccur for a number of reasons, including shard relocations and shard failures. A\nnode can also reject a search request, which {es} would re-route to another\nnode.\n\n[discrete]\n[[search-routing]]\n==== Use a routing value\n\nWhen you index a document, you can specify an optional\n<<mapping-routing-field,routing value>>, which routes the document to a\nspecific shard.\n\nFor example, the following indexing request routes a document using\n`my-routing-value`.\n\n[source,console]\n----\nPOST /my-index-000001/_doc?routing=my-routing-value\n{\n  \"@timestamp\": \"2099-11-15T13:12:00\",\n  \"message\": \"GET /search HTTP/1.1 200 1070000\",\n  \"user\": {\n    \"id\": \"kimchy\"\n  }\n}\n----\n\nYou can use the same routing value in the search API's `routing` query\nparameter. This ensures the search runs on the same shard used to index the\ndocument.\n\n[source,console]\n----\nGET /my-index-000001/_search?routing=my-routing-value\n{\n  \"query\": {\n    \"match\": {\n      \"user.id\": \"kimchy\"\n    }\n  }\n}\n----\n// TEST[setup:my_index]\n\nYou can also provide multiple comma-separated routing values:\n\n[source,console]\n----\nGET /my-index-000001/_search?routing=my-routing-value,my-routing-value-2\n{\n  \"query\": {\n    \"match\": {\n      \"user.id\": \"kimchy\"\n    }\n  }\n}\n----\n// TEST[setup:my_index]\n\n[discrete]\n[[search-concurrency-and-parallelism]]\n==== Search concurrency and parallelism\n\nBy default, {es} doesn't reject search requests based on the number of shards\nthe request hits. However, hitting a large number of shards can significantly\nincrease CPU and memory usage.\n\nTIP: For tips on preventing indices with large numbers of shards, see\n<<size-your-shards>>.\n\nYou can use the `max_concurrent_shard_requests` query parameter to control\nmaximum number of concurrent shards a search request can hit per node. This\nprevents a single request from overloading a cluster. The parameter defaults to\na maximum of `5`.\n\n[source,console]\n----\nGET /my-index-000001/_search?max_concurrent_shard_requests=3\n{\n  \"query\": {\n    \"match\": {\n      \"user.id\": \"kimchy\"\n    }\n  }\n}\n----\n// TEST[setup:my_index]\n\nYou can also use the `action.search.shard_count.limit` cluster setting to set a\nsearch shard limit and reject requests that hit too many shards. You can\nconfigure `action.search.shard_count.limit` using the\n<<cluster-update-settings,cluster settings API>>."
}