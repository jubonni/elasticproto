{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.523069",
        "size": 52090,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-lang-analyzer.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "analysis-lang-analyzer",
        "version": "8.15"
    },
    "doc": "[[analysis-lang-analyzer]]\n=== Language analyzers\n++++\n<titleabbrev>Language</titleabbrev>\n++++\n\nA set of analyzers aimed at analyzing specific language text. The\nfollowing types are supported:\n<<arabic-analyzer,`arabic`>>,\n<<armenian-analyzer,`armenian`>>,\n<<basque-analyzer,`basque`>>,\n<<bengali-analyzer,`bengali`>>,\n<<brazilian-analyzer,`brazilian`>>,\n<<bulgarian-analyzer,`bulgarian`>>,\n<<catalan-analyzer,`catalan`>>,\n<<cjk-analyzer,`cjk`>>,\n<<czech-analyzer,`czech`>>,\n<<danish-analyzer,`danish`>>,\n<<dutch-analyzer,`dutch`>>,\n<<english-analyzer,`english`>>,\n<<estonian-analyzer,`estonian`>>,\n<<finnish-analyzer,`finnish`>>,\n<<french-analyzer,`french`>>,\n<<galician-analyzer,`galician`>>,\n<<german-analyzer,`german`>>,\n<<greek-analyzer,`greek`>>,\n<<hindi-analyzer,`hindi`>>,\n<<hungarian-analyzer,`hungarian`>>,\n<<indonesian-analyzer,`indonesian`>>,\n<<irish-analyzer,`irish`>>,\n<<italian-analyzer,`italian`>>,\n<<latvian-analyzer,`latvian`>>,\n<<lithuanian-analyzer,`lithuanian`>>,\n<<norwegian-analyzer,`norwegian`>>,\n<<persian-analyzer,`persian`>>,\n<<portuguese-analyzer,`portuguese`>>,\n<<romanian-analyzer,`romanian`>>,\n<<russian-analyzer,`russian`>>,\n<<serbian-analyzer,`serbian`>>,\n<<sorani-analyzer,`sorani`>>,\n<<spanish-analyzer,`spanish`>>,\n<<swedish-analyzer,`swedish`>>,\n<<turkish-analyzer,`turkish`>>,\n<<thai-analyzer,`thai`>>.\n\n==== Configuring language analyzers\n\n===== Stopwords\n\nAll analyzers support setting custom `stopwords` either internally in\nthe config, or by using an external stopwords file by setting\n`stopwords_path`. Check <<analysis-stop-analyzer,Stop Analyzer>> for\nmore details.\n\n[[_excluding_words_from_stemming]]\n===== Excluding words from stemming\n\nThe `stem_exclusion` parameter allows you to specify an array\nof lowercase words that should not be stemmed. Internally, this\nfunctionality is implemented by adding the\n<<analysis-keyword-marker-tokenfilter,`keyword_marker` token filter>>\nwith the `keywords` set to the value of the `stem_exclusion` parameter.\n\nThe following analyzers support setting custom `stem_exclusion` list:\n`arabic`, `armenian`, `basque`, `bengali`, `bulgarian`, `catalan`, `czech`,\n`dutch`, `english`, `finnish`, `french`, `galician`,\n`german`, `hindi`, `hungarian`, `indonesian`, `irish`, `italian`, `latvian`,\n`lithuanian`, `norwegian`, `portuguese`, `romanian`, `russian`, `serbian`,\n`sorani`, `spanish`, `swedish`, `turkish`.\n\n==== Reimplementing language analyzers\n\nThe built-in language analyzers can be reimplemented as `custom` analyzers\n(as described below) in order to customize their behaviour.\n\nNOTE: If you do not intend to exclude words from being stemmed (the\nequivalent of the `stem_exclusion` parameter above), then you should remove\nthe `keyword_marker` token filter from the custom analyzer configuration.\n\n[[arabic-analyzer]]\n===== `arabic` analyzer\n\nThe `arabic` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /arabic_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"arabic_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_arabic_\" <1>\n        },\n        \"arabic_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"\u0645\u062b\u0627\u0644\"] <2>\n        },\n        \"arabic_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"arabic\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_arabic\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"decimal_digit\",\n            \"arabic_stop\",\n            \"arabic_normalization\",\n            \"arabic_keywords\",\n            \"arabic_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"arabic_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: arabic_example, first: arabic, second: rebuilt_arabic}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[armenian-analyzer]]\n===== `armenian` analyzer\n\nThe `armenian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /armenian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"armenian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_armenian_\" <1>\n        },\n        \"armenian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"\u0585\u0580\u056b\u0576\u0561\u056f\"] <2>\n        },\n        \"armenian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"armenian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_armenian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"armenian_stop\",\n            \"armenian_keywords\",\n            \"armenian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"armenian_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: armenian_example, first: armenian, second: rebuilt_armenian}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[basque-analyzer]]\n===== `basque` analyzer\n\nThe `basque` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /basque_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"basque_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_basque_\" <1>\n        },\n        \"basque_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"Adibidez\"] <2>\n        },\n        \"basque_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"basque\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_basque\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"basque_stop\",\n            \"basque_keywords\",\n            \"basque_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"basque_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: basque_example, first: basque, second: rebuilt_basque}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[bengali-analyzer]]\n===== `bengali` analyzer\n\nThe `bengali` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /bengali_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"bengali_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_bengali_\" <1>\n        },\n        \"bengali_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"\u0989\u09a6\u09be\u09b9\u09b0\u09a3\"] <2>\n        },\n        \"bengali_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"bengali\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_bengali\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"decimal_digit\",\n            \"bengali_keywords\",\n            \"indic_normalization\",\n            \"bengali_normalization\",\n            \"bengali_stop\",\n            \"bengali_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"bengali_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: bengali_example, first: bengali, second: rebuilt_bengali}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[brazilian-analyzer]]\n===== `brazilian` analyzer\n\nThe `brazilian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /brazilian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"brazilian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_brazilian_\" <1>\n        },\n        \"brazilian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"exemplo\"] <2>\n        },\n        \"brazilian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"brazilian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_brazilian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"brazilian_stop\",\n            \"brazilian_keywords\",\n            \"brazilian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"brazilian_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: brazilian_example, first: brazilian, second: rebuilt_brazilian}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[bulgarian-analyzer]]\n===== `bulgarian` analyzer\n\nThe `bulgarian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /bulgarian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"bulgarian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_bulgarian_\" <1>\n        },\n        \"bulgarian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"\u043f\u0440\u0438\u043c\u0435\u0440\"] <2>\n        },\n        \"bulgarian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"bulgarian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_bulgarian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"bulgarian_stop\",\n            \"bulgarian_keywords\",\n            \"bulgarian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"bulgarian_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: bulgarian_example, first: bulgarian, second: rebuilt_bulgarian}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[catalan-analyzer]]\n===== `catalan` analyzer\n\nThe `catalan` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /catalan_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"catalan_elision\": {\n          \"type\":       \"elision\",\n          \"articles\":   [ \"d\", \"l\", \"m\", \"n\", \"s\", \"t\"],\n          \"articles_case\": true\n        },\n        \"catalan_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_catalan_\" <1>\n        },\n        \"catalan_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"example\"] <2>\n        },\n        \"catalan_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"catalan\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_catalan\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"catalan_elision\",\n            \"lowercase\",\n            \"catalan_stop\",\n            \"catalan_keywords\",\n            \"catalan_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"catalan_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: catalan_example, first: catalan, second: rebuilt_catalan}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[cjk-analyzer]]\n===== `cjk` analyzer\n\nNOTE: You may find that `icu_analyzer` in the ICU analysis plugin works better\nfor CJK text than the `cjk` analyzer. Experiment with your text and queries.\n\nThe `cjk` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /cjk_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"english_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  [ <1>\n            \"a\", \"and\", \"are\", \"as\", \"at\", \"be\", \"but\", \"by\", \"for\",\n            \"if\", \"in\", \"into\", \"is\", \"it\", \"no\", \"not\", \"of\", \"on\",\n            \"or\", \"s\", \"such\", \"t\", \"that\", \"the\", \"their\", \"then\",\n            \"there\", \"these\", \"they\", \"this\", \"to\", \"was\", \"will\",\n            \"with\", \"www\"\n          ]\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_cjk\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"cjk_width\",\n            \"lowercase\",\n            \"cjk_bigram\",\n            \"english_stop\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"cjk_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: cjk_example, first: cjk, second: rebuilt_cjk}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters. The default stop words are\n    *almost* the same as the `_english_` set, but not exactly\n    the same.\n\n[[czech-analyzer]]\n===== `czech` analyzer\n\nThe `czech` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /czech_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"czech_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_czech_\" <1>\n        },\n        \"czech_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"p\u0159\u00edklad\"] <2>\n        },\n        \"czech_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"czech\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_czech\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"czech_stop\",\n            \"czech_keywords\",\n            \"czech_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"czech_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: czech_example, first: czech, second: rebuilt_czech}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[danish-analyzer]]\n===== `danish` analyzer\n\nThe `danish` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /danish_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"danish_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_danish_\" <1>\n        },\n        \"danish_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"eksempel\"] <2>\n        },\n        \"danish_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"danish\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_danish\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"danish_stop\",\n            \"danish_keywords\",\n            \"danish_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"danish_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: danish_example, first: danish, second: rebuilt_danish}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[dutch-analyzer]]\n===== `dutch` analyzer\n\nThe `dutch` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /dutch_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"dutch_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_dutch_\" <1>\n        },\n        \"dutch_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"voorbeeld\"] <2>\n        },\n        \"dutch_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"dutch\"\n        },\n        \"dutch_override\": {\n          \"type\":       \"stemmer_override\",\n          \"rules\": [\n            \"fiets=>fiets\",\n            \"bromfiets=>bromfiets\",\n            \"ei=>eier\",\n            \"kind=>kinder\"\n          ]\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_dutch\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"dutch_stop\",\n            \"dutch_keywords\",\n            \"dutch_override\",\n            \"dutch_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"dutch_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: dutch_example, first: dutch, second: rebuilt_dutch}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[english-analyzer]]\n===== `english` analyzer\n\nThe `english` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /english_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"english_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_english_\" <1>\n        },\n        \"english_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"example\"] <2>\n        },\n        \"english_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"english\"\n        },\n        \"english_possessive_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"possessive_english\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_english\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"english_possessive_stemmer\",\n            \"lowercase\",\n            \"english_stop\",\n            \"english_keywords\",\n            \"english_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"english_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: english_example, first: english, second: rebuilt_english}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[estonian-analyzer]]\n===== `estonian` analyzer\n\nThe `estonian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /estonian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"estonian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_estonian_\" <1>\n        },\n        \"estonian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"n\u00e4ide\"] <2>\n        },\n        \"estonian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"estonian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_estonian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"estonian_stop\",\n            \"estonian_keywords\",\n            \"estonian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"estonian_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: estonian_example, first: estonian, second: rebuilt_estonian}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[finnish-analyzer]]\n===== `finnish` analyzer\n\nThe `finnish` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /finnish_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"finnish_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_finnish_\" <1>\n        },\n        \"finnish_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"esimerkki\"] <2>\n        },\n        \"finnish_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"finnish\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_finnish\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"finnish_stop\",\n            \"finnish_keywords\",\n            \"finnish_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"finnish_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: finnish_example, first: finnish, second: rebuilt_finnish}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[french-analyzer]]\n===== `french` analyzer\n\nThe `french` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /french_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"french_elision\": {\n          \"type\":         \"elision\",\n          \"articles_case\": true,\n          \"articles\": [\n              \"l\", \"m\", \"t\", \"qu\", \"n\", \"s\",\n              \"j\", \"d\", \"c\", \"jusqu\", \"quoiqu\",\n              \"lorsqu\", \"puisqu\"\n            ]\n        },\n        \"french_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_french_\" <1>\n        },\n        \"french_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"Example\"] <2>\n        },\n        \"french_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"light_french\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_french\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"french_elision\",\n            \"lowercase\",\n            \"french_stop\",\n            \"french_keywords\",\n            \"french_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"french_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: french_example, first: french, second: rebuilt_french}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[galician-analyzer]]\n===== `galician` analyzer\n\nThe `galician` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /galician_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"galician_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_galician_\" <1>\n        },\n        \"galician_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"exemplo\"] <2>\n        },\n        \"galician_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"galician\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_galician\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"galician_stop\",\n            \"galician_keywords\",\n            \"galician_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"galician_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: galician_example, first: galician, second: rebuilt_galician}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[german-analyzer]]\n===== `german` analyzer\n\nThe `german` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /german_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"german_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_german_\" <1>\n        },\n        \"german_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"Beispiel\"] <2>\n        },\n        \"german_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"light_german\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_german\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"german_stop\",\n            \"german_keywords\",\n            \"german_normalization\",\n            \"german_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"german_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: german_example, first: german, second: rebuilt_german}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[greek-analyzer]]\n===== `greek` analyzer\n\nThe `greek` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /greek_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"greek_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_greek_\" <1>\n        },\n        \"greek_lowercase\": {\n          \"type\":       \"lowercase\",\n          \"language\":   \"greek\"\n        },\n        \"greek_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"\u03c0\u03b1\u03c1\u03ac\u03b4\u03b5\u03b9\u03b3\u03bc\u03b1\"] <2>\n        },\n        \"greek_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"greek\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_greek\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"greek_lowercase\",\n            \"greek_stop\",\n            \"greek_keywords\",\n            \"greek_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"greek_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: greek_example, first: greek, second: rebuilt_greek}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[hindi-analyzer]]\n===== `hindi` analyzer\n\nThe `hindi` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /hindi_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"hindi_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_hindi_\" <1>\n        },\n        \"hindi_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"\u0909\u0926\u093e\u0939\u0930\u0923\"] <2>\n        },\n        \"hindi_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"hindi\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_hindi\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"decimal_digit\",\n            \"hindi_keywords\",\n            \"indic_normalization\",\n            \"hindi_normalization\",\n            \"hindi_stop\",\n            \"hindi_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"hindi_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: hindi_example, first: hindi, second: rebuilt_hindi}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[hungarian-analyzer]]\n===== `hungarian` analyzer\n\nThe `hungarian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /hungarian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"hungarian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_hungarian_\" <1>\n        },\n        \"hungarian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"p\u00e9lda\"] <2>\n        },\n        \"hungarian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"hungarian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_hungarian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"hungarian_stop\",\n            \"hungarian_keywords\",\n            \"hungarian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"hungarian_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: hungarian_example, first: hungarian, second: rebuilt_hungarian}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n\n[[indonesian-analyzer]]\n===== `indonesian` analyzer\n\nThe `indonesian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /indonesian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"indonesian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_indonesian_\" <1>\n        },\n        \"indonesian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"contoh\"] <2>\n        },\n        \"indonesian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"indonesian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_indonesian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"indonesian_stop\",\n            \"indonesian_keywords\",\n            \"indonesian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"indonesian_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: indonesian_example, first: indonesian, second: rebuilt_indonesian}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[irish-analyzer]]\n===== `irish` analyzer\n\nThe `irish` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /irish_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"irish_hyphenation\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  [ \"h\", \"n\", \"t\" ],\n          \"ignore_case\": true\n        },\n        \"irish_elision\": {\n          \"type\":       \"elision\",\n          \"articles\":   [ \"d\", \"m\", \"b\" ],\n          \"articles_case\": true\n        },\n        \"irish_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_irish_\" <1>\n        },\n        \"irish_lowercase\": {\n          \"type\":       \"lowercase\",\n          \"language\":   \"irish\"\n        },\n        \"irish_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"sampla\"] <2>\n        },\n        \"irish_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"irish\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_irish\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"irish_hyphenation\",\n            \"irish_elision\",\n            \"irish_lowercase\",\n            \"irish_stop\",\n            \"irish_keywords\",\n            \"irish_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"irish_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: irish_example, first: irish, second: rebuilt_irish}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[italian-analyzer]]\n===== `italian` analyzer\n\nThe `italian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /italian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"italian_elision\": {\n          \"type\": \"elision\",\n          \"articles\": [\n                \"c\", \"l\", \"all\", \"dall\", \"dell\",\n                \"nell\", \"sull\", \"coll\", \"pell\",\n                \"gl\", \"agl\", \"dagl\", \"degl\", \"negl\",\n                \"sugl\", \"un\", \"m\", \"t\", \"s\", \"v\", \"d\"\n          ],\n          \"articles_case\": true\n        },\n        \"italian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_italian_\" <1>\n        },\n        \"italian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"esempio\"] <2>\n        },\n        \"italian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"light_italian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_italian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"italian_elision\",\n            \"lowercase\",\n            \"italian_stop\",\n            \"italian_keywords\",\n            \"italian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"italian_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: italian_example, first: italian, second: rebuilt_italian}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[latvian-analyzer]]\n===== `latvian` analyzer\n\nThe `latvian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /latvian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"latvian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_latvian_\" <1>\n        },\n        \"latvian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"piem\u0113rs\"] <2>\n        },\n        \"latvian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"latvian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_latvian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"latvian_stop\",\n            \"latvian_keywords\",\n            \"latvian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"latvian_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: latvian_example, first: latvian, second: rebuilt_latvian}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[lithuanian-analyzer]]\n===== `lithuanian` analyzer\n\nThe `lithuanian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /lithuanian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"lithuanian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_lithuanian_\" <1>\n        },\n        \"lithuanian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"pavyzdys\"] <2>\n        },\n        \"lithuanian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"lithuanian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_lithuanian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"lithuanian_stop\",\n            \"lithuanian_keywords\",\n            \"lithuanian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"lithuanian_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: lithuanian_example, first: lithuanian, second: rebuilt_lithuanian}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[norwegian-analyzer]]\n===== `norwegian` analyzer\n\nThe `norwegian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /norwegian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"norwegian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_norwegian_\" <1>\n        },\n        \"norwegian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"eksempel\"] <2>\n        },\n        \"norwegian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"norwegian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_norwegian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"norwegian_stop\",\n            \"norwegian_keywords\",\n            \"norwegian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"norwegian_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: norwegian_example, first: norwegian, second: rebuilt_norwegian}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[persian-analyzer]]\n===== `persian` analyzer\n\nThe `persian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /persian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"char_filter\": {\n        \"zero_width_spaces\": {\n            \"type\":       \"mapping\",\n            \"mappings\": [ \"\\\\u200C=>\\\\u0020\"] <1>\n        }\n      },\n      \"filter\": {\n        \"persian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_persian_\" <2>\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_persian\": {\n          \"tokenizer\":     \"standard\",\n          \"char_filter\": [ \"zero_width_spaces\" ],\n          \"filter\": [\n            \"lowercase\",\n            \"decimal_digit\",\n            \"arabic_normalization\",\n            \"persian_normalization\",\n            \"persian_stop\",\n            \"persian_stem\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: persian_example, first: persian, second: rebuilt_persian}\\nendyaml\\n/]\n\n<1> Replaces zero-width non-joiners with an ASCII space.\n<2> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n\n[[portuguese-analyzer]]\n===== `portuguese` analyzer\n\nThe `portuguese` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /portuguese_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"portuguese_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_portuguese_\" <1>\n        },\n        \"portuguese_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"exemplo\"] <2>\n        },\n        \"portuguese_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"light_portuguese\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_portuguese\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"portuguese_stop\",\n            \"portuguese_keywords\",\n            \"portuguese_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"portuguese_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: portuguese_example, first: portuguese, second: rebuilt_portuguese}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[romanian-analyzer]]\n===== `romanian` analyzer\n\nThe `romanian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /romanian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"romanian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_romanian_\" <1>\n        },\n        \"romanian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"exemplu\"] <2>\n        },\n        \"romanian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"romanian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_romanian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"romanian_stop\",\n            \"romanian_keywords\",\n            \"romanian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"romanian_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: romanian_example, first: romanian, second: rebuilt_romanian}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n\n[[russian-analyzer]]\n===== `russian` analyzer\n\nThe `russian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /russian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"russian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_russian_\" <1>\n        },\n        \"russian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"\u043f\u0440\u0438\u043c\u0435\u0440\"] <2>\n        },\n        \"russian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"russian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_russian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"russian_stop\",\n            \"russian_keywords\",\n            \"russian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"russian_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: russian_example, first: russian, second: rebuilt_russian}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[serbian-analyzer]]\n===== `serbian` analyzer\n\nThe `serbian` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /serbian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"serbian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_serbian_\" <1>\n        },\n        \"serbian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"\u043f\u0440\u0438\u043c\u0435\u0440\"] <2>\n        },\n        \"serbian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"serbian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_serbian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"serbian_stop\",\n            \"serbian_keywords\",\n            \"serbian_stemmer\",\n            \"serbian_normalization\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"serbian_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: serbian_example, first: serbian, second: rebuilt_serbian}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\nor `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\nbe excluded from stemming.\n\n[[sorani-analyzer]]\n===== `sorani` analyzer\n\nThe `sorani` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /sorani_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"sorani_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_sorani_\" <1>\n        },\n        \"sorani_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"m\u00eenak\"] <2>\n        },\n        \"sorani_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"sorani\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_sorani\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"sorani_normalization\",\n            \"lowercase\",\n            \"decimal_digit\",\n            \"sorani_stop\",\n            \"sorani_keywords\",\n            \"sorani_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"sorani_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: sorani_example, first: sorani, second: rebuilt_sorani}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[spanish-analyzer]]\n===== `spanish` analyzer\n\nThe `spanish` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /spanish_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"spanish_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_spanish_\" <1>\n        },\n        \"spanish_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"ejemplo\"] <2>\n        },\n        \"spanish_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"light_spanish\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_spanish\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"spanish_stop\",\n            \"spanish_keywords\",\n            \"spanish_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"spanish_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: spanish_example, first: spanish, second: rebuilt_spanish}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[swedish-analyzer]]\n===== `swedish` analyzer\n\nThe `swedish` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /swedish_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"swedish_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_swedish_\" <1>\n        },\n        \"swedish_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"exempel\"] <2>\n        },\n        \"swedish_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"swedish\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_swedish\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"swedish_stop\",\n            \"swedish_keywords\",\n            \"swedish_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"swedish_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: swedish_example, first: swedish, second: rebuilt_swedish}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[turkish-analyzer]]\n===== `turkish` analyzer\n\nThe `turkish` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /turkish_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"turkish_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_turkish_\" <1>\n        },\n        \"turkish_lowercase\": {\n          \"type\":       \"lowercase\",\n          \"language\":   \"turkish\"\n        },\n        \"turkish_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"\u00f6rnek\"] <2>\n        },\n        \"turkish_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"turkish\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_turkish\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"apostrophe\",\n            \"turkish_lowercase\",\n            \"turkish_stop\",\n            \"turkish_keywords\",\n            \"turkish_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"turkish_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: turkish_example, first: turkish, second: rebuilt_turkish}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n<2> This filter should be removed unless there are words which should\n    be excluded from stemming.\n\n[[thai-analyzer]]\n===== `thai` analyzer\n\nThe `thai` analyzer could be reimplemented as a `custom` analyzer as follows:\n\n[source,console]\n----------------------------------------------------\nPUT /thai_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"thai_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_thai_\" <1>\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_thai\": {\n          \"tokenizer\":  \"thai\",\n          \"filter\": [\n            \"lowercase\",\n            \"decimal_digit\",\n            \"thai_stop\"\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\"thai_keywords\",//]\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: thai_example, first: thai, second: rebuilt_thai}\\nendyaml\\n/]\n\n<1> The default stopwords can be overridden with the `stopwords`\n    or `stopwords_path` parameters.\n"
}