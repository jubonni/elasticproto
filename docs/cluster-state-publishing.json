{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.981068",
        "size": 3784,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-state-publishing.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "cluster-state-publishing",
        "version": "8.15"
    },
    "doc": "[[cluster-state-publishing]]\n=== Publishing the cluster state\n\nThe elected master node is the only node in a cluster that can make changes to\nthe cluster state. The elected master node processes one batch of cluster state\nupdates at a time, computing the required changes and publishing the updated\ncluster state to all the other nodes in the cluster. Each publication starts\nwith the elected master broadcasting the updated cluster state to all nodes in\nthe cluster. Each node responds with an acknowledgement but does not yet apply\nthe newly-received state. Once the elected master has collected\nacknowledgements from enough master-eligible nodes, the new cluster state is\nsaid to be _committed_ and the master broadcasts another message instructing\nnodes to apply the now-committed state. Each node receives this message,\napplies the updated state, and then sends a second acknowledgement back to the\nmaster.\n\nThe elected master allows a limited amount of time for each cluster state\nupdate to be completely published to all nodes. It is defined by the\n`cluster.publish.timeout` setting, which defaults to `30s`, measured from the\ntime the publication started. If this time is reached before the new cluster\nstate is committed then the cluster state change is rejected and the elected\nmaster considers itself to have failed. It stands down and starts trying to\nelect a new master node.\n\nIf the new cluster state is committed before `cluster.publish.timeout` has\nelapsed, the elected master node considers the change to have succeeded. It\nwaits until the timeout has elapsed or until it has received acknowledgements\nthat each node in the cluster has applied the updated state, and then starts\nprocessing and publishing the next cluster state update. If some\nacknowledgements have not been received (i.e. some nodes have not yet confirmed\nthat they have applied the current update), these nodes are said to be\n_lagging_ since their cluster states have fallen behind the elected master's\nlatest state. The elected master waits for the lagging nodes to catch up for a\nfurther time, `cluster.follower_lag.timeout`, which defaults to `90s`. If a\nnode has still not successfully applied the cluster state update within this\ntime then it is considered to have failed and the elected master removes it\nfrom the cluster.\n\nCluster state updates are typically published as diffs to the previous cluster\nstate, which reduces the time and network bandwidth needed to publish a cluster\nstate update. For example, when updating the mappings for only a subset of the\nindices in the cluster state, only the updates for those indices need to be\npublished to the nodes in the cluster, as long as those nodes have the previous\ncluster state. If a node is missing the previous cluster state, for example\nwhen rejoining a cluster, the elected master will publish the full cluster\nstate to that node so that it can receive future updates as diffs.\n\nNOTE: {es} is a peer to peer based system, in which nodes communicate with one\nanother directly. The high-throughput APIs (index, delete, search) do not\nnormally interact with the elected master node. The responsibility of the\nelected master node is to maintain the global cluster state which includes\nreassigning shards when nodes join or leave the cluster. Each time the cluster\nstate is changed, the new state is published to all nodes in the cluster as\ndescribed above.\n\nThe performance characteristics of cluster state updates are a function of the\nspeed of the storage on each master-eligible node, as well as the reliability\nand latency of the network interconnections between all nodes in the cluster.\nYou must therefore ensure that the storage and networking available to the\nnodes in your cluster are good enough to meet your performance goals.\n"
}