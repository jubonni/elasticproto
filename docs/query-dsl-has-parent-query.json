{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.392271",
        "size": 3311,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-has-parent-query.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "query-dsl-has-parent-query",
        "version": "8.15"
    },
    "doc": "[[query-dsl-has-parent-query]]\n=== Has parent query\n++++\n<titleabbrev>Has parent</titleabbrev>\n++++\n\nReturns child documents whose <<parent-join,joined>> parent document matches a\nprovided query. You can create parent-child relationships between documents in\nthe same index using a <<parent-join,join>> field mapping.\n\n[WARNING]\n====\nBecause it performs a join, the `has_parent` query is slow compared to other queries.\nIts performance degrades as the number of matching parent documents increases.\nEach `has_parent` query in a search can increase query time significantly.\n====\n\n[[has-parent-query-ex-request]]\n==== Example request\n\n[[has-parent-index-setup]]\n===== Index setup\nTo use the `has_parent` query, your index must include a <<parent-join,join>>\nfield mapping. For example:\n\n[source,console]\n----\nPUT /my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"my-join-field\": {\n        \"type\": \"join\",\n        \"relations\": {\n          \"parent\": \"child\"\n        }\n      },\n      \"tag\": {\n        \"type\": \"keyword\"\n      }\n    }\n  }\n}\n\n----\n// TESTSETUP\n\n[[has-parent-query-ex-query]]\n===== Example query\n\n[source,console]\n----\nGET /my-index-000001/_search\n{\n  \"query\": {\n    \"has_parent\": {\n      \"parent_type\": \"parent\",\n      \"query\": {\n        \"term\": {\n          \"tag\": {\n            \"value\": \"Elasticsearch\"\n          }\n        }\n      }\n    }\n  }\n}\n----\n\n[[has-parent-top-level-params]]\n==== Top-level parameters for `has_parent`\n\n`parent_type`::\n(Required, string) Name of the parent relationship mapped for the\n<<parent-join,join>> field.\n\n`query`::\n(Required, query object) Query you wish to run on parent documents of the\n`parent_type` field. If a parent document matches the search, the query returns\nits child documents.\n\n`score`::\n+\n--\n(Optional, Boolean) Indicates whether the <<query-filter-context,relevance\nscore>> of a matching parent document is aggregated into its child documents.\nDefaults to `false`.\n\nIf `false`, {es} ignores the relevance score of the parent document. {es} also\nassigns each child document a relevance score equal to the `query`'s `boost`,\nwhich defaults to `1`.\n\nIf `true`, the relevance score of the matching parent document is aggregated\ninto its child documents' relevance scores.\n--\n\n`ignore_unmapped`::\n+\n--\n(Optional, Boolean) Indicates whether to ignore an unmapped `parent_type` and\nnot return any documents instead of an error. Defaults to `false`.\n\nIf `false`, {es} returns an error if the `parent_type` is unmapped.\n\nYou can use this parameter to query multiple indices that may not contain the\n`parent_type`.\n--\n\n[[has-parent-query-notes]]\n==== Notes\n\n[[has-parent-query-performance]]\n===== Sorting\nYou cannot sort the results of a `has_parent` query using standard\n<<sort-search-results,sort options>>.\n\nIf you need to sort returned documents by a field in their parent documents, use\na `function_score` query and sort by `_score`. For example, the following query\nsorts returned documents by the `view_count` field of their parent documents.\n\n[source,console]\n----\nGET /_search\n{\n  \"query\": {\n    \"has_parent\": {\n      \"parent_type\": \"parent\",\n      \"score\": true,\n      \"query\": {\n        \"function_score\": {\n          \"script_score\": {\n            \"script\": \"_score * doc['view_count'].value\"\n          }\n        }\n      }\n    }\n  }\n}\n----\n"
}