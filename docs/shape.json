{
    "meta": {
        "size": 14979,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/shape.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "shape",
        "version": "8.15"
    },
    "doc": "[[shape]]\n[role=\"xpack\"]\n=== Shape field type\n++++\n<titleabbrev>Shape</titleabbrev>\n++++\n\nThe `shape` data type facilitates the indexing of and searching\nwith arbitrary `x, y` cartesian shapes such as rectangles and polygons. It can be\nused to index and query geometries whose coordinates fall in a 2-dimensional planar\ncoordinate system.\n\nYou can query documents using this type using\n<<query-dsl-shape-query,shape Query>>.\n\n[[shape-mapping-options]]\n[discrete]\n==== Mapping Options\n\nLike the <<geo-shape,`geo_shape`>> field type, the `shape` field mapping maps\nhttp://geojson.org[GeoJSON] or https://docs.opengeospatial.org/is/12-063r5/12-063r5.html[Well-Known Text]\n(WKT) geometry objects to the shape type. To enable it, users must explicitly map\nfields to the shape type.\n\n[cols=\"<,<,<\",options=\"header\",]\n|=======================================================================\n|Option |Description| Default\n\n|`orientation` |Optionally define how to interpret vertex order for\npolygons / multipolygons. This parameter defines one of two coordinate\nsystem rules (Right-hand or Left-hand) each of which can be specified in three\ndifferent ways. 1. Right-hand rule: `right`, `ccw`, `counterclockwise`,\n2. Left-hand rule: `left`, `cw`, `clockwise`. The default orientation\n(`counterclockwise`) complies with the OGC standard which defines\nouter ring vertices in counterclockwise order with inner ring(s) vertices (holes)\nin clockwise order. Setting this parameter in the `geo_shape` mapping explicitly\nsets vertex order for the coordinate list of a `geo_shape` field but can be\noverridden in each individual GeoJSON or WKT document.\n| `ccw`\n\n|`ignore_malformed` |If true, malformed GeoJSON or WKT shapes are ignored. If\nfalse (default), malformed GeoJSON and WKT shapes throw an exception and reject the\nentire document.\n| `false`\n\n|`ignore_z_value` |If `true` (default) three dimension points will be accepted (stored in source)\nbut only latitude and longitude values will be indexed; the third dimension is ignored. If `false`,\ngeopoints containing any more than latitude and longitude (two dimensions) values throw an exception\nand reject the whole document.\n| `true`\n\n|`coerce` |If `true` unclosed linear rings in polygons will be automatically closed.\n| `false`\n\n|=======================================================================\n\n[[shape-indexing-approach]]\n[discrete]\n==== Indexing approach\nLike `geo_shape`, the `shape` field type is indexed by decomposing geometries into\na triangular mesh and indexing each triangle as a 7 dimension point in a BKD tree.\nThe coordinates provided to the indexer are single precision floating point values so\nthe field guarantees the same accuracy provided by the java virtual machine (typically\n`1E-38`). For polygons/multi-polygons the performance of the tessellator primarily\ndepends on the number of vertices that define the geometry.\n\n*IMPORTANT NOTES*\n\n`CONTAINS` relation query - `shape` queries with `relation` defined as `contains` are supported\nfor indices created with ElasticSearch 7.5.0 or higher.\n\n[discrete]\n===== Example\n\n[source,console]\n--------------------------------------------------\nPUT /example\n{\n  \"mappings\": {\n    \"properties\": {\n      \"geometry\": {\n        \"type\": \"shape\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TESTSETUP\n\nThis mapping definition maps the geometry field to the shape type. The indexer uses single\nprecision floats for the vertex values so accuracy is guaranteed to the same precision as\n`float` values provided by the java virtual machine approximately (typically 1E-38).\n\n[[shape-input-structure]]\n[discrete]\n==== Input Structure\n\nShapes can be represented using either the http://geojson.org[GeoJSON]\nor https://docs.opengeospatial.org/is/12-063r5/12-063r5.html[Well-Known Text]\n(WKT) format. The following table provides a mapping of GeoJSON and WKT\nto Elasticsearch types:\n\n[cols=\"<,<,<,<\",options=\"header\",]\n|=======================================================================\n|GeoJSON Type |WKT Type |Elasticsearch Type |Description\n\n|`Point` |`POINT` |`point` |A single `x, y` coordinate.\n|`LineString` |`LINESTRING` |`linestring` |An arbitrary line given two or more points.\n|`Polygon` |`POLYGON` |`polygon` |A _closed_ polygon whose first and last point\nmust match, thus requiring `n + 1` vertices to create an `n`-sided\npolygon and a minimum of `4` vertices.\n|`MultiPoint` |`MULTIPOINT` |`multipoint` |An array of unconnected, but likely related\npoints.\n|`MultiLineString` |`MULTILINESTRING` |`multilinestring` |An array of separate linestrings.\n|`MultiPolygon` |`MULTIPOLYGON` |`multipolygon` |An array of separate polygons.\n|`GeometryCollection` |`GEOMETRYCOLLECTION` |`geometrycollection` | A shape collection similar to the\n`multi*` shapes except that multiple types can coexist (e.g., a Point and a LineString).\n|`N/A` |`BBOX` |`envelope` |A bounding rectangle, or envelope, specified by\nspecifying only the top left and bottom right points.\n|=======================================================================\n\n[NOTE]\n=============================================\nFor all types, both the inner `type` and `coordinates` fields are required.\n\nIn GeoJSON and WKT, and therefore Elasticsearch, the correct *coordinate order is (X, Y)*\nwithin coordinate arrays. This differs from many Geospatial APIs (e.g., `geo_shape`) that\ntypically use the colloquial latitude, longitude (Y, X) ordering.\n=============================================\n\n[[point-shape]]\n[discrete]\n===== http://geojson.org/geojson-spec.html#id2[Point]\n\nA point is a single coordinate in cartesian `x, y` space. It may represent the\nlocation of an item of interest in a virtual world or projected space. The\nfollowing is an example of a point in GeoJSON.\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"point\",\n    \"coordinates\" : [-377.03653, 389.897676]\n  }\n}\n--------------------------------------------------\n\nThe following is an example of a point in WKT:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : \"POINT (-377.03653 389.897676)\"\n}\n--------------------------------------------------\n\n[discrete]\n[[linestring]]\n===== http://geojson.org/geojson-spec.html#id3[LineString]\n\nA `linestring` defined by an array of two or more positions. By\nspecifying only two points, the `linestring` will represent a straight\nline. Specifying more than two points creates an arbitrary path. The\nfollowing is an example of a LineString in GeoJSON.\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"linestring\",\n    \"coordinates\" : [[-377.03653, 389.897676], [-377.009051, 389.889939]]\n  }\n}\n--------------------------------------------------\n\nThe following is an example of a LineString in WKT:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : \"LINESTRING (-377.03653 389.897676, -377.009051 389.889939)\"\n}\n--------------------------------------------------\n\n[discrete]\n[[polygon]]\n===== http://geojson.org/geojson-spec.html#id4[Polygon]\n\nA polygon is defined by a list of a list of points. The first and last\npoints in each (outer) list must be the same (the polygon must be\nclosed). The following is an example of a Polygon in GeoJSON.\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"polygon\",\n    \"coordinates\" : [\n      [ [1000.0, -1001.0], [1001.0, -1001.0], [1001.0, -1000.0], [1000.0, -1000.0], [1000.0, -1001.0] ]\n    ]\n  }\n}\n--------------------------------------------------\n\nThe following is an example of a Polygon in WKT:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : \"POLYGON ((1000.0 -1001.0, 1001.0 -1001.0, 1001.0 -1000.0, 1000.0 -1000.0, 1000.0 -1001.0))\"\n}\n--------------------------------------------------\n\nThe first array represents the outer boundary of the polygon, the other\narrays represent the interior shapes (\"holes\"). The following is a GeoJSON example\nof a polygon with a hole:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"polygon\",\n    \"coordinates\" : [\n      [ [1000.0, -1001.0], [1001.0, -1001.0], [1001.0, -1000.0], [1000.0, -1000.0], [1000.0, -1001.0] ],\n      [ [1000.2, -1001.2], [1000.8, -1001.2], [1000.8, -1001.8], [1000.2, -1001.8], [1000.2, -1001.2] ]\n    ]\n  }\n}\n--------------------------------------------------\n\nThe following is an example of a Polygon with a hole in WKT:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : \"POLYGON ((1000.0 1000.0, 1001.0 1000.0, 1001.0 1001.0, 1000.0 1001.0, 1000.0 1000.0), (1000.2 1000.2, 1000.8 1000.2, 1000.8 1000.8, 1000.2 1000.8, 1000.2 1000.2))\"\n}\n--------------------------------------------------\n\n*IMPORTANT NOTE:* WKT does not enforce a specific order for vertices.\nhttps://tools.ietf.org/html/rfc7946#section-3.1.6[GeoJSON] mandates that the\nouter polygon must be counterclockwise and interior shapes must be clockwise,\nwhich agrees with the Open Geospatial Consortium (OGC)\nhttps://www.opengeospatial.org/standards/sfa[Simple Feature Access]\nspecification for vertex ordering.\n\nBy default Elasticsearch expects vertices in counterclockwise (right hand rule)\norder. If data is provided in clockwise order (left hand rule) the user can change\nthe `orientation` parameter either in the field mapping, or as a parameter provided\nwith the document.\n\nThe following is an example of overriding the `orientation` parameters on a document:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"polygon\",\n    \"orientation\" : \"clockwise\",\n    \"coordinates\" : [\n      [ [1000.0, 1000.0], [1000.0, 1001.0], [1001.0, 1001.0], [1001.0, 1000.0], [1000.0, 1000.0] ]\n    ]\n  }\n}\n--------------------------------------------------\n\n[discrete]\n[[multipoint]]\n===== http://geojson.org/geojson-spec.html#id5[MultiPoint]\n\nThe following is an example of a list of GeoJSON points:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"multipoint\",\n    \"coordinates\" : [\n      [1002.0, 1002.0], [1003.0, 2000.0]\n    ]\n  }\n}\n--------------------------------------------------\n\nThe following is an example of a list of WKT points:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : \"MULTIPOINT (1002.0 2000.0, 1003.0 2000.0)\"\n}\n--------------------------------------------------\n\n[discrete]\n[[multilinestring]]\n===== http://geojson.org/geojson-spec.html#id6[MultiLineString]\n\nThe following is an example of a list of GeoJSON linestrings:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"multilinestring\",\n    \"coordinates\" : [\n      [ [1002.0, 200.0], [1003.0, 200.0], [1003.0, 300.0], [1002.0, 300.0] ],\n      [ [1000.0, 100.0], [1001.0, 100.0], [1001.0, 100.0], [1000.0, 100.0] ],\n      [ [1000.2, 100.2], [1000.8, 100.2], [1000.8, 100.8], [1000.2, 100.8] ]\n    ]\n  }\n}\n--------------------------------------------------\n\nThe following is an example of a list of WKT linestrings:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : \"MULTILINESTRING ((1002.0 200.0, 1003.0 200.0, 1003.0 300.0, 1002.0 300.0), (1000.0 100.0, 1001.0 100.0, 1001.0 100.0, 1000.0 100.0), (1000.2 0.2, 1000.8 100.2, 1000.8 100.8, 1000.2 100.8))\"\n}\n--------------------------------------------------\n\n[discrete]\n[[multipolygon]]\n===== http://geojson.org/geojson-spec.html#id7[MultiPolygon]\n\nThe following is an example of a list of GeoJSON polygons (second polygon contains a hole):\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"multipolygon\",\n    \"coordinates\" : [\n      [ [[1002.0, 200.0], [1003.0, 200.0], [1003.0, 300.0], [1002.0, 300.0], [1002.0, 200.0]] ],\n      [ [[1000.0, 200.0], [1001.0, 100.0], [1001.0, 100.0], [1000.0, 100.0], [1000.0, 100.0]],\n        [[1000.2, 200.2], [1000.8, 100.2], [1000.8, 100.8], [1000.2, 100.8], [1000.2, 100.2]] ]\n    ]\n  }\n}\n--------------------------------------------------\n\nThe following is an example of a list of WKT polygons (second polygon contains a hole):\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : \"MULTIPOLYGON (((1002.0 200.0, 1003.0 200.0, 1003.0 300.0, 1002.0 300.0, 102.0 200.0)), ((1000.0 100.0, 1001.0 100.0, 1001.0 100.0, 1000.0 100.0, 1000.0 100.0), (1000.2 100.2, 1000.8 100.2, 1000.8 100.8, 1000.2 100.8, 1000.2 100.2)))\"\n}\n--------------------------------------------------\n\n[discrete]\n[[geometry_collection]]\n===== http://geojson.org/geojson-spec.html#geometrycollection[Geometry Collection]\n\nThe following is an example of a collection of GeoJSON geometry objects:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\": \"geometrycollection\",\n    \"geometries\": [\n      {\n        \"type\": \"point\",\n        \"coordinates\": [1000.0, 100.0]\n      },\n      {\n        \"type\": \"linestring\",\n        \"coordinates\": [ [1001.0, 100.0], [1002.0, 100.0] ]\n      }\n    ]\n  }\n}\n--------------------------------------------------\n\nThe following is an example of a collection of WKT geometry objects:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : \"GEOMETRYCOLLECTION (POINT (1000.0 100.0), LINESTRING (1001.0 100.0, 1002.0 100.0))\"\n}\n--------------------------------------------------\n\n[discrete]\n===== Envelope\n\nElasticsearch supports an `envelope` type, which consists of coordinates\nfor upper left and lower right points of the shape to represent a\nbounding rectangle in the format `[[minX, maxY], [maxX, minY]]`:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"envelope\",\n    \"coordinates\" : [ [1000.0, 100.0], [1001.0, 100.0] ]\n  }\n}\n--------------------------------------------------\n\nThe following is an example of an envelope using the WKT BBOX format:\n\n*NOTE:* WKT specification expects the following order: minLon, maxLon, maxLat, minLat.\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : \"BBOX (1000.0, 1002.0, 2000.0, 1000.0)\"\n}\n--------------------------------------------------\n\n[discrete]\n==== Sorting and Retrieving index Shapes\n\nDue to the complex input structure and index representation of shapes,\nit is not currently possible to sort shapes or retrieve their fields\ndirectly. The `shape` value is only retrievable through the `_source`\nfield.\n"
}