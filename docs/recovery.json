{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.069069",
        "size": 10786,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/recovery.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "recovery",
        "version": "8.15"
    },
    "doc": "[[recovery]]\n=== Index recovery settings\n\nPeer recovery syncs data from a primary shard to a new or existing shard copy.\n\nPeer recovery automatically occurs when {es}:\n\n* Recreates a shard lost during node failure\n* Relocates a shard to another node due to a cluster rebalance or changes to the\n<<modules-cluster, shard allocation settings>>\n\nYou can view a list of in-progress and completed recoveries using the\n<<cat-recovery, cat recovery API>>.\n\n[discrete]\n[[recovery-settings]]\n==== Recovery settings\n\n`indices.recovery.max_bytes_per_sec`::\n(<<cluster-update-settings,Dynamic>>) Limits total inbound and outbound\nrecovery traffic for each node. Applies to both peer recoveries as well\nas snapshot recoveries (i.e., restores from a snapshot). Defaults to `40mb`\nunless the node is a dedicated <<cold-tier, cold>> or\n<<frozen-tier, frozen>> node, in which case the default relates to the\ntotal memory available to the node:\n+\n[options=\"header\"]\n|======\n|Total memory           | Default recovery rate on cold and frozen nodes\n|&le; 4 GB              | 40 MB/s\n|> 4 GB and &le; 8 GB   | 60 MB/s\n|> 8 GB and &le; 16 GB  | 90 MB/s\n|> 16 GB and &le; 32 GB | 125 MB/s\n|> 32 GB                | 250 MB/s\n|======\n+\nThis limit applies to each node separately. If multiple nodes in a cluster\nperform recoveries at the same time, the cluster's total recovery traffic may\nexceed this limit.\n+\nIf this limit is too high, ongoing recoveries may consume an excess of\nbandwidth and other resources, which can have a performance impact on your\ncluster and in extreme cases may destabilize it.\n+\nThis is a dynamic setting, which means you can set it in each node's\n`elasticsearch.yml` config file and you can update it dynamically using the\n<<cluster-update-settings,cluster update settings API>>. If you set it\ndynamically then the same limit applies on every node in the cluster. If you do\nnot set it dynamically then you can set a different limit on each node, which is\nuseful if some of your nodes have better bandwidth than others. For example, if\nyou are using <<overview-index-lifecycle-management,Index Lifecycle Management>>\nthen you may be able to give your hot nodes a higher recovery bandwidth limit\nthan your warm nodes.\n\n[discrete]\n==== Expert peer recovery settings\nYou can use the following _expert_ setting to manage resources for peer\nrecoveries.\n\n`indices.recovery.max_concurrent_file_chunks`::\n(<<cluster-update-settings,Dynamic>>, Expert) Number of file chunks sent in\nparallel for each recovery. Defaults to `2`.\n+\nYou can increase the value of this setting when the recovery of a single shard\nis not reaching the traffic limit set by `indices.recovery.max_bytes_per_sec`,\nup to a maximum of `8`.\n\n`indices.recovery.max_concurrent_operations`::\n(<<cluster-update-settings,Dynamic>>, Expert) Number of operations sent\nin parallel for each recovery. Defaults to `1`.\n+\nConcurrently replaying operations during recovery can be very resource-intensive\nand may interfere with indexing, search, and other activities in your cluster.\nDo not increase this setting without carefully verifying that your cluster has\nthe resources available to handle the extra load that will result.\n\n`indices.recovery.use_snapshots`::\n(<<cluster-update-settings,Dynamic>>, Expert) Enables snapshot-based peer recoveries.\n+\n{es} recovers replicas and relocates primary shards using the _peer recovery_\nprocess, which involves constructing a new copy of a shard on the target node.\nWhen `indices.recovery.use_snapshots` is `false` {es} will construct this new\ncopy by transferring the index data from the current primary. When this setting\nis `true` {es} will attempt to copy the index data from a recent snapshot\nfirst, and will only copy data from the primary if it cannot identify a\nsuitable snapshot. Defaults to `true`.\n+\nSetting this option to `true` reduces your operating costs if your cluster runs\nin an environment where the node-to-node data transfer costs are higher than\nthe costs of recovering data from a snapshot. It also reduces the amount of\nwork that the primary must do during a recovery.\n+\nAdditionally, repositories having the setting `use_for_peer_recovery=true`\nwill be consulted to find a good snapshot when recovering a shard. If none\nof the registered repositories have this setting defined, index files will\nbe recovered from the source node.\n\n`indices.recovery.max_concurrent_snapshot_file_downloads`::\n(<<cluster-update-settings,Dynamic>>, Expert) Number of snapshot file downloads requests\nsent in parallel to the target node for each recovery. Defaults to `5`.\n+\nDo not increase this setting without carefully verifying that your cluster has\nthe resources available to handle the extra load that will result.\n\n`indices.recovery.max_concurrent_snapshot_file_downloads_per_node`::\n(<<cluster-update-settings,Dynamic>>, Expert) Number of snapshot file downloads requests\nexecuted in parallel in the target node for all recoveries. Defaults to `25`.\n+\nDo not increase this setting without carefully verifying that your cluster has\nthe resources available to handle the extra load that will result.\n\n[discrete]\n[[recovery-settings-for-managed-services]]\n==== Recovery settings for managed services\n\nNOTE: {cloud-only}\n\nWhen running {es} as a managed service, the following settings allow the\nservice to specify absolute maximum bandwidths for disk reads, disk writes, and\nnetwork traffic on each node, and permit you to control the maximum recovery\nbandwidth on each node in terms of these absolute maximum values. They have two\neffects:\n\n1. They determine the bandwidth used for recovery if\n`indices.recovery.max_bytes_per_sec` is not set, overriding the default\nbehaviour described above.\n\n2. They impose a node-wide limit on recovery bandwidth which is independent of\nthe value of `indices.recovery.max_bytes_per_sec`.\n\nIf you do not set `indices.recovery.max_bytes_per_sec` then the maximum\nrecovery bandwidth is computed as a proportion of the absolute maximum\nbandwidth. The computation is performed separately for read and write traffic.\nThe service defines the absolute maximum bandwidths for disk reads, disk\nwrites, and network transfers using `node.bandwidth.recovery.disk.read`,\n`node.bandwidth.recovery.disk.write` and `node.bandwidth.recovery.network`\nrespectively, and you can set the proportion of the absolute maximum bandwidth\nthat may be used for recoveries by adjusting\n`node.bandwidth.recovery.factor.read` and\n`node.bandwidth.recovery.factor.write`. If the {operator-feature} is enabled\nthen the service may also set default proportions using operator-only variants\nof these settings.\n\nIf you set `indices.recovery.max_bytes_per_sec` then {es} will use its value\nfor the maximum recovery bandwidth, as long as this does not exceed the\nnode-wide limit. {es} computes the node-wide limit by multiplying the absolute\nmaximum bandwidths by the\n`node.bandwidth.recovery.operator.factor.max_overcommit` factor. If you set\n`indices.recovery.max_bytes_per_sec` in excess of the node-wide limit then the\nnode-wide limit takes precedence.\n\nThe service should determine values for the absolute maximum bandwidths\nsettings by experiment, using a recovery-like workload in which there are\nseveral concurrent workers each processing files sequentially in chunks of\n512kiB.\n\n`node.bandwidth.recovery.disk.read`::\n(<<byte-units,byte value>> per second) The absolute maximum disk read speed for\na recovery-like workload on the node. If set,\n`node.bandwidth.recovery.disk.write` and `node.bandwidth.recovery.network` must\nalso be set.\n\n`node.bandwidth.recovery.disk.write`::\n(<<byte-units,byte value>> per second) The absolute maximum disk write speed\nfor a recovery-like workload on the node. If set,\n`node.bandwidth.recovery.disk.read` and `node.bandwidth.recovery.network` must\nalso be set.\n\n`node.bandwidth.recovery.network`::\n(<<byte-units,byte value>> per second) The absolute maximum network throughput\nfor a recovery-like workload on the node, which applies to both reads and\nwrites. If set, `node.bandwidth.recovery.disk.read` and\n`node.bandwidth.recovery.disk.write` must also be set.\n\n`node.bandwidth.recovery.factor.read`::\n(float, <<dynamic-cluster-setting,dynamic>>) The proportion of the maximum read\nbandwidth that may be used for recoveries if\n`indices.recovery.max_bytes_per_sec` is not set. Must be greater than `0` and\nnot greater than `1`. If not set, the value of\n`node.bandwidth.recovery.operator.factor.read` is used. If no factor settings\nare set then the value `0.4` is used.\n\n`node.bandwidth.recovery.factor.write`::\n(float, <<dynamic-cluster-setting,dynamic>>) The proportion of the maximum\nwrite bandwidth that may be used for recoveries if\n`indices.recovery.max_bytes_per_sec` is not set. Must be greater than `0` and\nnot greater than `1`. If not set, the value of\n`node.bandwidth.recovery.operator.factor.write` is used. If no factor settings\nare set then the value `0.4` is used.\n\n`node.bandwidth.recovery.operator.factor.read`::\n(float, <<dynamic-cluster-setting,dynamic>>) The proportion of the maximum read\nbandwidth that may be used for recoveries if\n`indices.recovery.max_bytes_per_sec` and `node.bandwidth.recovery.factor.read`\nare not set. Must be greater than `0` and not greater than `1`. If not set, the\nvalue of `node.bandwidth.recovery.operator.factor` is used. If no factor\nsettings are set then the value `0.4` is used. When the {operator-feature} is\nenabled, this setting can be updated only by operator users.\n\n`node.bandwidth.recovery.operator.factor.write`::\n(float, <<dynamic-cluster-setting,dynamic>>) The proportion of the maximum\nwrite bandwidth that may be used for recoveries if\n`indices.recovery.max_bytes_per_sec` and `node.bandwidth.recovery.factor.write`\nare not set. Must be greater than `0` and not greater than `1`. If not set, the\nvalue of `node.bandwidth.recovery.operator.factor` is used. If no factor\nsettings are set then the value `0.4` is used. When the {operator-feature} is\nenabled, this setting can be updated only by operator users.\n\n`node.bandwidth.recovery.operator.factor`::\n(float, <<dynamic-cluster-setting,dynamic>>) The proportion of the maximum\nbandwidth that may be used for recoveries if neither\n`indices.recovery.max_bytes_per_sec` nor any other factor settings are set.\nMust be greater than `0` and not greater than `1`. Defaults to `0.4`. When the\n{operator-feature} is enabled, this setting can be updated only by operator\nusers.\n\n`node.bandwidth.recovery.operator.factor.max_overcommit`::\n(float, <<dynamic-cluster-setting,dynamic>>) The proportion of the absolute\nmaximum bandwidth that may be used for recoveries regardless of any other\nsettings. Must be greater than `0`. Defaults to `100`. When the\n{operator-feature} is enabled, this setting can be updated only by operator\nusers.\n"
}