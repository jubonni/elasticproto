{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.658070",
        "size": 8092,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-text-expansion-query.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "query-dsl-text-expansion-query",
        "version": "8.15"
    },
    "doc": "[[query-dsl-text-expansion-query]]\n=== Text expansion query\n\n++++\n<titleabbrev>Text expansion</titleabbrev>\n++++\n\ndeprecated[8.15.0, This query has been replaced by <<query-dsl-sparse-vector-query>>.]\n\n.Deprecation usage note\n****\nYou can continue using `rank_features` fields with `text_expansion` queries in the current version.\nHowever, if you plan to upgrade, we recommend updating mappings to use the `sparse_vector` field type and <<docs-reindex,reindexing your data>>.\nThis will allow you to take advantage of the new capabilities and improvements available in newer versions.\n****\n\nThe text expansion query uses a {nlp} model to convert the query text into a list of token-weight pairs which are then used in a query against a\n<<sparse-vector,sparse vector>> or <<rank-features,rank features>> field.\n\n[discrete]\n[[text-expansion-query-ex-request]]\n==== Example request\n\n[source,console]\n----\nGET _search\n{\n   \"query\":{\n      \"text_expansion\":{\n         \"<sparse_vector_field>\":{\n            \"model_id\":\"the model to produce the token weights\",\n            \"model_text\":\"the query string\"\n         }\n      }\n   }\n}\n----\n// TEST[skip: TBD]\n\n[discrete]\n[[text-expansion-query-params]]\n==== Top level parameters for `text_expansion`\n\n`<sparse_vector_field>`:::\n(Required, object) The name of the field that contains the token-weight pairs the NLP model created based on the input text.\n\n[discrete]\n[[text-expansion-rank-feature-field-params]]\n==== Top level parameters for `<sparse_vector_field>`\n\n`model_id`::::\n(Required, string) The ID of the model to use to convert the query text into token-weight pairs.\nIt must be the same model ID that was used to create the tokens from the input text.\n\n`model_text`::::\n(Required, string) The query text you want to use for search.\n\n`pruning_config` ::::\n(Optional, object)\npreview:[]\nOptional pruning configuration.\nIf enabled, this will omit non-significant tokens from the query in order to improve query performance.\nDefault: Disabled.\n+\n--\nParameters for `<pruning_config>` are:\n\n`tokens_freq_ratio_threshold`::\n(Optional, integer)\npreview:[]\nTokens whose frequency is more than `tokens_freq_ratio_threshold` times the average frequency of all tokens in the specified field are considered outliers and pruned.\nThis value must between 1 and 100.\nDefault: `5`.\n\n`tokens_weight_threshold`::\n(Optional, float)\npreview:[]\nTokens whose weight is less than `tokens_weight_threshold` are considered insignificant and pruned.\nThis value must be between 0 and 1.\nDefault: `0.4`.\n\n`only_score_pruned_tokens`::\n(Optional, boolean)\npreview:[]\nIf `true` we only input pruned tokens into scoring, and discard non-pruned tokens.\nIt is strongly recommended to set this to `false` for the main query, but this can be set to `true` for a rescore query to get more relevant results.\nDefault: `false`.\n\nNOTE: The default values for `tokens_freq_ratio_threshold` and `tokens_weight_threshold` were chosen based on tests using ELSER that provided the most optimal results.\n--\n\n[discrete]\n[[text-expansion-query-example]]\n==== Example ELSER query\n\nThe following is an example of the `text_expansion` query that references the ELSER model to perform semantic search.\nFor a more detailed description of how to perform semantic search by using ELSER and the `text_expansion` query, refer to <<semantic-search-elser,this tutorial>>.\n\n[source,console]\n----\nGET my-index/_search\n{\n   \"query\":{\n      \"text_expansion\":{\n         \"ml.tokens\":{\n            \"model_id\":\".elser_model_2\",\n            \"model_text\":\"How is the weather in Jamaica?\"\n         }\n      }\n   }\n}\n----\n// TEST[skip: TBD]\n\nMultiple `text_expansion` queries can be combined with each other or other query types.\nThis can be achieved by wrapping them in <<query-dsl-bool-query, boolean query clauses>> and using linear boosting:\n\n[source,console]\n----\nGET my-index/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"should\": [\n        {\n          \"text_expansion\": {\n            \"ml.inference.title_expanded.predicted_value\": {\n              \"model_id\": \".elser_model_2\",\n              \"model_text\": \"How is the weather in Jamaica?\",\n              \"boost\": 1\n            }\n          }\n        },\n        {\n          \"text_expansion\": {\n            \"ml.inference.description_expanded.predicted_value\": {\n              \"model_id\": \".elser_model_2\",\n              \"model_text\": \"How is the weather in Jamaica?\",\n              \"boost\": 1\n            }\n          }\n        },\n        {\n          \"multi_match\": {\n            \"query\": \"How is the weather in Jamaica?\",\n            \"fields\": [\n              \"title\",\n              \"description\"\n            ],\n            \"boost\": 4\n          }\n        }\n      ]\n    }\n  }\n}\n----\n// TEST[skip: TBD]\n\nThis can also be achieved using <<rrf, reciprocal rank fusion (RRF)>>, through an <<rrf-retriever, `rrf` retriever>> with multiple\n<<standard-retriever, `standard` retrievers>>.\n\n[source,console]\n----\nGET my-index/_search\n{\n  \"retriever\": {\n    \"rrf\": {\n      \"retrievers\": [\n        {\n          \"standard\": {\n            \"query\": {\n              \"multi_match\": {\n                \"query\": \"How is the weather in Jamaica?\",\n                \"fields\": [\n                  \"title\",\n                  \"description\"\n                ]\n              }\n            }\n          }\n        },\n        {\n          \"standard\": {\n            \"query\": {\n              \"text_expansion\": {\n                \"ml.inference.title_expanded.predicted_value\": {\n                  \"model_id\": \".elser_model_2\",\n                  \"model_text\": \"How is the weather in Jamaica?\"\n                }\n              }\n            }\n          }\n        },\n        {\n          \"standard\": {\n            \"query\": {\n              \"text_expansion\": {\n                \"ml.inference.description_expanded.predicted_value\": {\n                  \"model_id\": \".elser_model_2\",\n                  \"model_text\": \"How is the weather in Jamaica?\"\n                }\n              }\n            }\n          }\n        }\n      ],\n      \"window_size\": 10,\n      \"rank_constant\": 20\n    }\n  }\n}\n----\n// TEST[skip: TBD]\n\n[discrete]\n[[text-expansion-query-with-pruning-config-and-rescore-example]]\n==== Example ELSER query with pruning configuration and rescore\n\nThe following is an extension to the above example that adds a preview:[] pruning configuration to the `text_expansion` query.\nThe pruning configuration identifies non-significant tokens to prune from the query in order to improve query performance.\n\nToken pruning happens at the shard level.\nWhile this should result in the same tokens being labeled as insignificant across shards, this is not guaranteed based on the composition of each shard.\nTherefore, if you are running `text_expansion` with a `pruning_config` on a multi-shard index, we strongly recommend adding a <<rescore>> function with the tokens that were originally pruned from the query.\nThis will help mitigate any shard-level inconsistency with pruned tokens and provide better relevance overall.\n\n[source,console]\n----\nGET my-index/_search\n{\n   \"query\":{\n      \"text_expansion\":{\n         \"ml.tokens\":{\n            \"model_id\":\".elser_model_2\",\n            \"model_text\":\"How is the weather in Jamaica?\",\n            \"pruning_config\": {\n               \"tokens_freq_ratio_threshold\": 5,\n               \"tokens_weight_threshold\": 0.4,\n               \"only_score_pruned_tokens\": false\n           }\n         }\n      }\n   },\n   \"rescore\": {\n      \"window_size\": 100,\n      \"query\": {\n         \"rescore_query\": {\n            \"text_expansion\": {\n               \"ml.tokens\": {\n                  \"model_id\": \".elser_model_2\",\n                  \"model_text\": \"How is the weather in Jamaica?\",\n                  \"pruning_config\": {\n                     \"tokens_freq_ratio_threshold\": 5,\n                     \"tokens_weight_threshold\": 0.4,\n                     \"only_score_pruned_tokens\": true\n                  }\n               }\n            }\n         }\n      }\n   }\n}\n----\n//TEST[skip: TBD]\n\n[NOTE]\n====\nDepending on your data, the text expansion query may be faster with `track_total_hits: false`.\n====\n"
}