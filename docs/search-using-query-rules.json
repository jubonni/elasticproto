{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.341067",
        "size": 7084,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-using-query-rules.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "search-using-query-rules",
        "version": "8.15"
    },
    "doc": "[[search-using-query-rules]]\n=== Searching with query rules\n\n++++\n<titleabbrev>Searching with query rules</titleabbrev>\n++++\n\n[[query-rules]]\n_Query rules_ allow customization of search results for queries that match specified criteria metadata.\nThis allows for more control over results, for example ensuring that promoted documents that match defined criteria are returned at the top of the result list.\nMetadata is defined in the query rule, and is matched against the query criteria.\nQuery rules use metadata to match a query.\nMetadata is provided as part of the <<query-dsl-rule-query, rule query>> as an object and can be anything that helps differentiate the query, for example:\n\n* A user-entered query string\n* Personalized metadata about users (e.g. country, language, etc)\n* A particular topic\n* A referring site\n* etc.\n\nQuery rules define a metadata key that will be used to match the metadata provided in the <<query-dsl-rule-query, rule query>> with the criteria specified in the rule.\n\nWhen a query rule matches the <<query-dsl-rule-query, rule query>> metadata according to its defined criteria, the query rule action is applied to the underlying `organic` query.\n\nFor example, a query rule could be defined to match a user-entered query string of `pugs` and a country `us` and promote adoptable shelter dogs if the rule query met both criteria.\n\nRules are defined using the <<query-rules-apis, query rules API>> and searched using the <<query-dsl-rule-query,rule query>>.\n\n[discrete]\n[[query-rule-definition]]\n==== Rule definition\n\nWhen defining a rule, consider the following:\n\n[discrete]\n[[query-rule-type]]\n===== Rule type\n\nThe type of rule we want to apply.\nWe support the following rule types:\n\n* `pinned` will re-write the query into a <<query-dsl-pinned-query, pinned query>>, pinning specified results matching the query rule at the top of the returned result set.\n* `exclude` will exclude specified results from the returned result set.\n\n[discrete]\n[[query-rule-criteria]]\n===== Rule criteria\n\nThe criteria for which this rule will match.\nCriteria is defined as `type`, `metadata`, and `values`.\nAllowed criteria types are:\n\n[cols=\"2*\",options=\"header\"]\n|===\n|Type\n|Match Requirements\n\n|`exact`\n|Rule metadata matches the specified value exactly.\n\n|`fuzzy`\n|Rule metadata matches the specified value within an allowed {wikipedia}/Levenshtein_distance[Levenshtein edit distance].\n\n|`prefix`\n|Rule metadata starts with the specified value.\n\n|`suffix`\n|Rule metadata ends with the specified value.\n\n|`contains`\n|Rule metadata contains the specified value.\n\n|`lt`\n|Rule metadata is less than the specified value.\n\n|`lte`\n|Rule metadata is less than or equal to the specified value.\n\n|`gt`\n|Rule metadata is greater than the specified value.\n\n|`gte`\n|Rule metadata is greater than or equal to the specified value.\n\n|`always`\n|Always matches for all rule queries.\n|===\n\n[discrete]\n[[query-rule-actions]]\n===== Rule actions\n\nThe actions to take when the rule matches a query:\n\n* `ids` will select the specified <<mapping-id-field,`_id`>>s.\n* `docs` will select the specified documents in the specified indices.\n\nUse `ids` when searching over a single index, and `docs` when searching over multiple indices.\n`ids` and `docs` cannot be combined in the same query.\n\n[discrete]\n[[add-query-rules]]\n==== Add query rules\n\nYou can add query rules using the <<put-query-ruleset>> call.\nThis adds a ruleset containing one or more query rules that will be applied to queries that match their specified criteria.\n\nThe following command will create a query ruleset called `my-ruleset` with two query rules:\n\n* The first rule will generate a <<query-dsl-pinned-query>> pinning the <<mapping-id-field,`_id`>>s `id1` and `id2` when the `query_string` metadata value is a fuzzy match to either `puggles` or `pugs` _and_ the user's location is in the US.\n* The second rule will generate a query that excludes the <<mapping-id-field, `_id`>> `id3` specifically from the `my-index-000001` index and `id4` from the `my-index-000002` index when the `query_string` metadata value contains `beagles`.\n\n////\n[source,console]\n----\nPUT /my-index-000001\n----\n// TESTSETUP\n////\n\n[source,console]\n----\nPUT /_query_rules/my-ruleset\n{\n  \"rules\": [\n    {\n      \"rule_id\": \"rule1\",\n      \"type\": \"pinned\",\n      \"criteria\": [\n        {\n          \"type\": \"fuzzy\",\n          \"metadata\": \"query_string\",\n          \"values\": [ \"puggles\", \"pugs\" ]\n        },\n        {\n          \"type\": \"exact\",\n          \"metadata\": \"user_country\",\n          \"values\": [ \"us\" ]\n        }\n      ],\n      \"actions\": {\n        \"ids\": [\n          \"id1\",\n          \"id2\"\n        ]\n      }\n    },\n    {\n      \"rule_id\": \"rule2\",\n      \"type\": \"exclude\",\n      \"criteria\": [\n        {\n          \"type\": \"contains\",\n          \"metadata\": \"query_string\",\n          \"values\": [ \"beagles\" ]\n        }\n      ],\n      \"actions\": {\n        \"docs\": [\n          {\n            \"_index\": \"my-index-000001\",\n            \"_id\": \"id3\"\n          },\n          {\n            \"_index\": \"my-index-000002\",\n            \"_id\": \"id4\"\n          }\n        ]\n      }\n    }\n  ]\n}\n----\n\nThe API response returns a results of `created` or `updated` depending on whether this was a new or edited ruleset.\n\nNOTE: There is a limit of 100 rules per ruleset.\nThis can be increased up to 1000 using the `xpack.applications.rules.max_rules_per_ruleset` cluster setting.\n\n[source,console-result]\n----\n{\n  \"result\": \"created\"\n}\n----\n// TEST[continued]\n\nYou can use the <<get-query-ruleset>> call to retrieve the ruleset you just created, the <<list-query-rulesets>> call to retrieve a summary of all query rulesets, and the <<delete-query-ruleset>> call to delete a query ruleset.\n\n[discrete]\n[[rule-query-search]]\n==== Perform a rule query\n\nOnce you have defined one or more query rulesets, you can search these rulesets using the <<query-dsl-rule-query>> query.\nRulesets are evaluated in order, so rules in the first ruleset you specify will be applied before any subsequent rulesets.\n\nAn example query for the `my-ruleset` defined above is:\n\n[source,console]\n----\nGET /my-index-000001/_search\n{\n  \"query\": {\n    \"rule\": {\n      \"organic\": {\n        \"query_string\": {\n          \"query\": \"puggles\"\n        }\n      },\n      \"match_criteria\": {\n        \"query_string\": \"puggles\",\n        \"user_country\": \"us\"\n      },\n      \"ruleset_ids\": [\"my-ruleset\"]\n    }\n  }\n}\n----\n// TEST[continued]\n\nThis rule query will match against `rule1` in the defined query ruleset, and will convert the organic query into a pinned query with `id1` and `id2` pinned as the top hits.\nAny other matches from the organic query will be returned below the pinned results.\n\nIt's possible to have multiple rules in a ruleset match a single <<query-dsl-rule-query, rule query>>.\nIn this case, the rules are applied in the following order:\n\n- Where the matching rule appears in the ruleset\n- If multiple documents are specified in a single rule, in the order they are specified\n- If a document is matched by both a `pinned` rule and an `exclude` rule, the `exclude` rule will take precedence\n"
}