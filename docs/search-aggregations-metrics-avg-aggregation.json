{
    "meta": {
        "size": 4377,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-avg-aggregation.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "search-aggregations-metrics-avg-aggregation",
        "version": "8.15"
    },
    "doc": "[[search-aggregations-metrics-avg-aggregation]]\n=== Avg aggregation\n++++\n<titleabbrev>Avg</titleabbrev>\n++++\n\nA `single-value` metrics aggregation that computes the average of numeric values that are extracted from the aggregated documents. These values can be extracted either from specific numeric or <<histogram,histogram>> fields in the documents.\n\nAssuming the data consists of documents representing exams grades (between 0\nand 100) of students we can average their scores with:\n\n[source,console]\n--------------------------------------------------\nPOST /exams/_search?size=0\n{\n  \"aggs\": {\n    \"avg_grade\": { \"avg\": { \"field\": \"grade\" } }\n  }\n}\n--------------------------------------------------\n// TEST[setup:exams]\n\nThe above aggregation computes the average grade over all documents. The aggregation type is `avg` and the `field` setting defines the numeric field of the documents the average will be computed on. The above will return the following:\n\n[source,console-result]\n--------------------------------------------------\n{\n  ...\n  \"aggregations\": {\n    \"avg_grade\": {\n      \"value\": 75.0\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\\.\\.\\./\"took\": $body.took,\"timed_out\": false,\"_shards\": $body._shards,\"hits\": $body.hits,/]\n\nThe name of the aggregation (`avg_grade` above) also serves as the key by which the aggregation result can be retrieved from the returned response.\n\n==== Script\n\nLet's say the exam was exceedingly difficult, and you need to apply a grade correction. Average a <<runtime,runtime field>> to get a corrected average:\n\n[source,console]\n----\nPOST /exams/_search?size=0\n{\n  \"runtime_mappings\": {\n    \"grade.corrected\": {\n      \"type\": \"double\",\n      \"script\": {\n        \"source\": \"emit(Math.min(100, doc['grade'].value * params.correction))\",\n        \"params\": {\n          \"correction\": 1.2\n        }\n      }\n    }\n  },\n  \"aggs\": {\n    \"avg_corrected_grade\": {\n      \"avg\": {\n        \"field\": \"grade.corrected\"\n      }\n    }\n  }\n}\n----\n// TEST[setup:exams]\n// TEST[s/size=0/size=0&filter_path=aggregations/]\n\n////\n[source,console-result]\n----\n{\n  \"aggregations\": {\n    \"avg_corrected_grade\": {\n      \"value\": 80.0\n    }\n  }\n}\n----\n////\n\n\n==== Missing value\n\nThe `missing` parameter defines how documents that are missing a value should be treated.\nBy default they will be ignored but it is also possible to treat them as if they\nhad a value.\n\n[source,console]\n--------------------------------------------------\nPOST /exams/_search?size=0\n{\n  \"aggs\": {\n    \"grade_avg\": {\n      \"avg\": {\n        \"field\": \"grade\",\n        \"missing\": 10     <1>\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[setup:exams]\n\n<1> Documents without a value in the `grade` field will fall into the same bucket as documents that have the value `10`.\n\n\n[[search-aggregations-metrics-avg-aggregation-histogram-fields]]\n==== Histogram fields\nWhen average is computed on <<histogram,histogram fields>>, the result of the aggregation is the weighted average\nof all elements in the `values` array taking into consideration the number in the same position in the `counts` array.\n\nFor example, for the following index that stores pre-aggregated histograms with latency metrics for different networks:\n\n[source,console]\n--------------------------------------------------\nPUT metrics_index/_doc/1\n{\n  \"network.name\" : \"net-1\",\n  \"latency_histo\" : {\n      \"values\" : [0.1, 0.2, 0.3, 0.4, 0.5], <1>\n      \"counts\" : [3, 7, 23, 12, 6] <2>\n   }\n}\n\nPUT metrics_index/_doc/2\n{\n  \"network.name\" : \"net-2\",\n  \"latency_histo\" : {\n      \"values\" :  [0.1, 0.2, 0.3, 0.4, 0.5], <1>\n      \"counts\" : [8, 17, 8, 7, 6] <2>\n   }\n}\n\nPOST /metrics_index/_search?size=0\n{\n  \"aggs\": {\n    \"avg_latency\": \n      { \"avg\": { \"field\": \"latency_histo\" } \n    }\n  }\n}\n--------------------------------------------------\n\nFor each histogram field the `avg` aggregation adds each number in the `values` array <1> multiplied by its associated count\nin the `counts` array <2>. Eventually, it will compute the average over those values for all histograms and return the following result:\n\n[source,console-result]\n--------------------------------------------------\n{\n  ...\n  \"aggregations\": {\n    \"avg_latency\": {\n      \"value\": 0.29690721649\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[skip:test not setup]\n"
}