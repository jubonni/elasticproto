{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.620068",
        "size": 5623,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-ttest-aggregation.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "search-aggregations-metrics-ttest-aggregation",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[search-aggregations-metrics-ttest-aggregation]]\n=== T-test aggregation\n++++\n<titleabbrev>T-test</titleabbrev>\n++++\n\nA `t_test` metrics aggregation that performs a statistical hypothesis test in which the test statistic follows a Student's t-distribution\nunder the null hypothesis on numeric values extracted from the aggregated documents. In practice, this\nwill tell you if the difference between two population means are statistically significant and did not occur by chance alone.\n\n==== Syntax\n\nA `t_test` aggregation looks like this in isolation:\n\n[source,js]\n--------------------------------------------------\n{\n  \"t_test\": {\n    \"a\": \"value_before\",\n    \"b\": \"value_after\",\n    \"type\": \"paired\"\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nAssuming that we have a record of node start up times before and after upgrade, let's look at a t-test to see if upgrade affected\nthe node start up time in a meaningful way.\n\n[source,console]\n--------------------------------------------------\nGET node_upgrade/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"startup_time_ttest\": {\n      \"t_test\": {\n        \"a\": { \"field\": \"startup_time_before\" },  <1>\n        \"b\": { \"field\": \"startup_time_after\" },   <2>\n        \"type\": \"paired\"                          <3>\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[setup:node_upgrade]\n<1> The field `startup_time_before` must be a numeric field.\n<2> The field `startup_time_after` must be a numeric field.\n<3> Since we have data from the same nodes, we are using paired t-test.\n\nThe response will return the p-value or probability value for the test. It is the probability of obtaining results at least as extreme as\nthe result processed by the aggregation, assuming that the null hypothesis is correct (which means there is no difference between\npopulation means). Smaller p-value means the null hypothesis is more likely to be incorrect and population means are indeed different.\n\n[source,console-result]\n--------------------------------------------------\n{\n  ...\n\n \"aggregations\": {\n    \"startup_time_ttest\": {\n      \"value\": 0.1914368843365979 <1>\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\\.\\.\\./\"took\": $body.took,\"timed_out\": false,\"_shards\": $body._shards,\"hits\": $body.hits,/]\n<1> The p-value.\n\n==== T-Test Types\n\nThe `t_test` aggregation supports unpaired and paired two-sample t-tests. The type of the test can be specified using the `type` parameter:\n\n`\"type\": \"paired\"`:: performs paired t-test\n`\"type\": \"homoscedastic\"`:: performs two-sample equal variance test\n`\"type\": \"heteroscedastic\"`:: performs two-sample unequal variance test (this is default)\n\n==== Filters\n\nIt is also possible to run unpaired t-test on different sets of records using filters. For example, if we want to test the difference\nof startup times before upgrade between two different groups of nodes, we use the same field `startup_time_before` by separate groups of\nnodes using terms filters on the group name field:\n\n[source,console]\n--------------------------------------------------\nGET node_upgrade/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"startup_time_ttest\": {\n      \"t_test\": {\n        \"a\": {\n          \"field\": \"startup_time_before\",         <1>\n          \"filter\": {\n            \"term\": {\n              \"group\": \"A\"                        <2>\n            }\n          }\n        },\n        \"b\": {\n          \"field\": \"startup_time_before\",         <3>\n          \"filter\": {\n            \"term\": {\n              \"group\": \"B\"                        <4>\n            }\n          }\n        },\n        \"type\": \"heteroscedastic\"                 <5>\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[setup:node_upgrade]\n<1> The field `startup_time_before` must be a numeric field.\n<2> Any query that separates two groups can be used here.\n<3> We are using the same field\n<4> but we are using different filters.\n<5> Since we have data from different nodes, we cannot use paired t-test.\n\n\n[source,console-result]\n--------------------------------------------------\n{\n  ...\n\n \"aggregations\": {\n    \"startup_time_ttest\": {\n      \"value\": 0.2981858007281437 <1>\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\\.\\.\\./\"took\": $body.took,\"timed_out\": false,\"_shards\": $body._shards,\"hits\": $body.hits,/]\n<1> The p-value.\n\nPopulations don't have to be in the same index. If data sets are located in different\nindices, the term filter on the <<mapping-index-field,`_index`>> field can be used to select populations.\n\n==== Script\n\nIf you need to run the `t_test` on values that aren't represented cleanly\nby a field you should, run the aggregation on a <<runtime,runtime field>>.\nFor example, if you want to adjust out load times for the before values:\n\n[source,console]\n----\nGET node_upgrade/_search\n{\n  \"size\": 0,\n  \"runtime_mappings\": {\n    \"startup_time_before.adjusted\": {\n      \"type\": \"long\",\n      \"script\": {\n        \"source\": \"emit(doc['startup_time_before'].value - params.adjustment)\",\n        \"params\": {\n          \"adjustment\": 10\n        }\n      }\n    }\n  },\n  \"aggs\": {\n    \"startup_time_ttest\": {\n      \"t_test\": {\n        \"a\": {\n          \"field\": \"startup_time_before.adjusted\"\n        },\n        \"b\": {\n          \"field\": \"startup_time_after\"\n        },\n        \"type\": \"paired\"\n      }\n    }\n  }\n}\n----\n// TEST[setup:node_upgrade]\n// TEST[s/_search/_search?filter_path=aggregations/]\n\n////\n[source,console-result]\n----\n{\n \"aggregations\": {\n    \"startup_time_ttest\": {\n      \"value\": 0.9397399375119482\n    }\n  }\n}\n----\n////\n"
}