{
    "meta": {
        "timestamp": "2024-11-01T02:49:24.540066",
        "size": 2093,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/auditing-search-queries.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "auditing-search-queries",
        "version": "8.15"
    },
    "doc": "[[auditing-search-queries]]\n=== Auditing search queries\n\nThere is no <<audit-event-types, audit event type>> specifically\ndedicated to search queries. Search queries are analyzed and then processed; the\nprocessing triggers authorization actions that are audited.\nHowever, the original raw query, as submitted by the client, is not accessible\ndownstream when authorization auditing occurs.\n\nSearch queries are contained inside HTTP request bodies, however, and some\naudit events that are generated by the REST layer, on the coordinating node,\ncan be toggled to output the request body to the audit log. Therefore, one\nmust audit request bodies in order to audit search queries.\n\nTo make certain audit events include the request body, edit the following\nsetting in the `elasticsearch.yml` file:\n\n[source,yaml]\n----------------------------\nxpack.security.audit.logfile.events.emit_request_body: true\n----------------------------\n\nIMPORTANT: No filtering is performed when auditing, so sensitive data might be\naudited in plain text when audit events include the request body. Also, the\nrequest body can contain malicious content that can break a parser consuming\nthe audit logs.\n\nThe request body is printed as an escaped JSON string value (RFC 4627) to the `request.body`\nevent attribute.\n\nNot all events contain the `request.body` attribute, even when the above setting\nis toggled. The ones that do are: `authentication_success`,\n`authentication_failed`, `realm_authentication_failed`, `tampered_request`, `run_as_denied`,\nand `anonymous_access_denied`. The `request.body` attribute is printed on the coordinating node only\n(the node that handles the REST request). Most of these event types are\n<<xpack-sa-lf-events-include, not included by default>>.\n\nA good practical piece of advice is to add `authentication_success` to the event\ntypes that are audited (add it to the list in the `xpack.security.audit.logfile.events.include`),\nas this event type is not audited by default.\n\nNOTE: Typically, the include list contains other event types as well, such as\n`access_granted` or `access_denied`.\n"
}