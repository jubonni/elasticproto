{
    "meta": {
        "timestamp": "2024-11-01T02:49:24.807065",
        "size": 6045,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/custom-roles-authorization.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "custom-roles-authorization",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[custom-roles-authorization]]\n=== Customizing roles and authorization\n\nIf you need to retrieve user roles from a system not supported out-of-the-box\nor if the authorization system that is provided by the {es} {security-features}\ndoes not meet your needs, a SPI loaded security extension can be implemented to\ncustomize role retrieval and/or the authorization system. The SPI loaded\nsecurity extension is part of an ordinary elasticsearch plugin.\n\n[[implementing-custom-roles-provider]]\n==== Implementing a custom roles provider\n\nTo create a custom roles provider:\n\n. Implement the interface `BiConsumer<Set<String>, ActionListener<Set<RoleDescriptor>>>`.\n  That is to say, the implementation consists of one method that takes a set of strings,\n  which are the role names to resolve, and an ActionListener, on which the set of resolved\n  role descriptors are passed on as the response.\n. The custom roles provider implementation must take special care to not block on any I/O\n  operations. It is the responsibility of the implementation to ensure asynchronous behavior\n  and non-blocking calls, which is made easier by the fact that the `ActionListener` is\n  provided on which to send the response when the roles have been resolved and the response\n  is ready.\n\nTo package your custom roles provider as a plugin:\n\n. Implement an extension class for your roles provider that implements\n  `org.elasticsearch.xpack.core.security.SecurityExtension`. There you need to\n  override one or more of the following methods:\n+\n[source,java]\n----------------------------------------------------\n@Override\npublic List<BiConsumer<Set<String>, ActionListener<Set<RoleDescriptor>>>>\ngetRolesProviders(Settings settings, ResourceWatcherService resourceWatcherService) {\n    ...\n}\n----------------------------------------------------\n+\nThe `getRolesProviders` method is used to provide a list of custom roles providers that\nwill be used to resolve role names, if the role names could not be resolved by the reserved\nroles or native roles stores. The list should be returned in the order that the custom role\nproviders should be invoked to resolve roles. For example, if `getRolesProviders` returns two\ninstances of roles providers, and both of them are able to resolve role `A`, then the resolved\nrole descriptor that will be used for role `A` will be the one resolved by the first roles\nprovider in the list.\n\n[[implementing-authorization-engine]]\n==== Implementing an authorization engine\n\nTo create an authorization engine, you need to:\n\n. Implement the `org.elasticsearch.xpack.core.security.authz.AuthorizationEngine`\n  interface in a class with the desired authorization behavior.\n. Implement the `org.elasticsearch.xpack.core.security.authz.Authorization.AuthorizationInfo`\n  interface in a class that contains the necessary information to authorize the request.\n\nTo package your authorization engine as a plugin:\n\n. Implement an extension class for your authorization engine that extends\n  `org.elasticsearch.xpack.core.security.SecurityExtension`. There you need to\n  override the following method:\n+\n[source,java]\n----------------------------------------------------\n@Override\npublic AuthorizationEngine getAuthorizationEngine(Settings settings) {\n    ...\n}\n----------------------------------------------------\n+\nThe `getAuthorizationEngine` method is used to provide the authorization engine\nimplementation.\n\nSample code that illustrates the structure and implementation of a custom\nauthorization engine is provided in the\nhttps://github.com/elastic/elasticsearch/tree/master/plugins/examples/security-authorization-engine[elasticsearch]\nrepository on GitHub. You can use this code as a starting point for creating your\nown authorization engine.\n\n[[packing-extension-plugin]]\n==== Implement an elasticsearch plugin\n\nIn order to register the security extension for your custom roles provider or\nauthorization engine, you need to also implement an elasticsearch plugin that\ncontains the extension:\n\n. Implement a plugin class that extends `org.elasticsearch.plugins.Plugin`\n. Create a build configuration file for the plugin; Gradle is our recommendation.\n. Create a `plugin-descriptor.properties` file as described in\n  {plugins}/plugin-authors.html[Help for plugin authors].\n. Create a `META-INF/services/org.elasticsearch.xpack.core.security.SecurityExtension` descriptor file for the\n  extension that contains the fully qualified class name of your `org.elasticsearch.xpack.core.security.SecurityExtension` implementation\n. Bundle all in a single zip file.\n\n[[using-security-extension]]\n==== Using the security extension\n\nTo use a security extension:\n\n. Install the plugin with the extension on each node in the cluster. You run\n  `bin/elasticsearch-plugin` with the `install` sub-command and specify the URL\n  pointing to the zip file that contains the extension. For example:\n+\n[source,shell]\n----------------------------------------\nbin/elasticsearch-plugin install file:///<path>/my-extension-plugin-1.0.zip\n----------------------------------------\n\n. Add any configuration parameters for implementations in the extension to the\n`elasticsearch.yml` file. The settings are not namespaced and you have access to any\nsettings when constructing the extensions, although it is recommended to have a\nnamespacing convention for extensions to keep your `elasticsearch.yml`\nconfiguration easy to understand.\n+\nFor example, if you have a custom roles provider that\nresolves roles from reading a blob in an S3 bucket on AWS, then you would specify settings\nin `elasticsearch.yml` such as:\n+\n[source,js]\n----------------------------------------\ncustom_roles_provider.s3_roles_provider.bucket: roles\ncustom_roles_provider.s3_roles_provider.region: us-east-1\ncustom_roles_provider.s3_roles_provider.secret_key: xxx\ncustom_roles_provider.s3_roles_provider.access_key: xxx\n----------------------------------------\n// NOTCONSOLE\n+\nThese settings are passed as arguments to the methods in the `SecurityExtension` interface.\n\n. Restart Elasticsearch.\n"
}