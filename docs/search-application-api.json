{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.316074",
        "size": 23601,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-application-api.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "search-application-api",
        "version": "8.15"
    },
    "doc": "[[search-application-api]]\n=== Search Applications search API and templates\n\n++++\n<titleabbrev>Search API and templates</titleabbrev>\n++++\n\nYour <<search-application-overview,search applications>> use <<search-template,search templates>> to perform searches.\nTemplates help reduce complexity by exposing only template parameters, while using the full power of {es}'s query DSL to formulate queries.\nTemplates may be set when creating or updating a search application, and can be customized.\nThis template can be edited or updated at any time using the <<put-search-application,Put Search Application API>> API call.\n\nIn a nutshell, you create search templates with parameters instead of specific hardcoded search values.\nAt search time, you pass in the actual values for these parameters, enabling customized searches without rewriting the entire query structure.\nSearch Application templates:\n\n* Simplify query requests\n* Reduce request size\n* Ensure security and performance, as the query is predefined and can't be changed arbitrarily\n\nThis document provides information and sample templates to get you started using <<search-application-overview,search applications>> for additional use cases.\nThese templates are designed to be easily modified to meet your needs.\nOnce you've created a search application with a template, you can search your search application using this template.\n\n[TIP]\n====\nSearch templates use the https://mustache.github.io/[Mustache] templating language.\nMustache variables are typically enclosed in double curly brackets like this: `{{my-var}}`.\n\nLearn more by reading about <<search-template,search templates>>.\n====\n\n[discrete]\n[[search-application-api-default-template]]\n==== Default template example\n\nIf no template is stored with a search application, a minimal <<search-application-api-default-template, default search template>> will be applied at search time.\nThe default template implements a simple search use case.\n\nTo create a search application with the default template, issue a <<put-search-application, create or update Search Application>> request without specifying a template:\n\n// NOTE for test setup: The create search application command will return a warning\n// when a template is not specified. This will break docs tests.\n// Therefore the setup specifies the default search template\n// even though we're using the default template in examples.\n\n////\n\n[source,console]\n--------------------------------------------------\nPUT index1\n{\n  \"mappings\": {\n    \"properties\": {\n      \"image-vector\": {\n        \"type\": \"dense_vector\",\n        \"dims\": 3\n      }\n    }\n  }\n}\n\nPUT index2\n\nPUT _application/search_application/my_search_application\n{\n  \"indices\": [ \"index1\", \"index2\" ],\n  \"template\": {\n    \"script\": {\n      \"source\": {\n        \"query\": {\n          \"query_string\": {\n            \"query\": \"{{query_string}}\",\n            \"default_field\": \"{{default_field}}\"\n          }\n        }\n      },\n      \"params\": {\n        \"query_string\": \"*\",\n        \"default_field\": \"*\"\n      }\n    }\n  }\n}\n\n--------------------------------------------------\n// TESTSETUP\n\n[source,console]\n--------------------------------------------------\nDELETE _application/search_application/my_search_application\n\nDELETE index1\n\nDELETE index2\n--------------------------------------------------\n// TEARDOWN\n////\n\n[source,console]\n----\nPUT _application/search_application/my_search_application\n{\n  \"indices\": [\"index1\", \"index2\"]\n}\n----\n// TEST[warning:Using default search application template which is subject to change. We recommend storing a template to avoid breaking changes.]\n\nYou can then use the <<get-search-application, get search application>> API call to view your newly created search application, which will also include the default template that was created for you:\n\n[source,console]\n----\nGET _application/search_application/my_search_application\n----\n// TEST[continued]\n// TEST[warning:Using default search application template which is subject to change. We recommend storing a template to avoid breaking changes.]\n\nIn this case, the response would be:\n\n[source,console-result]\n----\n{\n  \"name\": \"my_search_application\",\n  \"indices\": [\n    \"index1\",\n    \"index2\"\n  ],\n  \"updated_at_millis\": 1715802354482,\n  \"template\": {\n    \"script\": {\n      \"source\": \"\"\"{\n  \"query\": {\n    \"query_string\": {\n        \"query\": \"{{query_string}}\",\n        \"default_field\": \"{{default_field}}\"\n        }\n    }\n}\n\"\"\",\n      \"lang\": \"mustache\",\n      \"params\": {\n        \"default_field\": \"*\",\n        \"query_string\": \"*\"\n      }\n    }\n  }\n}\n----\n// TESTRESPONSE[s/\"updated_at_millis\": 1715802354482/\"updated_at_millis\": $body.$_path/]\n\nThe default template is very minimal:\n\n[source,console-result]\n----\n{\n  \"template\": {\n    \"script\": {\n      \"source\": {\n        \"query\": {\n          \"query_string\": {\n            \"query\": \"{{query_string}}\",\n            \"default_field\": \"{{default_field}}\"\n          }\n        }\n      },\n      \"params\": {\n        \"query_string\": \"*\",\n        \"default_field\": \"*\"\n      }\n    }\n  }\n}\n----\n// TEST[skip:This is not a console result but NOTCONSOLE annotation by itself still fails the test]\n\nThis may be useful for initial exploration of search templates, but you'll likely want to update this.\n\nNOTE: This template does not support additional parameters, including `from`, `size` or `boost`.\nIf you need to use these, you can customize the template associated with your search application accordingly to include them as parameters.\n\nYou can see the parameters and their default values by viewing the template, but it also may be valuable to view the query that will be generated if you <<search-application-search,search your search application>> with various parameters.\n\nYou can use the <<search-application-render-query,render search application query>> to view the query this template would generate, including with default parameters.\nFor example, searching the search application with no parameters:\n\n[source,console]\n----\nPOST _application/search_application/my_search_application/_render_query\n----\n// TEST[continued]\n\nwill return:\n\n[source,console-result]\n----\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"*\",\n      \"default_field\": \"*\",\n      \"fields\": []\n    }\n  }\n}\n----\n// TEST[continued]\n\nThis uses the default parameters that were defined with the template.\nYou can also specify one or mre parameters to the render call, for example:\n\n[source,console]\n----\nPOST _application/search_application/my_search_application/_render_query\n{\n  \"params\": {\n    \"query_string\": \"rock climbing\"\n  }\n}\n----\n// TEST[continued]\n\nwill return:\n\n[source,console-result]\n----\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"rock climbing\",\n      \"default_field\": \"*\",\n      \"fields\": []\n    }\n  }\n}\n----\n// TEST[continued]\n\nIn this case, the `{{query_string}}` parameter has been replaced with the value `rock climbing`, and the `{{default_field}}` parameter was not specified so used the default value of `*`.\n\nWhen you actually perform a search with no parameters, it will execute the underlying query that the render call returned.\nIn this case, a search with no parameters will return all results, in a similar manner to a parameterless call to `/_search`.\n\n[source,console]\n----\nPOST _application/search_application/my_search_application/_search\n----\n// TEST[continued]\n\n\nSearching with the `query_string` and/or `default_field` parameters will perform a <<query-dsl-query-string-query,`query_string`>> query.\n\n[WARNING]\n====\nThe default template is subject to change in future versions of the Search Applications feature.\n====\n\nTry some of the other examples in this document to experiment with specific use cases, or try creating your own!\n\n[discrete]\n[[search-application-api-searching]]\n==== Searching a search application\n\n[discrete]\n[[search-application-api-searching-templates]]\n===== Template search\n\nThe simplest way to interact with a search application is to use the search template that's created and stored with it.\nEach search application has a single template associated with it, which defines search criteria, parameters and defaults.\n\nYou send search requests to a search application using the <<search-application-search,Search Application Search API>>.\n\nWith the default template, a search looks like this:\n\n[source,console]\n----\nPOST _application/search_application/my_search_application/_search\n{\n  \"params\": {\n    \"query_string\": \"kayaking\"\n  }\n}\n----\n// TEST[continued]\n\nIn this example, we've overridden the `query_string` parameter's default value of `*`.\nSince we didn't specify `default_field` the value of this parameter will still be `*`.\n\n[discrete]\n[[search-application-api-searching-alias]]\n===== Alias search\n\nIf you don't want to set up a search template for your search application, an alias will be created with the same name as your search application.\nThis may be helpful when experimenting with specific search queries that you want to use when building your search application's search template.\n\nIf your search application's name is `my_search_application`, your alias will be `my_search_application`.\nYou can search this using the <<search-search,search API>>.\n\n[discrete]\n[[search-application-cross-cluster-search]]\n===== Cross cluster search\n\nSearch applications do not currently support {ccs} because it is not possible to add a remote cluster's index or index pattern to an index alias.\n\n[NOTE]\n====\nYou should use the Search Applications management APIs to update your application and _not_ directly use {es} APIs such as the alias API.\nFor example, use <<put-search-application, PUT Search Application>> with the `indices` parameter.\nThis will automatically keep the associated alias up to date and ensure that indices are added to the search application correctly.\n====\n\n[discrete]\n[[search-application-api-examples]]\n==== Search template examples\n\nWe have created a number of examples to explore specific use cases.\nUse these as a starting point for creating your own search templates.\n\n[discrete]\n[[search-application-api-bm25-template]]\n===== Text search example\n\nThe following template supports a `multi_match` search over specified fields and boosts:\n\n[source,console]\n----\nPUT _application/search_application/my_search_application\n{\n  \"indices\": [\"index1\", \"index2\"],\n  \"template\": {\n    \"script\": {\n      \"lang\": \"mustache\",\n      \"source\": \"\"\"\n      {\n        \"query\": {\n          \"multi_match\": {\n            \"query\": \"{{query_string}}\",\n            \"fields\": [{{#text_fields}}\"{{name}}^{{boost}}\",{{/text_fields}}]\n          }\n        },\n        \"explain\": \"{{explain}}\",\n        \"from\": \"{{from}}\",\n        \"size\": \"{{size}}\"\n      }\n      \"\"\",\n      \"params\": {\n        \"query_string\": \"*\",\n        \"text_fields\": [\n          {\"name\": \"title\", \"boost\": 10},\n          {\"name\": \"description\", \"boost\": 5}\n        ],\n        \"explain\": false,\n        \"from\": 0,\n        \"size\": 10\n      }\n    }\n  }\n}\n----\n\nA search query using this template might look like this:\n\n[source,console]\n----\nPOST _application/search_application/my_search_application/_search\n{\n  \"params\": {\n    \"size\": 5,\n    \"query_string\": \"mountain climbing\",\n    \"text_fields\": [\n          {\"name\": \"title\", \"boost\": 10},\n          {\"name\": \"description\", \"boost\": 2},\n          {\"name\": \"state\", \"boost\": 1}\n     ]\n  }\n}\n----\n// TEST[continued]\n\nThe `text_fields` parameters can be overridden with new/different fields and boosts to experiment with the best configuration for your use case.\nThis template also supports pagination and `explain` via parameters.\n\n[discrete]\n[[search-application-api-rrf-template]]\n===== Text search + ELSER with RRF\n\nThis example supports the <<rrf,reciprocal rank fusion (RRF)]>> method for combining BM25 and {ml-docs}/ml-nlp-elser.html[ELSER] searches.\nReciprocal Rank Fusion consistently improves the combined results of different search algorithms.\nIt outperforms all other ranking algorithms, and often surpasses the best individual results, without calibration.\n\n[source,console]\n----\nPUT _application/search_application/my-search-app\n{\n  \"indices\": [\n    \"index1\"\n  ],\n  \"template\": {\n    \"script\": {\n      \"lang\": \"mustache\",\n      \"source\": \"\"\"\n      {\n        \"retriever\": {\n          \"rrf\": {\n            \"retrievers\": [\n              {{#text_fields}}\n              {\n                \"standard\": {\n                  \"query\": {\n                    \"match\": {\n                      \"{{.}}\": \"{{query_string}}\"\n                    }\n                  }\n                }\n              },\n              {{/text_fields}}\n              {{#elser_fields}}\n              {\n                \"standard\": {\n                  \"query\": {\n                    \"sparse_vector\": {\n                      \"field\": \"ml.inference.{{.}}_expanded.predicted_value\",\n                      \"inference_id\": \"<elser_inference_id>\",\n                      \"query\": \"{{query_string}}\"\n                    }\n                  }\n                }\n              },\n              {{/elser_fields}}\n            ],\n            \"rank_window_size\": {{rrf.rank_window_size}},\n            \"rank_constant\": {{rrf.rank_constant}}\n          }\n        }\n      }\n      \"\"\",\n      \"params\": {\n        \"elser_fields\": [\"title\", \"meta_description\"],\n        \"text_fields\": [\"title\", \"meta_description\"],\n        \"query_string\": \"\",\n        \"rrf\": {\n          \"rank_window_size\": 100,\n          \"rank_constant\": 60\n        }\n      }\n    }\n  }\n}\n----\n\nNOTE: Replace `<elser_model_id>` with the model ID of your ELSER deployment.\n\nA sample query for this template will look like the following example:\n\n[source,console]\n----\nPOST _application/search_application/my-search-app/_search\n{\n  \"params\": {\n    \"query_string\": \"What is the most popular brand of coffee sold in the United States?\",\n    \"elser_fields\": [\"title\", \"meta_description\"],\n    \"text_fields\": [\"title\", \"meta_description\"],\n    \"rrf\": {\n      \"rank_window_size\": 50,\n      \"rank_constant\": 25\n    }\n  }\n}\n----\n// TEST[skip:ELSER requires inference]\n\n[discrete]\n[[search-application-api-catchall-template]]\n===== Text search + ELSER\n\nThe Elastic Learned Sparse EncodeR ({ml-docs}/ml-nlp-elser.html[ELSER]) improves search relevance through text-expansion, which enables semantic search.\nThis experimental template requires ELSER to be enabled for one or more fields.\nRefer to <<semantic-search-elser,Semantic search with ELSER>> for more information on how to use ELSER.\nIn this case, ELSER is enabled on the `title` and `description` fields.\n\nThis example provides a single template that you can use for various search application scenarios: text search, ELSER, or all of the above.\nIt also provides a simple default `query_string` query if no parameters are specified.\n\n[source,console]\n----\nPUT _application/search_application/my_search_application\n{\n  \"indices\": [\n    \"index1\",\n    \"index2\"\n  ],\n  \"template\": {\n    \"script\": {\n      \"lang\": \"mustache\",\n      \"source\": \"\"\"\n      {\n        \"query\": {\n          \"bool\": {\n            \"should\": [\n              {{#text}}\n              {\n                \"multi_match\": {\n                  \"query\": \"{{query_string}}\",\n                  \"fields\": [{{#text_fields}}\"{{name}}^{{boost}}\",{{/text_fields}}],\n                  \"boost\": \"{{text_query_boost}}\"\n                }\n              },\n              {{/text}}\n              {{#elser}}\n              {{#elser_fields}}\n              {\n                \"sparse_vector\": {\n                  \"field\": \"ml.inference.{{.}}_expanded.predicted_value\",\n                  \"inference_id\": \"<elser_inference_id>\",\n                  \"query\": \"{{query_string}}\"\n                }\n              },\n              {{/elser_fields}}\n              { \"bool\": { \"must\": [] } },\n              {{/elser}}\n              {{^text}}\n              {{^elser}}\n              {\n                \"query_string\": {\n                  \"query\": \"{{query_string}}\",\n                  \"default_field\": \"{{default_field}}\",\n                  \"default_operator\": \"{{default_operator}}\",\n                  \"boost\": \"{{text_query_boost}}\"\n                }\n              },\n              {{/elser}}\n              {{/text}}\n              { \"bool\": { \"must\": [] } }\n              ],\n            \"minimum_should_match\": 1\n          }\n        },\n        \"min_score\": \"{{min_score}}\",\n        \"explain\": \"{{explain}}\",\n        \"from\": \"{{from}}\",\n        \"size\": \"{{size}}\"\n      }\n      \"\"\",\n      \"params\": {\n        \"text\": false,\n        \"elser\": false,\n        \"elser_fields\": [\n          {\"name\": \"title\", \"boost\": 1},\n          {\"name\": \"description\", \"boost\": 1}\n        ],\n        \"text_fields\": [\n          {\"name\": \"title\", \"boost\": 10},\n          {\"name\": \"description\", \"boost\": 5},\n          {\"name\": \"state\", \"boost\": 1}\n        ],\n        \"query_string\": \"*\",\n        \"text_query_boost\": 4,\n        \"default_field\": \"*\",\n        \"default_operator\": \"OR\",\n        \"explain\": false,\n        \"from\": 0,\n        \"size\": 10,\n        \"min_score\": 0\n      }\n    }\n  }\n}\n----\n\nA text search query using this template might look like this:\n\n[source,console]\n----\nPOST _application/search_application/my_search_application/_search\n{\n  \"params\": {\n    \"text\": true,\n    \"size\": 5,\n    \"query_string\": \"mountain climbing\",\n    \"text_fields\": [\n          {\"name\": \"title\", \"boost\": 10},\n          {\"name\": \"description\", \"boost\": 5},\n          {\"name\": \"state\", \"boost\": 1}\n     ]\n  }\n}\n----\n// TEST[skip:ELSER requires inference]\n\nAn ELSER search query using this template will look like the following example:\n\n[source,console]\n----\nPOST _application/search_application/my_search_application/_search\n{\n  \"params\": {\n    \"elser\": true,\n    \"query_string\": \"where is the best mountain climbing?\",\n    \"elser_fields\": [\n      {\"name\": \"title\", \"boost\": 1},\n      {\"name\": \"description\", \"boost\": 1}\n    ]\n  }\n}\n----\n// TEST[skip:ELSER requires inference]\n\nA combined text search and ELSER search query using this template will look like the following example:\n\n[source,console]\n----\nPOST _application/search_application/my_search_application/_search\n{\n  \"params\": {\n    \"elser\": true,\n    \"text\": true,\n    \"query_string\": \"where is the best mountain climbing?\",\n    \"elser_fields\": [\n      {\"name\": \"title\", \"boost\": 1},\n      {\"name\": \"description\", \"boost\": 1}\n    ],\n    \"text_query_boost\": 4,\n    \"min_score\": 10\n  }\n}\n----\n// TEST[skip:ELSER requires inference]\n\n[TIP]\n====\nText search results and ELSER search results are expected to have significantly different scores in some cases, which makes ranking challenging.\nTo find the best search result mix for your dataset, we suggest experimenting with the boost values provided in the example template:\n\n* `text_query_boost` to boost the BM25 query as a whole\n* {ref}/query-dsl-query-string-query.html#_boosting[`boost`] fields to boost individual text search fields\n* <<search-api-min-score,`min_score`>> parameter to omit significantly low confidence results\n\nThe above boosts should be sufficient for many use cases, but there are cases when adding a <<rescore,rescore>> query or <<index-boost,index boost>> to your template may be beneficial.\nRemember to update your search application to use the new template using the <<put-search-application,put search application command>>.\n====\n\nFinally, a parameterless search using this template would fall back to a default search returning all documents:\n\n[source,console]\n----\nPOST _application/search_application/my_search_application/_search\n----\n// TEST[continued]\n\n[discrete]\n[[search-application-api-elser-template]]\n===== ELSER search\n\nThis example supports a streamlined version of ELSER search.\n\n[source,console]\n----\nPUT _application/search_application/my_search_application\n{\n  \"indices\": [\n    \"index1\",\n    \"index2\"\n    ],\n    \"template\": {\n      \"script\": {\n        \"lang\": \"mustache\",\n        \"source\": \"\"\"\n        {\n          \"query\": {\n            \"bool\": {\n              \"should\": [\n                {{#elser_fields}}\n                {\n                  \"sparse_vector\": {\n                      \"field\": \"ml.inference.{{.}}_expanded.predicted_value\",\n                      \"inference_id\": \"<elser_inference_id>\",\n                      \"query\": \"{{query_string}}\"\n                    }\n                },\n                {{/elser_fields}}\n                ]\n            }\n          },\n          \"min_score\": \"{{min_score}}\"\n        }\n        \"\"\",\n        \"params\": {\n          \"query_string\": \"*\",\n          \"min_score\": \"10\",\n          \"elser_fields\": [\n            {\n              \"name\": \"title\"\n            },\n            {\n              \"name\": \"description\"\n            }\n            ]\n        }\n      }\n    }\n}\n----\n\nNOTE: Replace `<elser_model_id>` with the model ID of your ELSER deployment.\n\nA sample query for this template will look like the following example:\n\n[source,console]\n----\nPOST _application/search_application/my_search_application/_search\n  {\n    \"params\": {\n      \"query_string\": \"Where is the best place for mountain climbing?\"\n    }\n  }\n----\n// TEST[skip:ELSER requires inference]\n\n\n[discrete]\n[[search-applications-knn-template]]\n===== kNN search\n\nThis example supports <<knn-search,k-nearest neighbor (kNN) search>>\n\nA template supporting exact kNN search will look like the following example:\n\n[source,console]\n----\nPUT _application/search_application/my_search_application\n{\n  \"indices\": [\n    \"index1\"\n  ],\n  \"template\": {\n    \"script\": {\n      \"lang\": \"mustache\",\n      \"source\": \"\"\"\n        {\n          \"query\": {\n            \"script_score\": {\n              \"query\": {\n                \"bool\": {\n                  \"filter\": {\n                    \"range\": {\n                      \"{{field}}\": {\n                        \"{{operator}}\": {{value}}\n                      }\n                    }\n                  }\n                }\n              },\n              \"script\": {\n                \"source\": \"cosineSimilarity({{#toJson}}query_vector{{/toJson}}, '{{dense_vector_field}}') + 1.0\"\n              }\n            }\n          }\n        }\n        \"\"\",\n      \"params\": {\n        \"field\": \"price\",\n        \"operator\": \"gte\",\n        \"value\": 1000,\n        \"dense_vector_field\": \"product-vector\",\n        \"query_vector\": []\n      }\n    }\n  }\n}\n----\n\nA search query using this template will look like the following example:\n\n[source,console]\n----\nPOST _application/search_application/my_search_application/_search\n{\n  \"params\": {\n    \"field\": \"price\",\n    \"operator\": \"gte\",\n    \"value\": 500\n  }\n}\n----\n// TEST[continued]\n\nA template supporting approximate kNN search will look like the following example:\n\n[source,console]\n----\nPUT _application/search_application/my_search_application\n{\n  \"indices\": [\n    \"index1\"\n  ],\n  \"template\": {\n    \"script\": {\n      \"lang\": \"mustache\",\n      \"source\": \"\"\"\n      {\n          \"knn\": {\n            \"field\": \"{{knn_field}}\",\n            \"query_vector\": {{#toJson}}query_vector{{/toJson}},\n            \"k\": \"{{k}}\",\n            \"num_candidates\": {{num_candidates}}\n          },\n          \"fields\": {{#toJson}}fields{{/toJson}}\n      }\n      \"\"\",\n      \"params\": {\n        \"knn_field\": \"image-vector\",\n        \"query_vector\": [],\n        \"k\": 10,\n        \"num_candidates\": 100,\n        \"fields\": [\"title\", \"file-type\"]\n      }\n    }\n  }\n}\n----\n\nA search query using this template will look like the following example:\n\n[source,console]\n----\nPOST _application/search_application/my_search_application/_search\n{\n  \"params\": {\n    \"knn_field\": \"image-vector\",\n        \"query_vector\": [-5, 9, -12],\n        \"k\": 10,\n        \"num_candidates\": 100,\n        \"fields\": [\"title\", \"file-type\"]\n  }\n}\n\n----\n// TEST[continued]\n"
}