{
    "meta": {
        "size": 4733,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/eager-global-ordinals.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "eager-global-ordinals",
        "version": "8.15"
    },
    "doc": "[[eager-global-ordinals]]\n=== `eager_global_ordinals`\n\n==== What are global ordinals?\n\nTo support aggregations and other operations that require looking up field\nvalues on a per-document basis, Elasticsearch uses a data structure called\n<<doc-values, doc values>>. Term-based field types such as `keyword` store\ntheir doc values using an ordinal mapping for a more compact representation.\nThis mapping works by assigning each term an incremental integer or 'ordinal'\nbased on its lexicographic order. The field's doc values store only the\nordinals for each document instead of the original terms, with a separate\nlookup structure to convert between ordinals and terms.\n\nWhen used during aggregations, ordinals can greatly improve performance. As an\nexample, the `terms` aggregation relies only on ordinals to collect documents\ninto buckets at the shard-level, then converts the ordinals back to their\noriginal term values when combining results across shards.\n\nEach index segment defines its own ordinal mapping, but aggregations collect\ndata across an entire shard. So to be able to use ordinals for shard-level\noperations like aggregations, Elasticsearch creates a unified mapping called\n'global ordinals'. The global ordinal mapping is built on top of segment\nordinals, and works by maintaining a map from global ordinal to the local\nordinal for each segment.\n\nGlobal ordinals are used if a search contains any of the following components:\n\n* Certain bucket aggregations on `keyword`, `ip`, and `flattened` fields. This\nincludes `terms` aggregations as mentioned above, as well as `composite`,\n`diversified_sampler`, and `significant_terms`.\n* Bucket aggregations on `text` fields that require <<fielddata-mapping-param, `fielddata`>>\nto be enabled.\n* Operations on parent and child documents from a `join` field, including\n`has_child` queries and `parent` aggregations.\n\nNOTE: The global ordinal mapping uses heap memory as part of the\n<<modules-fielddata, field data cache>>. Aggregations on high cardinality fields\ncan use a lot of memory and trigger the <<fielddata-circuit-breaker, field data\ncircuit breaker>>.\n\n==== Loading global ordinals\n\nThe global ordinal mapping must be built before ordinals can be used during a\nsearch. By default, the mapping is loaded during search on the first time that\nglobal ordinals are needed. This is the right approach if you are optimizing\nfor indexing speed, but if search performance is a priority, it's recommended\nto eagerly load global ordinals on fields that will be used in aggregations:\n\n[source,console]\n------------\nPUT my-index-000001/_mapping\n{\n  \"properties\": {\n    \"tags\": {\n      \"type\": \"keyword\",\n      \"eager_global_ordinals\": true\n    }\n  }\n}\n------------\n// TEST[s/^/PUT my-index-000001\\n/]\n\nWhen `eager_global_ordinals` is enabled, global ordinals are built when a shard\nis <<indices-refresh, refreshed>> -- Elasticsearch always loads them before\nexposing changes to the content of the index. This shifts the cost of building\nglobal ordinals from search to index-time. Elasticsearch will also eagerly\nbuild global ordinals when creating a new copy of a shard, as can occur when\nincreasing the number of replicas or relocating a shard onto a new node.\n\nEager loading can be disabled at any time by updating the `eager_global_ordinals` setting:\n\n[source,console]\n------------\nPUT my-index-000001/_mapping\n{\n  \"properties\": {\n    \"tags\": {\n      \"type\": \"keyword\",\n      \"eager_global_ordinals\": false\n    }\n  }\n}\n------------\n// TEST[continued]\n\n==== Avoiding global ordinal loading\n\nUsually, global ordinals do not present a large overhead in terms of their\nloading time and memory usage. However, loading global ordinals can be\nexpensive on indices with large shards, or if the fields contain a large\nnumber of unique term values. Because global ordinals provide a unified mapping\nfor all segments on the shard, they also need to be rebuilt entirely when a new\nsegment becomes visible.\n\nIn some cases it is possible to avoid global ordinal loading altogether:\n\n* The `terms`, `sampler`, and `significant_terms` aggregations support a\nparameter\n<<search-aggregations-bucket-terms-aggregation-execution-hint, `execution_hint`>>\nthat helps control how buckets are collected. It defaults to `global_ordinals`,\nbut can be set to `map` to instead use the term values directly.\n* If a shard has been <<indices-forcemerge,force-merged>> down to a single\nsegment, then its segment ordinals are already 'global' to the shard. In this\ncase, Elasticsearch does not need to build a global ordinal mapping and there\nis no additional overhead from using global ordinals. Note that for performance\nreasons you should only force-merge an index to which you will never write to\nagain.\n"
}