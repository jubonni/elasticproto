{
    "meta": {
        "size": 4617,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-sampler-aggregation.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "search-aggregations-bucket-sampler-aggregation",
        "version": "8.15"
    },
    "doc": "[[search-aggregations-bucket-sampler-aggregation]]\n=== Sampler aggregation\n++++\n<titleabbrev>Sampler</titleabbrev>\n++++\n\nA filtering aggregation used to limit any sub aggregations' processing to a sample of the top-scoring documents.\n\n.Example use cases:\n* Tightening the focus of analytics to high-relevance matches rather than the potentially very long tail of low-quality matches\n* Reducing the running cost of aggregations that can produce useful results using only samples e.g. `significant_terms`\n \n\nExample:\n\nA query on StackOverflow data for the popular term `javascript` OR the rarer term\n`kibana` will match many documents - most of them missing the word Kibana. To focus\nthe `significant_terms` aggregation on top-scoring documents that are more likely to match \nthe most interesting parts of our query we use a sample.\n\n[source,console,id=sampler-aggregation-example]\n--------------------------------------------------\nPOST /stackoverflow/_search?size=0\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"tags:kibana OR tags:javascript\"\n    }\n  },\n  \"aggs\": {\n    \"sample\": {\n      \"sampler\": {\n        \"shard_size\": 200\n      },\n      \"aggs\": {\n        \"keywords\": {\n          \"significant_terms\": {\n            \"field\": \"tags\",\n            \"exclude\": [ \"kibana\", \"javascript\" ]\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[setup:stackoverflow]\n\nResponse:\n\n[source,console-result]\n--------------------------------------------------\n{\n  ...\n  \"aggregations\": {\n    \"sample\": {\n      \"doc_count\": 200, <1>\n      \"keywords\": {\n        \"doc_count\": 200,\n        \"bg_count\": 650,\n        \"buckets\": [\n          {\n            \"key\": \"elasticsearch\",\n            \"doc_count\": 150,\n            \"score\": 1.078125,\n            \"bg_count\": 200\n          },\n          {\n            \"key\": \"logstash\",\n            \"doc_count\": 50,\n            \"score\": 0.5625,\n            \"bg_count\": 50\n          }\n        ]\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\\.\\.\\./\"took\": $body.took,\"timed_out\": false,\"_shards\": $body._shards,\"hits\": $body.hits,/]\n\n<1> 200 documents were sampled in total. The cost of performing the nested significant_terms aggregation was\ntherefore limited rather than unbounded.\n\n\nWithout the `sampler` aggregation the request query considers the full \"long tail\" of low-quality matches and therefore identifies\nless significant terms such as `jquery` and `angular` rather than focusing on the more insightful Kibana-related terms.\n\n\n[source,console,id=sampler-aggregation-no-sampler-example]\n--------------------------------------------------\nPOST /stackoverflow/_search?size=0\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"tags:kibana OR tags:javascript\"\n    }\n  },\n  \"aggs\": {\n    \"low_quality_keywords\": {\n      \"significant_terms\": {\n        \"field\": \"tags\",\n        \"size\": 3,\n        \"exclude\": [ \"kibana\", \"javascript\" ]\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[setup:stackoverflow]\n\nResponse:\n\n[source,console-result]\n--------------------------------------------------\n{\n  ...\n  \"aggregations\": {\n    \"low_quality_keywords\": {\n      \"doc_count\": 600,\n      \"bg_count\": 650,\n      \"buckets\": [\n        {\n          \"key\": \"angular\",\n          \"doc_count\": 200,\n          \"score\": 0.02777,\n          \"bg_count\": 200\n        },\n        {\n          \"key\": \"jquery\",\n          \"doc_count\": 200,\n          \"score\": 0.02777,\n          \"bg_count\": 200\n        },\n        {\n          \"key\": \"logstash\",\n          \"doc_count\": 50,\n          \"score\": 0.0069,\n          \"bg_count\": 50\n        }\n      ]\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\\.\\.\\./\"took\": $body.took,\"timed_out\": false,\"_shards\": $body._shards,\"hits\": $body.hits,/]\n// TESTRESPONSE[s/0.02777/$body.aggregations.low_quality_keywords.buckets.0.score/]\n// TESTRESPONSE[s/0.0069/$body.aggregations.low_quality_keywords.buckets.2.score/]\n\n\n\n==== shard_size\n\nThe `shard_size` parameter limits how many top-scoring documents are collected in the sample processed on each shard.\nThe default value is 100.\n\n==== Limitations\n\n[[sampler-breadth-first-nested-agg]]\n===== Cannot be nested under `breadth_first` aggregations\nBeing a quality-based filter the sampler aggregation needs access to the relevance score produced for each document.\nIt therefore cannot be nested under a `terms` aggregation which has the `collect_mode` switched from the default `depth_first` mode to `breadth_first` as this discards scores.\nIn this situation an error will be thrown."
}