{
    "meta": {
        "size": 8165,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/repository-hdfs.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "repository-hdfs",
        "version": "8.15"
    },
    "doc": "[[repository-hdfs]]\n=== Hadoop HDFS repository plugin\n\nThe HDFS repository plugin adds support for using HDFS File System as a repository for\n{ref}/snapshot-restore.html[Snapshot/Restore].\n\n:plugin_name: repository-hdfs\ninclude::install_remove.asciidoc[]\n\n[[repository-hdfs-usage]]\n==== Getting started with HDFS\n\nThe HDFS snapshot/restore plugin is built against the latest Apache Hadoop 2.x (currently 2.7.1). If the distro you are using is not protocol\ncompatible with Apache Hadoop, consider replacing the Hadoop libraries inside the plugin folder with your own (you might have to adjust the security permissions required).\n\nEven if Hadoop is already installed on the Elasticsearch nodes, for security reasons, the required libraries need to be placed under the plugin folder. Note that in most cases, if the distro is compatible, one simply needs to configure the repository with the appropriate Hadoop configuration files (see below).\n\nWindows Users::\nUsing Apache Hadoop on Windows is problematic and thus it is not recommended. For those _really_ wanting to use it, make sure you place the elusive `winutils.exe` under the\nplugin folder and point `HADOOP_HOME` variable to it; this should minimize the amount of permissions Hadoop requires (though one would still have to add some more).\n\n[[repository-hdfs-config]]\n==== Configuration properties\n\nOnce installed, define the configuration for the `hdfs` repository through the\n{ref}/snapshot-restore.html[REST API]:\n\n[source,console]\n----\nPUT _snapshot/my_hdfs_repository\n{\n  \"type\": \"hdfs\",\n  \"settings\": {\n    \"uri\": \"hdfs://namenode:8020/\",\n    \"path\": \"elasticsearch/repositories/my_hdfs_repository\",\n    \"conf.dfs.client.read.shortcircuit\": \"true\"\n  }\n}\n----\n// TEST[skip:we don't have hdfs set up while testing this]\n\nThe following settings are supported:\n\n[horizontal]\n`uri`::\n\n    The uri address for hdfs. ex: \"hdfs://<host>:<port>/\". (Required)\n\n`path`::\n\n    The file path within the filesystem where data is stored/loaded. ex: \"path/to/file\". (Required)\n\n`load_defaults`::\n\n    Whether to load the default Hadoop configuration or not. (Enabled by default)\n\n`conf.<key>`::\n\n    Inlined configuration parameter to be added to Hadoop configuration. (Optional)\n    Only client oriented properties from the hadoop https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/core-default.xml[core] and https://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml[hdfs] configuration files will be recognized by the plugin.\n\n`compress`::\n\n    Whether to compress the metadata or not. (Enabled by default)\n\ninclude::repository-shared-settings.asciidoc[]\n\n`chunk_size`::\n\n    Override the chunk size. (Disabled by default)\n\n`security.principal`::\n\n    Kerberos principal to use when connecting to a secured HDFS cluster.\n    If you are using a service principal for your elasticsearch node, you may\n    use the `_HOST` pattern in the principal name and the plugin will replace\n    the pattern with the hostname of the node at runtime (see\n    link:repository-hdfs-security-runtime[Creating the Secure Repository]).\n\n`replication_factor`::\n\n    The replication factor for all new HDFS files created by this repository.\n    Must be greater or equal to `dfs.replication.min` and less or equal to `dfs.replication.max` HDFS option.\n    Defaults to using HDFS cluster setting.\n\n[[repository-hdfs-availability]]\n[discrete]\n===== A note on HDFS availability\nWhen you initialize a repository, its settings are persisted in the cluster state. When a node comes online, it will\nattempt to initialize all repositories for which it has settings. If your cluster has an HDFS repository configured, then\nall nodes in the cluster must be able to reach HDFS when starting. If not, then the node will fail to initialize the\nrepository at start up and the repository will be unusable. If this happens, you will need to remove and re-add the\nrepository or restart the offending node.\n\n[[repository-hdfs-security]]\n==== Hadoop security\n\nThe HDFS repository plugin integrates seamlessly with Hadoop's authentication model. The following authentication\nmethods are supported by the plugin:\n\n[horizontal]\n`simple`::\n\n    Also means \"no security\" and is enabled by default. Uses information from underlying operating system account\n    running Elasticsearch to inform Hadoop of the name of the current user. Hadoop makes no attempts to verify this\n    information.\n\n`kerberos`::\n\n    Authenticates to Hadoop through the usage of a Kerberos principal and keytab. Interfacing with HDFS clusters\n    secured with Kerberos requires a few additional steps to enable (See <<repository-hdfs-security-keytabs>> and\n    <<repository-hdfs-security-runtime>> for more info)\n\n[[repository-hdfs-security-keytabs]]\n[discrete]\n===== Principals and keytabs\nBefore attempting to connect to a secured HDFS cluster, provision the Kerberos principals and keytabs that the\nElasticsearch nodes will use for authenticating to Kerberos. For maximum security and to avoid tripping up the Kerberos\nreplay protection, you should create a service principal per node, following the pattern of\n`elasticsearch/hostname@REALM`.\n\nWARNING: In some cases, if the same principal is authenticating from multiple clients at once, services may reject\nauthentication for those principals under the assumption that they could be replay attacks. If you are running the\nplugin in production with multiple nodes you should be using a unique service principal for each node.\n\nOn each Elasticsearch node, place the appropriate keytab file in the node's configuration location under the\n`repository-hdfs` directory using the name `krb5.keytab`:\n\n[source, bash]\n----\n$> cd elasticsearch/config\n$> ls\nelasticsearch.yml  jvm.options        log4j2.properties  repository-hdfs/   scripts/\n$> cd repository-hdfs\n$> ls\nkrb5.keytab\n----\n// TEST[skip:this is for demonstration purposes only\n\nNOTE: Make sure you have the correct keytabs! If you are using a service principal per node (like\n`elasticsearch/hostname@REALM`) then each node will need its own unique keytab file for the principal assigned to that\nhost!\n\n// Setup at runtime (principal name)\n[[repository-hdfs-security-runtime]]\n[discrete]\n===== Creating the secure repository\nOnce your keytab files are in place and your cluster is started, creating a secured HDFS repository is simple. Just\nadd the name of the principal that you will be authenticating as in the repository settings under the\n`security.principal` option:\n\n[source,console]\n----\nPUT _snapshot/my_hdfs_repository\n{\n  \"type\": \"hdfs\",\n  \"settings\": {\n    \"uri\": \"hdfs://namenode:8020/\",\n    \"path\": \"/user/elasticsearch/repositories/my_hdfs_repository\",\n    \"security.principal\": \"elasticsearch@REALM\"\n  }\n}\n----\n// TEST[skip:we don't have hdfs set up while testing this]\n\nIf you are using different service principals for each node, you can use the `_HOST` pattern in your principal\nname. Elasticsearch will automatically replace the pattern with the hostname of the node at runtime:\n\n[source,console]\n----\nPUT _snapshot/my_hdfs_repository\n{\n  \"type\": \"hdfs\",\n  \"settings\": {\n    \"uri\": \"hdfs://namenode:8020/\",\n    \"path\": \"/user/elasticsearch/repositories/my_hdfs_repository\",\n    \"security.principal\": \"elasticsearch/_HOST@REALM\"\n  }\n}\n----\n// TEST[skip:we don't have hdfs set up while testing this]\n\n[[repository-hdfs-security-authorization]]\n[discrete]\n===== Authorization\nOnce Elasticsearch is connected and authenticated to HDFS, HDFS will infer a username to use for\nauthorizing file access for the client. By default, it picks this username from the primary part of\nthe kerberos principal used to authenticate to the service. For example, in the case of a principal\nlike `elasticsearch@REALM` or `elasticsearch/hostname@REALM` then the username that HDFS\nextracts for file access checks will be `elasticsearch`.\n\nNOTE: The repository plugin makes no assumptions of what Elasticsearch's principal name is. The main fragment of the\nKerberos principal is not required to be `elasticsearch`. If you have a principal or service name that works better\nfor you or your organization then feel free to use it instead!\n"
}