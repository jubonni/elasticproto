{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.666582",
        "size": 4195,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-configuration-memory.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "setup-configuration-memory",
        "version": "8.15"
    },
    "doc": "[[setup-configuration-memory]]\n=== Disable swapping\n\nMost operating systems try to use as much memory as possible for file system\ncaches and eagerly swap out unused application memory. This can result in parts\nof the JVM heap or even its executable pages being swapped out to disk.\n\nSwapping is very bad for performance, for node stability, and should be avoided\nat all costs. It can cause garbage collections to last for **minutes** instead\nof milliseconds and can cause nodes to respond slowly or even to disconnect\nfrom the cluster. In a resilient distributed system, it's more effective to let\nthe operating system kill the node.\n\nThere are three approaches to disabling swapping. The preferred option is to\ncompletely disable swap. If this is not an option, whether or not to prefer\nminimizing swappiness versus memory locking is dependent on your environment.\n\n[[disable-swap-files]]\n==== Disable all swap files\n\nUsually Elasticsearch is the only service running on a box, and its memory usage\nis controlled by the JVM options. There should be no need to have swap enabled.\n\nOn Linux systems, you can disable swap temporarily by running:\n\n[source,sh]\n--------------\nsudo swapoff -a\n--------------\n\nThis doesn't require a restart of Elasticsearch.\n\nTo disable it permanently, you will need to edit the `/etc/fstab` file and\ncomment out any lines that contain the word `swap`.\n\nOn Windows, the equivalent can be achieved by disabling the paging file entirely\nvia `System Properties \u2192 Advanced \u2192 Performance \u2192 Advanced \u2192 Virtual memory`.\n\n[[swappiness]]\n==== Configure `swappiness`\n\nAnother option available on Linux systems is to ensure that the sysctl value\n`vm.swappiness` is set to `1`. This reduces the kernel's tendency to swap and\nshould not lead to swapping under normal circumstances, while still allowing the\nwhole system to swap in emergency conditions.\n\n[[bootstrap-memory_lock]]\n==== Enable `bootstrap.memory_lock`\n\nAnother option is to use\nhttp://opengroup.org/onlinepubs/007908799/xsh/mlockall.html[mlockall] on\nLinux/Unix systems, or\nhttps://msdn.microsoft.com/en-us/library/windows/desktop/aa366895%28v=vs.85%29.aspx[VirtualLock]\non Windows, to try to lock the process address space into RAM, preventing any\n{es} heap memory from being swapped out.\n\nNOTE: Some platforms still swap off-heap memory when using a memory lock. To\nprevent off-heap memory swaps, <<disable-swap-files,disable all swap files>>\ninstead.\n\nTo enable a memory lock, set `bootstrap.memory_lock` to `true` in\n`elasticsearch.yml`:\n\n[source,yaml]\n--------------\nbootstrap.memory_lock: true\n--------------\n\nWARNING: `mlockall` might cause the JVM or shell session to exit if it tries to\nallocate more memory than is available!\n\nAfter starting Elasticsearch, you can see whether this setting was applied\nsuccessfully by checking the value of `mlockall` in the output from this\nrequest:\n\n[source,console]\n--------------\nGET _nodes?filter_path=**.mlockall\n--------------\n\nIf you see that `mlockall` is `false`, then it means that the `mlockall`\nrequest has failed. You will also see a line with more information in the logs\nwith the words `Unable to lock JVM Memory`.\n\nThe most probable reason, on Linux/Unix systems, is that the user running\nElasticsearch doesn't have permission to lock memory. This can be granted as\nfollows:\n\n`.zip` and `.tar.gz`::\nSet <<ulimit,`ulimit -l unlimited`>> as root before starting {es}.\nAlternatively, set `memlock` to `unlimited` in `/etc/security/limits.conf`:\n+\n[source,sh]\n----\n# allow user 'elasticsearch' mlockall\nelasticsearch soft memlock unlimited\nelasticsearch hard memlock unlimited\n----\n\nRPM and Debian::\n\n  Set `LimitMEMLOCK` to `infinity` in the <<systemd,systemd configuration>>.\n\nAnother possible reason why `mlockall` can fail is that\n<<executable-jna-tmpdir,the JNA temporary directory (usually a sub-directory of\n`/tmp`) is mounted with the `noexec` option>>. This can be solved by specifying\na new temporary directory for JNA using the `ES_JAVA_OPTS` environment variable:\n\n[source,sh]\n--------------\nexport ES_JAVA_OPTS=\"$ES_JAVA_OPTS -Djna.tmpdir=<path>\"\n./bin/elasticsearch\n--------------\n\nor setting this JVM flag in the jvm.options configuration file.\n"
}