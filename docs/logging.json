{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.878583",
        "size": 15358,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/logging.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "logging",
        "version": "8.15"
    },
    "doc": "[[logging]]\n=== Logging\n\nYou can use {es}'s application logs to monitor your cluster and diagnose issues.\nIf you run {es} as a service, the default location of the logs varies based on\nyour platform and installation method:\n\ninclude::{es-ref-dir}/tab-widgets/logging-widget.asciidoc[]\n\nIf you run {es} from the command line, {es} prints logs to the standard output\n(`stdout`).\n\n[discrete]\n[[loggin-configuration]]\n=== Logging configuration\n\nIMPORTANT: Elastic strongly recommends using the Log4j 2 configuration that is shipped by default.\n\n\nElasticsearch uses https://logging.apache.org/log4j/2.x/[Log4j 2] for\nlogging. Log4j 2 can be configured using the log4j2.properties\nfile. Elasticsearch exposes three properties, `${sys:es.logs.base_path}`,\n`${sys:es.logs.cluster_name}`, and `${sys:es.logs.node_name}` that can be\nreferenced in the configuration file to determine the location of the log\nfiles. The property `${sys:es.logs.base_path}` will resolve to the log directory,\n`${sys:es.logs.cluster_name}` will resolve to the cluster name (used as the\nprefix of log filenames in the default configuration), and\n`${sys:es.logs.node_name}` will resolve to the node name (if the node name is\nexplicitly set).\n\nFor example, if your log directory (`path.logs`) is `/var/log/elasticsearch` and\nyour cluster is named `production` then `${sys:es.logs.base_path}` will resolve\nto `/var/log/elasticsearch` and\n`${sys:es.logs.base_path}${sys:file.separator}${sys:es.logs.cluster_name}.log`\nwill resolve to `/var/log/elasticsearch/production.log`.\n\n[source,properties]\n--------------------------------------------------\n######## Server JSON ############################\nappender.rolling.type = RollingFile <1>\nappender.rolling.name = rolling\nappender.rolling.fileName = ${sys:es.logs.base_path}${sys:file.separator}${sys:es.logs.cluster_name}_server.json <2>\nappender.rolling.layout.type = ECSJsonLayout <3>\nappender.rolling.layout.dataset = elasticsearch.server <4>\nappender.rolling.filePattern = ${sys:es.logs.base_path}${sys:file.separator}${sys:es.logs.cluster_name}-%d{yyyy-MM-dd}-%i.json.gz <5>\nappender.rolling.policies.type = Policies\nappender.rolling.policies.time.type = TimeBasedTriggeringPolicy <6>\nappender.rolling.policies.time.interval = 1 <7>\nappender.rolling.policies.time.modulate = true <8>\nappender.rolling.policies.size.type = SizeBasedTriggeringPolicy <9>\nappender.rolling.policies.size.size = 256MB <10>\nappender.rolling.strategy.type = DefaultRolloverStrategy\nappender.rolling.strategy.fileIndex = nomax\nappender.rolling.strategy.action.type = Delete <11>\nappender.rolling.strategy.action.basepath = ${sys:es.logs.base_path}\nappender.rolling.strategy.action.condition.type = IfFileName <12>\nappender.rolling.strategy.action.condition.glob = ${sys:es.logs.cluster_name}-* <13>\nappender.rolling.strategy.action.condition.nested_condition.type = IfAccumulatedFileSize <14>\nappender.rolling.strategy.action.condition.nested_condition.exceeds = 2GB <15>\n################################################\n--------------------------------------------------\n\n<1> Configure the `RollingFile` appender\n<2> Log to `/var/log/elasticsearch/production_server.json`\n<3> Use JSON layout.\n<4> `dataset` is a flag populating the `event.dataset` field in a `ECSJsonLayout`.\n It can be used to distinguish different types of logs more easily when parsing them.\n<5> Roll logs to `/var/log/elasticsearch/production-yyyy-MM-dd-i.json`; logs\n    will be compressed on each roll and `i` will be incremented\n<6> Use a time-based roll policy\n<7> Roll logs on a daily basis\n<8> Align rolls on the day boundary (as opposed to rolling every twenty-four\n    hours)\n<9> Using a size-based roll policy\n<10> Roll logs after 256 MB\n<11> Use a delete action when rolling logs\n<12> Only delete logs matching a file pattern\n<13> The pattern is to only delete the main logs\n<14> Only delete if we have accumulated too many compressed logs\n<15> The size condition on the compressed logs is 2 GB\n\n[source,properties]\n--------------------------------------------------\n######## Server -  old style pattern ###########\nappender.rolling_old.type = RollingFile\nappender.rolling_old.name = rolling_old\nappender.rolling_old.fileName = ${sys:es.logs.base_path}${sys:file.separator}${sys:es.logs.cluster_name}_server.log <1>\nappender.rolling_old.layout.type = PatternLayout\nappender.rolling_old.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] [%node_name]%marker %m%n\nappender.rolling_old.filePattern = ${sys:es.logs.base_path}${sys:file.separator}${sys:es.logs.cluster_name}-%d{yyyy-MM-dd}-%i.old_log.gz\n\n--------------------------------------------------\n<1> The configuration for `old style` pattern appenders. These logs will be saved in `*.log` files and if archived will be in `*\n.log.gz` files. Note that these should be considered deprecated and will be removed in the future.\n\nNOTE: Log4j's configuration parsing gets confused by any extraneous whitespace;\nif you copy and paste any Log4j settings on this page, or enter any Log4j\nconfiguration in general, be sure to trim any leading and trailing whitespace.\n\nNote than you can replace `.gz` by `.zip` in `appender.rolling.filePattern` to\ncompress the rolled logs using the zip format. If you remove the `.gz`\nextension then logs will not be compressed as they are rolled.\n\nIf you want to retain log files for a specified period of time, you can use a\nrollover strategy with a delete action.\n\n[source,properties]\n--------------------------------------------------\nappender.rolling.strategy.type = DefaultRolloverStrategy <1>\nappender.rolling.strategy.action.type = Delete <2>\nappender.rolling.strategy.action.basepath = ${sys:es.logs.base_path} <3>\nappender.rolling.strategy.action.condition.type = IfFileName <4>\nappender.rolling.strategy.action.condition.glob = ${sys:es.logs.cluster_name}-* <5>\nappender.rolling.strategy.action.condition.nested_condition.type = IfLastModified <6>\nappender.rolling.strategy.action.condition.nested_condition.age = 7D <7>\n--------------------------------------------------\n\n<1> Configure the `DefaultRolloverStrategy`\n<2> Configure the `Delete` action for handling rollovers\n<3> The base path to the Elasticsearch logs\n<4> The condition to apply when handling rollovers\n<5> Delete files from the base path matching the glob\n    `${sys:es.logs.cluster_name}-*`; this is the glob that log files are rolled\n    to; this is needed to only delete the rolled Elasticsearch logs but not also\n    delete the deprecation and slow logs\n<6> A nested condition to apply to files matching the glob\n<7> Retain logs for seven days\n\nMultiple configuration files can be loaded (in which case they will get merged)\nas long as they are named `log4j2.properties` and have the Elasticsearch config\ndirectory as an ancestor; this is useful for plugins that expose additional\nloggers. The logger section contains the java packages and their corresponding\nlog level. The appender section contains the destinations for the logs.\nExtensive information on how to customize logging and all the supported\nappenders can be found on the\nhttps://logging.apache.org/log4j/2.x/manual/configuration.html[Log4j\ndocumentation].\n\n[discrete]\n[[configuring-logging-levels]]\n=== Configuring logging levels\n\nLog4J 2 log messages include a _level_ field, which is one of the following (in\norder of increasing verbosity):\n\n* `FATAL`\n* `ERROR`\n* `WARN`\n* `INFO`\n* `DEBUG`\n* `TRACE`\n\nBy default {es} includes all messages at levels `INFO`, `WARN`, `ERROR` and\n`FATAL` in its logs, but filters out messages at levels `DEBUG` and `TRACE`.\nThis is the recommended configuration. Do not filter out messages at `INFO` or\nhigher log levels or else you may not be able to understand your cluster's\nbehaviour or troubleshoot common problems. Do not enable logging at levels\n`DEBUG` or `TRACE` unless you are following instructions elsewhere in this\nmanual which call for more detailed logging, or you are an expert user who will\nbe reading the {es} source code to determine the meaning of the logs.\n\nMessages are logged by a hierarchy of loggers which matches the hierarchy of\nJava packages and classes in the {es-repo}[{es} source code]. Every logger has\na corresponding <<cluster-update-settings,dynamic setting>> which can be used\nto control the verbosity of its logs. The setting's name is the fully-qualified\nname of the package or class, prefixed with `logger.`.\n\nYou may set each logger's verbosity to the name of a log level, for instance\n`DEBUG`, which means that messages from this logger at levels up to the\nspecified one will be included in the logs. You may also use the value `OFF` to\nsuppress all messages from the logger.\n\nFor example, the `org.elasticsearch.discovery` package contains functionality\nrelated to the <<discovery-hosts-providers,discovery>> process, and you can\ncontrol the verbosity of its logs with the `logger.org.elasticsearch.discovery`\nsetting. To enable `DEBUG` logging for this package, use the\n<<cluster-update-settings,Cluster update settings API>> as follows:\n\n[source,console]\n----\nPUT /_cluster/settings\n{\n  \"persistent\": {\n    \"logger.org.elasticsearch.discovery\": \"DEBUG\"\n  }\n}\n----\n\nTo reset this package's log verbosity to its default level, set the logger\nsetting to `null`:\n\n[source,console]\n----\nPUT /_cluster/settings\n{\n  \"persistent\": {\n    \"logger.org.elasticsearch.discovery\": null\n  }\n}\n----\n\nOther ways to change log levels include:\n\n1. `elasticsearch.yml`:\n+\n--\n[source,yaml]\n----\nlogger.org.elasticsearch.discovery: DEBUG\n----\n\nThis is most appropriate when debugging a problem on a single node.\n--\n\n2. `log4j2.properties`:\n+\n--\n[source,properties]\n----\nlogger.discovery.name = org.elasticsearch.discovery\nlogger.discovery.level = debug\n----\n\nThis is most appropriate when you already need to change your Log4j 2\nconfiguration for other reasons. For example, you may want to send logs for a\nparticular logger to another file. However, these use cases are rare.\n--\n\nIMPORTANT: {es}'s application logs are intended for humans to read and\ninterpret. Different versions of {es} may report information in these logs in\ndifferent ways, perhaps adding extra detail, removing unnecessary information,\nformatting the same information in different ways, renaming the logger or\nadjusting the log level for specific messages. Do not rely on the contents of\nthe application logs remaining precisely the same between versions.\n\nNOTE: To prevent leaking sensitive information in logs, {es} suppresses certain\nlog messages by default even at the highest verbosity levels. To disable this\nprotection on a node, set the Java system property\n`es.insecure_network_trace_enabled` to `true`. This feature is primarily\nintended for test systems which do not contain any sensitive information. If you\nset this property on a system which contains sensitive information, you must\nprotect your logs from unauthorized access.\n\n[discrete]\n[[deprecation-logging]]\n=== Deprecation logging\n\n{es} also writes deprecation logs to the log directory. These logs record a\nmessage when you use deprecated {es} functionality. You can use the deprecation\nlogs to update your application before upgrading {es} to a new major version.\n\nBy default, {es} rolls and compresses deprecation logs at 1GB. The default\nconfiguration preserves a maximum of five log files: four rolled logs and an\nactive log.\n\n{es} emits deprecation log messages at the `CRITICAL` level. Those messages\nare indicating that a used deprecation feature will be removed in a next major\nversion. Deprecation log messages at the `WARN` level indicates that a less\ncritical feature was used, it won't be removed in next major version, but might\nbe removed in the future.\n\nTo stop writing deprecation log messages, set `logger.deprecation.level`\nto `OFF` in `log4j2.properties` :\n\n[source,properties]\n----\nlogger.deprecation.level = OFF\n----\nAlternatively, you can change the logging level dynamically:\n\n[source,console]\n----\nPUT /_cluster/settings\n{\n  \"persistent\": {\n    \"logger.org.elasticsearch.deprecation\": \"OFF\"\n  }\n}\n----\n\nRefer to <<configuring-logging-levels,Configuring logging levels>>.\n\n\nYou can identify what is triggering deprecated functionality if `X-Opaque-Id` was used as an HTTP header.\nThe user ID is included in the `X-Opaque-ID` field in deprecation JSON logs.\n\n[source,js]\n---------------------------\n{\n  \"type\": \"deprecation\",\n  \"timestamp\": \"2019-08-30T12:07:07,126+02:00\",\n  \"level\": \"WARN\",\n  \"component\": \"o.e.d.r.a.a.i.RestCreateIndexAction\",\n  \"cluster.name\": \"distribution_run\",\n  \"node.name\": \"node-0\",\n  \"message\": \"[types removal] Using include_type_name in create index requests is deprecated. The parameter will be removed in the next major version.\",\n  \"x-opaque-id\": \"MY_USER_ID\",\n  \"cluster.uuid\": \"Aq-c-PAeQiK3tfBYtig9Bw\",\n  \"node.id\": \"D7fUYfnfTLa2D7y-xw6tZg\"\n}\n---------------------------\n// NOTCONSOLE\n\nDeprecation logs can be indexed into `.logs-deprecation.elasticsearch-default` data stream\n`cluster.deprecation_indexing.enabled` setting is set to true.\n\n==== Deprecation logs throttling\n:es-rate-limiting-filter-java-doc: {elasticsearch-javadoc}/org/elasticsearch/common/logging/RateLimitingFilter.html\nDeprecation logs are deduplicated based on a deprecated feature key\nand x-opaque-id so that if a feature is repeatedly used, it will not overload the deprecation logs.\nThis applies to both indexed deprecation logs and logs emitted to log files.\nYou can disable the use of `x-opaque-id` in throttling by changing\n`cluster.deprecation_indexing.x_opaque_id_used.enabled` to false,\nrefer to this class {es-rate-limiting-filter-java-doc}[javadoc] for more details.\n\n[discrete]\n[[json-logging]]\n=== JSON log format\n\nTo make parsing Elasticsearch logs easier, logs are now printed in a JSON format.\nThis is configured by a Log4J layout property `appender.rolling.layout.type = ECSJsonLayout`.\nThis layout requires a `dataset` attribute to be set which is used to distinguish\nlogs streams when parsing.\n[source,properties]\n--------------------------------------------------\nappender.rolling.layout.type = ECSJsonLayout\nappender.rolling.layout.dataset = elasticsearch.server\n--------------------------------------------------\n:es-json-layout-java-doc: {elasticsearch-javadoc}/org/elasticsearch/common/logging/ESJsonLayout.html\n\nEach line contains a single JSON document with the properties configured in `ECSJsonLayout`.\nSee this class {es-json-layout-java-doc}[javadoc] for more details.\nHowever if a JSON document contains an exception, it will be printed over multiple lines.\nThe first line will contain regular properties and subsequent lines will contain the\nstacktrace formatted as a JSON array.\n\n\nNOTE: You can still use your own custom layout. To do that replace the line\n`appender.rolling.layout.type` with a different layout. See sample below:\n[source,properties]\n--------------------------------------------------\nappender.rolling.type = RollingFile\nappender.rolling.name = rolling\nappender.rolling.fileName = ${sys:es.logs.base_path}${sys:file.separator}${sys:es.logs.cluster_name}_server.log\nappender.rolling.layout.type = PatternLayout\nappender.rolling.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] [%node_name]%marker %.-10000m%n\nappender.rolling.filePattern = ${sys:es.logs.base_path}${sys:file.separator}${sys:es.logs.cluster_name}-%d{yyyy-MM-dd}-%i.log.gz\n--------------------------------------------------\n"
}