{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.692579",
        "size": 3926,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-has-child-query.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "query-dsl-has-child-query",
        "version": "8.15"
    },
    "doc": "[[query-dsl-has-child-query]]\n=== Has child query\n++++\n<titleabbrev>Has child</titleabbrev>\n++++\n\nReturns parent documents whose <<parent-join,joined>> child documents match a\nprovided query. You can create parent-child relationships between documents in\nthe same index using a <<parent-join,join>> field mapping.\n\n[WARNING]\n====\nBecause it performs a join, the `has_child` is slow compared to other queries.\nIts performance degrades as the number of matching child documents pointing to\nunique parent documents increases. Each `has_child` query in a search can\nincrease query time significantly.\n\nIf you care about query performance, do not use this query. If you need to use\nthe `has_child` query, use it as rarely as possible. \n====\n\n[[has-child-query-ex-request]]\n==== Example request\n\n[[has-child-index-setup]]\n===== Index setup\nTo use the `has_child` query, your index must include a <<parent-join,join>>\nfield mapping. For example:\n\n[source,console]\n----\nPUT /my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"my-join-field\": {\n        \"type\": \"join\",\n        \"relations\": {\n          \"parent\": \"child\"\n        }\n      }\n    }\n  }\n}\n\n----\n// TESTSETUP\n\n[[has-child-query-ex-query]]\n===== Example query\n\n[source,console]\n----\nGET /_search\n{\n  \"query\": {\n    \"has_child\": {\n      \"type\": \"child\",\n      \"query\": {\n        \"match_all\": {}\n      },\n      \"max_children\": 10,\n      \"min_children\": 2,\n      \"score_mode\": \"min\"\n    }\n  }\n}\n----\n\n[[has-child-top-level-params]]\n==== Top-level parameters for `has_child`\n\n`type`::\n(Required, string) Name of the child relationship mapped for the\n<<parent-join,join>> field.\n\n`query`::\n(Required, query object) Query you wish to run on child documents of the `type`\nfield. If a child document matches the search, the query returns the parent\ndocument.\n\n`ignore_unmapped`::\n+\n--\n(Optional, Boolean) Indicates whether to ignore an unmapped `type` and not\nreturn any documents instead of an error. Defaults to `false`.\n\nIf `false`, {es} returns an error if the `type` is unmapped.\n\nYou can use this parameter to query multiple indices that may not contain the\n`type`.\n--\n\n`max_children`::\n(Optional, integer) Maximum number of child documents that match the `query`\nallowed for a returned parent document. If the parent document exceeds this\nlimit, it is excluded from the search results.\n\n`min_children`::\n(Optional, integer) Minimum number of child documents that match the `query`\nrequired to match the query for a returned parent document. If the parent\ndocument does not meet this limit, it is excluded from the search results.\n\n`score_mode`::\n+\n--\n(Optional, string) Indicates how scores for matching child documents affect the\nroot parent document's <<relevance-scores,relevance score>>. Valid values\nare:\n\n`none` (Default)::\nDo not use the relevance scores of matching child documents. The query assigns\nparent documents a score of `0`.\n\n`avg`::\nUse the mean relevance score of all matching child documents.\n\n`max`::\nUses the highest relevance score of all matching child documents.\n\n`min`::\nUses the lowest relevance score of all matching child documents.\n\n`sum`::\nAdd together the relevance scores of all matching child documents.\n--\n\n[[has-child-query-notes]]\n==== Notes\n\n[[has-child-query-performance]]\n===== Sorting\nYou cannot sort the results of a `has_child` query using standard\n<<sort-search-results,sort options>>.\n\nIf you need to sort returned documents by a field in their child documents, use\na `function_score` query and sort by `_score`. For example, the following query\nsorts returned documents by the `click_count` field of their child documents.\n\n[source,console]\n----\nGET /_search\n{\n  \"query\": {\n    \"has_child\": {\n      \"type\": \"child\",\n      \"query\": {\n        \"function_score\": {\n          \"script_score\": {\n            \"script\": \"_score * doc['click_count'].value\"\n          }\n        }\n      },\n      \"score_mode\": \"max\"\n    }\n  }\n}\n----\n"
}