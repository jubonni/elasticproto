{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.789072",
        "size": 5892,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-normalize-aggregation.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "search-aggregations-pipeline-normalize-aggregation",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[search-aggregations-pipeline-normalize-aggregation]]\n=== Normalize aggregation\n++++\n<titleabbrev>Normalize</titleabbrev>\n++++\n\nA parent pipeline aggregation which calculates the specific normalized/rescaled value for a specific bucket value.\nValues that cannot be normalized, will be skipped using the <<gap-policy, skip gap policy>>.\n\n==== Syntax\n\nA `normalize` aggregation looks like this in isolation:\n\n[source,js]\n--------------------------------------------------\n{\n  \"normalize\": {\n    \"buckets_path\": \"normalized\",\n    \"method\": \"percent_of_sum\"\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\n[[normalize_pipeline-params]]\n.`normalize_pipeline` Parameters\n[options=\"header\"]\n|===\n|Parameter Name |Description |Required |Default Value\n|`buckets_path` |The path to the buckets we wish to normalize (see <<buckets-path-syntax, `buckets_path` syntax>> for more details) |Required |\n|`method` | The specific <<normalize_pipeline-method, method>> to apply | Required |\n|`format` |{javadoc}/java.base/java/text/DecimalFormat.html[DecimalFormat pattern] for the\noutput value. If specified, the formatted value is returned in the aggregation's\n`value_as_string` property |Optional |`null`\n|===\n\n==== Methods\n[[normalize_pipeline-method]]\n\nThe Normalize Aggregation supports multiple methods to transform the bucket values. Each method definition will use\nthe following original set of bucket values as examples: `[5, 5, 10, 50, 10, 20]`.\n\n_rescale_0_1_::\n                This method rescales the data such that the minimum number is zero, and the maximum number is 1, with the rest normalized\n                linearly in-between.\n\n                x' = (x - min_x) / (max_x - min_x)\n\n                [0, 0, .1111, 1, .1111, .3333]\n\n_rescale_0_100_::\n                This method rescales the data such that the minimum number is zero, and the maximum number is 100, with the rest normalized\n                linearly in-between.\n\n                x' = 100 * (x - min_x) / (max_x - min_x)\n\n                [0, 0, 11.11, 100, 11.11, 33.33]\n\n_percent_of_sum_::\n                This method normalizes each value so that it represents a percentage of the total sum it attributes to.\n\n                x' = x / sum_x\n\n                [5%, 5%, 10%, 50%, 10%, 20%]\n\n\n_mean_::\n                This method normalizes such that each value is normalized by how much it differs from the average.\n\n                x' = (x - mean_x) / (max_x - min_x)\n\n                [4.63, 4.63, 9.63, 49.63, 9.63, 9.63, 19.63]\n\n_z-score_::\n                This method normalizes such that each value represents how far it is from the mean relative to the standard deviation\n\n                x' = (x - mean_x) / stdev_x\n\n                [-0.68, -0.68, -0.39, 1.94, -0.39, 0.19]\n\n_softmax_::\n                This method normalizes such that each value is exponentiated and relative to the sum of the exponents of the original values.\n\n                x' = e^x / sum_e_x\n\n                [2.862E-20, 2.862E-20, 4.248E-18, 0.999, 9.357E-14, 4.248E-18]\n\n\n==== Example\n\nThe following snippet calculates the percent of total sales for each month:\n\n[source,console]\n--------------------------------------------------\nPOST /sales/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"sales_per_month\": {\n      \"date_histogram\": {\n        \"field\": \"date\",\n        \"calendar_interval\": \"month\"\n      },\n      \"aggs\": {\n        \"sales\": {\n          \"sum\": {\n            \"field\": \"price\"\n          }\n        },\n        \"percent_of_total_sales\": {\n          \"normalize\": {\n            \"buckets_path\": \"sales\",          <1>\n            \"method\": \"percent_of_sum\",       <2>\n            \"format\": \"00.00%\"                <3>\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[setup:sales]\n\n<1> `buckets_path` instructs this normalize aggregation to use the output of the `sales` aggregation for rescaling\n<2> `method` sets which rescaling to apply. In this case, `percent_of_sum` will calculate the sales value as a percent of all sales\n    in the parent bucket\n<3> `format` influences how to format the metric as a string using Java's `DecimalFormat` pattern. In this case, multiplying by 100\n    and adding a '%'\n\nAnd the following may be the response:\n\n[source,console-result]\n--------------------------------------------------\n{\n   \"took\": 11,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"sales_per_month\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2015/01/01 00:00:00\",\n               \"key\": 1420070400000,\n               \"doc_count\": 3,\n               \"sales\": {\n                  \"value\": 550.0\n               },\n               \"percent_of_total_sales\": {\n                  \"value\": 0.5583756345177665,\n                  \"value_as_string\": \"55.84%\"\n               }\n            },\n            {\n               \"key_as_string\": \"2015/02/01 00:00:00\",\n               \"key\": 1422748800000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 60.0\n               },\n               \"percent_of_total_sales\": {\n                  \"value\": 0.06091370558375635,\n                  \"value_as_string\": \"06.09%\"\n               }\n            },\n            {\n               \"key_as_string\": \"2015/03/01 00:00:00\",\n               \"key\": 1425168000000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 375.0\n               },\n               \"percent_of_total_sales\": {\n                  \"value\": 0.38071065989847713,\n                  \"value_as_string\": \"38.07%\"\n               }\n            }\n         ]\n      }\n   }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"took\": 11/\"took\": $body.took/]\n// TESTRESPONSE[s/\"_shards\": \\.\\.\\./\"_shards\": $body._shards/]\n// TESTRESPONSE[s/\"hits\": \\.\\.\\./\"hits\": $body.hits/]\n"
}