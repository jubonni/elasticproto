{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.135285",
        "size": 5442,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/dot-expand-processor.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "dot-expand-processor",
        "version": "8.15"
    },
    "doc": "[[dot-expand-processor]]\n=== Dot expander processor\n++++\n<titleabbrev>Dot expander</titleabbrev>\n++++\n\nExpands a field with dots into an object field. This processor allows fields\nwith dots in the name to be accessible by other processors in the pipeline.\nOtherwise these fields can't be accessed by any processor.\n\n[[dot-expander-options]]\n.Dot Expand Options\n[options=\"header\"]\n|======\n| Name      | Required  | Default  | Description\n| `field`   | yes       | -        | The field to expand into an object field. If set to `*`, all top-level fields will be expanded.\n| `path`    | no        | -        | The field that contains the field to expand. Only required if the field to expand is part another object field, because the `field` option can only understand leaf fields.\n| `override`| no        | false    | Controls the behavior when there is already an existing nested object that conflicts with the expanded field. When `false`, the processor will merge conflicts by combining the old and the new values into an array. When `true`, the value from the expanded field will overwrite the existing value.\ninclude::common-options.asciidoc[]\n|======\n\n[source,js]\n--------------------------------------------------\n{\n  \"dot_expander\": {\n    \"field\": \"foo.bar\"\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nFor example the dot expand processor would turn this document:\n\n[source,js]\n--------------------------------------------------\n{\n  \"foo.bar\" : \"value\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\ninto:\n\n[source,js]\n--------------------------------------------------\n{\n  \"foo\" : {\n    \"bar\" : \"value\"\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf there is already a `bar` field nested under `foo` then\nthis processor merges the `foo.bar` field into it. If the field is\na scalar value then it will turn that field into an array field.\n\nFor example, the following document:\n\n[source,js]\n--------------------------------------------------\n{\n  \"foo.bar\" : \"value2\",\n  \"foo\" : {\n    \"bar\" : \"value1\"\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nis transformed by the `dot_expander` processor into:\n\n[source,js]\n--------------------------------------------------\n{\n  \"foo\" : {\n    \"bar\" : [\"value1\", \"value2\"]\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nContrast that with when the `override` option is set to `true`.\n\n[source,js]\n--------------------------------------------------\n{\n  \"dot_expander\": {\n    \"field\": \"foo.bar\",\n    \"override\": true\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIn that case, the value of the expanded field overrides the value of the nested object.\n\n[source,js]\n--------------------------------------------------\n{\n  \"foo\" : {\n    \"bar\" : \"value2\"\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\n'''\n\nThe value of `field` can also be set to a `*` to expand all top-level dotted field names:\n\n[source,js]\n--------------------------------------------------\n{\n  \"dot_expander\": {\n    \"field\": \"*\"\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nThe dot expand processor would turn this document:\n\n[source,js]\n--------------------------------------------------\n{\n  \"foo.bar\" : \"value\",\n  \"baz.qux\" : \"value\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\ninto:\n\n[source,js]\n--------------------------------------------------\n{\n  \"foo\" : {\n    \"bar\" : \"value\"\n  },\n  \"baz\" : {\n    \"qux\" : \"value\"\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\n'''\n\nIf the dotted field is nested within a non-dotted structure, then use the `path` option to navigate the\nnon-dotted structure:\n\n[source,js]\n--------------------------------------------------\n{\n  \"dot_expander\": {\n    \"path\": \"foo\"\n    \"field\": \"*\"\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nThe dot expand processor would turn this document:\n\n[source,js]\n--------------------------------------------------\n{\n  \"foo\" : {\n    \"bar.one\" : \"value\",\n    \"bar.two\" : \"value\"\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\ninto:\n\n[source,js]\n--------------------------------------------------\n{\n  \"foo\" : {\n    \"bar\" : {\n      \"one\" : \"value\",\n      \"two\" : \"value\"\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\n'''\n\nIf any field outside of the leaf field conflicts with a pre-existing field of the same name,\nthen that field needs to be renamed first.\n\nConsider the following document:\n\n[source,js]\n--------------------------------------------------\n{\n  \"foo\": \"value1\",\n  \"foo.bar\": \"value2\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nThen the `foo` needs to be renamed first before the `dot_expander`\nprocessor is applied. So in order for the `foo.bar` field to properly\nbe expanded into the `bar` field under the `foo` field the following\npipeline should be used:\n\n[source,js]\n--------------------------------------------------\n{\n  \"processors\" : [\n    {\n      \"rename\" : {\n        \"field\" : \"foo\",\n        \"target_field\" : \"foo.bar\"\n      }\n    },\n    {\n      \"dot_expander\": {\n        \"field\": \"foo.bar\"\n      }\n    }\n  ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nThe reason for this is that Ingest doesn't know how to automatically cast\na scalar field to an object field.\n"
}