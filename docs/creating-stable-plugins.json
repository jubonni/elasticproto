{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.311593",
        "size": 5817,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/creating-stable-plugins.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "creating-stable-plugins",
        "version": "8.15"
    },
    "doc": "[[creating-stable-plugins]]\n=== Creating text analysis plugins with the stable plugin API\n\nText analysis plugins provide {es} with custom {ref}/analysis.html[Lucene\nanalyzers, token filters, character filters, and tokenizers].\n\n[discrete]\n==== The stable plugin API\n\nText analysis plugins can be developed against the stable plugin API. This API\nconsists of the following dependencies:\n\n* `plugin-api` - an API used by plugin developers to implement custom {es}\nplugins.\n* `plugin-analysis-api` - an API used by plugin developers to implement analysis\nplugins and integrate them into {es}.\n* `lucene-analysis-common` - a dependency of `plugin-analysis-api` that contains\ncore Lucene analysis interfaces like `Tokenizer`, `Analyzer`, and `TokenStream`.\n\nFor new versions of {es} within the same major version, plugins built against\nthis API does not need to be recompiled. Future versions of the API will be\nbackwards compatible and plugins are binary compatible with future versions of\n{es}. In other words, once you have a working artifact, you can re-use it when\nyou upgrade {es} to a new bugfix or minor version.\n\nA text analysis plugin can implement four factory classes that are provided by\nthe analysis plugin API.\n\n* `AnalyzerFactory` to create a Lucene analyzer\n* `CharFilterFactory` to create a character character filter\n* `TokenFilterFactory` to create a Lucene token filter\n* `TokenizerFactory` to create a Lucene tokenizer\n\nThe key to implementing a stable plugin is the `@NamedComponent` annotation.\nMany of {es}'s components have names that are used in configurations. For\nexample, the keyword analyzer is referenced in configuration with the name\n`\"keyword\"`. Once your custom plugin is installed in your cluster, your named\ncomponents may be referenced by name in these configurations as well.\n\nYou can also create text analysis plugins as a <<creating-classic-plugins,\nclassic plugin>>. However, classic plugins are pinned to a specific version of\n{es}. You need to recompile them when upgrading {es}. Because classic plugins\nare built against internal APIs that can change, upgrading to a new version may\nrequire code changes.\n\n[discrete]\n==== Stable plugin file structure\n\nStable plugins are ZIP files composed of JAR files and two metadata files:\n\n* `stable-plugin-descriptor.properties` - a Java properties file that describes\nthe plugin. Refer to <<plugin-descriptor-file-{plugin-type}>>.\n* `named_components.json` - a JSON file mapping interfaces to key-value pairs\nof component names and implementation classes.\n\nNote that only JAR files at the root of the plugin are added to the classpath\nfor the plugin. If you need other resources, package them into a resources JAR.\n\n[discrete]\n==== Development process\n\nElastic provides a Gradle plugin, `elasticsearch.stable-esplugin`, that makes it\neasier to develop and package stable plugins. The steps in this section assume\nyou use this plugin. However, you don't need Gradle to create plugins.\n\nThe {es} Github repository contains\n{es-repo}tree/main/plugins/examples/stable-analysis[an example analysis plugin].\nThe example `build.gradle` build script provides a good starting point for\ndeveloping your own plugin.\n\n[discrete]\n===== Prerequisites\n\nPlugins are written in Java, so you need to install a Java Development Kit\n(JDK). Install Gradle if you want to use Gradle.\n\n[discrete]\n===== Step by step\n\n. Create a directory for your project.\n. Copy the example `build.gradle` build script to your project directory.  Note\nthat this build script uses the `elasticsearch.stable-esplugin` gradle plugin to\nbuild your plugin.\n. Edit the `build.gradle` build script:\n** Add a definition for the `pluginApiVersion` and matching `luceneVersion`\nvariables to the top of the file. You can find these versions in the\n`build-tools-internal/version.properties` file in the {es-repo}[Elasticsearch\nGithub repository].\n** Edit the `name` and `description` in the `esplugin` section of the build\nscript. This will create the plugin descriptor file. If you're not using the\n`elasticsearch.stable-esplugin` gradle plugin, refer to\n<<plugin-descriptor-file-{plugin-type}>> to create the file manually.\n** Add module information.\n** Ensure you have declared the following compile-time dependencies. These\ndependencies are compile-time only because {es} will provide these libraries at\nruntime.\n*** `org.elasticsearch.plugin:elasticsearch-plugin-api`\n*** `org.elasticsearch.plugin:elasticsearch-plugin-analysis-api`\n*** `org.apache.lucene:lucene-analysis-common`\n** For unit testing, ensure these dependencies have also been added to the\n`build.gradle` script as `testImplementation` dependencies.\n. Implement an interface from the analysis plugin API, annotating it with\n`NamedComponent`. Refer to <<example-text-analysis-plugin>> for an example.\n. You should now be able to assemble a plugin ZIP file by running:\n+\n[source,sh]\n----\ngradle bundlePlugin\n----\nThe resulting plugin ZIP file is written to the  `build/distributions`\ndirectory.\n\n[discrete]\n===== YAML REST tests\n\nThe Gradle `elasticsearch.yaml-rest-test` plugin enables testing of your\nplugin using the {es-repo}blob/main/rest-api-spec/src/yamlRestTest/resources/rest-api-spec/test/README.asciidoc[{es} yamlRestTest framework].\nThese tests use a YAML-formatted domain language to issue REST requests against\nan internal {es} cluster that has your plugin installed, and to check the\nresults of those requests. The structure of a YAML REST test directory is as\nfollows:\n\n* A test suite class, defined under `src/yamlRestTest/java`. This class should\nextend `ESClientYamlSuiteTestCase`.\n* The YAML tests themselves should be defined under\n`src/yamlRestTest/resources/test/`.\n\n[[plugin-descriptor-file-stable]]\n==== The plugin descriptor file for stable plugins\n\ninclude::plugin-descriptor-file.asciidoc[]\n"
}