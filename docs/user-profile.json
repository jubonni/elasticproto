{
    "meta": {
        "size": 5254,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/user-profile.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": false,
        "title": "user-profile",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[user-profile]]\n=== User profiles\n\nNOTE: The user profile feature is designed only for use by {kib} and\nElastic\u2019s {observability}, {ents}, and {elastic-sec} solutions. Individual\nusers and external applications should not call this API directly. Elastic reserves\nthe right to change or remove this feature in future releases without prior notice.\n\nBecause the {stack} supports externally-managed users (such as users who\nauthenticate via SAML, or users stored in an LDAP directory), there's a\ndistinction between _users_ and their _profile_.\n\n_Users_ refer to the entities that authenticate requests to the {stack}.\nEach user has a username and a set of privileges (represented by <<roles,roles>>)\nthat determine which types of requests they can issue. Users can be ephemeral;\nthey might exist only for the duration of a request to an {es} API or for the\nlifetime of a session in {kib}. These users cannot be retrieved after the session\nends, and can't store preferences across sessions.\n\n_User profiles_ provide persistent and stable representations of users.\nA user profile exists even if the user is offline, so their profile persists across sessions.\nThe unique identifier assigned to each profile doesn't change\nthroughout the lifetime of a deployment, providing a stable way of referring\nto the associated user. Each profile has a unique identifier, is searchable, and\ncan store user data such as format and notification preferences.\n\nThe capability of uniquely referring to users regardless of whether they're\nactively online is a critical function that underpins important features like\npersonalization and collaboration in {kib}.\n\n\n==== User profiles in {kib}\n\nA user profile is the persistent record that the {stack} stores for each\ninteractive user that authenticates to {kib}.\n\nWhen a user logs in to {kib}, a profile is automatically created for the user,\nor an existing profile is updated to reflect the user's active session.\nBy using the unique ID of the user profile, {kib} can store user-level data such as preferences\nseparately for each user, which is key to fine-grained levels of customization.\n{kib} uses this unique ID to route messages and notifications to a distinct user,\nregardless of whether they're logged in.\n\n===== Usernames and user profiles\n\nYou can use the same username across multiple realms for a single user. In {es},\nit's possible for two different realms to authenticate users with the same username\nand different roles.\n{es} doesn't assume that these users are the same person, and treats\nthem as separate individuals with distinct user profiles by default.\n\nNOTE: For use cases where one individual can authenticate against\nmultiple realms, you can use the <<security-domain,security domain>> feature\nso that these distinct users are considered to be the same identity\nand share a single user profile.\n\n==== Create and manage user profiles\n\nTo create a new user profile or update an existing one, use the\n<<security-api-activate-user-profile,activate user profile API>>. When you\nsubmit a request, {es} attempts to locate an existing profile document for the\nspecified user. If one doesn't exist, {es} creates a new profile document.\n\nIn either case, the profile document captures the user's `full_name`, `email`,\n`roles`, and `realms`, and also includes the profile unique ID and timestamp of\nthe operation. You can retrieve a user profile with\nthe <<security-api-get-user-profile,get user profile API>> by including the\nprofile's unique ID (`uid`).\n\nIn addition to the user's basic information, you can add data to a profile document\nwith the <<security-api-update-user-profile-data,update user profile API>>. For\nexample, you can add user-specific preferences as part of the profile data.\n\nUse the <<security-api-suggest-user-profile,suggest user profile API>> to retrieve profiles\nthat match given criteria. This API is designed to support user-suggestions,\nin collaboration with features such as those found in {kib}.\nHowever, the suggest user profile API is not intended to provide a general-purpose search API.\n\nLastly, you can use the <<security-api-has-privileges-user-profile, has privileges API for\nuser profiles>> to check the privileges of multiple users by specifying their profiles' unique IDs.\nThis can be used in conjunction with the suggest user profile API in order to restrict the\nsuggestions only to users that have the necessary permissions to actually perform\nthe action in the context.\n\n==== Limitations\n\n* Creating a new user profile requires a user's authentication details\n(`username` and `password` or its\n<<token-authentication-services,OAuth2 access token>>).\nThis means that a user must authenticate at least one time to create a\nuser profile. Users who have never authenticated to {kib}\n(or another profile-aware application) won't have a user profile, and the\n<<security-api-suggest-user-profile,suggest user profile API>> won't return\nany results for those users.\n\n* User profiles are meant for interactive users, such as a human user who\ninteracts with {kib}. Therefore, user profiles don't support API keys or\n<<service-accounts,service accounts>>.\n+\nNOTE: <<token-authentication-services,OAuth2 tokens>> that represent an\ninteractive end-user are supported.\n"
}