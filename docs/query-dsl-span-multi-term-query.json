{
    "meta": {
        "size": 1457,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-span-multi-term-query.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "query-dsl-span-multi-term-query",
        "version": "8.15"
    },
    "doc": "[[query-dsl-span-multi-term-query]]\n=== Span multi-term query\n++++\n<titleabbrev>Span multi-term</titleabbrev>\n++++\n\nThe `span_multi` query allows you to wrap a `multi term query` (one of wildcard,\nfuzzy, prefix, range or regexp query) as a `span query`, so\nit can be nested. Example:\n\n[source,console]\n--------------------------------------------------\nGET /_search\n{\n  \"query\": {\n    \"span_multi\": {\n      \"match\": {\n        \"prefix\": { \"user.id\": { \"value\": \"ki\" } }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\nA boost can also be associated with the query:\n\n[source,console]\n--------------------------------------------------\nGET /_search\n{\n  \"query\": {\n    \"span_multi\": {\n      \"match\": {\n        \"prefix\": { \"user.id\": { \"value\": \"ki\", \"boost\": 1.08 } }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\nWARNING: `span_multi` queries will hit too many clauses failure if the number of terms that match the query exceeds the\n`indices.query.bool.max_clause_count` <<search-settings,search setting>>.\nTo avoid an unbounded expansion you can set the <<query-dsl-multi-term-rewrite,\nrewrite method>> of the multi term query to `top_terms_*` rewrite. Or, if you use `span_multi` on `prefix` query only,\nyou can activate the <<index-prefixes,`index_prefixes`>> field option of the `text` field instead. This will\nrewrite any prefix query on the field to a single term query that matches the indexed prefix.\n\n"
}