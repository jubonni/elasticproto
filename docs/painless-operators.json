{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.127582",
        "size": 8308,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/painless-operators.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "painless-operators",
        "version": "8.15"
    },
    "doc": "[[painless-operators]]\n=== Operators\n\nAn operator is the most basic action that can be taken to evaluate values in a\nscript. An expression is one-to-many consecutive operations. Precedence is the\norder in which an operator will be evaluated relative to another operator.\nAssociativity is the direction within an expression in which a specific operator\nis evaluated. The following table lists all available operators:\n\n[cols=\"<6,<3,^3,^2,^4\"]\n|====\n| *Operator*                                                | *Category*                                  | *Symbol(s)* | *Precedence* | *Associativity*\n| <<precedence-operator, Precedence>>                       | <<painless-operators-general, General>>     | ()          | 0            | left -> right\n| <<method-call-operator, Method Call>>                     | <<painless-operators-reference, Reference>> | . ()        | 1            | left -> right\n| <<field-access-operator, Field Access>>                   | <<painless-operators-reference, Reference>> | .           | 1            | left -> right\n| <<null-safe-operator, Null Safe>>                         | <<painless-operators-reference, Reference>> | ?.          | 1            | left -> right\n| <<function-call-operator, Function Call>>                 | <<painless-operators-general, General>>     | ()          | 1            | left -> right\n| <<array-initialization-operator, Array Initialization>>   | <<painless-operators-array, Array>>         | [] {}       | 1            | left -> right\n| <<array-access-operator, Array Access>>                   | <<painless-operators-array, Array>>         | []          | 1            | left -> right\n| <<array-length-operator, Array Length>>                   | <<painless-operators-array, Array>>         | .           | 1            | left -> right\n| <<list-initialization-operator, List Initialization>>     | <<painless-operators-reference, Reference>> | []          | 1            | left -> right\n| <<list-access-operator, List Access>>                     | <<painless-operators-reference, Reference>> | []          | 1            | left -> right\n| <<map-initialization-operator, Map Initialization>>       | <<painless-operators-reference, Reference>> | [:]         | 1            | left -> right\n| <<map-access-operator, Map Access>>                       | <<painless-operators-reference, Reference>> | []          | 1            | left -> right\n| <<post-increment-operator, Post Increment>>               | <<painless-operators-numeric, Numeric>>     | ++          | 1            | left -> right\n| <<post-decrement-operator, Post Decrement>>               | <<painless-operators-numeric, Numeric>>     | --          | 1            | left -> right\n| <<pre-increment-operator, Pre Increment>>                 | <<painless-operators-numeric, Numeric>>     | ++          | 2            | right -> left\n| <<pre-decrement-operator, Pre Decrement>>                 | <<painless-operators-numeric, Numeric>>     | --          | 2            | right -> left\n| <<unary-positive-operator, Unary Positive>>               | <<painless-operators-numeric, Numeric>>     | +           | 2            | right -> left\n| <<unary-negative-operator, Unary Negative>>               | <<painless-operators-numeric, Numeric>>     | -           | 2            | right -> left\n| <<boolean-not-operator, Boolean Not>>                     | <<painless-operators-boolean, Boolean>>     | !           | 2            | right -> left\n| <<bitwise-not-operator, Bitwise Not>>                     | <<painless-operators-numeric, Numeric>>     | ~           | 2            | right -> left\n| <<cast-operator, Cast>>                                   | <<painless-operators-general, General>>     | ()          | 3            | right -> left\n| <<new-instance-operator, New Instance>>                   | <<painless-operators-reference, Reference>> | new ()      | 3            | right -> left\n| <<new-array-operator, New Array>>                         | <<painless-operators-array, Array>>         | new []      | 3            | right -> left\n| <<multiplication-operator, Multiplication>>               | <<painless-operators-numeric, Numeric>>     | *           | 4            | left -> right\n| <<division-operator, Division>>                           | <<painless-operators-numeric, Numeric>>     | /           | 4            | left -> right\n| <<remainder-operator, Remainder>>                         | <<painless-operators-numeric, Numeric>>     | %           | 4            | left -> right\n| <<string-concatenation-operator, String Concatenation>>   | <<painless-operators-reference, Reference>> | +           | 5            | left -> right\n| <<addition-operator, Addition>>                           | <<painless-operators-numeric, Numeric>>     | +           | 5            | left -> right\n| <<subtraction-operator, Subtraction>>                     | <<painless-operators-numeric, Numeric>>     | -           | 5            | left -> right\n| <<left-shift-operator, Left Shift>>                       | <<painless-operators-numeric, Numeric>>     | <<          | 6            | left -> right\n| <<right-shift-operator, Right Shift>>                     | <<painless-operators-numeric, Numeric>>     | >>          | 6            | left -> right\n| <<unsigned-right-shift-operator, Unsigned Right Shift>>   | <<painless-operators-numeric, Numeric>>     | >>>         | 6            | left -> right\n| <<greater-than-operator, Greater Than>>                   | <<painless-operators-boolean, Boolean>>     | >           | 7            | left -> right\n| <<greater-than-or-equal-operator, Greater Than Or Equal>> | <<painless-operators-boolean, Boolean>>     | >=          | 7            | left -> right\n| <<less-than-operator, Less Than>>                         | <<painless-operators-boolean, Boolean>>     | <           | 7            | left -> right\n| <<less-than-or-equal-operator, Less Than Or Equal>>       | <<painless-operators-boolean, Boolean>>     | +++<=+++    | 7            | left -> right\n| <<instanceof-operator, Instanceof>>                       | <<painless-operators-boolean, Boolean>>     | instanceof  | 8            | left -> right\n| <<equality-equals-operator, Equality Equals>>             | <<painless-operators-boolean, Boolean>>     | ==          | 9            | left -> right\n| <<equality-not-equals-operator, Equality Not Equals>>     | <<painless-operators-boolean, Boolean>>     | !=          | 9            | left -> right\n| <<identity-equals-operator, Identity Equals>>             | <<painless-operators-boolean, Boolean>>     | ===         | 9            | left -> right\n| <<identity-not-equals-operator, Identity Not Equals>>     | <<painless-operators-boolean, Boolean>>     | !==         | 9            | left -> right\n| <<bitwise-and-operator, Bitwise And>>                     | <<painless-operators-numeric, Numeric>>     | &           | 10           | left -> right\n| <<boolean-xor-operator, Boolean Xor>>                     | <<painless-operators-boolean, Boolean>>     | ^           | 11           | left -> right\n| <<bitwise-xor-operator, Bitwise Xor>>                     | <<painless-operators-numeric, Numeric>>     | ^           | 11           | left -> right\n| <<bitwise-or-operator, Bitwise Or>>                       | <<painless-operators-numeric, Numeric>>     | \\|          | 12           | left -> right\n| <<boolean-and-operator, Boolean And>>                     | <<painless-operators-boolean, Boolean>>     | &&          | 13           | left -> right\n| <<boolean-or-operator, Boolean Or>>                       | <<painless-operators-boolean, Boolean>>     | \\|\\|        | 14           | left -> right\n| <<conditional-operator, Conditional>>                     | <<painless-operators-general, General>>     | ? :         | 15           | right -> left\n| <<elvis-operator, Elvis>>                                 | <<painless-operators-general, General>>     | ?:          | 16           | right -> left\n| <<assignment-operator, Assignment>>                       | <<painless-operators-general, General>>     | =           | 17           | right -> left\n| <<compound-assignment-operator, Compound Assignment>>     | <<painless-operators-general, General>>     | $=          | 17           | right -> left\n|====\n"
}