{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.723284",
        "size": 3672,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/multi-fields.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "multi-fields",
        "version": "8.15"
    },
    "doc": "[[multi-fields]]\n=== `fields`\n\nIt is often useful to index the same field in different ways for different\npurposes. This is the purpose of _multi-fields_. For instance, a `string`\nfield could be mapped as a `text` field for full-text\nsearch, and as a `keyword` field for sorting or aggregations:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"city\": {\n        \"type\": \"text\",\n        \"fields\": {\n          \"raw\": { <1>\n            \"type\":  \"keyword\"\n          }\n        }\n      }\n    }\n  }\n}\n\nPUT my-index-000001/_doc/1\n{\n  \"city\": \"New York\"\n}\n\nPUT my-index-000001/_doc/2\n{\n  \"city\": \"York\"\n}\n\nGET my-index-000001/_search\n{\n  \"query\": {\n    \"match\": {\n      \"city\": \"york\" <2>\n    }\n  },\n  \"sort\": {\n    \"city.raw\": \"asc\" <3>\n  },\n  \"aggs\": {\n    \"Cities\": {\n      \"terms\": {\n        \"field\": \"city.raw\" <3>\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n<1> The `city.raw` field is a `keyword` version of the `city` field.\n<2> The `city` field can be used for full text search.\n<3> The `city.raw` field can be used for sorting and aggregations\n\nYou can add multi-fields to an existing field using the\n<<indices-put-mapping,update mapping API>>.\n\nWARNING: If an index (or data stream) contains documents when you add a\nmulti-field, those documents will not have values for the new multi-field. You\ncan populate the new multi-field with the <<picking-up-a-new-property,update by\nquery API>>.\n\nA multi-field mapping is completely separate from the parent field's mapping. A\nmulti-field doesn't inherit any mapping options from its parent field.\nMulti-fields don't change the original `_source` field.\n\n==== Multi-fields with multiple analyzers\n\nAnother use case of multi-fields is to analyze the same field in different\nways for better relevance. For instance we could index a field with the\n<<analysis-standard-analyzer,`standard` analyzer>> which breaks text up into\nwords, and again with the <<english-analyzer,`english` analyzer>>\nwhich stems words into their root form:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"text\": { <1>\n        \"type\": \"text\",\n        \"fields\": {\n          \"english\": { <2>\n            \"type\":     \"text\",\n            \"analyzer\": \"english\"\n          }\n        }\n      }\n    }\n  }\n}\n\nPUT my-index-000001/_doc/1\n{ \"text\": \"quick brown fox\" } <3>\n\nPUT my-index-000001/_doc/2\n{ \"text\": \"quick brown foxes\" } <3>\n\nGET my-index-000001/_search\n{\n  \"query\": {\n    \"multi_match\": {\n      \"query\": \"quick brown foxes\",\n      \"fields\": [ <4>\n        \"text\",\n        \"text.english\"\n      ],\n      \"type\": \"most_fields\" <4>\n    }\n  }\n}\n--------------------------------------------------\n\n<1> The `text` field uses the `standard` analyzer.\n<2> The `text.english` field uses the `english` analyzer.\n<3> Index two documents, one with `fox` and the other with `foxes`.\n<4> Query both the `text` and `text.english` fields and combine the scores.\n\nThe `text` field contains the term `fox` in the first document and `foxes` in\nthe second document. The `text.english` field contains `fox` for both\ndocuments, because `foxes` is stemmed to `fox`.\n\nThe query string is also analyzed by the `standard` analyzer for the `text`\nfield, and by the `english` analyzer for the `text.english` field. The\nstemmed field allows a query for `foxes` to also match the document containing\njust `fox`. This allows us to match as many documents as possible. By also\nquerying the unstemmed `text` field, we improve the relevance score of the\ndocument which matches `foxes` exactly.\n"
}