{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.425074",
        "size": 14895,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-shards.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "cat-shards",
        "version": "8.15"
    },
    "doc": "[[cat-shards]]\n=== cat shards API\n\n++++\n<titleabbrev>cat shards</titleabbrev>\n++++\n\n[IMPORTANT]\n====\ncat APIs are only intended for human consumption using the command line or {kib}\nconsole.\nThey are _not_ intended for use by applications. For application \nconsumption, use the <<cluster-state,cluster state API>>.\n====\n\nThe `shards` command is the detailed view of all nodes' shard <<shard-allocation-relocation-recovery,allocation>>.\nIt will tell you if the shard is a primary or replica, the number of docs, the \nbytes it takes on disk, the node where it's located, and if the shard is \ncurrently <<shard-allocation-relocation-recovery,recovering>>.\n\nFor <<data-streams,data streams>>, the API returns information about the stream's backing indices.\n\n[[cat-shards-api-request]]\n==== {api-request-title}\n\n`GET /_cat/shards/<target>`\n\n`GET /_cat/shards`\n\n[[cat-shards-api-prereqs]]\n==== {api-prereq-title}\n\n* If the {es} {security-features} are enabled, you must have the `monitor` or\n`manage` <<privileges-list-cluster,cluster privilege>> to use this API.\nYou must also have the `monitor` or `manage` <<privileges-list-indices,index privilege>>\nto view the full information for any data stream, index, or alias you retrieve.\n\n[[cat-shards-path-params]]\n==== {api-path-parms-title}\n\n`<target>`::\n(Optional, string) Comma-separated list of data streams, indices, and aliases used to limit the request.\nSupports wildcards (`*`).\nTo target all data streams and indices, omit this parameter or use `*` or `_all`.\n\n[[cat-shards-query-params]]\n==== {api-query-parms-title}\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=bytes]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=http-format]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=cat-h]\n+\n--\nIf you do not specify which columns to include, the API returns the default columns in the order listed below.\nIf you explicitly specify one or more columns, it only returns the specified columns.\n\nValid columns are:\n\n`index`, `i`, `idx`::\n(Default) Name of the index.\n\n`shard`, `s`, `sh`::\n(Default) Name of the shard.\n\n`prirep`, `p`, `pr`, `primaryOrReplica`::\n(Default) Shard type.\nReturned values are `primary` or `replica`.\n\n`state`, `st`::\n(Default) State of the shard.\nReturned values are:\n+\n* `INITIALIZING`: The shard is recovering from a peer shard or gateway.\n* `RELOCATING`: The shard is relocating.\n* `STARTED`: The shard has started.\n* `UNASSIGNED`: The shard is not assigned to any node.\n\n`docs`, `d`, `dc`::\n(Default) Number of documents in shard, such as `25`.\n\n`store`, `sto`::\n(Default) Disk space used by the shard, such as `5kb`.\n\n`dataset.size`::\n(Default) Disk space used by the shard's dataset, which may or may not be the size on disk, but includes space used by the shard on object storage.\nReported as a size value such as `5kb`.\n\n`ip`::\n(Default) IP address of the node, such as `127.0.1.1`.\n\n`id`::\n(Default) ID of the node, such as `k0zy`.\n\n`node`, `n`::\n(Default) Node name, such as `I8hydUG`.\n\n`completion.size`, `cs`, `completionSize`::\nSize of completion, such as `0b`.\n\n`dense_vector.value_count`, `dvc`, `denseVectorCount`::\nNumber of indexed dense vectors.\n\n`fielddata.memory_size`, `fm`, `fielddataMemory`::\nUsed fielddata cache memory, such as `0b`.\n\n`fielddata.evictions`, `fe`, `fielddataEvictions`::\nFielddata cache evictions, such as `0`.\n\n`flush.total`, `ft`, `flushTotal`::\nNumber of flushes, such as `1`.\n\n`flush.total_time`, `ftt`, `flushTotalTime`::\nTime spent in flush, such as `1`.\n\n`get.current`, `gc`, `getCurrent`::\nNumber of current get operations, such as `0`.\n\n`get.time`, `gti`, `getTime`::\nTime spent in get, such as `14ms`.\n\n`get.total`, `gto`, `getTotal`::\nNumber of get operations, such as `2`.\n\n`get.exists_time`, `geti`, `getExistsTime`::\nTime spent in successful gets, such as `14ms`.\n\n`get.exists_total`, `geto`, `getExistsTotal`::\nNumber of successful get operations, such as `2`.\n\n`get.missing_time`, `gmti`, `getMissingTime`::\nTime spent in failed gets, such as `0s`.\n\n`get.missing_total`, `gmto`, `getMissingTotal`::\nNumber of failed get operations, such as `1`.\n\n`indexing.delete_current`, `idc`, `indexingDeleteCurrent`::\nNumber of current deletion operations, such as `0`.\n\n`indexing.delete_time`, `idti`, `indexingDeleteTime`::\nTime spent in deletions, such as `2ms`.\n\n`indexing.delete_total`, `idto`, `indexingDeleteTotal`::\nNumber of deletion operations, such as `2`.\n\n`indexing.index_current`, `iic`, `indexingIndexCurrent`::\nNumber of current indexing operations, such as `0`.\n\n`indexing.index_time`, `iiti`, `indexingIndexTime`::\nTime spent in indexing, such as `134ms`.\n\n`indexing.index_total`, `iito`, `indexingIndexTotal`::\nNumber of indexing operations, such as `1`.\n\n`indexing.index_failed`, `iif`, `indexingIndexFailed`::\nNumber of failed indexing operations, such as `0`.\n\n`merges.current`, `mc`, `mergesCurrent`::\nNumber of current merge operations, such as `0`.\n\n`merges.current_docs`, `mcd`, `mergesCurrentDocs`::\nNumber of current merging documents, such as `0`.\n\n`merges.current_size`, `mcs`, `mergesCurrentSize`::\nSize of current merges, such as `0b`.\n\n`merges.total`, `mt`, `mergesTotal`::\nNumber of completed merge operations, such as `0`.\n\n`merges.total_docs`, `mtd`, `mergesTotalDocs`::\nNumber of merged documents, such as `0`.\n\n`merges.total_size`, `mts`, `mergesTotalSize`::\nSize of current merges, such as `0b`.\n\n`merges.total_time`, `mtt`, `mergesTotalTime`::\nTime spent merging documents, such as `0s`.\n\n`query_cache.memory_size`, `qcm`, `queryCacheMemory`::\nUsed query cache memory, such as `0b`.\n\n`query_cache.evictions`, `qce`, `queryCacheEvictions`::\nQuery cache evictions, such as `0`.\n\n`recoverysource.type`, `rs`::\nType of recovery source.\n\n`refresh.total`, `rto`, `refreshTotal`::\nNumber of refreshes, such as `16`.\n\n`refresh.time`, `rti`, `refreshTime`::\nTime spent in refreshes, such as `91ms`.\n\n`search.fetch_current`, `sfc`, `searchFetchCurrent`::\nCurrent fetch phase operations, such as `0`.\n\n`search.fetch_time`, `sfti`, `searchFetchTime`::\nTime spent in fetch phase, such as `37ms`.\n\n`search.fetch_total`, `sfto`, `searchFetchTotal`::\nNumber of fetch operations, such as `7`.\n\n`search.open_contexts`, `so`, `searchOpenContexts`::\nOpen search contexts, such as `0`.\n\n`search.query_current`, `sqc`, `searchQueryCurrent`::\nCurrent query phase operations, such as `0`.\n\n`search.query_time`, `sqti`, `searchQueryTime`::\nTime spent in query phase, such as `43ms`.\n\n`search.query_total`, `sqto`, `searchQueryTotal`::\nNumber of query operations, such as `9`.\n\n`search.scroll_current`, `scc`, `searchScrollCurrent`::\nOpen scroll contexts, such as `2`.\n\n`search.scroll_time`, `scti`, `searchScrollTime`::\nTime scroll contexts held open, such as `2m`.\n\n`search.scroll_total`, `scto`, `searchScrollTotal`::\nCompleted scroll contexts, such as `1`.\n\n`segments.count`, `sc`, `segmentsCount`::\nNumber of segments, such as `4`.\n\n`segments.memory`, `sm`, `segmentsMemory`::\nMemory used by segments, such as `1.4kb`.\n\n`segments.index_writer_memory`, `siwm`, `segmentsIndexWriterMemory`::\nMemory used by index writer, such as `18mb`.\n\n`segments.version_map_memory`, `svmm`, `segmentsVersionMapMemory`::\nMemory used by version map, such as `1.0kb`.\n\n`segments.fixed_bitset_memory`, `sfbm`, `fixedBitsetMemory`::\nMemory used by fixed bit sets for nested object field types and type filters for types referred in <<parent-join,`join`>> fields, such as `1.0kb`.\n\n`seq_no.global_checkpoint`, `sqg`, `globalCheckpoint`::\nGlobal checkpoint.\n\n`seq_no.local_checkpoint`, `sql`, `localCheckpoint`::\nLocal checkpoint.\n\n`seq_no.max`, `sqm`, `maxSeqNo`::\nMaximum sequence number.\n\n`sparse_vector.value_count`, `svc`, `sparseVectorCount`::\nNumber of indexed <<sparse-vector, sparse vectors>>.\n\n`suggest.current`, `suc`, `suggestCurrent`::\nNumber of current suggest operations, such as `0`.\n\n`suggest.time`, `suti`, `suggestTime`::\nTime spent in suggest, such as `0`.\n\n`suggest.total`, `suto`, `suggestTotal`::\nNumber of suggest operations, such as `0`.\n\n`sync_id`::\nSync ID of the shard.\n\n`unassigned.at`, `ua`::\nTime at which the shard became unassigned in\n{wikipedia}/List_of_UTC_time_offsets[Coordinated Universal Time (UTC)].\n\n`unassigned.details`, `ud`::\nDetails about why the shard became unassigned.\nThis does not explain why the shard is currently unassigned.\nTo understand why a shard is not assigned, use the <<cluster-allocation-explain>> API.\n\n`unassigned.for`, `uf`::\nTime at which the shard was requested to be unassigned in\n{wikipedia}/List_of_UTC_time_offsets[Coordinated Universal Time (UTC)].\n\n[[reason-unassigned]]\n`unassigned.reason`, `ur`::\nIndicates the reason for the last change to the state of this unassigned shard.\nThis does not explain why the shard is currently unassigned.\nTo understand why a shard is not assigned, use the <<cluster-allocation-explain>> API.\nReturned values include:\n+\n* `ALLOCATION_FAILED`: Unassigned as a result of a failed allocation of the shard.\n* `CLUSTER_RECOVERED`: Unassigned as a result of a full cluster recovery.\n* `DANGLING_INDEX_IMPORTED`: Unassigned as a result of importing a dangling index.\n* `EXISTING_INDEX_RESTORED`: Unassigned as a result of restoring into a closed index.\n* `FORCED_EMPTY_PRIMARY`: The shard's allocation was last modified by forcing an empty primary using the <<cluster-reroute>> API.\n* `INDEX_CLOSED`: Unassigned because the index was closed.\n* `INDEX_CREATED`: Unassigned as a result of an API creation of an index.\n* `INDEX_REOPENED`: Unassigned as a result of opening a closed index.\n* `MANUAL_ALLOCATION`: The shard's allocation was last modified by the <<cluster-reroute>> API.\n* `NEW_INDEX_RESTORED`: Unassigned as a result of restoring into a new index.\n* `NODE_LEFT`: Unassigned as a result of the node hosting it leaving the cluster.\n* `NODE_RESTARTING`: Similar to `NODE_LEFT`, except that the node was registered as restarting using the <<node-lifecycle-api,Node shutdown API>>.\n* `PRIMARY_FAILED`: The shard was initializing as a replica, but the primary shard failed before the initialization completed.\n* `REALLOCATED_REPLICA`: A better replica location is identified and causes the existing replica allocation to be cancelled.\n* `REINITIALIZED`: When a shard moves from started back to initializing.\n* `REPLICA_ADDED`: Unassigned as a result of explicit addition of a replica.\n* `REROUTE_CANCELLED`: Unassigned as a result of explicit cancel reroute command.\n\n--\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=help]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=master-timeout]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=cat-s]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=time]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=cat-v]\n\n[[cat-shards-api-example]]\n==== {api-examples-title}\n\n[[cat-shards-api-example-single]]\n===== Example with a single data stream or index\n\n[source,console]\n---------------------------------------------------------------------------\nGET _cat/shards\n---------------------------------------------------------------------------\n// TEST[setup:my_index]\n\nThe API returns the following response:\n\n[source,txt]\n---------------------------------------------------------------------------\nmy-index-000001 0 p STARTED 3014 31.1mb 192.168.56.10 H5dfFeA\n---------------------------------------------------------------------------\n// TESTRESPONSE[s/3014/\\\\d+/]\n// TESTRESPONSE[s/31.1mb/\\\\d+(\\.\\\\d+)?[kmg]?b/]\n// TESTRESPONSE[s/192.168.56.10/.*/]\n// TESTRESPONSE[s/H5dfFeA/node-0/ non_json]\n\n[[cat-shards-api-example-wildcard]]\n===== Example with a wildcard pattern\n\nIf your cluster has many shards, you can use a wildcard pattern in the\n`<target>` path parameter to limit the API request.\n\nThe following request returns information for any data streams or indices beginning with `my-index-`.\n\n[source,console]\n---------------------------------------------------------------------------\nGET _cat/shards/my-index-*\n---------------------------------------------------------------------------\n// TEST[setup:my_index]\n\nThe API returns the following response:\n\n[source,txt]\n---------------------------------------------------------------------------\nmy-index-000001 0 p STARTED 3014 31.1mb 192.168.56.10 H5dfFeA\n---------------------------------------------------------------------------\n// TESTRESPONSE[s/3014/\\\\d+/]\n// TESTRESPONSE[s/31.1mb/\\\\d+(\\.\\\\d+)?[kmg]?b/]\n// TESTRESPONSE[s/192.168.56.10/.*/]\n// TESTRESPONSE[s/H5dfFeA/node-0/ non_json]\n\n\n[[relocation]]\n===== Example with a relocating shard\n\n[source,console]\n---------------------------------------------------------------------------\nGET _cat/shards\n---------------------------------------------------------------------------\n// TEST[skip:for now, relocation cannot be recreated]\n\nThe API returns the following response:\n\n[source,txt]\n---------------------------------------------------------------------------\nmy-index-000001 0 p RELOCATING 3014 31.1mb 192.168.56.10 H5dfFeA -> -> 192.168.56.30 bGG90GE\n---------------------------------------------------------------------------\n// TESTRESPONSE[non_json]\n\nThe `RELOCATING` value in `state` column indicates the index shard is relocating.\n\n[[states]]\n===== Example with a shard states\n\nBefore a shard is available for use, it goes through an `INITIALIZING` state.\nYou can use the cat shards API to see which shards are initializing.\n\n[source,console]\n---------------------------------------------------------------------------\nGET _cat/shards\n---------------------------------------------------------------------------\n// TEST[skip:there is no guarantee to test for shards in initializing state]\n\nThe API returns the following response:\n\n[source,txt]\n---------------------------------------------------------------------------\nmy-index-000001 0 p STARTED      3014 31.1mb 192.168.56.10 H5dfFeA\nmy-index-000001 0 r INITIALIZING    0 14.3mb 192.168.56.30 bGG90GE\n---------------------------------------------------------------------------\n// TESTRESPONSE[non_json]\n\n===== Example with reasons for unassigned shards\n\nThe following request returns the `unassigned.reason` column, which indicates why a shard is unassigned.\n\n[source,console]\n---------------------------------------------------------------------------\nGET _cat/shards?h=index,shard,prirep,state,unassigned.reason\n---------------------------------------------------------------------------\n// TEST[skip:for now]\n\nThe API returns the following response:\n\n[source,txt]\n---------------------------------------------------------------------------\nmy-index-000001 0 p STARTED    3014 31.1mb 192.168.56.10 H5dfFeA\nmy-index-000001 0 r STARTED    3014 31.1mb 192.168.56.30 bGG90GE\nmy-index-000001 0 r STARTED    3014 31.1mb 192.168.56.20 I8hydUG\nmy-index-000001 0 r UNASSIGNED ALLOCATION_FAILED\n---------------------------------------------------------------------------\n// TESTRESPONSE[non_json]\n"
}