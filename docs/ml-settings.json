{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.700081",
        "size": 12946,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-settings.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": false,
        "title": "ml-settings",
        "version": "8.15"
    },
    "doc": "\n[role=\"xpack\"]\n[[ml-settings]]\n=== Machine learning settings in Elasticsearch\n++++\n<titleabbrev>Machine learning settings</titleabbrev>\n++++\n\n[[ml-settings-description]]\n// tag::ml-settings-description-tag[]\nYou do not need to configure any settings to use {ml}. It is enabled by default.\n\nIMPORTANT: {ml-cap} uses SSE4.2 instructions on x86_64 machines, so it works only\non x86_64 machines whose CPUs {wikipedia}/SSE4#Supporting_CPUs[support] SSE4.2.\n(This limitation does not apply to aarch64 machines.) If you run {es} on older\nx86_64 hardware, you must disable {ml} (by setting `xpack.ml.enabled` to `false`).\nIn this situation you should not attempt to use {ml} functionality in your cluster\nat all.\n\n// end::ml-settings-description-tag[]\n\n[discrete]\n[[general-ml-settings]]\n==== General machine learning settings\n\n`node.roles: [ ml ]`::\n(<<static-cluster-setting,Static>>) Set `node.roles` to contain `ml` to identify\nthe node as a _{ml} node_. If you want to run {ml} jobs, there must be at least\none {ml} node in your cluster. \n+\nIf you set `node.roles`, you must explicitly specify all the required roles for\nthe node. To learn more, refer to <<modules-node>>.\n+\n[IMPORTANT]\n====\n* On dedicated coordinating nodes or dedicated master nodes, do not set\nthe `ml` role.\n* It is strongly recommended that dedicated {ml} nodes also have the\n`remote_cluster_client` role; otherwise, {ccs} fails when used in {ml} jobs or\n{dfeeds}. See <<remote-node>>.\n====\n\n`xpack.ml.enabled`::\n(<<static-cluster-setting,Static>>) The default value (`true`) enables {ml} APIs\non the node.\n+\nIMPORTANT: If you want to use {ml-features} in your cluster, it is recommended\nthat you use the default value for this setting on all nodes.\n+\nIf set to `false`, the {ml} APIs are disabled on the node. For example, the node\ncannot open jobs, start {dfeeds}, receive transport (internal) communication\nrequests, or requests from clients (including {kib}) related to {ml} APIs. If\n`xpack.ml.enabled` is not set uniformly across all nodes in your cluster then you\nare likely to experience problems with {ml} functionality not fully working.\n+\nYou must not use any {ml} functionality from ingest pipelines if `xpack.ml.enabled`\nis `false` on any node. Before setting `xpack.ml.enabled` to `false` on a node,\nconsider whether you really meant to just exclude `ml` from the `node.roles`.\nExcluding `ml` from the <<node-roles,`node.roles`>> will stop the node from\nrunning {ml} jobs and NLP models, but it will still be aware that {ml} functionality\nexists. Setting `xpack.ml.enabled` to `false` should be reserved for situations\nwhere you cannot use {ml} functionality at all in your cluster due to hardware\nlimitations as described <<ml-settings-description,above>>.\n\n`xpack.ml.inference_model.cache_size`::\n(<<static-cluster-setting,Static>>) The maximum inference cache size allowed.\nThe inference cache exists in the JVM heap on each ingest node. The cache\naffords faster processing times for the `inference` processor. The value can be\na static byte sized value (such as `2gb`) or a percentage of total allocated\nheap. Defaults to `40%`. See also <<model-inference-circuit-breaker>>.\n\n[[xpack-interference-model-ttl]]\n// tag::interference-model-ttl-tag[]\n`xpack.ml.inference_model.time_to_live` {ess-icon}::\n(<<static-cluster-setting,Static>>) The time to live (TTL) for trained models in \nthe inference model cache. The TTL is calculated from last access. Users of the \ncache (such as the inference processor or inference aggregator) cache a model on\nits first use and reset the TTL on every use. If a cached model is not accessed\nfor the duration of the TTL, it is flagged for eviction from the cache. If a \ndocument is processed later, the model is again loaded into the cache. To update \nthis setting in {ess}, see\n{cloud}/ec-add-user-settings.html[Add {es} user settings]. Defaults to `5m`.\n// end::interference-model-ttl-tag[]\n\n`xpack.ml.max_inference_processors`::\n(<<cluster-update-settings,Dynamic>>) The total number of `inference` type\nprocessors allowed across all ingest pipelines. Once the limit is reached,\nadding an `inference` processor to a pipeline is disallowed. Defaults to `50`.\n\n`xpack.ml.max_machine_memory_percent`::\n(<<cluster-update-settings,Dynamic>>) The maximum percentage of the machine's\nmemory that {ml} may use for running analytics processes. These processes are\nseparate to the {es} JVM. The limit is based on the total memory of the machine, \nnot current free memory. Jobs are not allocated to a node if doing so would\ncause the estimated memory use of {ml} jobs to exceed the limit. When the\n{operator-feature} is enabled, this setting can be updated only by operator\nusers. The minimum value is `5`; the maximum value is `200`. Defaults to `30`.\n+\n--\nTIP: Do not configure this setting to a value higher than the amount of memory\nleft over after running the {es} JVM unless you have enough swap space to\naccommodate it and have determined this is an appropriate configuration for a\nspecialist use case. The maximum setting value is for the special case where it\nhas been determined that using swap space for {ml} jobs is acceptable. The\ngeneral best practice is to not use swap on {es} nodes.\n\n--\n\n`xpack.ml.max_model_memory_limit`::\n(<<cluster-update-settings,Dynamic>>) The maximum `model_memory_limit` property\nvalue that can be set for any {ml} jobs in this cluster. If you try to create a\njob with a `model_memory_limit` property value that is greater than this setting\nvalue, an error occurs. Existing jobs are not affected when you update this\nsetting. If this setting is `0` or unset, there is no maximum\n`model_memory_limit` value. If there are no nodes that meet the memory\nrequirements for a job, this lack of a maximum memory limit means it's possible\nto create jobs that cannot be assigned to any available nodes. For more\ninformation about the `model_memory_limit` property, see\n<<ml-put-job,Create {anomaly-jobs}>> or <<put-dfanalytics>>. Defaults to `0` if\n`xpack.ml.use_auto_machine_memory_percent` is `false`. If\n`xpack.ml.use_auto_machine_memory_percent` is `true` and\n`xpack.ml.max_model_memory_limit` is not explicitly set then it will default to\nthe largest `model_memory_limit` that could be assigned in the cluster.\n\n[[xpack.ml.max_open_jobs]]\n`xpack.ml.max_open_jobs`::\n(<<cluster-update-settings,Dynamic>>) The maximum number of jobs that can run\nsimultaneously on a node. In this context, jobs include both {anomaly-jobs} and \n{dfanalytics-jobs}. The maximum number of jobs is also constrained by memory \nusage. Thus if the estimated memory usage of the jobs would be higher than \nallowed, fewer jobs will run on a node. Prior to version 7.1, this setting was a \nper-node non-dynamic setting. It became a cluster-wide dynamic setting in\nversion 7.1. As a result, changes to its value after node startup are used only \nafter every node in the cluster is running version 7.1 or higher. The minimum\nvalue is `1`; the maximum value is `512`. Defaults to `512`.\n\n`xpack.ml.nightly_maintenance_requests_per_second`::\n(<<cluster-update-settings,Dynamic>>) The rate at which the nightly maintenance \ntask deletes expired model snapshots and results. The setting is a proxy to the\n<<docs-delete-by-query-throttle,`requests_per_second`>> parameter used in the \ndelete by query requests and controls throttling. When the {operator-feature} is \nenabled, this setting can be updated only by operator users. Valid values must\nbe greater than `0.0` or equal to `-1.0`, where `-1.0` means a default value is\nused. Defaults to `-1.0`\n\n`xpack.ml.node_concurrent_job_allocations`::\n(<<cluster-update-settings,Dynamic>>) The maximum number of jobs that can\nconcurrently be in the `opening` state on each node. Typically, jobs spend a\nsmall amount of time in this state before they move to `open` state. Jobs that\nmust restore large models when they are opening spend more time in the `opening`\nstate. When the {operator-feature} is enabled, this setting can be updated only \nby operator users. Defaults to `2`.\n\n[discrete]\n[[advanced-ml-settings]]\n==== Advanced machine learning settings\n\nThese settings are for advanced use cases; the default values are generally\nsufficient:\n\n`xpack.ml.enable_config_migration`::\n(<<cluster-update-settings,Dynamic>>) Reserved. When the {operator-feature} is \nenabled, this setting can be updated only by operator users.\n\n`xpack.ml.max_anomaly_records`::\n(<<cluster-update-settings,Dynamic>>) The maximum number of records that are\noutput per bucket. Defaults to `500`.\n\n`xpack.ml.max_lazy_ml_nodes`::\n(<<cluster-update-settings,Dynamic>>) The number of lazily spun up {ml} nodes.\nUseful in situations where {ml} nodes are not desired until the first {ml} job\nopens. If the current number of {ml} nodes is greater than or equal to this \nsetting, it is assumed that there are no more lazy nodes available as the\ndesired number of nodes have already been provisioned. If a job is opened and \nthis setting has a value greater than zero and there are no nodes that can\naccept the job, the job stays in the `OPENING` state until a new {ml} node is \nadded to the cluster and the job is assigned to run on that node. When the\n{operator-feature} is enabled, this setting can be updated only by operator\nusers. Defaults to `0`.\n+\nIMPORTANT: This setting assumes some external process is capable of adding {ml}\nnodes to the cluster. This setting is only useful when used in conjunction with\nsuch an external process.\n\n`xpack.ml.max_ml_node_size`::\n(<<cluster-update-settings,Dynamic>>)\nThe maximum node size for {ml} nodes in a deployment that supports automatic\ncluster scaling. If you set it to the maximum possible size of future {ml} nodes,\nwhen a {ml} job is assigned to a lazy node it can check (and fail quickly) when\nscaling cannot support the size of the job. When the {operator-feature} is\nenabled, this setting can be updated only by operator users. Defaults to `0b`,\nwhich means it will be assumed that automatic cluster scaling can add \narbitrarily large nodes to the cluster. \n\n[[xpack.ml.model_repository]]\n`xpack.ml.model_repository`::\n(<<cluster-update-settings,Dynamic>>)\nThe location of the {ml} model repository where the model artifact files are \navailable in case of a model installation in a restricted or closed network. \n`xpack.ml.model_repository` can be a string of a file location or an HTTP/HTTPS \nserver. Example values are:\n+\n--\n```\nxpack.ml.model_repository: file://${path.home}/config/models/\n```\nor\n```\nxpack.ml.model_repository: https://my-custom-backend\n```\nIf `xpack.ml.model_repository` is a file location, it must point to a \nsubdirectory of the `config` directory of {es}.\n--\n\n`xpack.ml.persist_results_max_retries`::\n(<<cluster-update-settings,Dynamic>>) The maximum number of times to retry bulk\nindexing requests that fail while processing {ml} results. If the limit is\nreached, the {ml} job stops processing data and its status is `failed`. When the\n{operator-feature} is enabled, this setting can be updated only by operator\nusers. The minimum value is `0`; the maximum value is `50`. Defaults to `20`.\n\n`xpack.ml.process_connect_timeout`::\n(<<cluster-update-settings,Dynamic>>) The connection timeout for {ml} processes\nthat run separately from the {es} JVM. When such processes are started they must\nconnect to the {es} JVM. If the process does not connect within the time period\nspecified by this setting then the process is assumed to have failed. When the\n{operator-feature} is enabled, this setting can be updated only by operator\nusers. The minimum value is `5s`. Defaults to `10s`.\n\n`xpack.ml.use_auto_machine_memory_percent`::\n(<<cluster-update-settings,Dynamic>>) If this setting is `true`, the\n`xpack.ml.max_machine_memory_percent` setting is ignored. Instead, the maximum\npercentage of the machine's memory that can be used for running {ml} analytics\nprocesses is calculated automatically and takes into account the total node size\nand the size of the JVM on the node. When the {operator-feature} is enabled, this\nsetting can be updated only by operator users. The default value is `false`.\n+\n--\n[IMPORTANT]\n====\n* If you do not have dedicated {ml} nodes (that is to say, the node has\nmultiple roles), do not enable this setting. Its calculations assume that {ml}\nanalytics are the main purpose of the node.\n* The calculation assumes that dedicated {ml} nodes have at least\n`256MB` memory reserved outside of the JVM. If you have tiny {ml}\nnodes in your cluster, you shouldn't use this setting.\n====\n--\n+\nIf this setting is `true` it also affects the default value for\n`xpack.ml.max_model_memory_limit`. In this case `xpack.ml.max_model_memory_limit`\ndefaults to the largest size that could be assigned in the current cluster.\n\n[discrete]\n[[model-inference-circuit-breaker]]\n==== {ml-cap} circuit breaker settings\n\nThe relevant circuit breaker settings can be found in the <<circuit-breakers-page-model-inference, Circuit Breakers page>>.\n\n"
}