{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.373584",
        "size": 4114,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/role-mapping-resources.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "role-mapping-resources",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[role-mapping-resources]]\n=== Role mapping resources\n\nA role mapping resource has the following properties: \n\n`enabled`::\n(Boolean)  Mappings that have `enabled` set to `false` are ignored when role\nmapping is performed.\n\n`metadata`::\n(object) Additional metadata that helps define which roles are assigned to each\nuser. Within the `metadata` object, keys beginning with `_` are reserved for\nsystem usage.\n\n`roles`::\n(list) A list of roles that are granted to the users that match the role mapping\nrules.\n\n`rules`::\n(object) The rules that determine which users should be matched by the mapping.\nA rule is a logical condition that is expressed by using a JSON DSL. The DSL supports the following rule types:\n`any`::: \n(array of rules) If *any* of its children are true, it evaluates to `true`.\n`all`::: \n(array of rules) If *all* of its children are true, it evaluates to `true`.\n`field`::: \n(object) See <<mapping-roles-rule-field>>. \n`except`:::\n(object) A single rule as an object. Only valid as a child of an `all` rule. If \nits child is `false`, the `except` is `true`.\n\n\n[discrete]\n[[mapping-roles-rule-field]]\n==== Field rules\n\nThe `field` rule is the primary building block for a role mapping expression.\nIt takes a single object as its value and that object must contain a single\nmember with key _F_ and value _V_. The field rule looks up the value of _F_\nwithin the user object and then tests whether the user value _matches_ the\nprovided value _V_.\n\nThe value specified in the field rule can be one of the following types:\n[cols=\"2,5,3m\"]\n|=======================\n| Type               | Description | Example\n\n| Simple String      | Exactly matches the provided value.                             | \"esadmin\"\n| Wildcard String    | Matches the provided value using a wildcard.                    | \"*,dc=example,dc=com\"\n| Regular Expression | Matches the provided value using a\n                       <<regexp-syntax,Lucene regexp>>. | \"/.\\*-admin[0-9]*/\"\n| Number             | Matches an equivalent numerical value.                          | 7\n| Null               | Matches a null or missing value.                                | null\n| Array              | Tests each element in the array in\n                      accordance with the above definitions.\n                      If _any_ of elements match, the match is successful.             | [\"admin\", \"operator\"]\n|=======================\n\n[discrete]\n===== User fields\n\nThe _user object_ against which rules are evaluated has the following fields:\n\n`username`::\n(string) The username by which the {es} {security-features} knows this user. For\nexample, `\"username\": \"jsmith\"`.\n`dn`::\n(string) The _Distinguished Name_ of the user. For example, `\"dn\": \"cn=jsmith,ou=users,dc=example,dc=com\",`.\n`groups`::\n(array of strings) The groups to which the user belongs. For example, `\"groups\" : [ \"cn=admin,ou=groups,dc=example,dc=com\",\"cn=esusers,ou=groups,dc=example,dc=com ]`.\n`metadata`::\n(object) Additional metadata for the user. This can include a variety of key-value pairs. When referencing metadata fields in role mapping rules, use the dot notation to specify the key within the metadata object. If the key contains special characters such as parentheses, dots, or spaces, you must escape these characters using backslashes (`\\`). For example, `\"metadata\": { \"cn\": \"John Smith\" }`.\n`realm`::  \n(object) The realm that authenticated the user. The only field in this object is the realm name. For example, `\"realm\": { \"name\": \"ldap1\" }`.\n\nThe `groups` field is multi-valued; a user can belong to many groups. When a\n`field` rule is applied against a multi-valued field, it is considered to match\nif _at least one_ of the member values matches. For example, the following rule\nmatches any user who is a member of the `admin` group, regardless of any\nother groups they belong to:\n\n[source,js]\n------------------------------------------------------------\n{ \"field\" : { \"groups\" : \"admin\" } }\n------------------------------------------------------------\n// NOTCONSOLE\n\nFor additional realm-specific details, see\n<<ldap-role-mapping>>.\n"
}