{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.078583",
        "size": 3081,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/audit-log-output.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": false,
        "title": "audit-log-output",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[audit-log-output]]\n=== Logfile audit output\n\nThe `logfile` audit output is the only output for auditing. It writes data to\nthe `<clustername>_audit.json` file in the logs directory.\n\nNOTE: If you overwrite the `log4j2.properties` and do not specify appenders for\nany of the audit trails, audit events are forwarded to the root appender, which\nby default points to the `elasticsearch.log` file.\n\n[discrete]\n[[audit-log-entry-format]]\n=== Log entry format\n\nThe audit events are formatted as JSON documents, and each event is printed on a separate\nline in the `<clustername>_audit.json` file. The entries themselves do not contain the\nend-of-line delimiter.\nThe audit event JSON format is somewhat particular, as *most* fields follow a dotted\nname syntax, are ordered, and contain non-null string values. This format creates a\nstructured columnar aspect, similar to a CSV, that can be more easily inspected visually\n(compared to an equivalent nested JSON document).\n\nThere are however a few attributes that are exceptions to the above format. The `put`,\n`delete`, `change`, `create` and `invalidate` attributes, which are only present for\nevents with the `event.type: \"security_config_change\"` attribute, contain the *nested JSON*\nrepresentation of the security change taking effect. The contents of the security config change\nare hence not displayed as top-level dot-named fields in the audit event document. That's because\nthe fields are specific to the particular kind of security change and do not show up in\nany other audit events. The benefits of a columnar format are therefore much more limited; the\nspace-saving benefits of the nested structure is the favoured trade-off in this case.\n\nWhen the `request.body` attribute is present (see <<auditing-search-queries>>), it contains a\nstring value containing the full HTTP request body, escaped as per the JSON RFC 4677.\n\nThere is a list of <<audit-event-types, audit event types>> specifying the\nset of fields, as well as examples, for each entry type.\n\n[discrete]\n[[audit-log-settings]]\n=== Logfile output settings\n\nThe events and some other information about what gets logged can be\ncontrolled using settings in the `elasticsearch.yml` file. See\n<<event-audit-settings>> and\n<<node-audit-settings>>.\n\nIMPORTANT: Be advised that *sensitive data may be audited in plain text* when including\nthe request body in audit events, even though all the security APIs, such as those that\nchange the user\u2019s password, have the credentials filtered out when audited.\n\nYou can also configure how the logfile is written in the `log4j2.properties`\nfile located in `ES_PATH_CONF` (or check out the relevant portion of\nthe https://github.com/elastic/elasticsearch/blob/{branch}/x-pack/plugin/core/src/main/config/log4j2.properties[log4j2.properties in the sources]).\nBy default, audit information is appended to the\n`<clustername>_audit.json` file located in the standard Elasticsearch `logs` directory\n(typically located at `$ES_HOME/logs`).\nThe file is also rotated and archived daily or upon reaching the 1GB file size limit.\n"
}