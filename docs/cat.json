{
    "meta": {
        "timestamp": "2024-11-01T03:07:08.824274",
        "size": 7112,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/cat.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "cat",
        "version": "8.15"
    },
    "doc": "[[cat]]\n== Compact and aligned text (CAT) APIs\n\n[\"float\",id=\"intro\"]\n=== Introduction\n\nJSON is great... for computers. Even if it's pretty-printed, trying\nto find relationships in the data is tedious. Human eyes, especially\nwhen looking at a terminal, need compact and aligned text. The compact and\naligned text (CAT) APIs aim to meet this need.\n\n[IMPORTANT]\n====\ncat APIs are only intended for human consumption using the\n{kibana-ref}/console-kibana.html[Kibana console] or command line. They are _not_\nintended for use by applications. For application consumption, we recommend\nusing a corresponding JSON API.\n====\n\nAll the cat commands accept a query string parameter `help` to see all\nthe headers and info they provide, and the `/_cat` command alone lists all\nthe available commands.\n\n[discrete]\n[[common-parameters]]\n=== Common parameters\n\n[discrete]\n[[verbose]]\n==== Verbose\n\nEach of the commands accepts a query string parameter `v` to turn on\nverbose output. For example:\n\n[source,console]\n----\nGET _cat/master?v=true\n----\n\nMight respond with:\n\n[source,txt]\n----\nid                     host      ip        node\nu_n93zwxThWHi1PDBJAGAg 127.0.0.1 127.0.0.1 u_n93zw\n----\n// TESTRESPONSE[s/u_n93zw(xThWHi1PDBJAGAg)?/.+/ non_json]\n\n[discrete]\n[[help]]\n==== Help\n\nEach of the commands accepts a query string parameter `help` which will\noutput its available columns. For example:\n\n[source,console]\n----\nGET _cat/master?help\n----\n\nMight respond with:\n\n[source,txt]\n----\nid   |   | node id\nhost | h | host name\nip   |   | ip address\nnode | n | node name\n----\n// TESTRESPONSE[s/[|]/[|]/ non_json]\n\nNOTE: `help` is not supported if any optional url parameter is used.\nFor example `GET _cat/shards/my-index-000001?help` or `GET _cat/indices/my-index-*?help`\nresults in an error. Use `GET _cat/shards?help` or `GET _cat/indices?help`\ninstead.\n\n[discrete]\n[[headers]]\n==== Headers\n\nEach of the commands accepts a query string parameter `h` which forces\nonly those columns to appear. For example:\n\n[source,console]\n----\nGET _cat/nodes?h=ip,port,heapPercent,name\n----\n\nResponds with:\n\n[source,txt]\n----\n127.0.0.1 9300 27 sLBaIGK\n----\n// TESTRESPONSE[s/9300 27 sLBaIGK/\\\\d+ \\\\d+ .+/ non_json]\n\nYou can also request multiple columns using simple wildcards like\n`/_cat/thread_pool?h=ip,queue*` to get all headers (or aliases) starting\nwith `queue`.\n\n[discrete]\n[[numeric-formats]]\n==== Numeric formats\n\nMany commands provide a few types of numeric output, either a byte, size\nor a time value. By default, these types are human-formatted,\nfor example, `3.5mb` instead of `3763212`. The human values are not\nsortable numerically, so in order to operate on these values where\norder is important, you can change it.\n\nSay you want to find the largest index in your cluster (storage used\nby all the shards, not number of documents). The `/_cat/indices` API\nis ideal. You only need to add three things to the API request:\n\n. The `bytes` query string parameter with a value of `b` to get byte-level resolution.\n. The `s` (sort) parameter with a value of `store.size:desc` and a comma with `index:asc` to sort the output\nby shard storage descending order and then index name in ascending order.\n. The `v` (verbose) parameter to include column headings in the response.\n\n[source,console]\n----\nGET _cat/indices?bytes=b&s=store.size:desc,index:asc&v=true\n----\n// TEST[setup:my_index_huge]\n// TEST[s/^/PUT my-index-000002\\n{\"settings\": {\"number_of_replicas\": 0}}\\n/]\n// TEST[s/s=store\\.size:desc,index:asc/s=index:asc/]\n\nThe API returns the following response:\n\n[source,txt]\n----\nhealth status index            uuid                   pri rep docs.count docs.deleted store.size pri.store.size dataset.size\nyellow open   my-index-000001  u8FNjxh8Rfy_awN11oDKYQ   1   1       1200            0      72171         72171         72171\ngreen  open   my-index-000002  nYFWZEO7TUiOjLQXBaYJpA   1   0          0            0        230          230            230\n----\n// TESTRESPONSE[s/72171|230/\\\\d+/]\n// TESTRESPONSE[s/u8FNjxh8Rfy_awN11oDKYQ|nYFWZEO7TUiOjLQXBaYJpA/.+/ non_json]\n\nIf you want to change the <<time-units,time units>>, use `time` parameter.\n\nIf you want to change the <<size-units,size units>>, use `size` parameter.\n\nIf you want to change the <<byte-units,byte units>>, use `bytes` parameter.\n\n[discrete]\n==== Response as text, json, smile, yaml or cbor\n\n[source,sh]\n----\n% curl 'localhost:9200/_cat/indices?format=json&pretty'\n[\n  {\n    \"pri.store.size\": \"650b\",\n    \"health\": \"yellow\",\n    \"status\": \"open\",\n    \"index\": \"my-index-000001\",\n    \"pri\": \"5\",\n    \"rep\": \"1\",\n    \"docs.count\": \"0\",\n    \"docs.deleted\": \"0\",\n    \"store.size\": \"650b\"\n  }\n]\n----\n// NOTCONSOLE\n\nCurrently supported formats (for the `?format=` parameter):\n- text (default)\n- json\n- smile\n- yaml\n- cbor\n\nAlternatively you can set the \"Accept\" HTTP header to the appropriate media format.\nAll formats above are supported, the GET parameter takes precedence over the header.\nFor example:\n\n[source,sh]\n----\n% curl '192.168.56.10:9200/_cat/indices?pretty' -H \"Accept: application/json\"\n[\n  {\n    \"pri.store.size\": \"650b\",\n    \"health\": \"yellow\",\n    \"status\": \"open\",\n    \"index\": \"my-index-000001\",\n    \"pri\": \"5\",\n    \"rep\": \"1\",\n    \"docs.count\": \"0\",\n    \"docs.deleted\": \"0\",\n    \"store.size\": \"650b\"\n  }\n]\n----\n// NOTCONSOLE\n\n[discrete]\n[[sort]]\n==== Sort\n\nEach of the commands accepts a query string parameter `s` which sorts the table by\nthe columns specified as the parameter value. Columns are specified either by name or by\nalias, and are provided as a comma separated string. By default, sorting is done in\nascending fashion. Appending `:desc` to a column will invert the ordering for\nthat column. `:asc` is also accepted but exhibits the same behavior as the default sort order.\n\nFor example, with a sort string `s=column1,column2:desc,column3`, the table will be\nsorted in ascending order by column1, in descending order by column2, and in ascending\norder by column3.\n\n[source,console]\n----\nGET _cat/templates?v=true&s=order:desc,index_patterns\n----\n\nreturns:\n\n[source,txt]\n----\nname                  index_patterns order version\npizza_pepperoni       [*pepperoni*]  2\nsushi_california_roll [*avocado*]    1     1\npizza_hawaiian        [*pineapples*] 1\n----\n\ninclude::cat/alias.asciidoc[]\n\ninclude::cat/allocation.asciidoc[]\n\ninclude::cat/anomaly-detectors.asciidoc[]\n\ninclude::cat/component-templates.asciidoc[]\n\ninclude::cat/count.asciidoc[]\n\ninclude::cat/dataframeanalytics.asciidoc[]\n\ninclude::cat/datafeeds.asciidoc[]\n\ninclude::cat/fielddata.asciidoc[]\n\ninclude::cat/health.asciidoc[]\n\ninclude::cat/indices.asciidoc[]\n\ninclude::cat/master.asciidoc[]\n\ninclude::cat/nodeattrs.asciidoc[]\n\ninclude::cat/nodes.asciidoc[]\n\ninclude::cat/pending_tasks.asciidoc[]\n\ninclude::cat/plugins.asciidoc[]\n\ninclude::cat/recovery.asciidoc[]\n\ninclude::cat/repositories.asciidoc[]\n\ninclude::cat/segments.asciidoc[]\n\ninclude::cat/shards.asciidoc[]\n\ninclude::cat/snapshots.asciidoc[]\n\ninclude::cat/tasks.asciidoc[]\n\ninclude::cat/templates.asciidoc[]\n\ninclude::cat/thread_pool.asciidoc[]\n\ninclude::cat/trainedmodel.asciidoc[]\n\ninclude::cat/transforms.asciidoc[]\n"
}