{
    "meta": {
        "size": 3850,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-sum.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "ml-sum",
        "version": "8.15"
    },
    "doc": "[\"appendix\",role=\"exclude\",id=\"ml-sum-functions\"]\n= Sum functions\n\nThe sum functions detect anomalies when the sum of a field in a bucket is\nanomalous.\n\nIf you want to monitor unusually high totals, use high-sided functions.\n\nIf want to look at drops in totals, use low-sided functions.\n\nIf your data is sparse, use `non_null_sum` functions. Buckets without values are\nignored; buckets with a zero value are analyzed.\n\nThe {ml-features} include the following sum functions:\n\n* xref:ml-sum[`sum`, `high_sum`, `low_sum`]\n* xref:ml-nonnull-sum[`non_null_sum`, `high_non_null_sum`, `low_non_null_sum`]\n\n[discrete]\n[[ml-sum]]\n== Sum, high_sum, low_sum\n\nThe `sum` function detects anomalies where the sum of a field in a bucket is\nanomalous.\n\nIf you want to monitor unusually high sum values, use the `high_sum` function.\n\nIf you want to monitor unusually low sum values, use the `low_sum` function.\n\nThese functions support the following properties:\n\n* `field_name` (required)\n* `by_field_name` (optional)\n* `over_field_name` (optional)\n* `partition_field_name` (optional)\n\nFor more information about those properties, see the\n{ref}/ml-put-job.html#ml-put-job-request-body[create {anomaly-jobs} API].\n\n.Example 1: Analyzing total expenses with the sum function\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"sum\",\n  \"field_name\" : \"expenses\",\n  \"by_field_name\" : \"costcenter\",\n  \"over_field_name\" : \"employee\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf you use this `sum` function in a detector in your {anomaly-job}, it\nmodels total expenses per employees for each cost center. For each time bucket,\nit detects when an employee\u2019s expenses are unusual for a cost center compared\nto other employees.\n\n.Example 2: Analyzing total bytes with the high_sum function\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"high_sum\",\n  \"field_name\" : \"cs_bytes\",\n  \"over_field_name\" : \"cs_host\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf you use this `high_sum` function in a detector in your {anomaly-job}, it\nmodels total `cs_bytes`. It detects `cs_hosts` that transfer unusually high\nvolumes compared to other `cs_hosts`. This example looks for volumes of data\ntransferred from a client to a server on the internet that are unusual compared\nto other clients. This scenario could be useful to detect data exfiltration or\nto find users that are abusing internet privileges.\n\n[discrete]\n[[ml-nonnull-sum]]\n== Non_null_sum, high_non_null_sum, low_non_null_sum\n\nThe `non_null_sum` function is useful if your data is sparse. Buckets without\nvalues are ignored and buckets with a zero value are analyzed.\n\nIf you want to monitor unusually high totals, use the `high_non_null_sum`\nfunction.\n\nIf you want to look at drops in totals, use the `low_non_null_sum` function.\n\nThese functions support the following properties:\n\n* `field_name` (required)\n* `by_field_name` (optional)\n* `partition_field_name` (optional)\n\nFor more information about those properties, see the\n{ref}/ml-put-job.html#ml-put-job-request-body[create {anomaly-jobs} API].\n\nNOTE: Population analysis (that is to say, use of the `over_field_name` property)\nis not applicable for this function.\n\n.Example 3: Analyzing employee approvals with the high_non_null_sum function\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"high_non_null_sum\",\n  \"field_name\" : \"amount_approved\",\n  \"by_field_name\" : \"employee\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf you use this `high_non_null_sum` function in a detector in your {anomaly-job},\nit models the total `amount_approved` for each employee. It ignores any buckets\nwhere the amount is null. It detects employees who approve unusually high\namounts compared to their past behavior.\n"
}