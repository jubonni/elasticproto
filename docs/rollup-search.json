{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.383580",
        "size": 7717,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-search.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "rollup-search",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[rollup-search]]\n=== Rollup search\n++++\n<titleabbrev>Rollup search</titleabbrev>\n++++\n\ndeprecated::[8.11.0,\"Rollups will be removed in a future version. Use <<downsampling,downsampling>> instead.\"]\n\nEnables searching rolled-up data using the standard Query DSL.\n\n[[rollup-search-request]]\n==== {api-request-title}\n\n`GET <target>/_rollup_search`\n\n[[rollup-search-desc]]\n==== {api-description-title}\n\nThe rollup search endpoint is needed because, internally, rolled-up documents\nutilize a different document structure than the original data. The rollup search\nendpoint rewrites standard Query DSL into a format that matches the rollup\ndocuments, then takes the response and rewrites it back to what a client would\nexpect given the original query.\n\n[[rollup-search-path-params]]\n==== {api-path-parms-title}\n\n`<target>`::\n+\n--\n(Required, string)\nComma-separated list of data streams and indices used to limit\nthe request. Wildcard expressions (`*`) are supported.\n\nThis target can include both rollup and non-rollup indices.\n\nRules for the `<target>` parameter:\n\n- At least one data stream, index, or wildcard expression must be specified.\nThis target can include a rollup or non-rollup index. For data streams, the\nstream's backing indices can only serve as non-rollup indices. Omitting the\n`<target>` parameter or using `_all` is not permitted.\n- Multiple non-rollup indices may be specified.\n- Only one rollup index may be specified. If more than one are supplied, an\nexception occurs.\n- Wildcard expressions may be used, but, if they match more than one rollup index, an\nexception occurs. However, you can use an expression to match multiple non-rollup\nindices or data streams.\n--\n\n[[rollup-search-request-body]]\n==== {api-request-body-title}\n\nThe request body supports a subset of features from the regular Search API. It\nsupports:\n\n- `query` param for specifying an DSL query, subject to some limitations\n(see <<rollup-search-limitations>> and <<rollup-agg-limitations>>\n- `aggregations` param for specifying aggregations\n\nFunctionality that is not available:\n\n- `size`: Because rollups work on pre-aggregated data, no search hits can be\nreturned and so size must be set to zero or omitted entirely.\n- `highlighter`, `suggestors`, `post_filter`, `profile`, `explain`: These are\nsimilarly disallowed.\n\n[[rollup-search-example]]\n==== {api-examples-title}\n\n===== Historical-only search example\n\nImagine we have an index named `sensor-1` full of raw data, and we have created\na {rollup-job} with the following configuration:\n\n[source,console]\n--------------------------------------------------\nPUT _rollup/job/sensor\n{\n  \"index_pattern\": \"sensor-*\",\n  \"rollup_index\": \"sensor_rollup\",\n  \"cron\": \"*/30 * * * * ?\",\n  \"page_size\": 1000,\n  \"groups\": {\n    \"date_histogram\": {\n      \"field\": \"timestamp\",\n      \"fixed_interval\": \"1h\",\n      \"delay\": \"7d\"\n    },\n    \"terms\": {\n      \"fields\": [ \"node\" ]\n    }\n  },\n  \"metrics\": [\n    {\n      \"field\": \"temperature\",\n      \"metrics\": [ \"min\", \"max\", \"sum\" ]\n    },\n    {\n      \"field\": \"voltage\",\n      \"metrics\": [ \"avg\" ]\n    }\n  ]\n}\n--------------------------------------------------\n// TEST[setup:sensor_index]\n\nThis rolls up the `sensor-*` pattern and stores the results in `sensor_rollup`.\nTo search this rolled up data, we need to use the `_rollup_search` endpoint.\nHowever, you'll notice that we can use regular Query DSL to search the rolled-up\ndata:\n\n[source,console]\n--------------------------------------------------\nGET /sensor_rollup/_rollup_search\n{\n  \"size\": 0,\n  \"aggregations\": {\n    \"max_temperature\": {\n      \"max\": {\n        \"field\": \"temperature\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[setup:sensor_prefab_data]\n// TEST[s/_rollup_search/_rollup_search?filter_path=took,timed_out,terminated_early,_shards,hits,aggregations/]\n\nThe query is targeting the `sensor_rollup` data, since this contains the rollup\ndata as configured in the job. A `max` aggregation has been used on the\n`temperature` field, yielding the following response:\n\n[source,console-result]\n----\n{\n  \"took\" : 102,\n  \"timed_out\" : false,\n  \"terminated_early\" : false,\n  \"_shards\" : ... ,\n  \"hits\" : {\n    \"total\" : {\n        \"value\": 0,\n        \"relation\": \"eq\"\n    },\n    \"max_score\" : 0.0,\n    \"hits\" : [ ]\n  },\n  \"aggregations\" : {\n    \"max_temperature\" : {\n      \"value\" : 202.0\n    }\n  }\n}\n----\n// TESTRESPONSE[s/\"took\" : 102/\"took\" : $body.$_path/]\n// TESTRESPONSE[s/\"_shards\" : \\.\\.\\. /\"_shards\" : $body.$_path/]\n\nThe response is exactly as you'd expect from a regular query + aggregation; it\nprovides some metadata about the request (`took`, `_shards`, etc), the search\nhits (which is always empty for rollup searches), and the aggregation response.\n\nRollup searches are limited to functionality that was configured in the\n{rollup-job}. For example, we are not able to calculate the average temperature\nbecause `avg` was not one of the configured metrics for the `temperature` field.\nIf we try to execute that search:\n\n[source,console]\n--------------------------------------------------\nGET sensor_rollup/_rollup_search\n{\n  \"size\": 0,\n  \"aggregations\": {\n    \"avg_temperature\": {\n      \"avg\": {\n        \"field\": \"temperature\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n// TEST[catch:/illegal_argument_exception/]\n\n[source,console-result]\n----\n{\n  \"error\": {\n    \"root_cause\": [\n      {\n        \"type\": \"illegal_argument_exception\",\n        \"reason\": \"There is not a rollup job that has a [avg] agg with name [avg_temperature] which also satisfies all requirements of query.\",\n        \"stack_trace\": ...\n      }\n    ],\n    \"type\": \"illegal_argument_exception\",\n    \"reason\": \"There is not a rollup job that has a [avg] agg with name [avg_temperature] which also satisfies all requirements of query.\",\n    \"stack_trace\": ...\n  },\n  \"status\": 400\n}\n----\n// TESTRESPONSE[s/\"stack_trace\": \\.\\.\\./\"stack_trace\": $body.$_path/]\n\n===== Searching both historical rollup and non-rollup data\n\nThe rollup search API has the capability to search across both \"live\"\nnon-rollup data and the aggregated rollup data. This is done by simply adding\nthe live indices to the URI:\n\n[source,console]\n--------------------------------------------------\nGET sensor-1,sensor_rollup/_rollup_search <1>\n{\n  \"size\": 0,\n  \"aggregations\": {\n    \"max_temperature\": {\n      \"max\": {\n        \"field\": \"temperature\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n// TEST[s/_rollup_search/_rollup_search?filter_path=took,timed_out,terminated_early,_shards,hits,aggregations/]\n<1> Note the URI now searches `sensor-1` and `sensor_rollup` at the same time\n\nWhen the search is executed, the rollup search endpoint does two things:\n\n1. The original request is sent to the non-rollup index unaltered.\n2. A rewritten version of the original request is sent to the rollup index.\n\nWhen the two responses are received, the endpoint rewrites the rollup response\nand merges the two together. During the merging process, if there is any overlap\nin buckets between the two responses, the buckets from the non-rollup index are\nused.\n\nThe response to the above query looks as expected, despite spanning rollup and\nnon-rollup indices:\n\n[source,console-result]\n----\n{\n  \"took\" : 102,\n  \"timed_out\" : false,\n  \"terminated_early\" : false,\n  \"_shards\" : ... ,\n  \"hits\" : {\n    \"total\" : {\n        \"value\": 0,\n        \"relation\": \"eq\"\n    },\n    \"max_score\" : 0.0,\n    \"hits\" : [ ]\n  },\n  \"aggregations\" : {\n    \"max_temperature\" : {\n      \"value\" : 202.0\n    }\n  }\n}\n----\n// TESTRESPONSE[s/\"took\" : 102/\"took\" : $body.$_path/]\n// TESTRESPONSE[s/\"_shards\" : \\.\\.\\. /\"_shards\" : $body.$_path/]\n"
}