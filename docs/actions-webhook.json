{
    "meta": {
        "timestamp": "2024-11-01T03:07:10.551271",
        "size": 7320,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/actions-webhook.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "actions-webhook",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[actions-webhook]]\n=== {watcher} webhook action\n++++\n<titleabbrev>Webhook action</titleabbrev>\n++++\n\nUse the `webhook` action to send a request to any web service. The\nwebhook action supports both HTTP and HTTPS connections. See\n<<webhook-action-attributes>> for the supported attributes.\n\n[[configuring-webook-actions]]\n==== Configuring webhook actions\n\nYou configure webhook actions in the `actions` array. Action-specific attributes\nare specified using the `webhook` keyword.\n\nThe following snippet shows a simple webhook action definition:\n\n[source,js]\n--------------------------------------------------\n\"actions\" : {\n  \"my_webhook\" : { <1>\n    \"transform\" : { ... }, <2>\n    \"throttle_period\" : \"5m\", <3>\n    \"webhook\" : {\n      \"method\" : \"POST\", <4>\n      \"host\" : \"mylisteningserver\", <5>\n      \"port\" : 9200, <6>\n      \"path\": \"/{{ctx.watch_id}}\", <7>\n      \"body\" : \"{{ctx.watch_id}}:{{ctx.payload.hits.total}}\" <8>\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n<1> The id of the action\n<2> An optional <<transform,transform>> to transform the payload before\n    executing the `webhook` action\n<3> An optional <<actions-ack-throttle,throttle period>> for the action\n    (5 minutes in this example)\n<4> The HTTP method to use when connecting to the host\n<5> The host to connect to\n\n<6> The port to connect to\n<7> The path (URI) to use in the HTTP request\n<8> The body to send with the request\n\nYou can use basic authentication when sending a request to a secured webservice.\nFor example, the following `webhook` action creates a new issue in GitHub:\n\n[source,js]\n--------------------------------------------------\n\"actions\" : {\n  \"create_github_issue\" : {\n    \"transform\": {\n      \"script\": \"return ['title':'Found errors in \\\\'contact.html\\\\'', 'body' : 'Found ' + ctx.payload.hits.total + ' errors in the last 5 minutes', 'assignee' : 'web-admin', 'labels' : ['bug','sev2']]\"\n    },\n    \"webhook\" : {\n      \"method\" : \"POST\",\n      \"url\" : \"https://api.github.com/repos/<owner>/<repo>/issues\",\n      \"body\": \"{{#toJson}}ctx.payload{{/toJson}}\",\n      \"auth\" : {\n        \"basic\" : {\n          \"username\" : \"<username>\", <1>\n          \"password\" : \"<password>\"\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n<1> The username and password for the user creating the issue\n\nNOTE: By default, both the username and the password are stored in the `.watches`\n      index in plain text. When the {es} {security-features} are enabled,\n      {watcher} can encrypt the password before storing it.\n\nYou can also use PKI-based authentication when submitting requests to a cluster\nthat has {es} {security-features} enabled. When you use PKI-based authentication\ninstead of HTTP basic auth, you don't need to store any authentication\ninformation in the watch itself. To use PKI-based authentication, you\n<<ssl-notification-settings,configure the SSL key settings>> for {watcher} in\n`elasticsearch.yml`.\n\n\n[[webhook-query-parameters]]\n==== Query Parameters\n\nYou can specify query parameters to send with the request with the `params` field.\nThis field simply holds an object where the keys serve as the parameter names and\nthe values serve as the parameter values:\n\n[source,js]\n--------------------------------------------------\n\"actions\" : {\n  \"my_webhook\" : {\n    \"webhook\" : {\n      \"method\" : \"POST\",\n      \"host\" : \"mylisteningserver\",\n      \"port\" : 9200,\n      \"path\": \"/alert\",\n      \"params\" : {\n        \"watch_id\" : \"{{ctx.watch_id}}\" <1>\n      }\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n<1> The parameter values can contain templated strings.\n\n\n[[webhook-custom-request-headers]]\n==== Custom Request Headers\n\nYou can specify request headers to send with the request with the `headers` field.\nThis field simply holds an object where the keys serve as the header names and\nthe values serve as the header values:\n\n[source,js]\n--------------------------------------------------\n\"actions\" : {\n  \"my_webhook\" : {\n    \"webhook\" : {\n      \"method\" : \"POST\",\n      \"host\" : \"mylisteningserver\",\n      \"port\" : 9200,\n      \"path\": \"/alert/{{ctx.watch_id}}\",\n      \"headers\" : {\n        \"Content-Type\" : \"application/yaml\" <1>\n      },\n      \"body\" : \"count: {{ctx.payload.hits.total}}\"\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n<1> The header values can contain templated strings.\n\n\n==== Webhook action attributes\n[[webhook-action-attributes]]\n[cols=\",^,^,\", options=\"header\"]\n|======\n| Name                  |Required   | Default     | Description\n\n| `scheme`              | no        | http        | The connection scheme. Valid values are: `http` or `https`.\n\n| `host`                | yes       | -           | The host to connect to.\n\n| `port`                | yes       | -           | The port the HTTP service is listening on.\n\n| `path`                | no        | -           | The URL path. The path can be static text or include Mustache\n                                                    <<templates,templates>>. URL query string parameters must be\n                                                    specified via the `request.params` attribute.\n\n| `method`              | no        | get         | The HTTP method. Valid values are: `head`, `get`, `post`, `put`\n                                                    and `delete`.\n\n| `headers`             | no        | -           | The HTTP request headers. The header values can be static text\n                                                    or include Mustache <<templates,templates>>.\n\n| `params`              | no        | -           | The URL query string parameters. The parameter values can be\n                                                    static text or include Mustache <<templates,templates>>.\n\n| `auth`                | no        | -           | Authentication related HTTP headers. Currently, only basic\n                                                    authentication is supported.\n\n| `body`                | no        | -           | The HTTP request body. The body can be static text or include\n                                                    Mustache <<templates,templates>>. When not specified, an empty\n                                                    body is sent.\n\n| `proxy.host`          | no        | -           | The proxy host to use when connecting to the host.\n\n| `proxy.port`          | no        | -           | The proxy port to use when connecting to the host.\n\n| `connection_timeout`  | no        | 10s         | The timeout for setting up the http connection. If the connection\n                                                    could not be set up within this time, the action will timeout and\n                                                    fail.\n\n| `read_timeout`        | no        | 10s         | The timeout for reading data from http connection. If no response\n                                                    was received within this time, the action will timeout and fail.\n\n\n| `url`                 | no        | -           | A shortcut for specifying the request scheme, host, port, and\n                                                    path as a single string. For example, `http://example.org/foo/my-service`.\n|======\n"
}