{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.356067",
        "size": 9225,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/hashing-settings.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "hashing-settings",
        "version": "8.15"
    },
    "doc": "[discrete]\n[[hashing-settings]]\n=== User cache and password hash algorithms\n\nCertain realms store user credentials in memory. To limit exposure\nto credential theft and mitigate credential compromise, the cache only stores\na hashed version of the user credentials in memory. By default, the user cache\nis hashed with a salted `sha-256` hash algorithm. You can use a different\nhashing algorithm by setting the <<static-cluster-setting,static>>\n`cache.hash_algo` realm settings to any of the following values:\n\n[[cache-hash-algo]]\n.Cache hash algorithms\n|=======================\n| Algorithm               | | | Description\n| `ssha256`               | | | Uses a salted `sha-256` algorithm (default).\n| `md5`                   | | | Uses `MD5` algorithm.\n| `sha1`                  | | | Uses `SHA1` algorithm.\n| `bcrypt`                | | | Uses `bcrypt` algorithm with salt generated in 1024 rounds.\n| `bcrypt4`               | | | Uses `bcrypt` algorithm with salt generated in 16 rounds.\n| `bcrypt5`               | | | Uses `bcrypt` algorithm with salt generated in 32 rounds.\n| `bcrypt6`               | | | Uses `bcrypt` algorithm with salt generated in 64 rounds.\n| `bcrypt7`               | | | Uses `bcrypt` algorithm with salt generated in 128 rounds.\n| `bcrypt8`               | | | Uses `bcrypt` algorithm with salt generated in 256 rounds.\n| `bcrypt9`               | | | Uses `bcrypt` algorithm with salt generated in 512 rounds.\n| `pbkdf2`                | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 10000 iterations.\n| `pbkdf2_1000`           | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 1000 iterations.\n| `pbkdf2_10000`          | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 10000 iterations.\n| `pbkdf2_50000`          | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 50000 iterations.\n| `pbkdf2_100000`         | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 100000 iterations.\n| `pbkdf2_500000`         | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                              pseudorandom function using 500000 iterations.\n| `pbkdf2_1000000`        | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 1000000 iterations.\n| `pbkdf2_stretch`        | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 10000 iterations, after hashing the\n                             initial input with SHA512 first.\n| `pbkdf2_stretch_1000`   | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 1000 iterations, after hashing the\n                             initial input with SHA512 first.\n| `pbkdf2_stretch_10000`  | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 10000 iterations, after hashing the\n                             initial input with SHA512 first.\n| `pbkdf2_stretch_50000`  | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 50000 iterations, after hashing the\n                             initial input with SHA512 first.\n| `pbkdf2_stretch_100000` | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 100000 iterations, after hashing the\n                             initial input with SHA512 first.\n| `pbkdf2_stretch_500000` | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 500000 iterations, after hashing the\n                             initial input with SHA512 first.\n| `pbkdf2_stretch_1000000`| | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 1000000 iterations, after hashing the\n                             initial input with SHA512 first.\n| `noop`,`clear_text`     | | | Doesn't hash the credentials and keeps it in clear text in\n                            memory. CAUTION: keeping clear text is considered insecure\n                            and can be compromised at the OS level (for example through\n                            memory dumps and using `ptrace`).\n|=======================\n\nLikewise, realms that store passwords hash them using cryptographically strong\nand password-specific salt values. You can configure the algorithm for password\nhashing by setting the <<static-cluster-setting,static>>\n`xpack.security.authc.password_hashing.algorithm` setting to one of the\nfollowing:\n\n[[password-hashing-algorithms]]\n.Password hashing algorithms\n|=======================\n| Algorithm               | | | Description\n\n| `bcrypt`                | | | Uses `bcrypt` algorithm with salt generated in 1024 rounds. (default)\n| `bcrypt4`               | | | Uses `bcrypt` algorithm with salt generated in 16 rounds.\n| `bcrypt5`               | | | Uses `bcrypt` algorithm with salt generated in 32 rounds.\n| `bcrypt6`               | | | Uses `bcrypt` algorithm with salt generated in 64 rounds.\n| `bcrypt7`               | | | Uses `bcrypt` algorithm with salt generated in 128 rounds.\n| `bcrypt8`               | | | Uses `bcrypt` algorithm with salt generated in 256 rounds.\n| `bcrypt9`               | | | Uses `bcrypt` algorithm with salt generated in 512 rounds.\n| `bcrypt10`              | | | Uses `bcrypt` algorithm with salt generated in 1024 rounds.\n| `bcrypt11`              | | | Uses `bcrypt` algorithm with salt generated in 2048 rounds.\n| `bcrypt12`              | | | Uses `bcrypt` algorithm with salt generated in 4096 rounds.\n| `bcrypt13`              | | | Uses `bcrypt` algorithm with salt generated in 8192 rounds.\n| `bcrypt14`              | | | Uses `bcrypt` algorithm with salt generated in 16384 rounds.\n| `pbkdf2`                | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 10000 iterations.\n| `pbkdf2_1000`           | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 1000 iterations.\n| `pbkdf2_10000`          | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 10000 iterations.\n| `pbkdf2_50000`          | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 50000 iterations.\n| `pbkdf2_100000`         | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 100000 iterations.\n| `pbkdf2_500000`         | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                              pseudorandom function using 500000 iterations.\n| `pbkdf2_1000000`        | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 1000000 iterations.\n| `pbkdf2_stretch`        | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 10000 iterations, after hashing the\n                             initial input with SHA512 first.\n| `pbkdf2_stretch_1000`   | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 1000 iterations, after hashing the\n                             initial input with SHA512 first.\n| `pbkdf2_stretch_10000`  | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 10000 iterations, after hashing the\n                             initial input with SHA512 first.\n| `pbkdf2_stretch_50000`  | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 50000 iterations, after hashing the\n                             initial input with SHA512 first.\n| `pbkdf2_stretch_100000` | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 100000 iterations, after hashing the\n                             initial input with SHA512 first.\n| `pbkdf2_stretch_500000` | | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 500000 iterations, after hashing the\n                             initial input with SHA512 first.\n| `pbkdf2_stretch_1000000`| | | Uses `PBKDF2` key derivation function with `HMAC-SHA512` as a\n                             pseudorandom function using 1000000 iterations, after hashing the\n                             initial input with SHA512 first.\n|=======================\n\n\n"
}