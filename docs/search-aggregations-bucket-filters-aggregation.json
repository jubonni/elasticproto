{
    "meta": {
        "size": 6434,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-filters-aggregation.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "search-aggregations-bucket-filters-aggregation",
        "version": "8.15"
    },
    "doc": "[[search-aggregations-bucket-filters-aggregation]]\n=== Filters aggregation\n++++\n<titleabbrev>Filters</titleabbrev>\n++++\n\nA multi-bucket aggregation where each bucket contains the documents\nthat match a <<query-dsl,query>>.\n\nExample:\n\n[source,console,id=filters-aggregation-example]\n--------------------------------------------------\nPUT /logs/_bulk?refresh\n{ \"index\" : { \"_id\" : 1 } }\n{ \"body\" : \"warning: page could not be rendered\" }\n{ \"index\" : { \"_id\" : 2 } }\n{ \"body\" : \"authentication error\" }\n{ \"index\" : { \"_id\" : 3 } }\n{ \"body\" : \"warning: connection timed out\" }\n\nGET logs/_search\n{\n  \"size\": 0,\n  \"aggs\" : {\n    \"messages\" : {\n      \"filters\" : {\n        \"filters\" : {\n          \"errors\" :   { \"match\" : { \"body\" : \"error\"   }},\n          \"warnings\" : { \"match\" : { \"body\" : \"warning\" }}\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\nIn the above example, we analyze log messages. The aggregation will build two\ncollection (buckets) of log messages - one for all those containing an error,\nand another for all those containing a warning.\n\nResponse:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"took\": 9,\n  \"timed_out\": false,\n  \"_shards\": ...,\n  \"hits\": ...,\n  \"aggregations\": {\n    \"messages\": {\n      \"buckets\": {\n        \"errors\": {\n          \"doc_count\": 1\n        },\n        \"warnings\": {\n          \"doc_count\": 2\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"took\": 9/\"took\": $body.took/]\n// TESTRESPONSE[s/\"_shards\": \\.\\.\\./\"_shards\": $body._shards/]\n// TESTRESPONSE[s/\"hits\": \\.\\.\\./\"hits\": $body.hits/]\n\n[[anonymous-filters]]\n==== Anonymous filters\n\nThe filters field can also be provided as an array of filters, as in the\nfollowing request:\n\n[source,console,id=filters-aggregation-anonymous-example]\n--------------------------------------------------\nGET logs/_search\n{\n  \"size\": 0,\n  \"aggs\" : {\n    \"messages\" : {\n      \"filters\" : {\n        \"filters\" : [\n          { \"match\" : { \"body\" : \"error\"   }},\n          { \"match\" : { \"body\" : \"warning\" }}\n        ]\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\nThe filtered buckets are returned in the same order as provided in the\nrequest. The response for this example would be:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"took\": 4,\n  \"timed_out\": false,\n  \"_shards\": ...,\n  \"hits\": ...,\n  \"aggregations\": {\n    \"messages\": {\n      \"buckets\": [\n        {\n          \"doc_count\": 1\n        },\n        {\n          \"doc_count\": 2\n        }\n      ]\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"took\": 4/\"took\": $body.took/]\n// TESTRESPONSE[s/\"_shards\": \\.\\.\\./\"_shards\": $body._shards/]\n// TESTRESPONSE[s/\"hits\": \\.\\.\\./\"hits\": $body.hits/]\n\n[[other-bucket]]\n==== `Other` Bucket\n\nThe `other_bucket` parameter can be set to add a bucket to the response which will contain all documents that do \nnot match any of the given filters. The value of this parameter can be as follows:\n\n`false`::         Does not compute the `other` bucket\n`true`::          Returns the `other` bucket either in a bucket (named `_other_` by default) if named filters are being used, \n                  or as the last bucket if anonymous filters are being used\n\nThe `other_bucket_key` parameter can be used to set the key for the `other` bucket to a value other than the default `_other_`. Setting \nthis parameter will implicitly set the `other_bucket` parameter to `true`.\n\nThe following snippet shows a response where the `other` bucket is requested to be named `other_messages`.\n\n[source,console,id=filters-aggregation-other-bucket-example]\n--------------------------------------------------\nPUT logs/_doc/4?refresh\n{\n  \"body\": \"info: user Bob logged out\"\n}\n\nGET logs/_search\n{\n  \"size\": 0,\n  \"aggs\" : {\n    \"messages\" : {\n      \"filters\" : {\n        \"other_bucket_key\": \"other_messages\",\n        \"filters\" : {\n          \"errors\" :   { \"match\" : { \"body\" : \"error\"   }},\n          \"warnings\" : { \"match\" : { \"body\" : \"warning\" }}\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\nThe response would be something like the following:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"took\": 3,\n  \"timed_out\": false,\n  \"_shards\": ...,\n  \"hits\": ...,\n  \"aggregations\": {\n    \"messages\": {\n      \"buckets\": {\n        \"errors\": {\n          \"doc_count\": 1\n        },\n        \"warnings\": {\n          \"doc_count\": 2\n        },\n        \"other_messages\": {\n          \"doc_count\": 1\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"took\": 3/\"took\": $body.took/]\n// TESTRESPONSE[s/\"_shards\": \\.\\.\\./\"_shards\": $body._shards/]\n// TESTRESPONSE[s/\"hits\": \\.\\.\\./\"hits\": $body.hits/]\n\n[[non-keyed-response]]\n==== Non-keyed Response\n\nBy default, the named filters aggregation returns the buckets as an object. But in some sorting cases, such as\n<<search-aggregations-pipeline-bucket-sort-aggregation,bucket sort>>, the JSON doesn't guarantee the order of elements\nin the object. You can use the `keyed` parameter to specify the buckets as an array of objects. The value of this\nparameter can be as follows:\n\n`true`::        (Default) Returns the buckets as an object\n`false`::       Returns the buckets as an array of objects\n\nNOTE: This parameter is ignored by <<anonymous-filters,Anonymous filters>>.\n\nExample:\n\n[source,console,id=filters-aggregation-sortable-example]\n----\nPOST /sales/_search?size=0&filter_path=aggregations\n{\n  \"aggs\": {\n    \"the_filter\": {\n      \"filters\": {\n        \"keyed\": false,\n        \"filters\": {\n          \"t-shirt\": { \"term\": { \"type\": \"t-shirt\" } },\n          \"hat\": { \"term\": { \"type\": \"hat\" } }\n        }\n      },\n      \"aggs\": {\n        \"avg_price\": { \"avg\": { \"field\": \"price\" } },\n        \"sort_by_avg_price\": {\n          \"bucket_sort\": { \"sort\": { \"avg_price\": \"asc\" } }\n        }\n      }\n    }\n  }\n}\n----\n// TEST[setup:sales]\n\nResponse:\n\n[source,console-result]\n----\n{\n  \"aggregations\": {\n    \"the_filter\": {\n      \"buckets\": [\n        {\n          \"key\": \"t-shirt\",\n          \"doc_count\": 3,\n          \"avg_price\": { \"value\": 128.33333333333334 }\n        },\n        {\n          \"key\": \"hat\",\n          \"doc_count\": 3,\n          \"avg_price\": { \"value\": 150.0 }\n        }\n      ]\n    }\n  }\n}\n----\n"
}