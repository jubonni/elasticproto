{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.613068",
        "size": 3959,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-max-aggregation.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "search-aggregations-metrics-max-aggregation",
        "version": "8.15"
    },
    "doc": "[[search-aggregations-metrics-max-aggregation]]\n=== Max aggregation\n++++\n<titleabbrev>Max</titleabbrev>\n++++\n\nA `single-value` metrics aggregation that keeps track and returns the maximum\nvalue among the numeric values extracted from the aggregated documents.\n\nNOTE: The `min` and `max` aggregation operate on the `double` representation of\nthe data. As a consequence, the result may be approximate when running on longs\nwhose absolute value is greater than +2^53+.\n\nComputing the max price value across all documents\n\n[source,console]\n--------------------------------------------------\nPOST /sales/_search?size=0\n{\n  \"aggs\": {\n    \"max_price\": { \"max\": { \"field\": \"price\" } }\n  }\n}\n--------------------------------------------------\n// TEST[setup:sales]\n\nResponse:\n\n[source,console-result]\n--------------------------------------------------\n{\n  ...\n  \"aggregations\": {\n      \"max_price\": {\n          \"value\": 200.0\n      }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\\.\\.\\./\"took\": $body.took,\"timed_out\": false,\"_shards\": $body._shards,\"hits\": $body.hits,/]\n\nAs can be seen, the name of the aggregation (`max_price` above) also serves as\nthe key by which the aggregation result can be retrieved from the returned\nresponse.\n\n==== Script\n\nIf you need to get the `max` of something more complex than a single field,\nrun an aggregation on a <<runtime,runtime field>>.\n\n[source,console]\n----\nPOST /sales/_search\n{\n  \"size\": 0,\n  \"runtime_mappings\": {\n    \"price.adjusted\": {\n      \"type\": \"double\",\n      \"script\": \"\"\"\n        double price = doc['price'].value;\n        if (doc['promoted'].value) {\n          price *= 0.8;\n        }\n        emit(price);\n      \"\"\"\n    }\n  },\n  \"aggs\": {\n    \"max_price\": {\n      \"max\": { \"field\": \"price.adjusted\" }\n    }\n  }\n}\n----\n// TEST[setup:sales]\n// TEST[s/_search/_search?filter_path=aggregations/]\n\n////\n[source,console-result]\n--------------------------------------------------\n{\n  \"aggregations\": {\n      \"max_price\": {\n          \"value\": 175.0\n      }\n  }\n}\n--------------------------------------------------\n////\n\n\n==== Missing value\n\nThe `missing` parameter defines how documents that are missing a value should\nbe treated. By default they will be ignored but it is also possible to treat\nthem as if they had a value.\n\n[source,console]\n--------------------------------------------------\nPOST /sales/_search\n{\n  \"aggs\" : {\n      \"grade_max\" : {\n          \"max\" : {\n              \"field\" : \"grade\",\n              \"missing\": 10       <1>\n          }\n      }\n  }\n}\n--------------------------------------------------\n// TEST[setup:sales]\n\n<1> Documents without a value in the `grade` field will fall into the same\nbucket as documents that have the value `10`.\n\n[[search-aggregations-metrics-max-aggregation-histogram-fields]]\n==== Histogram fields\n\nWhen `max` is computed on <<histogram,histogram fields>>, the result of the aggregation is the maximum\nof all elements in the `values` array. Note, that the `counts` array of the histogram is ignored.\n\nFor example, for the following index that stores pre-aggregated histograms with latency metrics for different networks:\n\n[source,console]\n----\nPUT metrics_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"latency_histo\": { \"type\": \"histogram\" }\n    }\n  }\n}\n\nPUT metrics_index/_doc/1?refresh\n{\n  \"network.name\" : \"net-1\",\n  \"latency_histo\" : {\n      \"values\" : [0.1, 0.2, 0.3, 0.4, 0.5],\n      \"counts\" : [3, 7, 23, 12, 6]\n   }\n}\n\nPUT metrics_index/_doc/2?refresh\n{\n  \"network.name\" : \"net-2\",\n  \"latency_histo\" : {\n      \"values\" :  [0.1, 0.2, 0.3, 0.4, 0.5],\n      \"counts\" : [8, 17, 8, 7, 6]\n   }\n}\n\nPOST /metrics_index/_search?size=0&filter_path=aggregations\n{\n  \"aggs\" : {\n    \"max_latency\" : { \"max\" : { \"field\" : \"latency_histo\" } }\n  }\n}\n----\n\nThe `max` aggregation will return the maximum value of all histogram fields:\n\n[source,console-result]\n----\n{\n  \"aggregations\": {\n    \"max_latency\": {\n      \"value\": 0.5\n    }\n  }\n}\n----\n"
}