{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.392588",
        "size": 7738,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/run-as-privilege.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": false,
        "title": "run-as-privilege",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[run-as-privilege]]\n= Submitting requests on behalf of other users\n\n{es} roles support a `run_as` privilege that enables an authenticated user to \nsubmit requests on behalf of other users. For example, if your external \napplication is trusted to authenticate users, {es} can authenticate the external \napplication and use the _run as_ mechanism to issue authorized requests as \nother users without having to re-authenticate each user.\n\nTo \"run as\" (impersonate) another user, the first user (the authenticating user)\nmust be authenticated by a mechanism that supports run-as delegation. The second \nuser (the `run_as` user) must be authorized by a mechanism that supports\ndelegated run-as lookups by username.\n\nThe `run_as` privilege essentially operates like a secondary form of\n<<authorization_realms,delegated authorization>>. Delegated authorization applies \nto the authenticating user, and the `run_as` privilege applies to the user who\nis being impersonated.\n\nAuthenticating user::\n--\nFor the authenticating user, the following realms (plus API keys) all support\n`run_as` delegation: `native`, `file`, Active Directory, JWT, Kerberos, LDAP and\nPKI.\n\nService tokens, the {es} Token Service, SAML 2.0, and OIDC 1.0 do not\nsupport `run_as` delegation.\n--\n\n`run_as` user::\n--\n{es} supports `run_as` for any realm that supports user lookup.\nNot all realms support user lookup. Refer to the list of <<user-lookup,supported realms>>\nand ensure that the realm you wish to use is configured in a manner that\nsupports user lookup.\n\nThe `run_as` user must be retrieved from a <<realms,realm>> - it is not\npossible to run as a\n<<service-accounts,service account>>,\n<<token-authentication-api-key,API key>> or \n<<token-authentication-access-token,access token>>.\n--\n\nTo submit requests on behalf of other users, you need to have the `run_as`\nprivilege in your <<defining-roles,roles>>. For example, the following request\ncreates a `my_director` role that grants permission to submit request on behalf\nof `jacknich` or `redeniro`:\n\n[source,console]\n----\nPOST /_security/role/my_director?refresh=true\n{\n  \"cluster\": [\"manage\"],\n  \"indices\": [\n    {\n      \"names\": [ \"index1\", \"index2\" ],\n      \"privileges\": [ \"manage\" ]\n    }\n  ],\n  \"run_as\": [ \"jacknich\", \"rdeniro\" ],\n  \"metadata\" : {\n    \"version\" : 1\n  }\n}\n----\n\nTo submit a request as another user, you specify the user in the\n`es-security-runas-user` request header. For example:\n\n[source,sh]\n----\ncurl -H \"es-security-runas-user: jacknich\" -u es-admin -X GET http://localhost:9200/\n----\n\nThe `run_as` user passed in through the `es-security-runas-user` header must be\navailable from a realm that supports delegated authorization lookup by username. \nRealms that don't support user lookup can't be used by `run_as` delegation from \nother realms.\n\nFor example, JWT realms can authenticate external users specified in JWTs, and \nexecute requests as a `run_as` user in the `native` realm. {es} will retrieve the\nindicated `runas` user and execute the request as that user using their roles.\n\n[[run-as-privilege-apply]]\n== Apply the `run_as` privilege to roles\nYou can apply the `run_as` privilege when creating roles with the\n<<security-api-put-role,create or update roles API>>. Users who are assigned\na role that contains the `run_as` privilege inherit all privileges from their\nrole, and can also submit requests on behalf of the indicated users.\n\nNOTE: Roles for the authenticated user and the `run_as` user are not merged. If\na user authenticates without specifying the `run_as` parameter, only the \nauthenticated user's roles are used. If a user authenticates and their roles\ninclude the `run_as` parameter, only the `run_as` user's roles are used.\n\nAfter a user successfully authenticates to {es}, an authorization process determines whether the user behind an incoming request is allowed to run \nthat request. If the authenticated user has the `run_as` privilege in their list \nof permissions and specifies the run-as header, {es} _discards_ the authenticated \nuser and associated roles. It then looks in each of the configured realms in the \nrealm chain until it finds the username that's associated with the `run_as` user, \nand uses those roles to execute any requests.\n\nConsider an admin role and an analyst role. The admin role has higher privileges,\nbut might also want to submit requests as another user to test and verify their\npermissions.\n\nFirst, we'll create an admin role named `my_admin_role`. This role has `manage` \n<<security-privileges,privileges>> on the entire cluster, and on a subset of\nindices. This role also contains the `run_as` privilege, which enables any user\nwith this role to submit requests on behalf of the specified `analyst_user`.\n\n[source,console]\n----\nPOST /_security/role/my_admin_role?refresh=true\n{\n  \"cluster\": [\"manage\"],\n  \"indices\": [\n    {\n      \"names\": [ \"index1\", \"index2\" ],\n      \"privileges\": [ \"manage\" ]\n    }\n  ],\n  \"applications\": [\n    {\n      \"application\": \"myapp\",\n      \"privileges\": [ \"admin\", \"read\" ],\n      \"resources\": [ \"*\" ]\n    }\n  ],\n  \"run_as\": [ \"analyst_user\" ],\n  \"metadata\" : {\n    \"version\" : 1\n  }\n}\n----\n\nNext, we'll create an analyst role named `my_analyst_role`, which has more \nrestricted `monitor` cluster privileges and `manage` privileges on a subset of \nindices.\n\n[source,console]\n----\nPOST /_security/role/my_analyst_role?refresh=true\n{\n  \"cluster\": [ \"monitor\"],\n  \"indices\": [\n    {\n      \"names\": [ \"index1\", \"index2\" ],\n      \"privileges\": [\"manage\"]\n    }\n  ],\n  \"applications\": [\n    {\n      \"application\": \"myapp\",\n      \"privileges\": [ \"read\" ],\n      \"resources\": [ \"*\" ]\n    }\n  ],\n  \"metadata\" : {\n    \"version\" : 1\n  }\n}\n----\n\nWe'll create an administrator user and assign them the role named `my_admin_role`,\nwhich allows this user to submit requests as the `analyst_user`.\n\n[source,console]\n----\nPOST /_security/user/admin_user?refresh=true\n{\n  \"password\": \"l0ng-r4nd0m-p@ssw0rd\",\n  \"roles\": [ \"my_admin_role\" ],\n  \"full_name\": \"Eirian Zola\",\n  \"metadata\": { \"intelligence\" : 7}\n}\n----\n\nWe can also create an analyst user and assign them the role named\n`my_analyst_role`.\n\n[source,console]\n----\nPOST /_security/user/analyst_user?refresh=true\n{\n  \"password\": \"l0nger-r4nd0mer-p@ssw0rd\",\n  \"roles\": [ \"my_analyst_role\" ],\n  \"full_name\": \"Monday Jaffe\",\n  \"metadata\": { \"innovation\" : 8}\n}\n----\n\nYou can then authenticate to {es} as the `admin_user` or `analyst_user`. However, the `admin_user` could optionally submit requests on\nbehalf of the `analyst_user`. The following request authenticates to {es} with a\n`Basic` authorization token and submits the request as the `analyst_user`:\n\n[source,sh]\n----\ncurl -s -X GET -H \"Authorization: Basic YWRtaW5fdXNlcjpsMG5nLXI0bmQwbS1wQHNzdzByZA==\" -H \"es-security-runas-user: analyst_user\" https://localhost:9200/_security/_authenticate\n----\n\nThe response indicates that the `analyst_user` submitted this request, using the\n`my_analyst_role` that's assigned to that user. When the `admin_user` submitted\nthe request, {es} authenticated that user, discarded their roles, and then used\nthe roles of the `run_as` user.\n\n[source,sh]\n----\n{\"username\":\"analyst_user\",\"roles\":[\"my_analyst_role\"],\"full_name\":\"Monday Jaffe\",\"email\":null,\n\"metadata\":{\"innovation\":8},\"enabled\":true,\"authentication_realm\":{\"name\":\"native\",\n\"type\":\"native\"},\"lookup_realm\":{\"name\":\"native\",\"type\":\"native\"},\"authentication_type\":\"realm\"}\n%  \n----\n\nThe `authentication_realm` and `lookup_realm` in the response both specify \nthe `native` realm because both the `admin_user` and `analyst_user` are from \nthat realm. If the two users are in different realms, the values for \n`authentication_realm` and `lookup_realm` are different (such as `pki` and \n`native`).\n"
}