{
    "meta": {
        "size": 6002,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/jdk-tls-versions.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "jdk-tls-versions",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[jdk-tls-versions]]\n=== Supported SSL/TLS versions by JDK version\n\n{es} relies on your JDK's implementation of SSL and TLS.\n\nDifferent JDK versions support different versions of SSL, and this may affect how {es} operates.\n\n[NOTE]\n====\nThis support applies when running on the default JSSE provider in the JDK.\nJVMs that are configured to use a <<fips-140-compliance, FIPS 140-2>> security\nprovider might have a custom TLS implementation, which might support TLS\nprotocol versions that differ from this list.\n\nCheck your security provider's release notes for information on TLS support.\n====\n\n`SSLv3`::\nSSL v3 is supported on all {es} <<jvm-version,compatible JDKs>> but is disabled by default.\nSee <<jdk-enable-tls-protocol>>.\n\n`TLSv1`::\nTLS v1.0 is supported on all {es} <<jvm-version,compatible JDKs>>.\nSome newer JDKs, including the JDK bundled with {es}, disable TLS v1.0 by default.\nSee <<jdk-enable-tls-protocol>>.\n\n`TLSv1.1`::\nTLS v1.1 is supported on all {es} <<jvm-version,compatible JDKs>>.\nSome newer JDKs, including the JDK bundled with {es}, disable TLS v1.1 by default.\nSee <<jdk-enable-tls-protocol>>.\n\n`TLSv1.2`::\nTLS v1.2 is supported on all {es} <<jvm-version,compatible JDKs>>.\nIt is enabled by default on all JDKs that are supported by {es}, including the bundled JDK.\n\n`TLSv1.3`::\nTLS v1.3 is supported on JDK11 and later, and JDK8 builds newer than 8u261\n(including the most recent release of each JDK8 distribution that {es} supports).\nTLS v1.3 is supported and enabled by default on the JDK that is bundled with {es}.\n+\nNOTE: Although {es} supports running on older JDK8 builds without TLS v1.3,\nwe recommend upgrading to a JDK version that includes TLS v1.3 for better\nsupport and updates.\n\n[[jdk-enable-tls-protocol]]\n==== Enabling additional SSL/TLS versions on your JDK\n\nThe set of supported SSL/TLS versions for a JDK is controlled by a java security\nproperties file that is installed as part of your JDK.\n\nThis configuration file lists the SSL/TLS algorithms that are disabled in that JDK.\nComplete these steps to remove a TLS version from that list and use it in your JDK.\n\n1. Locate the configuration file for your JDK.\n2. Copy the `jdk.tls.disabledAlgorithms` setting from that file, and add it to a custom\n   configuration file within the {es} configuration directory.\n3. In the custom configuration file, remove the value for the TLS version you want\nto use from `jdk.tls.disabledAlgorithms`.\n4. Configure {es} to pass a custom system property to the JDK so that your custom\n   configuration file is used.\n\n===== Locate the configuration file for your JDK\n\nFor the {es} **bundled JDK**, the configuration file is in a sub directory of\nthe {es} home directory (`$ES_HOME`):\n\n* Linux: `$ES_HOME/jdk/conf/security/java.security`\n* Windows: `$ES_HOME/jdk/conf/security/java.security`\n* macOS:`$ES_HOME/jdk.app/Contents/Home/conf/security/java.security`\n\nFor **JDK8**, the configuration file is within the `jre/lib/security` directory\nof the Java installation.\nIf `$JAVA_HOME` points to the home directory of the JDK that you use to run {es},\nthen the configuration file will be in:\n\n* `$JAVA_HOME/jre/lib/security/java.security`\n\nFor **JDK11 or later**, the configuration file is within the `conf/security`\ndirectory of the Java installation.\nIf `$JAVA_HOME` points to the home directory of the JDK that you use to run\n{es}, then the configuration file will be in:\n\n* `$JAVA_HOME/conf/security/java.security`\n\n===== Copy the disabledAlgorithms setting\n\nWithin the JDK configuration file is a line that starts with\n`jdk.tls.disabledAlgorithms=`.\nThis setting controls which protocols and algorithms are _disabled_ in your JDK.\nThe value of that setting will typically span multiple lines.\n\nFor example, in OpenJDK 16 the setting is:\n[source,text]\n--------------------------------------------------\njdk.tls.disabledAlgorithms=SSLv3, TLSv1, TLSv1.1, RC4, DES, MD5withRSA, \\\n    DH keySize < 1024, EC keySize < 224, 3DES_EDE_CBC, anon, NULL\n--------------------------------------------------\n\nCreate a new file in your in your {es} configuration directory named `es.java.security`.\nCopy the `jdk.tls.disabledAlgorithms` setting from the JDK's default configuration file into `es.java.security`.\nYou do not need to copy any other settings.\n\n===== Enable required TLS versions\n\nEdit the `es.java.security` file in your {es} configuration directory, and\nmodify the `jdk.tls.disabledAlgorithms` setting so that any SSL or TLS versions\nthat you wish to use are no longer listed.\n\nFor example, to enable TLSv1.1 on OpenJDK 16 (which uses the\n`jdk.tls.disabledAlgorithms` settings shown previously), the\n`es.java.security` file would contain the previously disabled TLS algorithms\n_except_ `TLSv1.1`:\n\n[source,text]\n--------------------------------------------------\njdk.tls.disabledAlgorithms=SSLv3, TLSv1, RC4, DES, MD5withRSA, \\\n    DH keySize < 1024, EC keySize < 224, 3DES_EDE_CBC, anon, NULL\n--------------------------------------------------\n\n===== Enable your custom security configuration\n\nTo enable your custom security policy, add a file in the <<set-jvm-options, `jvm.options.d`>>\ndirectory within your {es} configuration directory.\n\nTo enable your custom security policy, create a file named\n`java.security.options` within the <<set-jvm-options, jvm.options.d>>\ndirectory of your {es} configuration directory, with this content:\n\n[source,text]\n----\n-Djava.security.properties=/path/to/your/es.java.security\n----\n\n==== Enabling TLS versions in {es}\n\nSSL/TLS versions can be enabled and disabled within {es} via the\n<<ssl-tls-settings,`ssl.supported_protocols` settings>>.\n\n{es} will only support the TLS versions that are enabled by the\n<<jdk-tls-versions,underlying JDK>>. If you configure\n`ssl.supported_procotols` to include a TLS version that is not enabled in your\nJDK, then it will be silently ignored.\n\nSimilarly, a TLS version that is enabled in your JDK, will not be used unless\nit is configured as one of the `ssl.supported_protocols` in {es}.\n"
}