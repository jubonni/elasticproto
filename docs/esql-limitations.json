{
    "meta": {
        "size": 6289,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/esql-limitations.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "esql-limitations",
        "version": "8.15"
    },
    "doc": "[[esql-limitations]]\n== {esql} limitations\n\n++++\n<titleabbrev>Limitations</titleabbrev>\n++++\n\n[discrete]\n[[esql-max-rows]]\n=== Result set size limit\n\nBy default, an {esql} query returns up to 1000 rows. You can increase the number\nof rows up to 10,000 using the <<esql-limit>> command.\ninclude::processing-commands/limit.asciidoc[tag=limitation]\n\n[discrete]\n[[esql-supported-types]]\n=== Field types\n\n[discrete]\n==== Supported types\n\n{esql} currently supports the following <<mapping-types,field types>>:\n\n* `alias`\n* `boolean`\n* `date`\n* `double` (`float`, `half_float`, `scaled_float` are represented as `double`)\n* `ip`\n* `keyword` family including `keyword`, `constant_keyword`, and `wildcard`\n* `int` (`short` and `byte` are represented as `int`)\n* `long`\n* `null`\n* `text`\n* experimental:[] `unsigned_long`\n* `version`\n* Spatial types\n** `geo_point`\n** `geo_shape`\n** `point`\n** `shape`\n\n[discrete]\n==== Unsupported types\n\n{esql} does not yet support the following field types:\n\n* TSDB metrics\n** `counter`\n** `position`\n** `aggregate_metric_double`\n* Date/time\n** `date_nanos`\n** `date_range`\n* Other types\n** `binary`\n** `completion`\n** `dense_vector`\n** `double_range`\n** `flattened`\n** `float_range`\n** `histogram`\n** `integer_range`\n** `ip_range`\n** `long_range`\n** `nested`\n** `rank_feature`\n** `rank_features`\n** `search_as_you_type`\n\nQuerying a column with an unsupported type returns an error. If a column with an\nunsupported type is not explicitly used in a query, it is returned with `null`\nvalues, with the exception of nested fields. Nested fields are not returned at\nall.\n\n[discrete]\n==== Limitations on supported types\n\nSome <<mapping-types,field types>> are not supported in all contexts:\n\n* Spatial types are not supported in the <<esql-sort,SORT>> processing command.\n  Specifying a column of one of these types as a sort parameter will result in an error:\n** `geo_point`\n** `geo_shape`\n** `cartesian_point`\n** `cartesian_shape`\n\nIn addition, when <<esql-multi-index, querying multiple indexes>>,\nit's possible for the same field to be mapped to multiple types.\nThese fields cannot be directly used in queries or returned in results,\nunless they're <<esql-multi-index-union-types, explicitly converted to a single type>>.\n\n[discrete]\n[[esql-_source-availability]]\n=== _source availability\n\n{esql} does not support configurations where the\n<<mapping-source-field,_source field>> is <<disable-source-field,disabled>>.\n\nexperimental:[] {esql}'s support for <<synthetic-source,synthetic `_source`>>\nis currently experimental.\n\n[discrete]\n[[esql-limitations-full-text-search]]\n=== Full-text search is not supported\n\nBecause of <<esql-limitations-text-fields,the way {esql} treats `text` values>>,\nfull-text search is not yet supported. Queries on `text` fields are like queries\non `keyword` fields: they are case-sensitive and need to match the full string.\n\nFor example, after indexing a field of type `text` with the value `Elasticsearch\nquery language`, the following `WHERE` clause does not match because the `LIKE`\noperator is case-sensitive:\n[source,esql]\n----\n| WHERE field LIKE \"elasticsearch query language\"\n----\n\nThe following `WHERE` clause does not match either, because the `LIKE` operator\ntries to match the whole string:\n[source,esql]\n----\n| WHERE field LIKE \"Elasticsearch\"\n----\n\nAs a workaround, use wildcards and regular expressions. For example:\n[source,esql]\n----\n| WHERE field RLIKE \"[Ee]lasticsearch.*\"\n----\n\n[discrete]\n[[esql-limitations-text-fields]]\n=== `text` fields behave like `keyword` fields\n\nWhile {esql} supports <<text,`text`>> fields, {esql} does not treat these fields\nlike the Search API does. {esql} queries do not query or aggregate the\n<<analysis,analyzed string>>. Instead, an {esql} query will try to get a `text`\nfield's subfield of the <<keyword,keyword family type>> and query/aggregate\nthat. If it's not possible to retrieve a `keyword` subfield, {esql} will get the\nstring from a document's `_source`. If the `_source` cannot be retrieved, for\nexample when using synthetic source, `null` is returned.\n\nNote that {esql}'s retrieval of `keyword` subfields may have unexpected\nconsequences. An {esql} query on a `text` field is case-sensitive. Furthermore,\na subfield may have been mapped with a <<normalizer,normalizer>>, which can\ntransform the original string. Or it may have been mapped with <<ignore-above>>,\nwhich can truncate the string. None of these mapping operations are applied to\nan {esql} query, which may lead to false positives or negatives.\n\nTo avoid these issues, a best practice is to be explicit about the field that\nyou query, and query `keyword` sub-fields instead of `text` fields.\n\n[discrete]\n[[esql-tsdb]]\n=== Time series data streams are not supported\n\n{esql} does not support querying time series data streams (TSDS).\n\n[discrete]\n[[esql-limitations-date-math]]\n=== Date math limitations\n\nDate math expressions work well when the leftmost expression is a datetime, for\nexample:\n[source,txt]\n----\nnow() + 1 year - 2hour + ...\n----\n\nBut using parentheses or putting the datetime to the right is not always supported yet. For example, the following expressions fail:\n[source,txt]\n----\n1year + 2hour + now()\nnow() + (1year + 2hour)\n----\n\nDate math does not allow subtracting two datetimes, for example:\n[source,txt]\n----\nnow() - 2023-10-26\n----\n\n[discrete]\n[[esql-limitations-enrich]]\n=== Enrich limitations\n\ninclude::esql-enrich-data.asciidoc[tag=limitations]\n\n[discrete]\n[[esql-limitations-dissect]]\n=== Dissect limitations\n\ninclude::esql-process-data-with-dissect-grok.asciidoc[tag=dissect-limitations]\n\n[discrete]\n[[esql-limitations-grok]]\n=== Grok limitations\n\ninclude::esql-process-data-with-dissect-grok.asciidoc[tag=grok-limitations]\n\n[discrete]\n[[esql-limitations-mv]]\n=== Multivalue limitations\n\n{esql} <<esql-multivalued-fields,supports multivalued fields>>, but functions\nreturn `null` when applied to a multivalued field, unless documented otherwise.\nWork around this limitation by converting the field to single value with one of\nthe <<esql-mv-functions,multivalue functions>>.\n\n[discrete]\n[[esql-limitations-timezone]]\n=== Timezone support\n\n{esql} only supports the UTC timezone.\n\n[discrete]\n[[esql-limitations-kibana]]\n=== Kibana limitations\n\ninclude::esql-kibana.asciidoc[tag=limitations]\n"
}