{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.805273",
        "size": 35462,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/oidc-guide.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "oidc-guide",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[oidc-guide]]\n\n== Configuring single sign-on to the {stack} using OpenID Connect\n\nThe Elastic Stack supports single sign-on (SSO) using OpenID Connect via {kib} using\n{es} as the backend service that holds most of the functionality. {kib} and {es}\ntogether represent an OpenID Connect Relying Party (RP) that supports the authorization code flow and implicit flow as these are defined in the OpenID Connect specification.\n\nThis guide assumes that you have an OpenID Connect Provider where the\nElastic Stack Relying Party will be registered.\n\nNOTE: The OpenID Connect realm support in {kib} is designed with the expectation that it\nwill be the primary authentication method for the users of that {kib} instance. The\n<<oidc-configure-kibana>> section describes what this entails and how you can set it up to support\nother realms if necessary.\n\n[[oidc-guide-op]]\n=== The OpenID Connect Provider\n\nThe OpenID Connect Provider (OP) is the entity in OpenID Connect that is responsible for\nauthenticating the user and for granting the necessary tokens with the authentication and\nuser information to be consumed by the Relying Parties.\n\nIn order for the Elastic Stack to be able to use your OpenID Connect Provider for authentication,\na trust relationship needs to be established between the OP and the RP. In the OpenID Connect\nProvider, this means registering the RP as a client. OpenID Connect defines a dynamic client\nregistration protocol but this is usually geared towards real-time client registration and\nnot the trust establishment process for cross security domain single sign on. All OPs will\nalso allow for the manual registration of an RP as a client, via a user interface or (less often)\nvia the consumption of a metadata document.\n\nThe process for registering the Elastic Stack RP will be different from OP to OP and following\nthe provider's relevant documentation is prudent. The information for the\nRP that you commonly need to provide for registration are the following:\n\n- `Relying Party Name`: An arbitrary identifier for the relying party. Neither the specification\nnor the Elastic Stack implementation impose any constraints on this value.\n- `Redirect URI`: This is the URI where the OP will redirect the user's browser after authentication. The\nappropriate value for this will depend on your setup and whether or not {kib} sits behind a proxy or\nload balancer. It will typically be +$\\{kibana-url}/api/security/oidc/callback+ (for the authorization code flow) or +$\\{kibana-url}/api/security/oidc/implicit+ (for the implicit flow) where _$\\{kibana-url}_ is the base URL for your {kib} instance. You might also see this\ncalled `Callback URI`.\n\nAt the end of the registration process, the OP will assign a Client Identifier and a Client Secret for the RP ({stack}) to use.\nNote these two values as they will be used in the {es} configuration.\n\n[[oidc-elasticsearch-authentication]]\n=== Configure {es} for OpenID Connect authentication\n\nThe following is a summary of the configuration steps required in order to enable authentication\nusing OpenID Connect in {es}:\n\n. <<oidc-enable-http,Enable SSL/TLS for HTTP>>\n. <<oidc-enable-token,Enable the Token Service>>\n. <<oidc-create-realm,Create one or more OpenID Connect realms>>\n. <<oidc-role-mappings,Configure role mappings>>\n\n[[oidc-enable-http]]\n==== Enable TLS for HTTP\n\nIf your {es} cluster is operating in production mode, then you must\nconfigure the HTTP interface to use SSL/TLS before you can enable OpenID Connect\nauthentication.\n\nFor more information, see\n<<encrypt-http-communication>>.\n\n[[oidc-enable-token]]\n==== Enable the token service\n\nThe {es} OpenID Connect implementation makes use of the {es} Token Service. This service\nis automatically enabled if you configure TLS on the HTTP interface, and can be\nexplicitly configured by including the following in your `elasticsearch.yml` file:\n\n[source, yaml]\n------------------------------------------------------------\nxpack.security.authc.token.enabled: true\n------------------------------------------------------------\n\n[[oidc-create-realm]]\n==== Create an OpenID Connect realm\n\nOpenID Connect based authentication is enabled by configuring the appropriate realm within\nthe authentication chain for {es}.\n\nThis realm has a few mandatory settings, and a number of optional settings.\nThe available settings are described in detail in\n<<ref-oidc-settings>>. This\nguide will explore the most common settings.\n\nCreate an OpenID Connect (the realm type is `oidc`) realm in your `elasticsearch.yml` file\nsimilar to what is shown below:\n\nNOTE: The values used below are meant to be an example and are not intended to apply to\nevery use case. The details below the configuration snippet provide insights and suggestions\nto help you pick the proper values, depending on your OP configuration.\n\n[source, yaml]\n-------------------------------------------------------------------------------------\nxpack.security.authc.realms.oidc.oidc1:\n  order: 2\n  rp.client_id: \"the_client_id\"\n  rp.response_type: code\n  rp.redirect_uri: \"https://kibana.example.org:5601/api/security/oidc/callback\"\n  op.issuer: \"https://op.example.org\"\n  op.authorization_endpoint: \"https://op.example.org/oauth2/v1/authorize\"\n  op.token_endpoint: \"https://op.example.org/oauth2/v1/token\"\n  op.jwkset_path: oidc/jwkset.json\n  op.userinfo_endpoint: \"https://op.example.org/oauth2/v1/userinfo\"\n  op.endsession_endpoint: \"https://op.example.org/oauth2/v1/logout\"\n  rp.post_logout_redirect_uri: \"https://kibana.example.org:5601/security/logged_out\"\n  claims.principal: sub\n  claims.groups: \"http://example.info/claims/groups\"\n-------------------------------------------------------------------------------------\n\nThe configuration values used in the example above are:\n\nxpack.security.authc.realms.oidc.oidc1::\n    This defines a new `oidc` authentication realm named \"oidc1\".\n    See <<realms>> for more explanation of realms.\n\norder::\n    You should define a unique order on each realm in your authentication chain.\n    It is recommended that the OpenID Connect realm be at the bottom of your authentication\n    chain (that is, that it has the _highest_ order).\n\nrp.client_id::\n    This, usually opaque, arbitrary string, is the Client Identifier that was assigned to the Elastic Stack RP by the OP upon\n    registration.\n\nrp.response_type::\n    This is an identifier that controls which OpenID Connect authentication flow this RP supports and also\n    which flow this RP requests the OP should follow. Supported values are\n    - `code`, which means that the RP wants to use the Authorization Code flow. If your OP supports the\n       Authorization Code flow, you should select this instead of the Implicit Flow.\n    - `id_token token` which means that the RP wants to use the Implicit flow and we also request an oAuth2\n       access token from the OP, that we can potentially use for follow up requests ( UserInfo ). This\n       should be selected if the OP offers a UserInfo endpoint in its configuration, or if you know that\n       the claims you will need to use for role mapping are not available in the ID Token.\n    - `id_token` which means that the RP wants to use the Implicit flow, but is not interested in getting\n       an oAuth2 token too. Select this if you are certain that all necessary claims will be contained in\n       the ID Token or if the OP doesn't offer a User Info endpoint.\n\nrp.redirect_uri::\n    The redirect URI where the OP will redirect the browser after authentication. This needs to be\n    _exactly_ the same as the one <<oidc-guide-op, configured with the OP upon registration>> and will\n    typically be +$\\{kibana-url}/api/security/oidc/callback+ where _$\\{kibana-url}_ is the base URL for your {kib} instance\n\nop.issuer::\n    A verifiable Identifier for your OpenID Connect Provider. An Issuer Identifier is usually a case sensitive URL.\n    The value for this setting should be provided by your OpenID Connect Provider.\n\nop.authorization_endpoint::\n    The URL for the Authorization Endpoint in the OP. This is where the user's browser\n    will be redirected to start the authentication process. The value for this setting should be provided by your\n    OpenID Connect Provider.\n\nop.token_endpoint::\n    The URL for the Token Endpoint in the OpenID Connect Provider. This is the endpoint where\n    {es} will send a request to exchange the code for an ID Token. This setting is optional when\n    you use the implicit flow. The value for this setting should be provided by your OpenID Connect Provider.\n\nop.jwkset_path::\n    The path to a file or a URL containing a JSON Web Key Set with the key material that the OpenID Connect\n    Provider uses for signing tokens and claims responses. If a path is set, it is resolved relative to the {es}\n    config directory.\n    {es} will automatically monitor this file for changes and will reload the configuration whenever\n    it is updated. Your OpenID Connect Provider should provide you with this file or a URL where it is available.\n\nop.userinfo_endpoint::\n    (Optional) The URL for the UserInfo Endpoint in the OpenID Connect Provider. This is the endpoint of the OP that\n    can be queried to get further user information, if required. The value for this setting should be provided by your\n     OpenID Connect Provider.\n\nop.endsession_endpoint::\n    (Optional) The URL to the End Session Endpoint in the OpenID Connect Provider. This is the endpoint where the user's\n    browser will be redirected after local logout, if the realm is configured for RP initiated Single Logout and\n    the OP supports it. The value for this setting should be provided by your OpenID Connect Provider.\n\nrp.post_logout_redirect_uri::\n    (Optional) The Redirect URL where the OpenID Connect Provider should redirect the user after a\n    successful Single Logout (assuming `op.endsession_endpoint` above is also set). This should be set to a value that\n    will not trigger a new OpenID Connect Authentication, such as +$\\{kibana-url}/security/logged_out+  or\n    +$\\{kibana-url}/login?msg=LOGGED_OUT+ where _$\\{kibana-url}_ is the base URL for your {kib} instance.\n\nclaims.principal:: See <<oidc-claims-mappings>>.\nclaims.groups:: See <<oidc-claims-mappings>>.\n\nA final piece of configuration of the OpenID Connect realm is to set the `Client Secret` that was assigned\nto the RP during registration in the OP. This is a secure setting and as such is not defined in the realm\nconfiguration in `elasticsearch.yml` but added to the\n<<secure-settings,elasticsearch keystore>>.\nFor instance\n\n\n[source,sh]\n----\nbin/elasticsearch-keystore add xpack.security.authc.realms.oidc.oidc1.rp.client_secret\n----\n\nNOTE: Changes to the `client_secret` requires a restart of the {es} nodes to pick up the change.\n\nNOTE: According to the OpenID Connect specification, the OP should also make their configuration\navailable at a well known URL, which is the concatenation of their `Issuer` value with the\n`.well-known/openid-configuration` string. For example: `https://op.org.com/.well-known/openid-configuration`\nThat document should contain all the necessary information to configure the OpenID Connect realm in {es}.\n\n\n[[oidc-claims-mappings]]\n==== Claims mapping\n\n===== Claims and scopes\n\nWhen authenticating to {kib} using OpenID Connect, the OP will provide information about the user\nin the form of OpenID Connect Claims, that can be included either in the ID Token, or be retrieved from the\nUserInfo endpoint of the OP. The claim is defined as a piece of information asserted by the OP\nfor the authenticated user. Simply put, a claim is a name/value pair that contains information about\nthe user. Related to claims, we also have the notion of OpenID Connect Scopes. Scopes are identifiers\nthat are used to request access to specific lists of claims. The standard defines a set of scope\nidentifiers that can be requested. The only mandatory one is `openid`, while commonly used ones are\n`profile` and `email`. The `profile` scope requests access to the `name`,`family_name`,`given_name`,`middle_name`,`nickname`,\n`preferred_username`,`profile`,`picture`,`website`,`gender`,`birthdate`,`zoneinfo`,`locale`, and `updated_at` claims.\nThe `email` scope requests access to the `email` and `email_verified` claims. The process is that\nthe RP requests specific scopes during the authentication request. If the OP Privacy Policy\nallows it and the authenticating user consents to it, the related claims are returned to the\nRP (either in the ID Token or as a UserInfo response).\n\nThe list of the supported claims will vary depending on the OP you are using, but you can expect\nthe https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims[Standard Claims] to be\nlargely supported.\n\n[[oidc-claim-to-property]]\n===== Mapping claims to user properties\n\nThe goal of claims mapping is to configure {es} in such a way as to be able to map the values of\nspecified returned claims to one of the <<oidc-user-properties, user properties>> that are supported\nby {es}. These user properties are then utilized to identify the user in the {kib} UI or the audit\nlogs, and can also be used to create <<oidc-role-mappings, role mapping>> rules.\n\nThe recommended steps for configuring OpenID Claims mapping are as follows:\n\n. Consult your OP configuration to see what claims it might support. Note that\n  the list provided in the OP's metadata or in the configuration page of the OP\n  is a list of potentially supported claims. However, for privacy reasons it might\n  not be a complete one, or not all supported claims will be available for all\n  authenticated users.\n\n. Read through the list of <<oidc-user-properties, user properties>> that {es}\n  supports, and decide which of them are useful to you, and can be provided by\n  your OP in the form of claims. At a _minimum_, the `principal` user property\n  is required.\n\n. Configure your OP to \"release\" those claims to your {stack} Relying\n  party. This process greatly varies by provider. You can use a static\n  configuration while others will support that the RP requests the scopes that\n  correspond to the claims to be \"released\" on authentication time. See\n  <<ref-oidc-settings,`rp.requested_scopes`>> for details about how\n  to configure the scopes to request. To ensure interoperability and minimize\n  the errors, you should only request scopes that the OP supports, and which you\n  intend to map to {es} user properties.\n\n  NOTE: You can only map claims with values that are strings, numbers, boolean values or an array\n  of the aforementioned.\n\n. Configure the OpenID Connect realm in {es} to associate the {es} user properties (see\n  <<oidc-user-properties, the listing>> below), to the name of the claims that your\n  OP will release. In the example above, we have configured the `principal` and\n  `groups` user properties as follows:\n\n  .. `claims.principal: sub` : This instructs {es} to look for the OpenID Connect claim named `sub`\n     in the ID Token that the OP issued for the user ( or in the UserInfo response ) and assign the\n     value of this claim to the `principal` user property. `sub` is a commonly used claim for the\n     principal property as it is an identifier of the user in the OP and it is also a required\n     claim of the ID Token, thus offering guarantees that it will be available. It is, however,\n     only used as an example here, the OP may provide another claim that is a better fit for your needs.\n\n  .. `claims.groups: \"http://example.info/claims/groups\"` : Similarly, this instructs {es} to look\n     for the claim with the name `http://example.info/claims/groups` (note that this is a URI - an\n     identifier, treated as a string and not a URL pointing to a location that will be retrieved)\n     either in the ID Token or in the UserInfo response, and map the value(s) of it to the user\n     property `groups` in {es}. There is no standard claim in the specification that is used for\n     expressing roles or group memberships of the authenticated user in the OP, so the name of the\n     claim that should be mapped here, will vary greatly between providers. Consult your OP\n     documentation for more details.\n\n[[oidc-user-properties]]\n===== {es} user properties\n\nThe {es} OpenID Connect realm can be configured to map OpenID Connect claims to the\nfollowing properties on the authenticated user:\n\nprincipal:: _(Required)_\n    This is the _username_ that will be applied to a user that authenticates\n    against this realm.\n    The `principal` appears in places such as the {es} audit logs.\n\nNOTE: If the principal property fails to be mapped from a claim, the authentication fails.\n\ngroups:: _(Recommended)_\n    If you wish to use your OP's concept of groups or roles as the basis for a\n    user's {es} privileges, you should map them with this property.\n    The `groups` are passed directly to your <<oidc-role-mappings, role mapping rules>>.\n\nname:: _(Optional)_ The user's full name.\nmail:: _(Optional)_ The user's email address.\ndn:: _(Optional)_ The user's X.500 _Distinguished Name_.\n\n\n===== Extracting partial values from OpenID Connect claims\n\nThere are some occasions where the value of a claim may contain more information\nthan you wish to use within {es}. A common example of this is one where the\nOP works exclusively with email addresses, but you would like the user's\n`principal` to use the _local-name_ part of the email address.\nFor example if their email address was `james.wong@staff.example.com`, then you\nwould like their principal to simply be `james.wong`.\n\nThis can be achieved using the `claim_patterns` setting in the {es}\nrealm, as demonstrated in the realm configuration below:\n\n[source, yaml]\n-------------------------------------------------------------------------------------\nxpack.security.authc.realms.oidc.oidc1:\n  order: 2\n  rp.client_id: \"the_client_id\"\n  rp.response_type: code\n  rp.redirect_uri: \"https://kibana.example.org:5601/api/security/oidc/callback\"\n  op.authorization_endpoint: \"https://op.example.org/oauth2/v1/authorize\"\n  op.token_endpoint: \"https://op.example.org/oauth2/v1/token\"\n  op.userinfo_endpoint: \"https://op.example.org/oauth2/v1/userinfo\"\n  op.endsession_endpoint: \"https://op.example.org/oauth2/v1/logout\"\n  op.issuer: \"https://op.example.org\"\n  op.jwkset_path: oidc/jwkset.json\n  claims.principal: email_verified\n  claim_patterns.principal: \"^([^@]+)@staff\\\\.example\\\\.com$\"\n-------------------------------------------------------------------------------------\n\nIn this case, the user's `principal` is mapped from the `email_verified` claim, but a\nregular expression is applied to the value before it is assigned to the user.\nIf the regular expression matches, then the result of the first group is used as the\neffective value. If the regular expression does not match then the claim\nmapping fails.\n\nIn this example, the email address must belong to the `staff.example.com` domain,\nand then the local-part (anything before the `@`) is used as the principal.\nAny users who try to login using a different email domain will fail because the\nregular expression will not match against their email address, and thus their\nprincipal user property - which is mandatory - will not be populated.\n\nIMPORTANT: Small mistakes in these regular expressions can have significant\nsecurity consequences. For example, if we accidentally left off the trailing\n`$` from the example above, then we would match any email address where the\ndomain starts with `staff.example.com`, and this would accept an email\naddress such as `admin@staff.example.com.attacker.net`. It is important that\nyou make sure your regular expressions are as precise as possible so that\nyou do not inadvertently open an avenue for user impersonation attacks.\n\n[[third-party-login]]\n==== Third party initiated single sign-on\n\nThe Open ID Connect realm in {es} supports 3rd party initiated login as described in the\nhttps://openid.net/specs/openid-connect-core-1_0.html#ThirdPartyInitiatedLogin[relevant specification].\n\nThis allows the OP itself or another, third party other than the RP, to initiate the authentication\nprocess while requesting the OP to be used for the authentication. Please note that the Elastic\nStack RP should already be configured for this OP, in order for this process to succeed.\n\n\n[[oidc-logout]]\n==== OpenID Connect Logout\n\nThe OpenID Connect realm in {es} supports RP-Initiated Logout Functionality as\ndescribed in the\nhttps://openid.net/specs/openid-connect-session-1_0.html#RPLogout[relevant part of the specification]\n\nIn this process, the OpenID Connect RP (the Elastic Stack in this case) will redirect the user's\nbrowser to predefined URL of the OP after successfully completing a local logout. The OP can then\nlogout the user also, depending on the configuration, and should finally redirect the user back to the\nRP. The `op.endsession_endpoint` in the realm configuration determines the URL in the OP that the browser\nwill be redirected to. The `rp.post_logout_redirect_uri` setting determines the URL to redirect\nthe user back to after the OP logs them out.\n\nWhen configuring `rp.post_logout_redirect_uri`, care should be taken to not point this to a URL that\nwill trigger re-authentication of the user. For instance, when using OpenID Connect to support\nsingle sign-on to {kib}, this could be set to either +$\\{kibana-url}/security/logged_out+, which will show a\nuser-friendly message to the user or +$\\{kibana-url}/login?msg=LOGGED_OUT+ which will take the user to the login selector in {kib}.\n\n[[oidc-ssl-config]]\n==== OpenID Connect Realm SSL Configuration\n\nOpenID Connect depends on TLS to provide security properties such as encryption in transit and endpoint authentication. The RP\nis required to establish back-channel communication with the OP in order to exchange the code for an ID Token during the\nAuthorization code grant flow and in order to get additional user information from the UserInfo endpoint. Furthermore, if\nyou configure `op.jwks_path` as a URL, {es} will need to get the OP's signing keys from the file hosted there. As such, it is\nimportant that {es} can validate and trust the server certificate that the OP uses for TLS. Since the system truststore is\nused for the client context of outgoing https connections, if your OP is using a certificate from a trusted CA, no additional\nconfiguration is needed.\n\nHowever, if the issuer of your OP's certificate is not trusted by the JVM on which {es} is running (e.g it uses a organization CA), then you must configure\n{es} to trust that CA. Assuming that you have the CA certificate that has signed the certificate that the OP uses for TLS\nstored in the /oidc/company-ca.pem` file stored in the configuration directory of {es}, you need to set the following\nproperty in the realm configuration:\n\n[source, yaml]\n-------------------------------------------------------------------------------------\nxpack.security.authc.realms.oidc.oidc1:\n  order: 1\n  ...\n  ssl.certificate_authorities: [\"/oidc/company-ca.pem\"]\n-------------------------------------------------------------------------------------\n\n[[oidc-role-mappings]]\n=== Configuring role mappings\n\nWhen a user authenticates using OpenID Connect, they are identified to the Elastic Stack,\nbut this does not automatically grant them access to perform any actions or\naccess any data.\n\nYour OpenID Connect users cannot do anything until they are assigned roles. This can be done\nthrough either the\n<<security-api-put-role-mapping,add role mapping API>> or with\n<<authorization_realms,authorization realms>>.\n\nNOTE: You cannot use <<mapping-roles-file,role mapping files>>\nto grant roles to users authenticating via OpenID Connect.\n\nThis is an example of a simple role mapping that grants the `example_role` role\nto any user who authenticates against the `oidc1` OpenID Connect realm:\n\n[source,console]\n--------------------------------------------------\nPUT /_security/role_mapping/oidc-example\n{\n  \"roles\": [ \"example_role\" ], <1>\n  \"enabled\": true,\n  \"rules\": {\n    \"field\": { \"realm.name\": \"oidc1\" }\n  }\n}\n--------------------------------------------------\n\n<1> The `example_role` role is *not* a builtin Elasticsearch role.\nThis example assumes that you have created a custom role of your own, with\nappropriate access to your <<roles-indices-priv,data streams, indices,>> and\n{kibana-ref}/kibana-privileges.html#kibana-feature-privileges[Kibana features].\n\nThe user properties that are mapped via the realm configuration are used to process\nrole mapping rules, and these rules determine which roles a user is granted.\n\nThe user fields that are provided to the role\nmapping are derived from the OpenID Connect claims as follows:\n\n- `username`: The `principal` user property\n- `dn`: The `dn` user property\n- `groups`: The `groups` user property\n- `metadata`: See <<oidc-user-metadata>>\n\nFor more information, see <<mapping-roles>> and\n<<security-role-mapping-apis>>.\n\nIf your OP has the ability to provide groups or roles to RPs via tha use of\nan OpenID Claim, then you should map this claim to the `claims.groups` setting in\nthe {es} realm (see <<oidc-claim-to-property>>), and then make use of it in a role mapping\nas per the example below.\n\nThis mapping grants the {es} `finance_data` role, to any users who authenticate\nvia the `oidc1` realm with the `finance-team` group membership.\n\n[source,console]\n--------------------------------------------------\nPUT /_security/role_mapping/oidc-finance\n{\n  \"roles\": [ \"finance_data\" ],\n  \"enabled\": true,\n  \"rules\": { \"all\": [\n        { \"field\": { \"realm.name\": \"oidc1\" } },\n        { \"field\": { \"groups\": \"finance-team\" } }\n  ] }\n}\n--------------------------------------------------\n\nIf your users also exist in a repository that can be directly accessed by {es}\n(such as an LDAP directory) then you can use\n<<authorization_realms, authorization realms>> instead of role mappings.\n\nIn this case, you perform the following steps:\n\n1. In your OpenID Connect realm, assign a claim to act as the lookup userid,\n   by configuring the `claims.principal` setting.\n2. Create a new realm that can look up users from your local repository (e.g. an\n   `ldap` realm)\n3. In your OpenID Connect realm, set `authorization_realms` to the name of the\nrealm you created in step 2.\n\n[[oidc-user-metadata]]\n=== User metadata\n\nBy default users who authenticate via OpenID Connect will have some additional metadata\nfields. These fields will include every OpenID Claim that is provided in the authentication response\n(regardless of whether it is mapped to an {es} user property). For example,\nin the metadata field `oidc(claim_name)`, \"claim_name\" is the name of the\nclaim as it was contained in the ID Token or in the User Info response. Note that these will\ninclude all the https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID Token claims]\nthat pertain to the authentication event, rather than the user themselves.\n\nThis behaviour can be disabled by adding `populate_user_metadata: false` as\na setting in the oidc realm.\n\n[[oidc-configure-kibana]]\n=== Configuring {kib}\n\nOpenID Connect authentication in {kib} requires a small number of additional settings\nin addition to the standard {kib} security configuration. The\n{kibana-ref}/using-kibana-with-security.html[{kib} security documentation]\nprovides details on the available configuration options that you can apply.\n\nIn particular, since your {es} nodes have been configured to use TLS on the HTTP\ninterface, you must configure {kib} to use a `https` URL to connect to {es}, and\nyou may need to configure `elasticsearch.ssl.certificateAuthorities` to trust\nthe certificates that {es} has been configured to use.\n\nOpenID Connect authentication in {kib} is subject to the following timeout settings in\n`kibana.yml`:\n\n- {kibana-ref}/xpack-security-session-management.html#session-idle-timeout[`xpack.security.session.idleTimeout`]\n- {kibana-ref}/xpack-security-session-management.html#session-lifespan[`xpack.security.session.lifespan`]\n\nYou may want to adjust these timeouts based on your security requirements.\n\nThe three additional settings that are required for OpenID Connect support are shown below:\n\n[source, yaml]\n------------------------------------------------------------\nxpack.security.authc.providers:\n  oidc.oidc1:\n    order: 0\n    realm: \"oidc1\"\n------------------------------------------------------------\n\nThe configuration values used in the example above are:\n\n`xpack.security.authc.providers`::\nAdd `oidc` provider to instruct {kib} to use OpenID Connect single sign-on as the\nauthentication method. This instructs Kibana to attempt to initiate an SSO flow\neverytime a user attempts to access a URL in Kibana, if the user is not already\nauthenticated. If you also want to allow users to login with a username and password,\nyou must enable the `basic` authentication provider too. For example:\n\n[source, yaml]\n------------------------------------------------------------\nxpack.security.authc.providers:\n  oidc.oidc1:\n    order: 0\n    realm: \"oidc1\"\n  basic.basic1:\n    order: 1\n------------------------------------------------------------\n\nThis will allow users that haven't already authenticated with OpenID Connect to\nlog in using the {kib} login form.\n\n`xpack.security.authc.providers.oidc.<provider-name>.realm`::\nThe name of the OpenID Connect realm in {es} that should handle authentication\nfor this Kibana instance.\n\n[[oidc-without-kibana]]\n=== OpenID Connect without {kib}\n\nThe OpenID Connect realm is designed to allow users to authenticate to {kib} and as\nsuch, most of the parts of the guide above make the assumption that {kib} is used.\nThis section describes how a custom web application could use the relevant OpenID\nConnect REST APIs in order to authenticate the users to {es}, with OpenID Connect.\n\nSingle sign-on realms such as OpenID Connect and SAML make use of the Token Service in\n{es} and in principle exchange a SAML or OpenID Connect Authentication response for\nan {es} access token and a refresh token. The access token is used as credentials for subsequent calls to {es}. The\nrefresh token enables the user to get new {es} access tokens after the current one\nexpires.\n\nNOTE: The {es} Token Service can be seen as a minimal oAuth2 authorization server\nand the access token and refresh token mentioned above are tokens that pertain\n_only_ to this authorization server. They are generated and consumed _only_ by {es}\nand are in no way related to the tokens ( access token and ID Token ) that the\nOpenID Connect Provider issues.\n\n==== Register the RP with an OpenID Connect Provider\n\nThe Relying Party ( {es} and the custom web app ) will need to be registered as\nclient with the OpenID Connect Provider. Note that when registering the\n`Redirect URI`, it needs to be a URL in the custom web app.\n\n==== OpenID Connect Realm\n\nAn OpenID Connect realm needs to be created and configured accordingly\nin {es}. See <<oidc-elasticsearch-authentication>>\n\n==== Service Account user for accessing the APIs\n\nThe realm is designed with the assumption that there needs to be a privileged entity\nacting as an authentication proxy. In this case, the custom web application is the\nauthentication proxy handling the authentication of end users ( more correctly,\n\"delegating\" the authentication to the OpenID Connect Provider ). The OpenID Connect\nAPIs require authentication and the necessary authorization level for the authenticated\nuser. For this reason, a Service Account user needs to be created and assigned a role\nthat gives them the `manage_oidc` cluster privilege. The use of the `manage_token`\ncluster privilege will be necessary after the authentication takes place, so that the\nuser can maintain access or be subsequently logged out.\n\n[source,console]\n--------------------------------------------------\nPOST /_security/role/facilitator-role\n{\n  \"cluster\" : [\"manage_oidc\", \"manage_token\"]\n}\n--------------------------------------------------\n\n\n[source,console]\n--------------------------------------------------\nPOST /_security/user/facilitator\n{\n  \"password\" : \"<somePasswordHere>\",\n  \"roles\"    : [ \"facilitator-role\"]\n}\n--------------------------------------------------\n\n\n==== Handling the authentication flow\n\nOn a high level, the custom web application would need to perform the following steps in order to\nauthenticate a user with OpenID Connect:\n\n. Make an HTTP POST request to `_security/oidc/prepare`, authenticating as the `facilitator` user, using the name of the\nOpenID Connect realm in the {es} configuration in the request body. For more\ndetails, see\n<<security-api-oidc-prepare-authentication>>.\n+\n[source,console]\n--------------------------------------------------\nPOST /_security/oidc/prepare\n{\n  \"realm\" : \"oidc1\"\n}\n--------------------------------------------------\n+\n. Handle the response to `/_security/oidc/prepare`. The response from {es} will contain 3 parameters:\n  `redirect`, `state`, `nonce`. The custom web application would need to store the values for `state`\n  and `nonce` in the user's session (client side in a cookie or server side if session information is\n   persisted this way) and redirect the user's browser to the URL that will be contained in the\n  `redirect` value.\n. Handle a subsequent response from the OP. After the user is successfully authenticated with the\n  OpenID Connect Provider, they will be redirected back to the callback/redirect URI. Upon receiving\n  this HTTP GET request, the custom web app will need to make an HTTP POST request to\n  `_security/oidc/authenticate`, again - authenticating as the `facilitator` user - passing the URL\n  where the user's browser was redirected to, as a parameter, along with the\n  values for `nonce` and `state` it had saved in the user's session previously. If more than one\n  OpenID Connect realms are configured, the custom web app can specify the name of the realm to be\n  used for handling this, but this parameter is optional. For more details, see\n  <<security-api-oidc-authenticate>>.\n+\n[source,console]\n-----------------------------------------------------------------------\nPOST /_security/oidc/authenticate\n{\n  \"redirect_uri\" : \"https://oidc-kibana.elastic.co:5603/api/security/oidc/callback?code=jtI3Ntt8v3_XvcLzCFGq&state=4dbrihtIAt3wBTwo6DxK-vdk-sSyDBV8Yf0AjdkdT5I\",\n  \"state\" : \"4dbrihtIAt3wBTwo6DxK-vdk-sSyDBV8Yf0AjdkdT5I\",\n  \"nonce\" : \"WaBPH0KqPVdG5HHdSxPRjfoZbXMCicm5v1OiAj0DUFM\",\n  \"realm\" : \"oidc1\"\n}\n-----------------------------------------------------------------------\n// TEST[catch:unauthorized]\n+\nElasticsearch will validate this and if all is correct will respond with an access token that can be used\nas a `Bearer` token for subsequent requests and a refresh token that can be later used to refresh the given\naccess token as described in <<security-api-get-token>>.\n. At some point, if necessary, the custom web application can log the user out by using the\n<<security-api-oidc-logout,OIDC logout API>> passing the access token and refresh token as parameters. For example:\n+\n[source,console]\n--------------------------------------------------\nPOST /_security/oidc/logout\n{\n  \"token\" : \"dGhpcyBpcyBub3QgYSByZWFsIHRva2VuIGJ1dCBpdCBpcyBvbmx5IHRlc3QgZGF0YS4gZG8gbm90IHRyeSB0byByZWFkIHRva2VuIQ==\",\n  \"refresh_token\": \"vLBPvmAB6KvwvJZr27cS\"\n}\n--------------------------------------------------\n// TEST[catch:request]\n+\nIf the realm is configured accordingly, this may result in a response with a `redirect` parameter indicating where\nthe user needs to be redirected in the OP in order to complete the logout process.\n"
}