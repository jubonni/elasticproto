{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.281272",
        "size": 18053,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/geoip-processor.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "geoip-processor",
        "version": "8.15"
    },
    "doc": "[[geoip-processor]]\n=== GeoIP processor\n++++\n<titleabbrev>GeoIP</titleabbrev>\n++++\n\nThe `geoip` processor adds information about the geographical location of an\nIPv4 or IPv6 address.\n\n[[geoip-automatic-updates]]\nBy default, the processor uses the GeoLite2 City, GeoLite2 Country, and GeoLite2\nASN IP geolocation databases from http://dev.maxmind.com/geoip/geoip2/geolite2/[MaxMind], shared under the\nCC BY-SA 4.0 license. It automatically downloads these databases if your nodes can connect to `storage.googleapis.com` domain and either:\n\n* `ingest.geoip.downloader.eager.download` is set to true\n* your cluster has at least one pipeline with a `geoip` processor\n\n{es} automatically downloads updates for these databases from the Elastic GeoIP\nendpoint:\nhttps://geoip.elastic.co/v1/database?elastic_geoip_service_tos=agree[https://geoip.elastic.co/v1/database].\nTo get download statistics for these updates, use the <<geoip-stats-api,GeoIP\nstats API>>.\n\nIf your cluster can't connect to the Elastic GeoIP endpoint or you want to\nmanage your own updates, see <<manage-geoip-database-updates>>.\n\nIf you would like to have {es} download database files directly from Maxmind using your own provided\nlicense key, see <<put-geoip-database-api>>.\n\nIf {es} can't connect to the endpoint for 30 days all updated databases will become\ninvalid. {es} will stop enriching documents with geoip data and will add `tags: [\"_geoip_expired_database\"]`\nfield instead.\n\n[[using-ingest-geoip]]\n==== Using the `geoip` Processor in a Pipeline\n\n[[ingest-geoip-options]]\n.`geoip` options\n[options=\"header\"]\n|======\n| Name                                     | Required  | Default                                                                            | Description\n| `field`                                  | yes       | -                                                                                  | The field to get the IP address from for the geographical lookup.\n| `target_field`                           | no        | geoip                                                                              | The field that will hold the geographical information looked up from the MaxMind database.\n| `database_file`                          | no        | GeoLite2-City.mmdb                                                                 | The database filename referring to one of the automatically downloaded GeoLite2 databases (GeoLite2-City.mmdb, GeoLite2-Country.mmdb, or GeoLite2-ASN.mmdb), or the name of a supported database file in the `ingest-geoip` config directory, or the name of a <<get-geoip-database-api, configured database>> (with the `.mmdb` suffix appended).\n| `properties`                             | no        | [`continent_name`, `country_iso_code`, `country_name`, `region_iso_code`, `region_name`, `city_name`, `location`] *   | Controls what properties are added to the `target_field` based on the geoip lookup.\n| `ignore_missing`                         | no        | `false`                                                                            | If `true` and `field` does not exist, the processor quietly exits without modifying the document\n| `first_only`                             | no        | `true`                                                                             | If `true` only first found geoip data will be returned, even if `field` contains array\n| `download_database_on_pipeline_creation` | no        | `true`                                                                             | If `true` (and if `ingest.geoip.downloader.eager.download` is `false`), the missing database is downloaded when the pipeline is created. Else, the download is triggered by when the pipeline is used as the `default_pipeline` or `final_pipeline` in an index.\n|======\n\n*Depends on what is available in `database_file`:\n\n* If a GeoLite2 City or GeoIP2 City database is used, then the following fields may be added under the `target_field`: `ip`,\n`country_iso_code`, `country_name`, `continent_code`, `continent_name`, `region_iso_code`, `region_name`, `city_name`, `timezone`,\nand `location`. The fields actually added depend on what has been found and which properties were configured in `properties`.\n* If a GeoLite2 Country or GeoIP2 Country database is used, then the following fields may be added under the `target_field`: `ip`,\n`country_iso_code`, `country_name`, `continent_code`, and `continent_name`. The fields actually added depend on what has been found\nand which properties were configured in `properties`.\n* If the GeoLite2 ASN database is used, then the following fields may be added under the `target_field`: `ip`,\n`asn`, `organization_name` and `network`. The fields actually added depend on what has been found and which properties were configured\nin `properties`.\n* If the GeoIP2 Anonymous IP database is used, then the following fields may be added under the `target_field`: `ip`,\n`hosting_provider`, `tor_exit_node`, `anonymous_vpn`, `anonymous`, `public_proxy`, and `residential_proxy`. The fields actually added\ndepend on what has been found and which properties were configured in `properties`.\n* If the GeoIP2 Connection Type database is used, then the following fields may be added under the `target_field`: `ip`, and\n`connection_type`. The fields actually added depend on what has been found and which properties were configured in `properties`.\n* If the GeoIP2 Domain database is used, then the following fields may be added under the `target_field`: `ip`, and `domain`.\nThe fields actually added depend on what has been found and which properties were configured in `properties`.\n* If the GeoIP2 ISP database is used, then the following fields may be added under the `target_field`: `ip`, `asn`,\n`organization_name`, `network`, `isp`, `isp_organization_name`, `mobile_country_code`, and `mobile_network_code`. The fields actually added\ndepend on what has been found and which properties were configured in `properties`.\n* If the GeoIP2 Enterprise database is used, then the following fields may be added under the `target_field`: `ip`,\n`country_iso_code`, `country_name`, `continent_code`, `continent_name`, `region_iso_code`, `region_name`, `city_name`, `timezone`,\n`location`, `asn`, `organization_name`, `network`, `hosting_provider`, `tor_exit_node`, `anonymous_vpn`, `anonymous`, `public_proxy`,\n`residential_proxy`, `domain`, `isp`, `isp_organization_name`, `mobile_country_code`, `mobile_network_code`, `user_type`, and\n`connection_type`. The fields actually added  depend on what has been found and which properties were configured in `properties`.\n\npreview::[\"Do not use the GeoIP2 Anonymous IP, GeoIP2 Connection Type, GeoIP2 Domain, GeoIP2 ISP, and GeoIP2 Enterprise databases in production environments. This functionality is in technical preview and may be changed or removed in a future release. Elastic will work to fix any issues, but features in technical preview are not subject to the support SLA of official GA features.\"]\n\nHere is an example that uses the default city database and adds the geographical information to the `geoip` field based on the `ip` field:\n\n[source,console]\n--------------------------------------------------\nPUT _ingest/pipeline/geoip\n{\n  \"description\" : \"Add geoip info\",\n  \"processors\" : [\n    {\n      \"geoip\" : {\n        \"field\" : \"ip\"\n      }\n    }\n  ]\n}\nPUT my-index-000001/_doc/my_id?pipeline=geoip\n{\n  \"ip\": \"89.160.20.128\"\n}\nGET my-index-000001/_doc/my_id\n--------------------------------------------------\n\nWhich returns:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"found\": true,\n  \"_index\": \"my-index-000001\",\n  \"_id\": \"my_id\",\n  \"_version\": 1,\n  \"_seq_no\": 55,\n  \"_primary_term\": 1,\n  \"_source\": {\n    \"ip\": \"89.160.20.128\",\n    \"geoip\": {\n      \"continent_name\": \"Europe\",\n      \"country_name\": \"Sweden\",\n      \"country_iso_code\": \"SE\",\n      \"city_name\" : \"Link\u00f6ping\",\n      \"region_iso_code\" : \"SE-E\",\n      \"region_name\" : \"\u00d6sterg\u00f6tland County\",\n      \"location\": { \"lat\": 58.4167, \"lon\": 15.6167 }\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"_seq_no\": \\d+/\"_seq_no\" : $body._seq_no/ s/\"_primary_term\":1/\"_primary_term\" : $body._primary_term/]\n\nHere is an example that uses the default country database and adds the\ngeographical information to the `geo` field based on the `ip` field. Note that\nthis database is downloaded automatically. So this:\n\n[source,console]\n--------------------------------------------------\nPUT _ingest/pipeline/geoip\n{\n  \"description\" : \"Add geoip info\",\n  \"processors\" : [\n    {\n      \"geoip\" : {\n        \"field\" : \"ip\",\n        \"target_field\" : \"geo\",\n        \"database_file\" : \"GeoLite2-Country.mmdb\"\n      }\n    }\n  ]\n}\nPUT my-index-000001/_doc/my_id?pipeline=geoip\n{\n  \"ip\": \"89.160.20.128\"\n}\nGET my-index-000001/_doc/my_id\n--------------------------------------------------\n\nreturns this:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"found\": true,\n  \"_index\": \"my-index-000001\",\n  \"_id\": \"my_id\",\n  \"_version\": 1,\n  \"_seq_no\": 65,\n  \"_primary_term\": 1,\n  \"_source\": {\n    \"ip\": \"89.160.20.128\",\n    \"geo\": {\n      \"continent_name\": \"Europe\",\n      \"country_name\": \"Sweden\",\n      \"country_iso_code\": \"SE\"\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"_seq_no\": \\d+/\"_seq_no\" : $body._seq_no/ s/\"_primary_term\" : 1/\"_primary_term\" : $body._primary_term/]\n\n\nNot all IP addresses find geo information from the database, When this\noccurs, no `target_field` is inserted into the document.\n\nHere is an example of what documents will be indexed as when information for \"80.231.5.0\"\ncannot be found:\n\n[source,console]\n--------------------------------------------------\nPUT _ingest/pipeline/geoip\n{\n  \"description\" : \"Add geoip info\",\n  \"processors\" : [\n    {\n      \"geoip\" : {\n        \"field\" : \"ip\"\n      }\n    }\n  ]\n}\n\nPUT my-index-000001/_doc/my_id?pipeline=geoip\n{\n  \"ip\": \"80.231.5.0\"\n}\n\nGET my-index-000001/_doc/my_id\n--------------------------------------------------\n\nWhich returns:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"_index\" : \"my-index-000001\",\n  \"_id\" : \"my_id\",\n  \"_version\" : 1,\n  \"_seq_no\" : 71,\n  \"_primary_term\": 1,\n  \"found\" : true,\n  \"_source\" : {\n    \"ip\" : \"80.231.5.0\"\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"_seq_no\" : \\d+/\"_seq_no\" : $body._seq_no/ s/\"_primary_term\" : 1/\"_primary_term\" : $body._primary_term/]\n\n[[ingest-geoip-mappings-note]]\n===== Recognizing Location as a Geopoint\nAlthough this processor enriches your document with a `location` field containing\nthe estimated latitude and longitude of the IP address, this field will not be\nindexed as a {ref}/geo-point.html[`geo_point`] type in Elasticsearch without explicitly defining it\nas such in the mapping.\n\nYou can use the following mapping for the example index above:\n\n[source,console]\n--------------------------------------------------\nPUT my_ip_locations\n{\n  \"mappings\": {\n    \"properties\": {\n      \"geoip\": {\n        \"properties\": {\n          \"location\": { \"type\": \"geo_point\" }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n////\n[source,console]\n--------------------------------------------------\nPUT _ingest/pipeline/geoip\n{\n  \"description\" : \"Add geoip info\",\n  \"processors\" : [\n    {\n      \"geoip\" : {\n        \"field\" : \"ip\"\n      }\n    }\n  ]\n}\n\nPUT my_ip_locations/_doc/1?refresh=true&pipeline=geoip\n{\n  \"ip\": \"89.160.20.128\"\n}\n\nGET /my_ip_locations/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": {\n        \"match_all\": {}\n      },\n      \"filter\": {\n        \"geo_distance\": {\n          \"distance\": \"1m\",\n          \"geoip.location\": {\n            \"lon\": 15.6167,\n            \"lat\": 58.4167\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"took\" : 3,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 1,\n    \"successful\" : 1,\n    \"skipped\" : 0,\n    \"failed\" : 0\n  },\n  \"hits\" : {\n    \"total\" : {\n      \"value\": 1,\n      \"relation\": \"eq\"\n    },\n    \"max_score\" : 1.0,\n    \"hits\" : [\n      {\n        \"_index\" : \"my_ip_locations\",\n        \"_id\" : \"1\",\n        \"_score\" : 1.0,\n        \"_source\" : {\n          \"geoip\" : {\n            \"continent_name\" : \"Europe\",\n            \"country_name\" : \"Sweden\",\n            \"country_iso_code\" : \"SE\",\n            \"city_name\" : \"Link\u00f6ping\",\n            \"region_iso_code\" : \"SE-E\",\n            \"region_name\" : \"\u00d6sterg\u00f6tland County\",\n            \"location\" : {\n              \"lon\" : 15.6167,\n              \"lat\" : 58.4167\n            }\n          },\n          \"ip\" : \"89.160.20.128\"\n        }\n      }\n    ]\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"took\" : 3/\"took\" : $body.took/]\n////\n\n[[manage-geoip-database-updates]]\n==== Manage your own IP geolocation database updates\n\nIf you can't <<geoip-automatic-updates,automatically update>> your IP geolocation databases\nfrom the Elastic endpoint, you have a few other options:\n\n* <<use-proxy-geoip-endpoint,Use a proxy endpoint>>\n* <<use-custom-geoip-endpoint,Use a custom endpoint>>\n* <<manually-update-geoip-databases,Manually update your IP geolocation databases>>\n\n[[use-proxy-geoip-endpoint]]\n**Use a proxy endpoint**\n\nIf you can't connect directly to the Elastic GeoIP endpoint, consider setting up\na secure proxy. You can then specify the proxy endpoint URL in the\n<<ingest-geoip-downloader-endpoint,`ingest.geoip.downloader.endpoint`>> setting\nof each node\u2019s `elasticsearch.yml` file.\n\nIn a strict setup the following domains may need to be added to the allowed\ndomains list:\n\n* `geoip.elastic.co`\n* `storage.googleapis.com`\n\n[[use-custom-geoip-endpoint]]\n**Use a custom endpoint**\n\nYou can create a service that mimics the Elastic GeoIP endpoint. You can then\nget automatic updates from this service.\n\n. Download your `.mmdb` database files from the\nhttp://dev.maxmind.com/geoip/geoip2/geolite2[MaxMind site].\n\n. Copy your database files to a single directory.\n\n. From your {es} directory, run:\n+\n[source,sh]\n----\n./bin/elasticsearch-geoip -s my/source/dir [-t target/directory]\n----\n\n. Serve the static database files from your directory. For example, you can use\nDocker to serve the files from an nginx server:\n+\n[source,sh]\n----\ndocker run -v my/source/dir:/usr/share/nginx/html:ro nginx\n----\n\n. Specify the service's endpoint URL in the\n<<ingest-geoip-downloader-endpoint,`ingest.geoip.downloader.endpoint`>> setting\nof each node\u2019s `elasticsearch.yml` file.\n+\nBy default, {es} checks the endpoint for updates every three days. To use\nanother polling interval, use the <<cluster-update-settings,cluster update\nsettings API>> to set\n<<ingest-geoip-downloader-poll-interval,`ingest.geoip.downloader.poll.interval`>>.\n\n[[manually-update-geoip-databases]]\n**Manually update your IP geolocation databases**\n\n. Use the <<cluster-update-settings,cluster update settings API>> to set\n`ingest.geoip.downloader.enabled` to `false`. This disables automatic updates\nthat may overwrite your database changes. This also deletes all downloaded\ndatabases.\n\n. Download your `.mmdb` database files from the\nhttp://dev.maxmind.com/geoip/geoip2/geolite2[MaxMind site].\n+\nYou can also use custom city, country, and ASN `.mmdb` files. These files must\nbe uncompressed. The type (city, country, or ASN) will be pulled from the file\nmetadata, so the filename does not matter.\n\n. On {ess} deployments upload database using\na {cloud}/ec-custom-bundles.html[custom bundle].\n\n. On self-managed deployments copy the database files to `$ES_CONFIG/ingest-geoip`.\n\n. In your `geoip` processors, configure the `database_file` parameter to use a\ncustom database file.\n\n[[ingest-geoip-settings]]\n===== Node Settings\n\nThe `geoip` processor supports the following setting:\n\n`ingest.geoip.cache_size`::\n\n    The maximum number of results that should be cached. Defaults to `1000`.\n\nNote that these settings are node settings and apply to all `geoip` processors, i.e. there is one cache for all defined `geoip` processors.\n\n[[geoip-cluster-settings]]\n===== Cluster settings\n\n[[ingest-geoip-downloader-enabled]]\n`ingest.geoip.downloader.enabled`::\n(<<dynamic-cluster-setting,Dynamic>>, Boolean)\nIf `true`, {es} automatically downloads and manages updates for IP geolocation databases\nfrom the `ingest.geoip.downloader.endpoint`. If `false`, {es} does not download\nupdates and deletes all downloaded databases. Defaults to `true`.\n\n[[ingest-geoip-downloader-eager-download]]\n`ingest.geoip.downloader.eager.download`::\n(<<dynamic-cluster-setting,Dynamic>>, Boolean)\nIf `true`, {es} downloads IP geolocation databases immediately, regardless of whether a\npipeline exists with a geoip processor. If `false`, {es} only begins downloading\nthe databases if a pipeline with a geoip processor exists or is added. Defaults\nto `false`.\n\n[[ingest-geoip-downloader-endpoint]]\n`ingest.geoip.downloader.endpoint`::\n(<<static-cluster-setting,Static>>, string)\nEndpoint URL used to download updates for IP geolocation databases. For example, `https://myDomain.com/overview.json`.\nDefaults to `https://geoip.elastic.co/v1/database`. {es} stores downloaded database files in\neach node's <<es-tmpdir,temporary directory>> at `$ES_TMPDIR/geoip-databases/<node_id>`.\nNote that {es} will make a GET request to `${ingest.geoip.downloader.endpoint}?elastic_geoip_service_tos=agree`,\nexpecting the list of metadata about databases typically found in `overview.json`.\n\nThe GeoIP downloader uses the JDK's builtin cacerts. If you're using a custom endpoint, add the custom https endpoint cacert(s) to the JDK's truststore.\n\n[[ingest-geoip-downloader-poll-interval]]\n`ingest.geoip.downloader.poll.interval`::\n(<<dynamic-cluster-setting,Dynamic>>, <<time-units,time value>>)\nHow often {es} checks for IP geolocation database updates at the\n`ingest.geoip.downloader.endpoint`. Must be greater than `1d` (one day). Defaults\nto `3d` (three days).\n"
}