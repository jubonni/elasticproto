{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.011276",
        "size": 4238,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "security-api-put-user",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[security-api-put-user]]\n=== Create or update users API\n++++\n<titleabbrev>Create or update users</titleabbrev>\n++++\n\nAdds and updates users in the native realm. These users are commonly referred\nto as _native users_.\n\n\n[[security-api-put-user-request]]\n==== {api-request-title}\n\n`POST /_security/user/<username>` +\n\n`PUT /_security/user/<username>`\n\n\n[[security-api-put-user-prereqs]]\n==== {api-prereq-title}\n\n* To use this API, you must have at least the `manage_security` cluster privilege.\n\n\n[[security-api-put-user-desc]]\n==== {api-description-title}\n\nA `password` is required for adding a new user but is optional when updating an\nexisting user. To change a user's password without updating any other fields,\nuse the <<security-api-change-password, change password API>>.\n\nFor more information about the native realm, see\n<<realms>> and <<native-realm>>.\n\n[[security-api-put-user-path-params]]\n==== {api-path-parms-title}\n\n`username`::\n  (Required, string) An identifier for the user.\n+\n--\n[[username-validation]]\nNOTE: Usernames must be at least 1 and no more than 507 characters. They can\ncontain alphanumeric characters (`a-z`, `A-Z`, `0-9`), spaces, punctuation, and\nprintable symbols in the {wikipedia}/Basic_Latin_(Unicode_block)[Basic Latin (ASCII) block]. Leading or trailing whitespace is not allowed.\n\n--\n\n[[security-api-put-user-query-params]]\n==== {api-query-parms-title}\n\n`refresh`::\n    (string) One of `true`, `false`, or `wait_for`.\n    These values have the same meaning as in the <<docs-refresh, Index API>>,\n    but the default value for this API (Put User) is `true`.\n\n[[security-api-put-user-request-body]]\n==== {api-request-body-title}\n\nThe following parameters can be specified in the body of a POST or PUT request:\n\n`enabled`::\n(Boolean) Specifies whether the user is enabled. The default value is `true`.\n\n`email`::\n(string) The email of the user.\n\n`full_name`::\n(string) The full name of the user.\n\n`metadata`::\n(object) Arbitrary metadata that you want to associate with the user.\n\n`password`::\n(Required<<not-always-required,*>>, string) The user's password. Passwords must be at least 6 characters long.\n+\nWhen adding a user, one of `password` or `password_hash` is required.\nWhen updating an existing user, the password is optional, so that other\nfields on the user (such as their roles) may be updated without modifying\nthe user's password.\n\n`password_hash`::\n(string) A _hash_ of the user's password. This must be produced using the\nsame hashing algorithm as has been configured for password storage. For more\ndetails, see the explanation of the\n`xpack.security.authc.password_hashing.algorithm` setting in\n<<hashing-settings>>.\n+\nUsing this parameter allows the client to pre-hash the password for\nperformance and/or confidentiality reasons.\n+\nThe `password` parameter and the `password_hash` parameter cannot be\nused in the same request.\n\n`roles`::\n(Required, list) A set of roles the user has. The roles determine the user's\naccess permissions. To create a user without any roles, specify an empty list:\n`[]`.\n\n--\n[[not-always-required]]\n*Indicates that the setting is required in some, but not all situations.\n--\n\n[[security-api-put-user-example]]\n==== {api-examples-title}\n\nThe following example creates a user `jacknich`:\n\n[source,console]\n--------------------------------------------------\nPOST /_security/user/jacknich\n{\n  \"password\" : \"l0ng-r4nd0m-p@ssw0rd\",\n  \"roles\" : [ \"admin\", \"other_role1\" ],\n  \"full_name\" : \"Jack Nicholson\",\n  \"email\" : \"jacknich@example.com\",\n  \"metadata\" : {\n    \"intelligence\" : 7\n  }\n}\n--------------------------------------------------\n\nA successful call returns a JSON structure that shows whether the user has been\ncreated or updated.\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"created\": true <1>\n}\n--------------------------------------------------\n\n<1> When an existing user is updated, `created` is set to false.\n\nAfter you add a user, requests from that user can be authenticated. For example:\n\n[source,shell]\n--------------------------------------------------\ncurl -u jacknich:l0ng-r4nd0m-p@ssw0rd http://localhost:9200/_cluster/health\n--------------------------------------------------\n// NOTCONSOLE\n"
}