{
    "meta": {
        "timestamp": "2024-11-01T03:07:08.848274",
        "size": 3137,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/circuit-breaker-errors.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "circuit-breaker-errors",
        "version": "8.15"
    },
    "doc": "[[circuit-breaker-errors]]\n=== Circuit breaker errors\n\n{es} uses <<circuit-breaker,circuit breakers>> to prevent nodes from running out\nof JVM heap memory. If Elasticsearch estimates an operation would exceed a\ncircuit breaker, it stops the operation and returns an error.\n\nBy default, the <<parent-circuit-breaker,parent circuit breaker>> triggers at\n95% JVM memory usage. To prevent errors, we recommend taking steps to reduce\nmemory pressure if usage consistently exceeds 85%.\n\n[discrete]\n[[diagnose-circuit-breaker-errors]]\n==== Diagnose circuit breaker errors\n\n**Error messages**\n\nIf a request triggers a circuit breaker, {es} returns an error with a `429` HTTP\nstatus code.\n\n[source,js]\n----\n{\n  'error': {\n    'type': 'circuit_breaking_exception',\n    'reason': '[parent] Data too large, data for [<http_request>] would be [123848638/118.1mb], which is larger than the limit of [123273216/117.5mb], real usage: [120182112/114.6mb], new bytes reserved: [3666526/3.4mb]',\n    'bytes_wanted': 123848638,\n    'bytes_limit': 123273216,\n    'durability': 'TRANSIENT'\n  },\n  'status': 429\n}\n----\n// NOTCONSOLE\n\n{es} also writes circuit breaker errors to <<logging,`elasticsearch.log`>>. This\nis helpful when automated processes, such as allocation, trigger a circuit\nbreaker.\n\n[source,txt]\n----\nCaused by: org.elasticsearch.common.breaker.CircuitBreakingException: [parent] Data too large, data for [<transport_request>] would be [num/numGB], which is larger than the limit of [num/numGB], usages [request=0/0b, fielddata=num/numKB, in_flight_requests=num/numGB, accounting=num/numGB]\n----\n\n**Check JVM memory usage**\n\nIf you've enabled Stack Monitoring, you can view JVM memory usage in {kib}. In\nthe main menu, click **Stack Monitoring**. On the Stack Monitoring **Overview**\npage, click **Nodes**. The **JVM Heap** column lists the current memory usage\nfor each node.\n\nYou can also use the <<cat-nodes,cat nodes API>> to get the current\n`heap.percent` for each node.\n\n[source,console]\n----\nGET _cat/nodes?v=true&h=name,node*,heap*\n----\n\nTo get the JVM memory usage for each circuit breaker, use the\n<<cluster-nodes-stats,node stats API>>.\n\n[source,console]\n----\nGET _nodes/stats/breaker\n----\n\n[discrete]\n[[prevent-circuit-breaker-errors]]\n==== Prevent circuit breaker errors\n\n**Reduce JVM memory pressure**\n\nHigh JVM memory pressure often causes circuit breaker errors. See\n<<high-jvm-memory-pressure>>.\n\n**Avoid using fielddata on `text` fields**\n\nFor high-cardinality `text` fields, fielddata can use a large amount of JVM\nmemory. To avoid this, {es} disables fielddata on `text` fields by default. If\nyou've enabled fielddata and triggered the <<fielddata-circuit-breaker,fielddata\ncircuit breaker>>, consider disabling it and using a `keyword` field instead.\nSee <<fielddata-mapping-param>>.\n\n**Clear the fielddata cache**\n\nIf you've triggered the fielddata circuit breaker and can't disable fielddata,\nuse the <<indices-clearcache,clear cache API>> to clear the fielddata cache.\nThis may disrupt any in-flight searches that use fielddata.\n\n[source,console]\n----\nPOST _cache/clear?fielddata=true\n----\n// TEST[s/^/PUT my-index\\n/]\n"
}