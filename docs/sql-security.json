{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.465589",
        "size": 3698,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-security.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "sql-security",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[sql-security]]\n== Security\n\n{es-sql} integrates with security, if this is enabled on your cluster. \nIn such a scenario, {es-sql} supports both security at the transport layer (by encrypting the communication between the consumer and the server) and authentication (for the access layer).\n\n[discrete]\n[[ssl-tls-config]]\n==== SSL/TLS configuration\n\nIn case of an encrypted transport, the SSL/TLS support needs to be enabled in {es-sql} to properly establish communication with {es}. This is done by setting the `ssl` property to `true` or by using the `https` prefix in the URL. +\nDepending on your SSL configuration (whether the certificates are signed by a CA or not, whether they are global at JVM level or just local to one application), might require setting up the `keystore` and/or `truststore`, that is where the _credentials_ are stored (`keystore` - which typically stores private keys and certificates) and how to _verify_ them (`truststore` - which typically stores certificates from third party also known as CA - certificate authorities). +\nTypically (and again, do note that your environment might differ significantly), if the SSL setup for {es-sql} is not already done at the JVM level, one needs to setup the keystore if the {es-sql} security requires client authentication (PKI - Public Key Infrastructure), and setup `truststore` if SSL is enabled.\n\n[discrete]\n==== Authentication\n\nThe authentication support in {es-sql} is of two types:\n\nUsername/Password:: Set these through `user` and `password` properties.\nPKI/X.509:: Use X.509 certificates to authenticate {es-sql} to {es}. For this, one would need to setup the `keystore` containing the private key and certificate to the appropriate user (configured in {es}) and the `truststore` with the CA certificate used to sign the SSL/TLS certificates in the {es} cluster. That is, one should setup the key to authenticate {es-sql} and also to verify that is the right one. To do so, one should set the `ssl.keystore.location` and `ssl.truststore.location` properties to indicate the `keystore` and `truststore` to use. It is recommended to have these secured through a password in which case `ssl.keystore.pass` and `ssl.truststore.pass` properties are required.\n\n[discrete]\n[[sql-security-permissions]]\n==== Permissions (server-side)\nOn the server, one needs to add a few permissions to\nusers so they can run SQL. To run SQL, a user needs `read` and\n`indices:admin/get` permissions at minimum while some parts of \nthe API require `cluster:monitor/main`.\n\nYou can add permissions by <<defining-roles,creating a role>>, and assigning\nthat role to the user. Roles can be created using {kib}, an\n<<sql-role-api-example,API call>> or the <<sql-role-file-example,`roles.yml`\nconfiguration file>>. Using {kib} or the role management APIs is the preferred\nmethod for defining roles. File-based role management is useful if you want to\ndefine a role that doesn't need to change. You cannot use the role management\nAPIs to view or edit a role defined in `roles.yml`. \n\n[discrete]\n[[sql-role-api-example]]\n===== Add permissions with the role management APIs\n\nThis example configures a role that can run SQL in JDBC querying the `test`\nindex:\n\ninclude::{es-ref-dir}/rest-api/security/create-roles.asciidoc[tag=sql-queries-permission]\n\n[discrete]\n[[sql-role-file-example]]\n===== Add permissions to `roles.yml`\n\nThis example configures a role that can run SQL in JDBC querying the `test` and `bort`\nindices. Add the following to `roles.yml`:\n\n[source, yaml]\n--------------------------------------------------\ninclude-tagged::{sql-tests}server/security/roles.yml[cli_drivers]\n--------------------------------------------------\n\n"
}