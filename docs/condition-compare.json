{
    "meta": {
        "timestamp": "2024-11-01T03:07:08.912272",
        "size": 4139,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/condition-compare.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "condition-compare",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[condition-compare]]\n=== {watcher} compare condition\n++++\n<titleabbrev>Compare condition</titleabbrev>\n++++\n\nUse the `compare` condition to perform a simple comparison against a value in \nthe watch payload. You can use the `compare` condition without enabling \ndynamic scripting. \n\n[[condition-compare-operators]]\n.Supported comparison operators\n[options=\"header\"]\n|======\n| Name      | Description\n\n| `eq`      | Returns `true` when the resolved value equals the given one (applies\n              to numeric, string, list, object and values)\n\n| `not_eq`  | Returns `true` when the resolved value does not equal the given one\n              (applies to numeric, string, list, object and null values)\n\n| `gt`      | Returns `true` when the resolved value is greater than the given\n              one (applies to numeric and string values)\n\n| `gte`     | Returns `true` when the resolved value is greater/equal than/to the\n              given one (applies to numeric and string values)\n\n| `lt`      | Returns `true` when the resolved value is less than the given one\n              (applies to numeric and string values)\n\n| `lte`     | Returns `true` when the resolved value is less/equal than/to the\n              given one (applies to numeric and string values)\n|======\n\n==== Using a compare condition\n\nTo use the `compare` condition, you specify the value in the execution context\nthat you want to evaluate, a <<condition-compare-operators,comparison operator>>, \nand the value you want to compare against. For example, the following `compare` \ncondition returns `true` if the number of the total hits in the\n<<input-search,search result>> is greater than or equal to 5:\n\n[source,js]\n--------------------------------------------------\n{\n  \"condition\" : {\n    \"compare\" : {\n      \"ctx.payload.hits.total\" : { <1>\n        \"gte\" : 5 <2>\n      }\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n<1> Use dot notation to reference a value in the execution context.\n<2> Specify a comparison operator and the value you want to compare against.\n    \n[[compare-condition-date-math]]    \nWhen comparing dates and times, you can use date math expressions\nof the form `<{expression}>`. For example, the following expression returns \n`true` if the watch was executed within the last five minutes:\n\n[source,js]\n--------------------------------------------------\n{\n  \"condition\" : {\n    \"compare\" : {\n      \"ctx.execution_time\" : {\n        \"gte\" : \"<{now-5m}>\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nYou can also compare two values in the execution context by specifying the \ncompared value as a path of the form of `{{path}}`. For example, the following \ncondition compares the `ctx.payload.aggregations.status.buckets.error.doc_count`\nto the `ctx.payload.aggregations.handled.buckets.true.doc_count`:\n\n[source,js]\n--------------------------------------------------\n{\n  \"condition\" : {\n    \"compare\" : {\n      \"ctx.payload.aggregations.status.buckets.error.doc_count\" : {\n        \"not_eq\" : \"{{ctx.payload.aggregations.handled.buckets.true.doc_count}}\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\n==== Accessing values in the execution context\n\nYou use \"dot-notation\" to access values in the execution context. Values loaded \ninto the execution context by the input are prefixed by `ctx.payload`. \n\nYou can reference entries in arrays using their zero-based array indices.\nFor example, to access the third element of the `ctx.payload.hits.hits`\narray, use `ctx.payload.hits.hits.2`.\n\n[options=\"header\"]\n|======\n| Name                         | Description\n| `ctx.watch_id`               | The id of the watch that is currently executing.\n| `ctx.execution_time`         | The time execution of this watch started.\n| `ctx.trigger.triggered_time` | The time this watch was triggered.\n| `ctx.trigger.scheduled_time` | The time this watch was supposed to be triggered.\n| `ctx.metadata.*`             | Any metadata associated with the watch.\n| `ctx.payload.*`              | The payload data loaded by the watch's input.\n|======\n"
}