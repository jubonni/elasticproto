{
    "meta": {
        "timestamp": "2024-11-01T03:07:10.299271",
        "size": 3790,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/sparse-vector.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "sparse-vector",
        "version": "8.15"
    },
    "doc": "[[sparse-vector]]\n=== Sparse vector field type\n\n++++\n<titleabbrev>Sparse vector</titleabbrev>\n++++\n\nA `sparse_vector` field can index features and weights so that they can later be used to query documents in queries with a <<query-dsl-sparse-vector-query, `sparse_vector`>>.\nThis field can also be used with a legacy <<query-dsl-text-expansion-query,`text_expansion`>> query.\n\n`sparse_vector` is the field type that should be used with <<elser-mappings, ELSER mappings>>.\n\n[source,console]\n--------------------------------------------------\nPUT my-index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"text.tokens\": {\n        \"type\": \"sparse_vector\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n\nSee <<semantic-search-elser, semantic search with ELSER>> for a complete example on adding documents to a `sparse_vector` mapped field using ELSER.\n\n[[index-multi-value-sparse-vectors]]\n==== Multi-value sparse vectors\n\nWhen passing in arrays of values for sparse vectors the max value for similarly named features is selected.\n\nThe paper Adapting Learned Sparse Retrieval for Long Documents (https://arxiv.org/pdf/2305.18494.pdf) discusses this in more detail.\nIn summary, research findings support representation aggregation typically outperforming score aggregation.\n\nFor instances where you want to have overlapping feature names use should store them separately or use nested fields.\n\nBelow is an example of passing in a document with overlapping feature names.\nConsider that in this example two categories exist for positive sentiment and negative sentiment.\nHowever, for the purposes of retrieval we also want the overall impact rather than specific sentiment.\nIn the example `impact` is stored as a multi-value sparse vector and only the max values of overlapping names are stored.\nMore specifically the final `GET` query here returns a `_score` of ~1.2 (which is the `max(impact.delicious[0], impact.delicious[1])` and is approximate because we have a relative error of 0.4% as explained below)\n\n[source,console]\n--------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"text\": {\n        \"type\": \"text\",\n        \"analyzer\": \"standard\"\n      },\n      \"impact\": {\n        \"type\": \"sparse_vector\"\n      },\n      \"positive\": {\n        \"type\": \"sparse_vector\"\n      },\n      \"negative\": {\n        \"type\": \"sparse_vector\"\n      }\n    }\n  }\n}\n\nPOST my-index-000001/_doc\n{\n    \"text\": \"I had some terribly delicious carrots.\",\n    \"impact\": [{\"I\": 0.55, \"had\": 0.4, \"some\": 0.28, \"terribly\": 0.01, \"delicious\": 1.2, \"carrots\": 0.8},\n               {\"I\": 0.54, \"had\": 0.4, \"some\": 0.28, \"terribly\": 2.01, \"delicious\": 0.02, \"carrots\": 0.4}],\n    \"positive\": {\"I\": 0.55, \"had\": 0.4, \"some\": 0.28, \"terribly\": 0.01, \"delicious\": 1.2, \"carrots\": 0.8},\n    \"negative\": {\"I\": 0.54, \"had\": 0.4, \"some\": 0.28, \"terribly\": 2.01, \"delicious\": 0.02, \"carrots\": 0.4}\n}\n\nGET my-index-000001/_search\n{\n  \"query\": {\n    \"term\": {\n      \"impact\": {\n         \"value\": \"delicious\"\n      }\n    }\n  }\n}\n--------------------------------\n\nNOTE: `sparse_vector` fields can not be included in indices that were *created* on {es} versions between 8.0 and 8.10\n\nNOTE: `sparse_vector` fields only support strictly positive values.\nNegative values will be rejected.\n\nNOTE: `sparse_vector` fields do not support <<analysis,analyzers>>, querying, sorting or aggregating.\nThey may only be used within specialized queries.\nThe recommended query to use on these fields are <<query-dsl-sparse-vector-query, `sparse_vector`>> queries.\nThey may also be used within legacy <<query-dsl-text-expansion-query,`text_expansion`>> queries.\n\nNOTE: `sparse_vector` fields only preserve 9 significant bits for the precision, which translates to a relative error of about 0.4%.\n"
}