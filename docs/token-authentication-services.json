{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.738581",
        "size": 3905,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/token-authentication-services.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "token-authentication-services",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[token-authentication-services]]\n=== Token-based authentication services\n\nThe {stack-security-features} authenticate users by using realms and one or\nmore token-based authentication services. The token-based authentication\nservices are used for authenticating and managing tokens. You can attach these\ntokens to requests that are sent to {es} and use them as credentials. When {es}\nreceives a request that must be authenticated, it consults the token-based\nauthentication services first, and then the realm chain.\n\nThe {security-features} provide the following built-in token-based\nauthentication services, which are listed in the order they are consulted:\n\n_service-accounts_::\n+\n--\n\nThe <<service-accounts,service accounts>> use either the\n<<security-api-create-service-token,create service account token API>>\nor the <<service-tokens-command,elasticsearch-service-tokens>> CLI tool to\ngenerate service account tokens.\n\nTo use a service account token, include the generated token value in a request\nwith an `Authorization: Bearer` header:\n\n[source,shell]\n----\ncurl -H \"Authorization: Bearer AAEAAWVsYXN0aWMvZ...mXQtc2VydmMTpyNXdkYmRib1FTZTl2R09Ld2FKR0F3\" http://localhost:9200/_cluster/health\n----\n// NOTCONSOLE\n\ninclude::service-accounts.asciidoc[tag=service-accounts-usage]\n--\n\n[[token-authentication-access-token]]\n_token-service_::\nThe token service uses the <<security-api-get-token,get token API>> to\ngenerate access tokens and refresh tokens based on the OAuth2 specification.\nThe access token is a short-lived token. By default, it expires after 20 minutes\nbut it can be configured to last a maximum of 1 hour. It can be refreshed by\nusing a refresh token, which has a lifetime of 24 hours. The access token is a\nbearer token. You can use it by sending a request with an `Authorization`\nheader with a value that has the prefix \"Bearer \" followed by the value of the\naccess token. For example:\n+\n--\n[source,shell]\n--------------------------------------------------\ncurl -H \"Authorization: Bearer dGhpcyBpcyBub3Qx5...F0YS4gZG8gbm90IHRyeSB0byByZWFkIHRva2VuIQ==\" http://localhost:9200/_cluster/health\n--------------------------------------------------\n// NOTCONSOLE\n--\n\n[[token-authentication-api-key]]\n_api-key-service_::\nThe API key service uses the\n<<security-api-create-api-key,create API key API>> to generate API keys.\nBy default, the API keys do not expire. When you make a request to create API\nkeys, you can specify an expiration and permissions for the API key. The\npermissions are limited by the authenticated user's permissions. You can use the\nAPI key by sending a request with an `Authorization` header with a value that\nhas the prefix \"ApiKey \" followed by the credentials. The credentials are the\nbase64 encoding of the API key ID and the API key joined by a colon. For example:\n+\n--\n[source,shell]\n--------------------------------------------------\ncurl -H \"Authorization: ApiKey VnVhQ2ZHY0JDZGJrU...W0tZTVhT3g6dWkybHAyYXhUTm1zeWFrd0dk5udw==\" http://localhost:9200/_cluster/health\n--------------------------------------------------\n// NOTCONSOLE\n--\n\nDepending on your use case, you may want to decide on the lifetime of the tokens\ngenerated by these services. You can then use this information to decide which\nservice to use to generate and manage the tokens. Non-expiring API keys may seem\nlike the easy option but you must consider the security implications that come\nwith non-expiring keys. Both the _token-service_ and _api-key-service_ permit\nyou to invalidate the tokens. See\n<<security-api-invalidate-token,invalidate token API>> and\n<<security-api-invalidate-api-key,invalidate API key API>>.\n\nIMPORTANT:  Authentication support for JWT bearer tokens was introduced in {es}\n8.2 through the <<jwt-auth-realm>>, which cannot be enabled through\ntoken-authentication services. Realms offer flexible order and configurations of\nzero, one, or multiple JWT realms.\n"
}