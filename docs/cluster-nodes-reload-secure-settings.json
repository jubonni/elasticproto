{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.782066",
        "size": 3457,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-reload-secure-settings.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "cluster-nodes-reload-secure-settings",
        "version": "8.15"
    },
    "doc": "[[cluster-nodes-reload-secure-settings]]\n=== Nodes reload secure settings API\n++++\n<titleabbrev>Nodes reload secure settings</titleabbrev>\n++++\n\nReloads the keystore on nodes in the cluster.\n\n[[cluster-nodes-reload-secure-settings-api-request]]\n==== {api-request-title}\n\n`POST /_nodes/reload_secure_settings` +\n`POST /_nodes/<node_id>/reload_secure_settings`\n\n[[cluster-nodes-reload-secure-settings-api-prereqs]]\n==== {api-prereq-title}\n\n* If the {es} {security-features} are enabled, you must have the `manage`\n<<privileges-list-cluster,cluster privilege>> to use this API.\n\n[[cluster-nodes-reload-secure-settings-api-desc]]\n==== {api-description-title}\n\n<<secure-settings,Secure settings>> are stored in an on-disk keystore. Certain\nof these settings are <<reloadable-secure-settings,reloadable>>. That is, you\ncan change them on disk and reload them without restarting any nodes in the\ncluster. When you have updated reloadable secure settings in your keystore, you\ncan use this API to reload those settings on each node.\n\nWhen the {es} keystore is password protected and not simply obfuscated, you must\nprovide the password for the keystore when you reload the secure settings.\nReloading the settings for the whole cluster assumes that all nodes' keystores\nare protected with the same password; this method is allowed only when\n<<encrypt-internode-communication,inter-node communications are encrypted>>. Alternatively, you can\nreload the secure settings on each node by locally accessing the API and passing\nthe node-specific {es} keystore password.\n\n[[cluster-nodes-reload-secure-settings-path-params]]\n==== {api-path-parms-title}\n\n`<node_id>`::\n    (Optional, string) The names of particular nodes in the cluster to target.\n    For example, `nodeId1,nodeId2`. For node selection options, see\n    <<cluster-nodes>>.\n\nNOTE: {es} requires consistent secure settings across the cluster nodes, but\nthis consistency is not enforced. Hence, reloading specific nodes is not\nstandard. It is justifiable only when retrying failed reload operations.\n\n[[cluster-nodes-reload-secure-settings-api-request-body]]\n==== {api-request-body-title}\n\n`secure_settings_password`::\n  (Optional, string) The password for the {es} keystore.\n\n[[cluster-nodes-reload-secure-settings-api-example]]\n==== {api-examples-title}\n\nThe following examples assume a common password for the {es} keystore on every\nnode of the cluster:\n\n[source,console]\n--------------------------------------------------\nPOST _nodes/reload_secure_settings\n{\n  \"secure_settings_password\":\"keystore-password\"\n}\nPOST _nodes/nodeId1,nodeId2/reload_secure_settings\n{\n  \"secure_settings_password\":\"keystore-password\"\n}\n--------------------------------------------------\n// TEST[setup:node]\n// TEST[s/nodeId1,nodeId2/*/]\n\nThe response contains the `nodes` object, which is a map, keyed by the\nnode id. Each value has the node `name` and an optional `reload_exception`\nfield. The `reload_exception` field is a serialization of the exception\nthat was thrown during the reload process, if any.\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"_nodes\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"failed\": 0\n  },\n  \"cluster_name\": \"my_cluster\",\n  \"nodes\": {\n    \"pQHNt5rXTTWNvUgOrdynKg\": {\n      \"name\": \"node-0\"\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"my_cluster\"/$body.cluster_name/]\n// TESTRESPONSE[s/\"pQHNt5rXTTWNvUgOrdynKg\"/\\$node_name/]\n"
}