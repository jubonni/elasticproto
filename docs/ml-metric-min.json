{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.974579",
        "size": 10593,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-metric-min.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "ml-metric-min",
        "version": "8.15"
    },
    "doc": "[\"appendix\",role=\"exclude\",id=\"ml-metric-functions\"]\n= Metric functions\n\nThe metric functions include functions such as mean, min and max. These values\nare calculated for each bucket. Field values that cannot be converted to\ndouble precision floating point numbers are ignored.\n\nThe {ml-features} include the following metric functions:\n\n* <<ml-metric-min,`min`>>\n* <<ml-metric-max,`max`>>\n* xref:ml-metric-median[`median`, `high_median`, `low_median`]\n* xref:ml-metric-mean[`mean`, `high_mean`, `low_mean`]\n* <<ml-metric-metric,`metric`>>\n* xref:ml-metric-varp[`varp`, `high_varp`, `low_varp`]\n\nNOTE: You cannot add rules with conditions to detectors that use the `metric` \nfunction. \n\n[discrete]\n[[ml-metric-min]]\n== Min\n\nThe `min` function detects anomalies in the arithmetic minimum of a value.\nThe minimum value is calculated for each bucket.\n\nHigh- and low-sided functions are not applicable.\n\nThis function supports the following properties:\n\n* `field_name` (required)\n* `by_field_name` (optional)\n* `over_field_name` (optional)\n* `partition_field_name` (optional)\n\nFor more information about those properties, see the\n{ref}/ml-put-job.html#ml-put-job-request-body[create {anomaly-jobs} API].\n\n.Example 1: Analyzing minimum transactions with the min function\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"min\",\n  \"field_name\" : \"amt\",\n  \"by_field_name\" : \"product\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf you use this `min` function in a detector in your {anomaly-job}, it detects\nwhere the smallest transaction is lower than previously observed. You can use\nthis function to detect items for sale at unintentionally low prices due to data\nentry mistakes. It models the minimum amount for each product over time.\n\n[discrete]\n[[ml-metric-max]]\n== Max\n\nThe `max` function detects anomalies in the arithmetic maximum of a value.\nThe maximum value is calculated for each bucket.\n\nHigh- and low-sided functions are not applicable.\n\nThis function supports the following properties:\n\n* `field_name` (required)\n* `by_field_name` (optional)\n* `over_field_name` (optional)\n* `partition_field_name` (optional)\n\nFor more information about those properties, see the\n{ref}/ml-put-job.html#ml-put-job-request-body[create {anomaly-jobs} API].\n\n.Example 2: Analyzing maximum response times with the max function\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"max\",\n  \"field_name\" : \"responsetime\",\n  \"by_field_name\" : \"application\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf you use this `max` function in a detector in your {anomaly-job}, it detects\nwhere the longest `responsetime` is longer than previously observed. You can use\nthis function to detect applications that have `responsetime` values that are\nunusually lengthy. It models the maximum `responsetime` for each application\nover time and detects when the longest `responsetime` is unusually long compared\nto previous applications.\n\n.Example 3: Two detectors with max and high_mean functions\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"max\",\n  \"field_name\" : \"responsetime\",\n  \"by_field_name\" : \"application\"\n},\n{\n  \"function\" : \"high_mean\",\n  \"field_name\" : \"responsetime\",\n  \"by_field_name\" : \"application\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nThe analysis in the previous example can be performed alongside `high_mean`\nfunctions by application. By combining detectors and using the same influencer\nthis job can detect both unusually long individual response times and average\nresponse times for each bucket.\n\n[discrete]\n[[ml-metric-median]]\n== Median, high_median, low_median\n\nThe `median` function detects anomalies in the statistical median of a value.\nThe median value is calculated for each bucket.\n\nIf you want to monitor unusually high median values, use the `high_median`\nfunction.\n\nIf you are just interested in unusually low median values, use the `low_median`\nfunction.\n\nThese functions support the following properties:\n\n* `field_name` (required)\n* `by_field_name` (optional)\n* `over_field_name` (optional)\n* `partition_field_name` (optional)\n\nFor more information about those properties, see\n{ref}/ml-put-job.html#ml-put-job-request-body[create {anomaly-jobs} API].\n\n.Example 4: Analyzing response times with the median function\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"median\",\n  \"field_name\" : \"responsetime\",\n  \"by_field_name\" : \"application\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf you use this `median` function in a detector in your {anomaly-job}, it models\nthe median `responsetime` for each application over time. It detects when the\nmedian `responsetime` is unusual compared to previous `responsetime` values.\n\n[discrete]\n[[ml-metric-mean]]\n== Mean, high_mean, low_mean\n\nThe `mean` function detects anomalies in the arithmetic mean of a value.\nThe mean value is calculated for each bucket.\n\nIf you want to monitor unusually high average values, use the `high_mean`\nfunction.\n\nIf you are just interested in unusually low average values, use the `low_mean`\nfunction.\n\nThese functions support the following properties:\n\n* `field_name` (required)\n* `by_field_name` (optional)\n* `over_field_name` (optional)\n* `partition_field_name` (optional)\n\nFor more information about those properties, see the\n{ref}/ml-put-job.html#ml-put-job-request-body[create {anomaly-jobs} API].\n\n.Example 5: Analyzing response times with the mean function\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"mean\",\n  \"field_name\" : \"responsetime\",\n  \"by_field_name\" : \"application\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf you use this `mean` function in a detector in your {anomaly-job}, it models\nthe mean `responsetime` for each application over time. It detects when the mean\n`responsetime` is unusual compared to previous `responsetime` values.\n\n.Example 6: Analyzing response times with the high_mean function\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"high_mean\",\n  \"field_name\" : \"responsetime\",\n  \"by_field_name\" : \"application\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf you use this `high_mean` function in a detector in your {anomaly-job}, it\nmodels the mean `responsetime` for each application over time. It detects when\nthe mean `responsetime` is unusually high compared to previous `responsetime`\nvalues.\n\n.Example 7: Analyzing response times with the low_mean function\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"low_mean\",\n  \"field_name\" : \"responsetime\",\n  \"by_field_name\" : \"application\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf you use this `low_mean` function in a detector in your {anomaly-job}, it\nmodels the mean `responsetime` for each application over time. It detects when\nthe mean `responsetime` is unusually low compared to previous `responsetime`\nvalues.\n\n[discrete]\n[[ml-metric-metric]]\n== Metric\n\nThe `metric` function combines `min`, `max`, and `mean` functions. You can use\nit as a shorthand for a combined analysis. If you do not specify a function in\na detector, this is the default function.\n\nHigh- and low-sided functions are not applicable. You cannot use this function\nwhen a `summary_count_field_name` is specified.\n\nThis function supports the following properties:\n\n* `field_name` (required)\n* `by_field_name` (optional)\n* `over_field_name` (optional)\n* `partition_field_name` (optional)\n\nFor more information about those properties, see the\n{ref}/ml-put-job.html#ml-put-job-request-body[create {anomaly-jobs} API].\n\n.Example 8: Analyzing response times with the metric function\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"metric\",\n  \"field_name\" : \"responsetime\",\n  \"by_field_name\" : \"application\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf you use this `metric` function in a detector in your {anomaly-job}, it models\nthe mean, min, and max `responsetime` for each application over time. It detects\nwhen the mean, min, or max `responsetime` is unusual compared to previous\n`responsetime` values.\n\n[discrete]\n[[ml-metric-varp]]\n== Varp, high_varp, low_varp\n\nThe `varp` function detects anomalies in the variance of a value which is a\nmeasure of the variability and spread in the data.\n\nIf you want to monitor unusually high variance, use the `high_varp` function.\n\nIf you are just interested in unusually low variance, use the `low_varp` function.\n\nThese functions support the following properties:\n\n* `field_name` (required)\n* `by_field_name` (optional)\n* `over_field_name` (optional)\n* `partition_field_name` (optional)\n\nFor more information about those properties, see the\n{ref}/ml-put-job.html#ml-put-job-request-body[create {anomaly-jobs} API].\n\n.Example 9: Analyzing response times with the varp function\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"varp\",\n  \"field_name\" : \"responsetime\",\n  \"by_field_name\" : \"application\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf you use this `varp` function in a detector in your {anomaly-job}, it models\nthe variance in values of `responsetime` for each application over time. It\ndetects when the variance in `responsetime` is unusual compared to past\napplication behavior.\n\n.Example 10: Analyzing response times with the high_varp function\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"high_varp\",\n  \"field_name\" : \"responsetime\",\n  \"by_field_name\" : \"application\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf you use this `high_varp` function in a detector in your {anomaly-job}, it\nmodels the variance in values of `responsetime` for each application over time.\nIt detects when the variance in `responsetime` is unusual compared to past\napplication behavior.\n\n.Example 11: Analyzing response times with the low_varp function\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"low_varp\",\n  \"field_name\" : \"responsetime\",\n  \"by_field_name\" : \"application\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf you use this `low_varp` function in a detector in your {anomaly-job}, it\nmodels the variance in values of `responsetime` for each application over time.\nIt detects when the variance in `responsetime` is unusual compared to past\napplication behavior.\n"
}