{
    "meta": {
        "size": 4636,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-like-rlike-operators.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "sql-like-rlike-operators",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[sql-like-rlike-operators]]\n=== LIKE and RLIKE Operators\n\n`LIKE` and `RLIKE` operators are commonly used to filter data based on string patterns. They usually act on a field placed on the left-hand side of\nthe operator, but can also act on a constant (literal) expression. The right-hand side of the operator represents the pattern.\nBoth can be used in the `WHERE` clause of the `SELECT` statement, but `LIKE` can also be used in other places, such as defining an\n<<sql-index-patterns, index pattern>> or across various <<sql-commands, SHOW commands>>.\nThis section covers only the `SELECT ... WHERE ...` usage.\n\nNOTE: One significant difference between `LIKE`/`RLIKE` and the <<sql-functions-search, full-text search predicates>> is that the former\nact on <<sql-multi-field, exact fields>> while the latter also work on <<text, analyzed>> fields. If the field used with `LIKE`/`RLIKE` doesn't\nhave an exact not-normalized sub-field (of <<keyword, keyword>> type) {es-sql} will not be able to run the query. If the field is either exact\nor has an exact sub-field, it will use it as is, or it will automatically use the exact sub-field even if it wasn't explicitly specified in the statement.\n\n[[sql-like-operator]]\n==== `LIKE`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nexpression        <1>\nLIKE constant_exp <2>\n--------------------------------------------------\n\n<1> typically a field, or a constant expression\n<2> pattern\n\n*Description*: The SQL `LIKE` operator is used to compare a value to similar values using wildcard operators. There are two wildcards used in conjunction\nwith the `LIKE` operator:\n\n* The percent sign (%)\n* The underscore (_)\n\nThe percent sign represents zero, one or multiple characters. The underscore represents a single number or character. These symbols can be used in combinations.\n\nNOTE: No other characters have special meaning or act as wildcard. Characters often used as wildcards in other languages (`*` or `?`) are treated as normal characters.\n\n[source, sql]\n----\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[simpleLike]\n----\n\nThere is, also, the possibility of using an escape character if one needs to match the wildcard characters themselves. This can be done\nby using the `ESCAPE [escape_character]` statement after the `LIKE ...` operator:\n\n SELECT name, author FROM library WHERE name LIKE 'Dune/%' ESCAPE '/';\n\nIn the example above `/` is defined as an escape character which needs to be placed before the `%` or `_` characters if one needs to\nmatch those characters in the pattern specifically. By default, there is no escape character defined.\n\nIMPORTANT: Even though `LIKE` is a valid option when searching or filtering in {es-sql}, full-text search predicates\n`MATCH` and `QUERY` are <<sql-like-prefer-full-text, faster and much more powerful and are the preferred alternative>>.\n\n[[sql-rlike-operator]]\n==== `RLIKE`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nexpression         <1>\nRLIKE constant_exp <2>\n--------------------------------------------------\n\n<1> typically a field, or a constant expression\n<2> pattern\n\n*Description*: This operator is similar to `LIKE`, but the user is not limited to search for a string based on a fixed pattern with the percent sign (`%`)\nand underscore (`_`); the pattern in this case is a regular expression which allows the construction of more flexible patterns.\n\nFor supported syntax, see <<regexp-syntax>>.\n\n[source, sql]\n----\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[simpleRLike]\n----\n\nIMPORTANT: Even though `RLIKE` is a valid option when searching or filtering in {es-sql}, full-text search predicates\n`MATCH` and `QUERY` are <<sql-like-prefer-full-text, faster and much more powerful and are the preferred alternative>>.\n\n[[sql-like-prefer-full-text]]\n==== Prefer full-text search predicates\n\nWhen using `LIKE`/`RLIKE`, do consider using <<sql-functions-search, full-text search predicates>> which are faster, much more powerful\nand offer the option of sorting by relevancy (results can be returned based on how well they matched).\n\nFor example:\n\n[cols=\"<m,<m\"]\n\n|===\n^s|LIKE/RLIKE                    ^s|QUERY/MATCH\n|`foo LIKE 'bar'`                    |`MATCH(foo, 'bar')`\n|`foo LIKE 'bar' AND tar LIKE 'goo'` |`MATCH('foo^2, tar^5', 'bar goo', 'operator=and')`\n|`foo LIKE 'barr'`                   |`QUERY('foo: bar~')`\n|`foo LIKE 'bar' AND tar LIKE 'goo'` |`QUERY('foo: bar AND tar: goo')`\n|`foo RLIKE 'ba.*'`                  |`MATCH(foo, 'ba', 'fuzziness=AUTO:1,5')`\n|`foo RLIKE 'b.{1}r'`                |`MATCH(foo, 'br', 'fuzziness=1')`\n|===\n"
}