{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.099068",
        "size": 3763,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/remote-clusters-cert.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "remote-clusters-cert",
        "version": "8.15"
    },
    "doc": "[[remote-clusters-cert]]\n=== Add remote clusters using TLS certificate authentication\n\nTo add a remote cluster using TLS certificate authentication:\n\n. <<remote-clusters-prerequisites-cert,Review the prerequisites>>\n. <<remote-clusters-security-cert>>\n. <<remote-clusters-connect-cert>>\n. <<remote-clusters-privileges-cert>>\n\nIf you run into any issues, refer to <<remote-clusters-troubleshooting>>.\n\n[[remote-clusters-prerequisites-cert]]\n==== Prerequisites\n\n. The {es} security features need to be enabled on both clusters, on every node.\nSecurity is enabled by default. If it's disabled, set `xpack.security.enabled`\nto `true` in `elasticsearch.yml`. Refer to <<general-security-settings>>.\n. The local and remote clusters versions must be compatible.\n** Any node can communicate with another node on the same\nmajor version. For example, 7.0 can talk to any 7.x node.\n** Only nodes on the last minor version of a certain major version can\ncommunicate with nodes on the following major version. In the 6.x series, 6.8\ncan communicate with any 7.x node, while 6.7 can only communicate with 7.0.\n** Version compatibility is\nsymmetric, meaning that if 6.7 can communicate with 7.0, 7.0 can also\ncommunicate with 6.7. The following table depicts version compatibility between\nlocal and remote nodes.\n+\n[%collapsible%open]\n.Version compatibility table\n====\ninclude::../remote-clusters-shared.asciidoc[tag=remote-cluster-compatibility-matrix]\n====\n+\nIMPORTANT: Elastic only supports {ccs} on a subset of these configurations. See\n<<ccs-supported-configurations>>.\n\n[[remote-clusters-security-cert]]\n==== Establish trust with a remote cluster\n\nTo use {ccr} or {ccs} safely with remote clusters, enable security on all \nconnected clusters and configure Transport Layer Security (TLS) on every node.\nConfiguring TLS security on the transport interface is minimally required for\nremote clusters. For additional security, configure TLS on the\n<<security-basic-setup-https,HTTP interface>> as well.\n\nAll connected clusters must trust one another and be mutually authenticated\nwith TLS on the transport interface. This means that the local cluster\ntrusts the certificate  authority (CA) of the remote cluster, and the remote\ncluster trusts the CA of the local cluster. When establishing a connection, all\nnodes will verify certificates from nodes on the other side. This mutual trust\nis required to securely connect a remote cluster, because all connected nodes\neffectively form a single security domain.\n\nUser authentication is performed on the local cluster and the user and user\u2019s\nroles names are passed to the remote clusters. A remote cluster checks the\nuser\u2019s role names against its local role definitions to determine which indices\nthe user is allowed to access.\n\nBefore using {ccr} or {ccs} with secured {es} clusters, complete the following \nconfiguration task:\n\n. Configure Transport Layer Security (TLS) on every node to encrypt internode\ntraffic and authenticate nodes in the local cluster with nodes in all remote\nclusters. Refer to \n<<security-basic-setup,set up basic security for the {stack}>> for the required\nsteps to configure security.\n+\nNOTE: This procedure uses the same CA to generate certificates for all nodes.\nAlternatively, you can add the certificates from the local cluster as a\ntrusted CA in each remote cluster. You must also add the certificates from\nremote clusters as a trusted CA on the local cluster. Using the same CA to\ngenerate certificates for all nodes simplifies this task.\n\n[[remote-clusters-connect-cert]]\n==== Connect to a remote cluster\n\n:trust-mechanism: cert\ninclude::remote-clusters-connect.asciidoc[]\n:!trust-mechanism: \n\ninclude::{es-ref-dir}/security/authentication/remote-clusters-privileges-cert.asciidoc[leveloffset=+1]"
}