{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.425082",
        "size": 21506,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "docs-index_",
        "version": "8.15"
    },
    "doc": "[[docs-index_]]\n=== Index API\n++++\n<titleabbrev>Index</titleabbrev>\n++++\n\nIMPORTANT: See <<removal-of-types>>.\n\nAdds a JSON document to the specified data stream or index and makes\nit searchable. If the target is an index and the document already exists,\nthe request updates the document and increments its version.\n\nNOTE: You cannot use the index API to send update requests for existing\ndocuments to a data stream. See <<update-docs-in-a-data-stream-by-query>>\nand <<update-delete-docs-in-a-backing-index>>.\n\n[[docs-index-api-request]]\n==== {api-request-title}\n\n`PUT /<target>/_doc/<_id>`\n\n`POST /<target>/_doc/`\n\n`PUT /<target>/_create/<_id>`\n\n`POST /<target>/_create/<_id>`\n\nIMPORTANT: You cannot add new documents to a data stream using the\n`PUT /<target>/_doc/<_id>` request format. To specify a document ID, use the\n`PUT /<target>/_create/<_id>` format instead. See\n<<add-documents-to-a-data-stream>>.\n\n[[docs-index-api-prereqs]]\n==== {api-prereq-title}\n\n* If the {es} {security-features} are enabled, you must have the following\n<<privileges-list-indices,index privileges>> for the target data stream, index,\nor index alias:\n\n** To add or overwrite a document using the `PUT /<target>/_doc/<_id>` request\nformat, you must have the `create`, `index`, or `write` index privilege.\n\n** To add a document using the `POST /<target>/_doc/`,\n`PUT /<target>/_create/<_id>`, or `POST /<target>/_create/<_id>` request\nformats, you must have the `create_doc`, `create`, `index`, or `write` index\nprivilege.\n\n** To automatically create a data stream or index with an index API request, you\nmust have the `auto_configure`, `create_index`, or `manage` index privilege.\n\n* Automatic data stream creation requires a matching index template with data\nstream enabled. See <<set-up-a-data-stream>>.\n\n[[docs-index-api-path-params]]\n==== {api-path-parms-title}\n\n`<target>`::\n(Required, string) Name of the data stream or index to target.\n+\nIf the target doesn't exist and matches the name or wildcard (`*`) pattern of an\n<<create-index-template,index template with a `data_stream`\ndefinition>>, this request creates the data stream. See\n<<set-up-a-data-stream>>.\n+\nIf the target doesn't exist and doesn't match a data stream template,\nthis request creates the index.\n+\nYou can check for existing targets using the resolve index API.\n\n`<_id>`::\n(Optional, string) Unique identifier for the document.\n+\n--\nThis parameter is required for the following request formats:\n\n* `PUT /<target>/_doc/<_id>`\n* `PUT /<target>/_create/<_id>`\n* `POST /<target>/_create/<_id>`\n\nTo automatically generate a document ID, use the `POST /<target>/_doc/` request\nformat and omit this parameter.\n--\n\n\n\n[[docs-index-api-query-params]]\n==== {api-query-parms-title}\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=if_seq_no]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=if_primary_term]\n\n[[docs-index-api-op_type]]\n`op_type`::\n(Optional, enum) Set to `create` to only index the document\nif it does not already exist (_put if absent_). If a document with the specified\n`_id` already exists, the indexing operation will fail. Same as using the\n`<index>/_create` endpoint. Valid values: `index`, `create`.\nIf document id is specified, it defaults to `index`. Otherwise, it defaults to `create`.\n+\nNOTE: If the request targets a data stream, an `op_type` of `create` is\nrequired. See <<add-documents-to-a-data-stream>>.\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=pipeline]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=refresh]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=routing]\n\n`timeout`::\n+\n--\n(Optional, <<time-units, time units>>)\nPeriod the request waits for the following operations:\n\n* <<index-creation,Automatic index creation>>\n* <<dynamic-mapping,Dynamic mapping>> updates\n* <<index-wait-for-active-shards,Waiting for active shards>>\n\nDefaults to `1m` (one minute). This guarantees {es} waits for at least the\ntimeout before failing. The actual wait time could be longer, particularly when\nmultiple waits occur.\n--\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=doc-version]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=version_type]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=wait_for_active_shards]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=require-alias]\n\n[[docs-index-api-request-body]]\n==== {api-request-body-title}\n\n`<field>`::\n(Required, string) Request body contains the JSON source for the document\ndata.\n\n[[docs-index-api-response-body]]\n==== {api-response-body-title}\n\n`_shards`::\nProvides information about the replication process of the index operation.\n\n`_shards.total`::\nIndicates how many shard copies (primary and replica shards) the index operation\nshould be executed on.\n\n`_shards.successful`::\nIndicates the number of shard copies the index operation succeeded on.\nWhen the index operation is successful, `successful` is at least 1.\n+\nNOTE: Replica shards might not all be started when an indexing operation\nreturns successfully--by default, only the primary is required. Set\n`wait_for_active_shards` to change this default behavior. See\n<<index-wait-for-active-shards>>.\n\n`_shards.failed`::\nAn array that contains replication-related errors in the case an index operation\nfailed on a replica shard. 0 indicates there were no failures.\n\n`_index`::\nThe name of the index the document was added to.\n\n`_type`::\nThe document type. {es} indices now support a single document type, `_doc`.\n\n`_id`::\nThe unique identifier for the added document.\n\n`_version`::\nThe document version. Incremented each time the document is updated.\n\n`_seq_no`::\nThe sequence number assigned to the document for the indexing operation.\nSequence numbers are used to ensure an older version of a document\ndoesn\u2019t overwrite a newer version. See <<optimistic-concurrency-control-index>>.\n\n`_primary_term`::\nThe primary term assigned to the document for the indexing operation.\nSee <<optimistic-concurrency-control-index>>.\n\n`result`::\nThe result of the indexing operation, `created` or `updated`.\n\n[[docs-index-api-desc]]\n==== {api-description-title}\n\nYou can index a new JSON document with the `_doc` or `_create` resource. Using\n`_create` guarantees that the document is only indexed if it does not already\nexist. To update an existing document, you must use the `_doc` resource.\n\n[[index-creation]]\n===== Automatically create data streams and indices\n\nIf request's target doesn't exist and matches an\n<<create-index-template,index template with a `data_stream`\ndefinition>>, the index operation automatically creates the data stream. See\n<<set-up-a-data-stream>>.\n\nIf the target doesn't exist and doesn't match a data stream template,\nthe operation automatically creates the index and applies any matching\n<<index-templates,index templates>>.\n\nNOTE: {es} includes several built-in index templates. To avoid naming collisions\nwith these templates, see <<avoid-index-pattern-collisions>>.\n\nIf no mapping exists, the index operation\ncreates a dynamic mapping. By default, new fields and objects are\nautomatically added to the mapping if needed. For more information about field\nmapping, see <<mapping,mapping>> and the <<indices-put-mapping,update mapping>> API.\n\nAutomatic index creation is controlled by the <<index-management-settings,`action.auto_create_index`>>\nsetting. This setting defaults to `true`, which allows any index to be created\nautomatically. You can modify this setting to explicitly allow or block\nautomatic creation of indices that match specified patterns, or set it to\n`false` to disable automatic index creation entirely. Specify a\ncomma-separated list of patterns you want to allow, or prefix each pattern with\n`+` or `-` to indicate whether it should be allowed or blocked. When a list is\nspecified, the default behaviour is to disallow.\n\nIMPORTANT: The `action.auto_create_index` setting only affects the automatic\ncreation of indices. It does not affect the creation of data streams.\n\n[source,console]\n--------------------------------------------------\nPUT _cluster/settings\n{\n  \"persistent\": {\n    \"action.auto_create_index\": \"my-index-000001,index10,-index1*,+ind*\" <1>\n  }\n}\n\nPUT _cluster/settings\n{\n  \"persistent\": {\n    \"action.auto_create_index\": \"false\" <2>\n  }\n}\n\nPUT _cluster/settings\n{\n  \"persistent\": {\n    \"action.auto_create_index\": \"true\" <3>\n  }\n}\n--------------------------------------------------\n\n<1> Allow auto-creation of indices called `my-index-000001` or `index10`, block the\ncreation of indices that match the pattern `index1*`, and allow creation of\nany other indices that match the `ind*` pattern. Patterns are matched in\nthe order specified.\n\n<2> Disable automatic index creation entirely.\n\n<3> Allow automatic creation of any index. This is the default.\n\n[discrete]\n[[operation-type]]\n===== Put if absent\n\nYou can force a create operation by using the `_create` resource or\nsetting the `op_type` parameter to _create_. In this case,\nthe index operation fails if a document with the specified ID\nalready exists in the index.\n\n[discrete]\n[[create-document-ids-automatically]]\n===== Create document IDs automatically\n\nWhen using the `POST /<target>/_doc/` request format, the `op_type` is\nautomatically set to `create` and the index operation generates a unique ID for\nthe document.\n\n[source,console]\n--------------------------------------------------\nPOST my-index-000001/_doc/\n{\n  \"@timestamp\": \"2099-11-15T13:12:00\",\n  \"message\": \"GET /search HTTP/1.1 200 1070000\",\n  \"user\": {\n    \"id\": \"kimchy\"\n  }\n}\n--------------------------------------------------\n\nThe API returns the following result:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"_shards\": {\n    \"total\": 2,\n    \"failed\": 0,\n    \"successful\": 2\n  },\n  \"_index\": \"my-index-000001\",\n  \"_id\": \"W0tpsmIBdwcYyG50zbta\",\n  \"_version\": 1,\n  \"_seq_no\": 0,\n  \"_primary_term\": 1,\n  \"result\": \"created\"\n}\n--------------------------------------------------\n// TESTRESPONSE[s/W0tpsmIBdwcYyG50zbta/$body._id/ s/\"successful\": 2/\"successful\": 1/]\n\n[discrete]\n[[optimistic-concurrency-control-index]]\n===== Optimistic concurrency control\n\nIndex operations can be made conditional and only be performed if the last\nmodification to the document was assigned the sequence number and primary\nterm specified by the `if_seq_no` and `if_primary_term` parameters. If a\nmismatch is detected, the operation will result in a `VersionConflictException`\nand a status code of 409. See <<optimistic-concurrency-control>> for more details.\n\n[discrete]\n[[index-routing]]\n===== Routing\n\nBy default, shard placement -- or `routing` -- is controlled by using a\nhash of the document's id value. For more explicit control, the value\nfed into the hash function used by the router can be directly specified\non a per-operation basis using the `routing` parameter. For example:\n\n[source,console]\n--------------------------------------------------\nPOST my-index-000001/_doc?routing=kimchy\n{\n  \"@timestamp\": \"2099-11-15T13:12:00\",\n  \"message\": \"GET /search HTTP/1.1 200 1070000\",\n  \"user\": {\n    \"id\": \"kimchy\"\n  }\n}\n--------------------------------------------------\n\nIn this example, the document is routed to a shard based on\nthe `routing` parameter provided: \"kimchy\".\n\nWhen setting up explicit mapping, you can also use the `_routing` field\nto direct the index operation to extract the routing value from the\ndocument itself. This does come at the (very minimal) cost of an\nadditional document parsing pass. If the `_routing` mapping is defined\nand set to be `required`, the index operation will fail if no routing\nvalue is provided or extracted.\n\nNOTE: Data streams do not support custom routing unless they were created with\nthe <<put-index-template-api-request-body,`allow_custom_routing`>> setting\nenabled in the template.\n\n[discrete]\n[[index-distributed]]\n===== Distributed\n\nThe index operation is directed to the primary shard based on its route\n(see the Routing section above) and performed on the actual node\ncontaining this shard. After the primary shard completes the operation,\nif needed, the update is distributed to applicable replicas.\n\n[discrete]\n[[index-wait-for-active-shards]]\n===== Active shards\n\nTo improve the resiliency of writes to the system, indexing operations\ncan be configured to wait for a certain number of active shard copies\nbefore proceeding with the operation. If the requisite number of active\nshard copies are not available, then the write operation must wait and\nretry, until either the requisite shard copies have started or a timeout\noccurs. By default, write operations only wait for the primary shards\nto be active before proceeding (i.e. `wait_for_active_shards=1`).\nThis default can be overridden in the index settings dynamically\nby setting `index.write.wait_for_active_shards`. To alter this behavior\nper operation, the `wait_for_active_shards` request parameter can be used.\n\nValid values are `all` or any positive integer up to the total number\nof configured copies per shard in the index (which is `number_of_replicas+1`).\nSpecifying a negative value or a number greater than the number of\nshard copies will throw an error.\n\nFor example, suppose we have a cluster of three nodes, `A`, `B`, and `C` and\nwe create an index `index` with the number of replicas set to 3 (resulting in\n4 shard copies, one more copy than there are nodes). If we\nattempt an indexing operation, by default the operation will only ensure\nthe primary copy of each shard is available before proceeding. This means\nthat even if `B` and `C` went down, and `A` hosted the primary shard copies,\nthe indexing operation would still proceed with only one copy of the data.\nIf `wait_for_active_shards` is set on the request to `3` (and all 3 nodes\nare up), then the indexing operation will require 3 active shard copies\nbefore proceeding, a requirement which should be met because there are 3\nactive nodes in the cluster, each one holding a copy of the shard. However,\nif we set `wait_for_active_shards` to `all` (or to `4`, which is the same),\nthe indexing operation will not proceed as we do not have all 4 copies of\neach shard active in the index. The operation will timeout\nunless a new node is brought up in the cluster to host the fourth copy of\nthe shard.\n\nIt is important to note that this setting greatly reduces the chances of\nthe write operation not writing to the requisite number of shard copies,\nbut it does not completely eliminate the possibility, because this check\noccurs before the write operation commences. Once the write operation\nis underway, it is still possible for replication to fail on any number of\nshard copies but still succeed on the primary. The `_shards` section of the\nwrite operation's response reveals the number of shard copies on which\nreplication succeeded/failed.\n\n[source,js]\n--------------------------------------------------\n{\n  \"_shards\": {\n    \"total\": 2,\n    \"failed\": 0,\n    \"successful\": 2\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\n[discrete]\n[[index-refresh]]\n===== Refresh\n\nControl when the changes made by this request are visible to search. See\n<<docs-refresh,refresh>>.\n\n[discrete]\n[[index-noop]]\n===== Noop updates\n\nWhen updating a document using the index API a new version of the document is\nalways created even if the document hasn't changed. If this isn't acceptable\nuse the `_update` API with `detect_noop` set to true. This option isn't\navailable on the index API because the index API doesn't fetch the old source\nand isn't able to compare it against the new source.\n\nThere isn't a hard and fast rule about when noop updates aren't acceptable.\nIt's a combination of lots of factors like how frequently your data source\nsends updates that are actually noops and how many queries per second\nElasticsearch runs on the shard receiving the updates.\n\n[discrete]\n[[timeout]]\n===== Timeout\n\nThe primary shard assigned to perform the index operation might not be\navailable when the index operation is executed. Some reasons for this\nmight be that the primary shard is currently recovering from a gateway\nor undergoing relocation. By default, the index operation will wait on\nthe primary shard to become available for up to 1 minute before failing\nand responding with an error. The `timeout` parameter can be used to\nexplicitly specify how long it waits. Here is an example of setting it\nto 5 minutes:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001/_doc/1?timeout=5m\n{\n  \"@timestamp\": \"2099-11-15T13:12:00\",\n  \"message\": \"GET /search HTTP/1.1 200 1070000\",\n  \"user\": {\n    \"id\": \"kimchy\"\n  }\n}\n--------------------------------------------------\n\n[discrete]\n[[index-versioning]]\n===== Versioning\n\nEach indexed document is given a version number. By default,\ninternal versioning is used that starts at 1 and increments\nwith each update, deletes included. Optionally, the version number can be\nset to an external value (for example, if maintained in a\ndatabase). To enable this functionality, `version_type` should be set to\n`external`. The value provided must be a numeric, long value greater than or equal to 0,\nand less than around 9.2e+18.\n\nWhen using the external version type, the system checks to see if\nthe version number passed to the index request is greater than the\nversion of the currently stored document. If true, the document will be\nindexed and the new version number used. If the value provided is less\nthan or equal to the stored document's version number, a version\nconflict will occur and the index operation will fail. For example:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001/_doc/1?version=2&version_type=external\n{\n  \"user\": {\n    \"id\": \"elkbee\"\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\nNOTE: Versioning is completely real time, and is not affected by the\nnear real time aspects of search operations. If no version is provided,\nthen the operation is executed without any version checks.\n\nIn the previous example, the operation will succeed since the supplied\nversion of 2 is higher than\nthe current document version of 1. If the document was already updated\nand its version was set to 2 or higher, the indexing command will fail\nand result in a conflict (409 http status code).\n\nA nice side effect is that there is no need to maintain strict ordering\nof async indexing operations executed as a result of changes to a source\ndatabase, as long as version numbers from the source database are used.\nEven the simple case of updating the Elasticsearch index using data from\na database is simplified if external versioning is used, as only the\nlatest version will be used if the index operations arrive out of order for\nwhatever reason.\n\n[discrete]\n[[index-version-types]]\n===== Version types\n\nIn addition to the `external` version type, Elasticsearch\nalso supports other types for specific use cases:\n\n[[_version_types]]\n`external` or `external_gt`:: Only index the document if the given version is strictly higher\nthan the version of the stored document *or* if there is no existing document. The given\nversion will be used as the new version and will be stored with the new document. The supplied\nversion must be a non-negative long number.\n\n`external_gte`:: Only index the document if the given version is *equal* or higher\nthan the version of the stored document. If there is no existing document\nthe operation will succeed as well. The given version will be used as the new version\nand will be stored with the new document. The supplied version must be a non-negative long number.\n\nNOTE: The `external_gte` version type is meant for special use cases and\nshould be used with care. If used incorrectly, it can result in loss of data.\nThere is another option, `force`, which is deprecated because it can cause\nprimary and replica shards to diverge.\n\n[[docs-index-api-example]]\n==== {api-examples-title}\n\nInsert a JSON document into the `my-index-000001` index with an `_id` of 1:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001/_doc/1\n{\n  \"@timestamp\": \"2099-11-15T13:12:00\",\n  \"message\": \"GET /search HTTP/1.1 200 1070000\",\n  \"user\": {\n    \"id\": \"kimchy\"\n  }\n}\n--------------------------------------------------\n\nThe API returns the following result:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"_shards\": {\n    \"total\": 2,\n    \"failed\": 0,\n    \"successful\": 2\n  },\n  \"_index\": \"my-index-000001\",\n  \"_id\": \"1\",\n  \"_version\": 1,\n  \"_seq_no\": 0,\n  \"_primary_term\": 1,\n  \"result\": \"created\"\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"successful\": 2/\"successful\": 1/]\n\nUse the `_create` resource to index a document into the `my-index-000001` index if\nno document with that ID exists:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001/_create/1\n{\n  \"@timestamp\": \"2099-11-15T13:12:00\",\n  \"message\": \"GET /search HTTP/1.1 200 1070000\",\n  \"user\": {\n    \"id\": \"kimchy\"\n  }\n}\n--------------------------------------------------\n\nSet the `op_type` parameter to _create_ to index a document into the `my-index-000001`\nindex if no document with that ID exists:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001/_doc/1?op_type=create\n{\n  \"@timestamp\": \"2099-11-15T13:12:00\",\n  \"message\": \"GET /search HTTP/1.1 200 1070000\",\n  \"user\": {\n    \"id\": \"kimchy\"\n  }\n}\n--------------------------------------------------\n"
}