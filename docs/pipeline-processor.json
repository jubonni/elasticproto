{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.176580",
        "size": 2761,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/pipeline-processor.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "pipeline-processor",
        "version": "8.15"
    },
    "doc": "[[pipeline-processor]]\n=== Pipeline processor\n++++\n<titleabbrev>Pipeline</titleabbrev>\n++++\n\nExecutes another pipeline.\n\n[[pipeline-options]]\n.Pipeline Options\n[options=\"header\"]\n|======\n| Name                      | Required  | Default  | Description\n| `name`                    | yes       | -        | The name of the pipeline to execute. Supports <<template-snippets,template snippets>>.\n| `ignore_missing_pipeline` | no        | false    | Whether to ignore missing pipelines instead of failing.\ninclude::common-options.asciidoc[]\n|======\n\n[source,js]\n--------------------------------------------------\n{\n  \"pipeline\": {\n    \"name\": \"inner-pipeline\"\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nThe name of the current pipeline can be accessed from the `_ingest.pipeline` ingest metadata key.\n\nAn example of using this processor for nesting pipelines would be:\n\nDefine an inner pipeline:\n\n[source,console]\n--------------------------------------------------\nPUT _ingest/pipeline/pipelineA\n{\n  \"description\" : \"inner pipeline\",\n  \"processors\" : [\n    {\n      \"set\" : {\n        \"field\": \"inner_pipeline_set\",\n        \"value\": \"inner\"\n      }\n    }\n  ]\n}\n--------------------------------------------------\n\nDefine another pipeline that uses the previously defined inner pipeline:\n\n[source,console]\n--------------------------------------------------\nPUT _ingest/pipeline/pipelineB\n{\n  \"description\" : \"outer pipeline\",\n  \"processors\" : [\n    {\n      \"pipeline\" : {\n        \"name\": \"pipelineA\"\n      }\n    },\n    {\n      \"set\" : {\n        \"field\": \"outer_pipeline_set\",\n        \"value\": \"outer\"\n      }\n    }\n  ]\n}\n--------------------------------------------------\n// TEST[continued]\n\nNow indexing a document while applying the outer pipeline will see the inner pipeline executed\nfrom the outer pipeline:\n\n[source,console]\n--------------------------------------------------\nPUT /my-index-000001/_doc/1?pipeline=pipelineB\n{\n  \"field\": \"value\"\n}\n--------------------------------------------------\n// TEST[continued]\n\nResponse from the index request:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"_index\": \"my-index-000001\",\n  \"_id\": \"1\",\n  \"_version\": 1,\n  \"result\": \"created\",\n  \"_shards\": {\n    \"total\": 2,\n    \"successful\": 1,\n    \"failed\": 0\n  },\n  \"_seq_no\": 66,\n  \"_primary_term\": 1\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"_seq_no\": \\d+/\"_seq_no\" : $body._seq_no/ s/\"_primary_term\" : 1/\"_primary_term\" : $body._primary_term/]\n\nIndexed document:\n\n[source,js]\n--------------------------------------------------\n{\n  \"field\": \"value\",\n  \"inner_pipeline_set\": \"inner\",\n  \"outer_pipeline_set\": \"outer\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n"
}