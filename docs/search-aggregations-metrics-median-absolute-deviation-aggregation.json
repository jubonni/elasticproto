{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.616075",
        "size": 5460,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-median-absolute-deviation-aggregation.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "search-aggregations-metrics-median-absolute-deviation-aggregation",
        "version": "8.15"
    },
    "doc": "[[search-aggregations-metrics-median-absolute-deviation-aggregation]]\n=== Median absolute deviation aggregation\n++++\n<titleabbrev>Median absolute deviation</titleabbrev>\n++++\n\nThis `single-value` aggregation approximates the {wikipedia}/Median_absolute_deviation[median absolute deviation]\nof its search results.\n\nMedian absolute deviation is a measure of variability. It is a robust\nstatistic, meaning that it is useful for describing data that may have\noutliers, or may not be normally distributed. For such data it can be more\ndescriptive than standard deviation.\n\nIt is calculated as the median of each data point's deviation from the median\nof the entire sample. That is, for a random variable X, the median absolute\ndeviation is median(|median(X) - X~i~|).\n\n==== Example\n\nAssume our data represents product reviews on a one to five star scale.\nSuch reviews are usually summarized as a mean, which is easily understandable\nbut doesn't describe the reviews' variability. Estimating the median absolute\ndeviation can provide insight into how much reviews vary from one another.\n\nIn this example we have a product which has an average rating of\n3 stars. Let's look at its ratings' median absolute deviation to determine\nhow much they vary\n\n[source,console]\n---------------------------------------------------------\nGET reviews/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"review_average\": {\n      \"avg\": {\n        \"field\": \"rating\"\n      }\n    },\n    \"review_variability\": {\n      \"median_absolute_deviation\": {\n        \"field\": \"rating\" <1>\n      }\n    }\n  }\n}\n---------------------------------------------------------\n// TEST[setup:reviews]\n<1> `rating` must be a numeric field\n\nThe resulting median absolute deviation of `2` tells us that there is a fair\namount of variability in the ratings. Reviewers must have diverse opinions about\nthis product.\n\n[source,console-result]\n---------------------------------------------------------\n{\n  ...\n  \"aggregations\": {\n    \"review_average\": {\n      \"value\": 3.0\n    },\n    \"review_variability\": {\n      \"value\": 2.0\n    }\n  }\n}\n---------------------------------------------------------\n// TESTRESPONSE[s/\\.\\.\\./\"took\": $body.took,\"timed_out\": false,\"_shards\": $body._shards,\"hits\": $body.hits,/]\n\n==== Approximation\n\nThe naive implementation of calculating median absolute deviation stores the\nentire sample in memory, so this aggregation instead calculates an\napproximation. It uses the https://github.com/tdunning/t-digest[TDigest data structure]\nto approximate the sample median and the median of deviations from the sample\nmedian. For more about the approximation characteristics of TDigests, see\n<<search-aggregations-metrics-percentile-aggregation-approximation>>.\n\nThe tradeoff between resource usage and accuracy of a TDigest's quantile\napproximation, and therefore the accuracy of this aggregation's approximation\nof median absolute deviation, is controlled by the `compression` parameter. A\nhigher `compression` setting provides a more accurate approximation at the\ncost of higher memory usage. For more about the characteristics of the TDigest\n`compression` parameter see\n<<search-aggregations-metrics-percentile-aggregation-compression>>.\n\n[source,console]\n---------------------------------------------------------\nGET reviews/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"review_variability\": {\n      \"median_absolute_deviation\": {\n        \"field\": \"rating\",\n        \"compression\": 100\n      }\n    }\n  }\n}\n---------------------------------------------------------\n// TEST[setup:reviews]\n\nThe default `compression` value for this aggregation is `1000`. At this\ncompression level this aggregation is usually within 5% of the exact result,\nbut observed performance will depend on the sample data.\n\n==== Script\n\nIn the example above, product reviews are on a scale of one to five. If you\nwant to modify them to a scale of one to ten, use a <<runtime,runtime field>>.\n\n[source,console]\n----\nGET reviews/_search?filter_path=aggregations\n{\n  \"size\": 0,\n  \"runtime_mappings\": {\n    \"rating.out_of_ten\": {\n      \"type\": \"long\",\n      \"script\": {\n        \"source\": \"emit(doc['rating'].value * params.scaleFactor)\",\n        \"params\": {\n          \"scaleFactor\": 2\n        }\n      }\n    }\n  },\n  \"aggs\": {\n    \"review_average\": {\n      \"avg\": {\n        \"field\": \"rating.out_of_ten\"\n      }\n    },\n    \"review_variability\": {\n      \"median_absolute_deviation\": {\n        \"field\": \"rating.out_of_ten\"\n      }\n    }\n  }\n}\n----\n// TEST[setup:reviews]\n\nWhich will result in:\n\n[source,console-result]\n---------------------------------------------------------\n{\n  \"aggregations\": {\n    \"review_average\": {\n      \"value\": 6.0\n    },\n    \"review_variability\": {\n      \"value\": 4.0\n    }\n  }\n}\n---------------------------------------------------------\n\n==== Missing value\n\nThe `missing` parameter defines how documents that are missing a value should be\ntreated. By default they will be ignored but it is also possible to treat them\nas if they had a value.\n\nLet's be optimistic and assume some reviewers loved the product so much that\nthey forgot to give it a rating. We'll assign them five stars\n\n[source,console]\n---------------------------------------------------------\nGET reviews/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"review_variability\": {\n      \"median_absolute_deviation\": {\n        \"field\": \"rating\",\n        \"missing\": 5\n      }\n    }\n  }\n}\n---------------------------------------------------------\n// TEST[setup:reviews]\n"
}