{
    "meta": {
        "size": 3629,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/creating-classic-plugins.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "creating-classic-plugins",
        "version": "8.15"
    },
    "doc": "[[creating-classic-plugins]]\n=== Creating classic plugins\n\nClassic plugins provide {es} with mechanisms for custom authentication,\nauthorization, scoring, and more.\n\n[IMPORTANT]\n.Plugin release lifecycle\n==============================================\n\nClassic plugins require you to build a new version for each new {es} release.\nThis version is checked when the plugin is installed and when it is loaded. {es}\nwill refuse to start in the presence of plugins with the incorrect\n`elasticsearch.version`.\n\n==============================================\n\n[discrete]\n==== Classic plugin file structure\n\nClassic plugins are ZIP files composed of JAR files and\n<<plugin-descriptor-file-{plugin-type},a metadata file called\n`plugin-descriptor.properties`>>, a Java properties file that describes the\nplugin.\n\nNote that only JAR files at the root of the plugin are added to the classpath\nfor the plugin. If you need other resources, package them into a resources JAR.\n\n[discrete]\n==== Example plugins\n\nThe {es} repository contains {es-repo}tree/main/plugins/examples[examples of plugins]. Some of these include:\n\n* a plugin with {es-repo}tree/main/plugins/examples/custom-settings[custom settings]\n* a plugin with a {es-repo}tree/main/plugins/examples/custom-processor[custom ingest processor]\n* adding {es-repo}tree/main/plugins/examples/rest-handler[custom rest endpoints]\n* adding a {es-repo}tree/main/plugins/examples/rescore[custom rescorer]\n* a script {es-repo}tree/main/plugins/examples/script-expert-scoring[implemented in Java]\n\nThese examples provide the bare bones needed to get started. For more\ninformation about how to write a plugin, we recommend looking at the\n{es-repo}tree/main/plugins/[source code of existing plugins] for inspiration.\n\n[discrete]\n==== Testing your plugin\n\nUse `bin/elasticsearch-plugin install file:///path/to/your/plugin`\nto install your plugin for testing. The Java plugin is auto-loaded only if it's in the\n`plugins/` directory.\n\n[discrete]\n[[plugin-authors-jsm]]\n==== Java Security permissions\n\nSome plugins may need additional security permissions. A plugin can include\nthe optional `plugin-security.policy` file containing `grant` statements for\nadditional permissions. Any additional permissions will be displayed to the user\nwith a large warning, and they will have to confirm them when installing the\nplugin interactively. So if possible, it is best to avoid requesting any\nspurious permissions!\n\nIf you are using the {es} Gradle build system, place this file in\n`src/main/plugin-metadata` and it will be applied during unit tests as well.\n\nThe Java security model is stack-based, and additional\npermissions are granted to the jars in your plugin, so you have to\nwrite proper security code around operations requiring elevated privileges.\nYou might add a check to prevent unprivileged code (such as scripts)\nfrom gaining escalated permissions. For example:\n\n[source,java]\n--------------------------------------------------\n// ES permission you should check before doPrivileged() blocks\nimport org.elasticsearch.SpecialPermission;\n\nSecurityManager sm = System.getSecurityManager();\nif (sm != null) {\n  // unprivileged code such as scripts do not have SpecialPermission\n  sm.checkPermission(new SpecialPermission());\n}\nAccessController.doPrivileged(\n  // sensitive operation\n);\n--------------------------------------------------\n\nCheck https://www.oracle.com/technetwork/java/seccodeguide-139067.html[Secure Coding Guidelines for Java SE]\nfor more information.\n\n[[plugin-descriptor-file-classic]]\n==== The plugin descriptor file for classic plugins\n\ninclude::plugin-descriptor-file.asciidoc[]\n"
}