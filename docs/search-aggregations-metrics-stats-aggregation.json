{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.539072",
        "size": 3005,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-stats-aggregation.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "search-aggregations-metrics-stats-aggregation",
        "version": "8.15"
    },
    "doc": "[[search-aggregations-metrics-stats-aggregation]]\n=== Stats aggregation\n++++\n<titleabbrev>Stats</titleabbrev>\n++++\n\nA `multi-value` metrics aggregation that computes stats over numeric values extracted from the aggregated documents.\n\nThe stats that are returned consist of: `min`, `max`, `sum`, `count` and `avg`.\n\nAssuming the data consists of documents representing exams grades (between 0 and 100) of students\n\n[source,console]\n--------------------------------------------------\nPOST /exams/_search?size=0\n{\n  \"aggs\": {\n    \"grades_stats\": { \"stats\": { \"field\": \"grade\" } }\n  }\n}\n--------------------------------------------------\n// TEST[setup:exams]\n\nThe above aggregation computes the grades statistics over all documents. The aggregation type is `stats` and the `field` setting defines the numeric field of the documents the stats will be computed on. The above will return the following:\n\n\n[source,console-result]\n--------------------------------------------------\n{\n  ...\n\n  \"aggregations\": {\n    \"grades_stats\": {\n      \"count\": 2,\n      \"min\": 50.0,\n      \"max\": 100.0,\n      \"avg\": 75.0,\n      \"sum\": 150.0\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\\.\\.\\./\"took\": $body.took,\"timed_out\": false,\"_shards\": $body._shards,\"hits\": $body.hits,/]\n\nThe name of the aggregation (`grades_stats` above) also serves as the key by which the aggregation result can be retrieved from the returned response.\n\n==== Script\n\nIf you need to get the `stats` for something more complex than a single field,\nrun the aggregation on a <<runtime,runtime field>>.\n\n[source,console]\n--------------------------------------------------\nPOST /exams/_search\n{\n  \"size\": 0,\n  \"runtime_mappings\": {\n    \"grade.weighted\": {\n      \"type\": \"double\",\n      \"script\": \"\"\"\n        emit(doc['grade'].value * doc['weight'].value)\n      \"\"\"\n    }\n  },\n  \"aggs\": {\n    \"grades_stats\": {\n      \"stats\": {\n        \"field\": \"grade.weighted\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[setup:exams]\n// TEST[s/_search/_search?filter_path=aggregations/]\n\n////\n[source,console-result]\n--------------------------------------------------\n{\n  \"aggregations\": {\n    \"grades_stats\": {\n      \"count\": 2,\n      \"min\": 150.0,\n      \"max\": 200.0,\n      \"avg\": 175.0,\n      \"sum\": 350.0\n    }\n  }\n}\n--------------------------------------------------\n////\n\n\n==== Missing value\n\nThe `missing` parameter defines how documents that are missing a value should be treated.\nBy default they will be ignored but it is also possible to treat them as if they\nhad a value.\n\n[source,console]\n--------------------------------------------------\nPOST /exams/_search?size=0\n{\n  \"aggs\": {\n    \"grades_stats\": {\n      \"stats\": {\n        \"field\": \"grade\",\n        \"missing\": 0      <1>\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[setup:exams]\n\n<1> Documents without a value in the `grade` field will fall into the same bucket as documents that have the value `0`.\n"
}