{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.273271",
        "size": 6969,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-geo-shape-query.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "query-dsl-geo-shape-query",
        "version": "8.15"
    },
    "doc": "[[query-dsl-geo-shape-query]]\n=== Geoshape query\n++++\n<titleabbrev>Geoshape</titleabbrev>\n++++\n\nFilter documents indexed using either the <<geo-shape,`geo_shape`>> or the\n<<geo-point,`geo_point`>> type.\n\nThe `geo_shape` query uses the same <<geoshape-indexing-approach, index>> as\nthe `geo_shape` or `geo_point` mapping to find documents that have a shape that\nis related to the query shape, using a specified\n<<geo-shape-spatial-relations, spatial relationship>>: either intersects,\ncontained, within or disjoint.\n\nThe query supports two ways of defining the query shape, either by\nproviding a whole shape definition, or by referencing the name of a shape\npre-indexed in another index. Both formats are defined below with\nexamples.\n\n\n==== Inline shape definition\n\nSimilar to the `geo_point` type, the `geo_shape` query uses\nhttp://geojson.org[GeoJSON] to represent shapes.\n\nGiven the following index with locations as `geo_shape` fields:\n\n[source,console]\n--------------------------------------------------\nPUT /example\n{\n  \"mappings\": {\n    \"properties\": {\n      \"location\": {\n        \"type\": \"geo_shape\"\n      }\n    }\n  }\n}\n\nPOST /example/_doc?refresh\n{\n  \"name\": \"Wind & Wetter, Berlin, Germany\",\n  \"location\": {\n    \"type\": \"point\",\n    \"coordinates\": [ 13.400544, 52.530286 ]\n  }\n}\n--------------------------------------------------\n// TESTSETUP\n\n\nThe following query will find the point using {es}'s `envelope` GeoJSON\nextension:\n\n[source,console]\n--------------------------------------------------\nGET /example/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": {\n        \"match_all\": {}\n      },\n      \"filter\": {\n        \"geo_shape\": {\n          \"location\": {\n            \"shape\": {\n              \"type\": \"envelope\",\n              \"coordinates\": [ [ 13.0, 53.0 ], [ 14.0, 52.0 ] ]\n            },\n            \"relation\": \"within\"\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n\nThe above query can, similarly, be queried on `geo_point` fields.\n\n[source,console]\n--------------------------------------------------\nPUT /example_points\n{\n  \"mappings\": {\n    \"properties\": {\n      \"location\": {\n        \"type\": \"geo_point\"\n      }\n    }\n  }\n}\n\nPUT /example_points/_doc/1?refresh\n{\n  \"name\": \"Wind & Wetter, Berlin, Germany\",\n  \"location\": [13.400544, 52.530286]\n}\n--------------------------------------------------\n// TEST[continued]\n\n\nUsing the same query, the documents with matching `geo_point` fields are\nreturned.\n\n[source,console]\n--------------------------------------------------\nGET /example_points/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": {\n        \"match_all\": {}\n      },\n      \"filter\": {\n        \"geo_shape\": {\n          \"location\": {\n            \"shape\": {\n              \"type\": \"envelope\",\n              \"coordinates\": [ [ 13.0, 53.0 ], [ 14.0, 52.0 ] ]\n            },\n            \"relation\": \"intersects\"\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"took\" : 17,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 1,\n    \"successful\" : 1,\n    \"skipped\" : 0,\n    \"failed\" : 0\n  },\n  \"hits\" : {\n    \"total\" : {\n      \"value\" : 1,\n      \"relation\" : \"eq\"\n    },\n    \"max_score\" : 1.0,\n    \"hits\" : [\n      {\n        \"_index\" : \"example_points\",\n        \"_id\" : \"1\",\n        \"_score\" : 1.0,\n        \"_source\" : {\n          \"name\": \"Wind & Wetter, Berlin, Germany\",\n          \"location\": [13.400544, 52.530286]\n        }\n      }\n    ]\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"took\" : 17/\"took\" : $body.took/]\n\n\n==== Pre-indexed shape\n\nThe query also supports using a shape which has already been indexed in another\nindex. This is particularly useful for when you have a pre-defined list of\nshapes and you want to reference the list using\na logical name (for example 'New Zealand') rather than having to provide\ncoordinates each time. In this situation, it is only necessary to provide:\n\n* `id` - The ID of the document that containing the pre-indexed shape.\n* `index` - Name of the index where the pre-indexed shape is. Defaults to\n'shapes'.\n* `path` - The field specified as path containing the pre-indexed shape.\nDefaults to 'shape'.\n* `routing` - The routing of the shape document if required.\n\nThe following is an example of using the Filter with a pre-indexed\nshape:\n\n[source,console]\n--------------------------------------------------\nPUT /shapes\n{\n  \"mappings\": {\n    \"properties\": {\n      \"location\": {\n        \"type\": \"geo_shape\"\n      }\n    }\n  }\n}\n\nPUT /shapes/_doc/deu\n{\n  \"location\": {\n    \"type\": \"envelope\",\n    \"coordinates\" : [[13.0, 53.0], [14.0, 52.0]]\n  }\n}\n\nGET /example/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"filter\": {\n        \"geo_shape\": {\n          \"location\": {\n            \"indexed_shape\": {\n              \"index\": \"shapes\",\n              \"id\": \"deu\",\n              \"path\": \"location\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n\n[[geo-shape-spatial-relations]]\n==== Spatial relations\n\nThe following is a complete list of spatial relation operators available when\nsearching a geo field:\n\n* `INTERSECTS` - (default) Return all documents whose `geo_shape` or `geo_point` field\nintersects the query geometry.\n* `DISJOINT` - Return all documents whose `geo_shape` or `geo_point` field has nothing in\ncommon with the query geometry.\n* `WITHIN` - Return all documents whose `geo_shape` or `geo_point` field is within the query\ngeometry. Line geometries are not supported.\n* `CONTAINS` - Return all documents whose `geo_shape` or `geo_point` field contains the query\ngeometry.\n\n[discrete]\n==== Ignore unmapped\n\nWhen set to `true` the `ignore_unmapped` option will ignore an unmapped field\nand will not match any documents for this query. This can be useful when\nquerying multiple indexes which might have different mappings. When set to\n`false` (the default value) the query will throw an exception if the field\nis not mapped.\n\n[[geo-shape-query-notes]]\n==== Notes\n\n* When data is indexed in a `geo_shape` field as an array of shapes, the arrays\n  are treated as one shape. For this reason, the following requests are\n  equivalent.\n\n[source,console]\n--------------------------------------------------\nPUT /test/_doc/1\n{\n  \"location\": [\n    {\n      \"coordinates\": [46.25,20.14],\n      \"type\": \"point\"\n    },\n    {\n      \"coordinates\": [47.49,19.04],\n      \"type\": \"point\"\n    }\n  ]\n}\n--------------------------------------------------\n\n\n[source,console]\n--------------------------------------------------\nPUT /test/_doc/1\n{\n  \"location\":\n    {\n      \"coordinates\": [[46.25,20.14],[47.49,19.04]],\n      \"type\": \"multipoint\"\n    }\n}\n--------------------------------------------------\n\n* The `geo_shape` query assumes `geo_shape` fields use a default `orientation`\nof `RIGHT` (counterclockwise). See <<polygon-orientation>>.\n"
}