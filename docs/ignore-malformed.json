{
    "meta": {
        "size": 3803,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ignore-malformed.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "ignore-malformed",
        "version": "8.15"
    },
    "doc": "[[ignore-malformed]]\n=== `ignore_malformed`\n\nSometimes you don't have much control over the data that you receive. One\nuser may send a `login` field that is a <<date,`date`>>, and another sends a\n`login` field that is an email address.\n\nTrying to index the wrong data type into a field throws an exception by\ndefault, and rejects the whole document. The `ignore_malformed` parameter, if\nset to `true`, allows the exception to be ignored. The malformed field is not\nindexed, but other fields in the document are processed normally.\n\nFor example:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"number_one\": {\n        \"type\": \"integer\",\n        \"ignore_malformed\": true\n      },\n      \"number_two\": {\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n\nPUT my-index-000001/_doc/1\n{\n  \"text\":       \"Some text value\",\n  \"number_one\": \"foo\" <1>\n}\n\nPUT my-index-000001/_doc/2\n{\n  \"text\":       \"Some text value\",\n  \"number_two\": \"foo\" <2>\n}\n--------------------------------------------------\n// TEST[catch:bad_request]\n\n<1> This document will have the `text` field indexed, but not the `number_one` field.\n<2> This document will be rejected because `number_two` does not allow malformed values.\n\nThe `ignore_malformed` setting is currently supported by the following <<mapping-types,mapping types>>:\n\n<<number>>::         `long`, `integer`, `short`, `byte`, `double`, `float`, `half_float`, `scaled_float`\n<<boolean>>::        `boolean`\n<<date>>::           `date`\n<<date_nanos>>::     `date_nanos`\n<<geo-point>>::     `geo_point` for lat/lon points\n<<geo-shape>>::     `geo_shape` for complex shapes like polygons\n<<ip>>::            `ip` for IPv4 and IPv6 addresses\n\nTIP: The `ignore_malformed` setting value can be updated on\nexisting fields using the <<indices-put-mapping,update mapping API>>.\n\n[[ignore-malformed-setting]]\n==== Index-level default\n\nThe `index.mapping.ignore_malformed` setting can be set on the index level to\nignore malformed content globally across all allowed mapping types.\nMapping types that don't support the setting will ignore it if set on the index level.\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"settings\": {\n    \"index.mapping.ignore_malformed\": true <1>\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"number_one\": { <1>\n        \"type\": \"byte\"\n      },\n      \"number_two\": {\n        \"type\": \"integer\",\n        \"ignore_malformed\": false <2>\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n<1> The `number_one` field inherits the index-level setting.\n<2> The `number_two` field overrides the index-level setting to turn off `ignore_malformed`.\n\n==== Dealing with malformed fields\n\nMalformed fields are silently ignored at indexing time when `ignore_malformed`\nis turned on. Whenever possible it is recommended to keep the number of\ndocuments that have a malformed field contained, or queries on this field will\nbecome meaningless. Elasticsearch makes it easy to check how many documents\nhave malformed fields by using `exists`,`term` or `terms` queries on the special\n<<mapping-ignored-field,`_ignored`>> field.\n\n[[json-object-limits]]\n==== Limits for JSON Objects\nYou can't use `ignore_malformed` with the following data types:\n\n* <<nested, Nested data type>>\n* <<object, Object data type>>\n* <<range, Range data types>>\n\nYou also can't use `ignore_malformed` to ignore JSON objects submitted to fields\nof the wrong data type. A JSON object is any data surrounded by curly brackets\n`\"{}\"` and includes data mapped to the nested, object, and range data types.\n\nIf you submit a JSON object to an unsupported field, {es} will return an error\nand reject the entire document regardless of the `ignore_malformed` setting.\n"
}