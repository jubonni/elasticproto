{
    "meta": {
        "size": 5839,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/subobjects.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "subobjects",
        "version": "8.15"
    },
    "doc": "[[subobjects]]\n=== `subobjects`\n\nWhen indexing a document or updating mappings, Elasticsearch accepts fields that contain dots in their names,\nwhich get expanded to their corresponding object structure. For instance, the  field `metrics.time.max`\nis mapped as a `max` leaf field with a parent `time` object, belonging to its parent `metrics` object.\n\nThe described default behaviour is reasonable for most scenarios, but causes problems in certain situations\nwhere for instance a field `metrics.time` holds a value too, which is common when indexing metrics data.\nA document holding a value for both `metrics.time.max` and `metrics.time` gets rejected given that `time`\nwould need to be a leaf field to hold a value as well as an object to hold the `max` sub-field.\n\nThe `subobjects` setting, which can be applied only to the top-level mapping definition and\nto <<object,`object`>> fields, disables the ability for an object to hold further subobjects and makes it possible\nto store documents where field names contain dots and share common prefixes. From the example above, if the object\ncontainer `metrics` has `subobjects` set to `false`, it can hold values for both `time` and `time.max` directly\nwithout the need for any intermediate object, as dots in field names are preserved.\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"metrics\": {\n        \"type\":  \"object\",\n        \"subobjects\": false, <1>\n        \"properties\": {\n          \"time\": { \"type\": \"long\" },\n          \"time.min\": { \"type\": \"long\" },\n          \"time.max\": { \"type\": \"long\" }\n        }\n      }\n    }\n  }\n}\n\nPUT my-index-000001/_doc/metric_1\n{\n  \"metrics.time\" : 100, <2>\n  \"metrics.time.min\" : 10,\n  \"metrics.time.max\" : 900\n}\n\nPUT my-index-000001/_doc/metric_2\n{\n  \"metrics\" : {\n    \"time\" : 100, <3>\n    \"time.min\" : 10,\n    \"time.max\" : 900\n  }\n}\n\nGET my-index-000001/_mapping\n--------------------------------------------------\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"my-index-000001\" : {\n    \"mappings\" : {\n      \"properties\" : {\n        \"metrics\" : {\n          \"subobjects\" : false,\n          \"properties\" : {\n            \"time\" : {\n              \"type\" : \"long\"\n            },\n            \"time.min\" : { <4>\n              \"type\" : \"long\"\n            },\n            \"time.max\" : {\n              \"type\" : \"long\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n<1> The `metrics` field cannot hold other objects.\n<2> Sample document holding flat paths\n<3> Sample document holding an object (configured to not hold subobjects) and its leaf sub-fields\n<4> The resulting mapping where dots in field names were preserved\n\nThe entire mapping may be configured to not support subobjects as well, in which case the document can\nonly ever hold leaf sub-fields:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"subobjects\": false <1>\n  }\n}\n\nPUT my-index-000001/_doc/metric_1\n{\n  \"time\" : \"100ms\", <2>\n  \"time.min\" : \"10ms\",\n  \"time.max\" : \"900ms\"\n}\n\n--------------------------------------------------\n\n<1> The entire mapping is configured to not support objects.\n<2> The document does not support objects\n\nThe `subobjects` setting for existing fields and the top-level mapping definition cannot be updated.\n\n[[subobjects-auto-flattening]]\n==== Auto-flattening object mappings\n\nIt is generally recommended to define the properties of an object that is configured with `subobjects: false` with dotted field names\n(as shown in the first example).\nHowever, it is also possible to define these properties as sub-objects in the mappings.\nIn that case, the mapping will be automatically flattened before it is stored.\nThis makes it easier to re-use existing mappings without having to re-write them.\n\nNote that auto-flattening will not work when certain <<mapping-params, mapping parameters>> are set\non object mappings that are defined under an object configured with `subobjects: false`:\n\n* The <<enabled, `enabled`>> mapping parameter must not be `false`.\n* The <<dynamic, `dynamic`>> mapping parameter must not contradict the implicit or explicit value of the parent. For example, when `dynamic` is set to `false` in the root of the mapping, object mappers that set `dynamic` to `true` can't be auto-flattened.\n* The <<subobjects, `subobjects`>> mapping parameter must not be set to `true` explicitly.\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000002\n{\n  \"mappings\": {\n    \"properties\": {\n      \"metrics\": {\n        \"subobjects\": false,\n        \"properties\": {\n          \"time\": {\n            \"type\": \"object\", <1>\n            \"properties\": {\n              \"min\": { \"type\": \"long\" }, <2>\n              \"max\": { \"type\": \"long\" }\n            }\n          }\n        }\n      }\n    }\n  }\n}\nGET my-index-000002/_mapping\n--------------------------------------------------\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"my-index-000002\" : {\n    \"mappings\" : {\n      \"properties\" : {\n        \"metrics\" : {\n          \"subobjects\" : false,\n          \"properties\" : {\n            \"time.min\" : { <3>\n              \"type\" : \"long\"\n            },\n            \"time.max\" : {\n              \"type\" : \"long\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n<1> The metrics object can contain further object mappings that will be auto-flattened.\n Object mappings at this level must not set certain mapping parameters as explained above.\n<2> This field will be auto-flattened to `\"time.min\"` before the mapping is stored.\n<3> The auto-flattened `\"time.min\"` field can be inspected by looking at the index mapping.\n"
}