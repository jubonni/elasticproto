{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.526578",
        "size": 6715,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/dynamic-field-mapping.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "dynamic-field-mapping",
        "version": "8.15"
    },
    "doc": "[[dynamic-field-mapping]]\n=== Dynamic field mapping\n\nWhen {es} detects a new field in a document, it _dynamically_ adds the field to\nthe type mapping by default. The <<dynamic,`dynamic`>> parameter controls this behavior.\n\nYou can explicitly instruct {es} to dynamically create fields based on incoming\ndocuments by setting the `dynamic` parameter to `true` or `runtime`. When\ndynamic field mapping is enabled, {es} uses the rules in the following table to\ndetermine how to map data types for each field.\n\nNOTE: The field data types in the following table are the only\n<<mapping-types,field data types>> that {es} detects dynamically. You must\nexplicitly map all other data types.\n\n[[dynamic-field-mapping-types]]\n// tag::dynamic-field-mapping-types-tag[]\n[cols=\"3\",frame=all]\n|===\nh|                2+^h|{es} data type\nh| JSON data type h| `\"dynamic\":\"true\"` h| `\"dynamic\":\"runtime\"`\n |`null` 2*| No field added\n |`true` or `false` 2*| `boolean`\n |`double` | `float` | `double`\n |`long` 2*| `long`\n |`object` | `object` | No field added\n |`array` 2*|  Depends on the first non-`null` value in the array\n |`string` that passes <<date-detection,date detection>> 2*| `date`\n |`string` that passes <<numeric-detection,numeric detection>> | `float` or `long` | `double` or `long`\n |`string` that doesn't pass `date` detection or `numeric` detection | `text` with a `.keyword` sub-field | `keyword`\n|===\n// end::dynamic-field-mapping-types-tag[]\n\nYou can disable dynamic mapping, both at the document and at the\n<<object,`object`>> level. Setting the `dynamic` parameter to\n`false` ignores new fields, and `strict` rejects the document if {es}\nencounters an unknown field.\n\nTIP: Use the <<indices-put-mapping,update mapping API>> to update the `dynamic`\nsetting on existing fields.\n\nYou can customize dynamic field mapping rules for\n<<date-detection,date detection>> and <<numeric-detection,numeric detection>>.\nTo define custom mappings rules that you can apply to additional dynamic\nfields, use <<dynamic-templates,`dynamic_templates`>>.\n\n[[date-detection]]\n==== Date detection\n\nIf `date_detection` is enabled (default), then new string fields are checked\nto see whether their contents match any of the date patterns specified in\n`dynamic_date_formats`. If a match is found, a new <<date,`date`>> field is\nadded with the corresponding format.\n\nThe default value for `dynamic_date_formats` is:\n\n&#91; <<strict-date-time,`\"strict_date_optional_time\"`>>,`\"yyyy/MM/dd HH:mm:ss Z||yyyy/MM/dd Z\"`]\n\nFor example:\n\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001/_doc/1\n{\n  \"create_date\": \"2015/09/02\"\n}\n\nGET my-index-000001/_mapping <1>\n--------------------------------------------------\n\n<1> The `create_date` field has been added as a <<date,`date`>>\n    field with the <<mapping-date-format,`format`>>: +\n    `\"yyyy/MM/dd HH:mm:ss Z||yyyy/MM/dd Z\"`.\n\n===== Disabling date detection\n\nDynamic date detection can be disabled by setting `date_detection` to `false`:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"date_detection\": false\n  }\n}\n\nPUT my-index-000001/_doc/1 <1>\n{\n  \"create_date\": \"2015/09/02\"\n}\n--------------------------------------------------\n\n<1> The `create_date` field has been added as a <<text,`text`>> field.\n\n===== Customizing detected date formats\n\nAlternatively, the `dynamic_date_formats` can be customized to support your\nown <<mapping-date-format,date formats>>:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"dynamic_date_formats\": [\"MM/dd/yyyy\"]\n  }\n}\n\nPUT my-index-000001/_doc/1\n{\n  \"create_date\": \"09/25/2015\"\n}\n--------------------------------------------------\n\n[NOTE]\n====\nThere is a difference between configuring an array of date patterns and\nconfiguring multiple patterns in a single string separated by `||`. When you\nconfigure an array of date patterns, the pattern that matches the date in the\nfirst document with an unmapped date field will determine the mapping of that\nfield:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"dynamic_date_formats\": [ \"yyyy/MM\", \"MM/dd/yyyy\"]\n  }\n}\n\nPUT my-index-000001/_doc/1\n{\n  \"create_date\": \"09/25/2015\"\n}\n--------------------------------------------------\n\nThe resulting mapping will be:\n\n////\n[source,console]\n----\nGET my-index-000001/_mapping\n----\n//TEST[continued]\n////\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"my-index-000001\": {\n    \"mappings\": {\n      \"dynamic_date_formats\": [\n        \"yyyy/MM\",\n        \"MM/dd/yyyy\"\n      ],\n      \"properties\": {\n        \"create_date\": {\n          \"type\": \"date\",\n          \"format\": \"MM/dd/yyyy\"\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\nConfiguring multiple patterns in a single string separated by `||` results in a\nmapping that supports any of the date formats. This enables you to index\ndocuments that use different formats:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"dynamic_date_formats\": [ \"yyyy/MM||MM/dd/yyyy\"]\n  }\n}\n\nPUT my-index-000001/_doc/1\n{\n  \"create_date\": \"09/25/2015\"\n}\n--------------------------------------------------\n\nThe resulting mapping will be:\n\n////\n[source,console]\n----\nGET my-index-000001/_mapping\n----\n//TEST[continued]\n////\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"my-index-000001\": {\n    \"mappings\": {\n      \"dynamic_date_formats\": [\n        \"yyyy/MM||MM/dd/yyyy\"\n      ],\n      \"properties\": {\n        \"create_date\": {\n          \"type\": \"date\",\n          \"format\": \"yyyy/MM||MM/dd/yyyy\"\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n====\n\n[NOTE]\n====\nEpoch formats (`epoch_millis` and `epoch_second`) are not supported as dynamic date formats.\n====\n\n[[numeric-detection]]\n==== Numeric detection\n\nWhile JSON has support for native floating point and integer data types, some\napplications or languages may sometimes render numbers as strings. Usually the\ncorrect solution is to map these fields explicitly, but numeric detection\n(which is disabled by default) can be enabled to do this automatically:\n\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"numeric_detection\": true\n  }\n}\n\nPUT my-index-000001/_doc/1\n{\n  \"my_float\":   \"1.0\", <1>\n  \"my_integer\": \"1\" <2>\n}\n--------------------------------------------------\n\n<1> The `my_float` field is added as a <<number,`float`>> field.\n<2> The `my_integer` field is added as a <<number,`long`>> field.\n"
}