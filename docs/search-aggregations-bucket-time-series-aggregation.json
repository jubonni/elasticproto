{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.669070",
        "size": 3734,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-time-series-aggregation.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "search-aggregations-bucket-time-series-aggregation",
        "version": "8.15"
    },
    "doc": "[[search-aggregations-bucket-time-series-aggregation]]\n=== Time series aggregation\n++++\n<titleabbrev>Time series</titleabbrev>\n++++\n\npreview::[]\n\nThe time series aggregation queries data created using a time series index. This is typically data such as metrics\nor other data streams with a time component, and requires creating an index using the time series mode.\n\n//////////////////////////\n\nCreating a time series mapping\n\nTo create an index with the time series mapping, specify \"mode\" as \"time_series\" in the index settings,\n\"routing_path\" specifying the a list of time series fields, and a start and end time for the series. Each of the\n\"routing_path\" fields must be keyword fields with \"time_series_dimension\" set to true. Additionally, add a\ndate field used as the timestamp.\n\n[source,js]\n--------------------------------------------------\nPUT /my-time-series-index\n{\n  \"settings\": {\n    \"index\": {\n      \"number_of_shards\": 3,\n      \"number_of_replicas\": 2,\n      \"mode\": \"time_series\",\n      \"routing_path\": [\"key\"],\n      \"time_series\": {\n        \"start_time\": \"2022-01-01T00:00:00Z\",\n        \"end_time\": \"2023-01-01T00:00:00Z\"\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n        \"key\": {\n            \"type\": \"keyword\",\n            \"time_series_dimension\": true\n        },\n        \"@timestamp\": {\n          \"type\": \"date\"\n        }\n    }\n  }\n}\n-------------------------------------------------\n// NOTCONSOLE\n\n//////////////////////////\n\nData can be added to the time series index like other indices:\n\n[source,js]\n--------------------------------------------------\nPUT /my-time-series-index-0/_bulk\n{ \"index\": {} }\n{ \"key\": \"a\", \"val\": 1, \"@timestamp\": \"2022-01-01T00:00:10Z\" }\n{ \"index\": {}}\n{ \"key\": \"a\", \"val\": 2, \"@timestamp\": \"2022-01-02T00:00:00Z\" }\n{ \"index\": {} }\n{ \"key\": \"b\", \"val\": 2, \"@timestamp\": \"2022-01-01T00:00:10Z\" }\n{ \"index\": {}}\n{ \"key\": \"b\", \"val\": 3, \"@timestamp\": \"2022-01-02T00:00:00Z\" }\n--------------------------------------------------\n// NOTCONSOLE\n\nTo perform a time series aggregation, specify \"time_series\" as the aggregation type. When the boolean \"keyed\"\nis true, each bucket is given a unique key.\n\n[source,js,id=time-series-aggregation-example]\n--------------------------------------------------\nGET /_search\n{\n  \"aggs\": {\n    \"ts\": {\n      \"time_series\": { \"keyed\": false }\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nThis will return all results in the time series, however a more typical query will use sub aggregations to reduce the\ndate returned to something more relevant.\n\n[[search-aggregations-bucket-time-series-aggregation-size]]\n==== Size\n\nBy default, `time series` aggregations return 10000 results. The \"size\" parameter can be used to limit the results\nfurther. Alternatively, using sub aggregations can limit the amount of values returned as a time series aggregation.\n\n[[search-aggregations-bucket-time-series-aggregation-keyed]]\n==== Keyed\n\nThe `keyed` parameter determines if buckets are returned as a map with unique keys per bucket. By default with `keyed`\nset to false, buckets are returned as an array.\n\n[[times-series-aggregations-limitations]]\n==== Limitations\n\nThe `time_series` aggregation has many limitations. Many aggregation performance optimizations are disabled when using\nthe `time_series` aggregation. For example the filter by filter optimization or collect mode breath first (`terms` and\n`multi_terms` aggregation forcefully use the depth first collect mode).\n\nThe following aggregations also fail to work if used in combination with the `time_series` aggregation:\n`auto_date_histogram`, `variable_width_histogram`, `rare_terms`, `global`, `composite`, `sampler`, `random_sampler` and\n`diversified_sampler`.\n"
}