{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.084068",
        "size": 12933,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/graph-explore-api.html",
        "type": "documentation",
        "role": [
            "xpack",
            "child_attributes"
        ],
        "has_code": true,
        "title": "graph-explore-api",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[graph-explore-api]]\n== Graph explore API\n\nThe graph explore API enables you to extract and summarize information about\nthe documents and terms in an {es} data stream or index.\n\nThe easiest way to understand the behaviour of this API is to use the\nGraph UI to explore connections. You can view the most recent request submitted\nto the `_explore` endpoint from the *Last request* panel. For more information,\nsee {kibana-ref}/graph-getting-started.html[Getting Started with Graph].\n\nFor additional information about working with the explore API, see the Graph\n{kibana-ref}/graph-troubleshooting.html[Troubleshooting] and\n{kibana-ref}/graph-limitations.html[Limitations] topics.\n\nNOTE: The graph explore API is enabled by default. To disable access to the\ngraph explore API and the Kibana {kibana-ref}/graph-getting-started.html[Graph\nUI], add `xpack.graph.enabled: false` to `elasticsearch.yml`.\n\n[discrete]\n=== Request\n\n`POST <target>/_graph/explore`\n\n[discrete]\n=== Description\n\nAn initial request to the `_explore` API contains a seed query that identifies\nthe documents of interest and specifies the fields that define the vertices\nand connections you want to include in the graph. Subsequent `_explore` requests\nenable you to _spider out_ from one more vertices of interest. You can exclude\nvertices that have already been returned.\n\n[discrete]\n=== Request Body\n\n[role=\"child_attributes\"]\n====\n\nquery::\nA seed query that identifies the documents of interest. Can be any valid\nElasticsearch query. For example:\n+\n[source,js]\n--------------------------------------------------\n\"query\": {\n  \"bool\": {\n    \"must\": {\n      \"match\": {\n        \"query.raw\": \"midi\"\n      }\n    },\n    \"filter\": [\n      {\n        \"range\": {\n          \"query_time\": {\n            \"gte\": \"2015-10-01 00:00:00\"\n          }\n        }\n      }\n    ]\n  }\n}\n--------------------------------------------------\n\n\nvertices::\nSpecifies one or more fields that contain the terms you want to include in the\ngraph as vertices. For example:\n+\n[source,js]\n--------------------------------------------------\n\"vertices\": [\n  {\n    \"field\": \"product\"\n    }\n]\n--------------------------------------------------\n+\n.Properties for `vertices`\n[%collapsible%open]\n======\nfield::: Identifies a field in the documents of interest.\ninclude::: Identifies the terms of interest that form the starting points\nfrom which you want to spider out. You do not have to specify a seed query\nif you specify an include clause. The include clause implicitly queries for\ndocuments that contain any of the listed terms listed.\nIn addition to specifying a simple array of strings, you can also pass\nobjects with `term` and `boost` values to boost matches on particular terms.\nexclude:::\nThe `exclude` clause prevents the specified terms from being included in\nthe results.\nsize:::\nSpecifies the maximum number of vertex terms returned for each\nfield. Defaults to 5.\nmin_doc_count:::\nSpecifies how many documents must contain a pair of terms before it is\nconsidered to be a useful connection. This setting acts as a certainty\nthreshold. Defaults to 3.\nshard_min_doc_count:::\nThis advanced setting controls how many documents on a particular shard have\nto contain a pair of terms before the connection is returned for global\nconsideration. Defaults to 2.\n======\n\nconnections::\nSpecifies or more fields from which you want to extract terms that are\nassociated with the specified vertices. For example:\n+\n[source,js]\n--------------------------------------------------\n\"connections\": {  <3>\n  \"vertices\": [\n    {\n      \"field\": \"query.raw\"\n    }\n  ]\n}\n--------------------------------------------------\n+\nNOTE: Connections can be nested inside the `connections` object to\nexplore additional relationships in the data. Each level of nesting is\nconsidered a _hop_, and proximity within the graph is often described in\nterms of _hop depth_.\n+\n.Properties for `connections`\n[%collapsible%open]\n======\nquery:::\nAn optional _guiding query_ that constrains the Graph API as it\nexplores connected terms. For example, you might want to direct the Graph\nAPI to ignore older data by specifying a query that identifies recent\ndocuments.\nvertices:::\nContains the fields you are interested in. For example:\n+\n[source,js]\n--------------------------------------------------\n\"vertices\": [\n  {\n    \"field\": \"query.raw\",\n    \"size\": 5,\n    \"min_doc_count\": 10,\n    \"shard_min_doc_count\": 3\n  }\n]\n--------------------------------------------------\n======\n\ncontrols:: Direct the Graph API how to build the graph.\n+\n.Properties for `controls`\n[%collapsible%open]\n======\nuse_significance:::\nThe `use_significance` flag filters associated terms so only those that are\nsignificantly associated with your query are included. For information about\nthe algorithm used to calculate significance, see the\n{ref}/search-aggregations-bucket-significantterms-aggregation.html[significant_terms\naggregation]. Defaults to `true`.\nsample_size:::\nEach _hop_ considers a sample of the best-matching documents on each\nshard. Using samples improves the speed of execution and keeps\nexploration focused on meaningfully-connected terms. Very small values\n(less than 50) might not provide sufficient weight-of-evidence to identify\nsignificant connections between terms. Very large sample sizes can dilute\nthe quality of the results and increase execution times.\nDefaults to 100 documents.\ntimeout:::\nThe length of time in milliseconds after which exploration will be halted\nand the results gathered so far are returned. This timeout is honored on\na best-effort basis. Execution might overrun this timeout if, for example,\na long pause is encountered while FieldData is loaded for a field.\nsample_diversity:::\nTo avoid the top-matching documents sample being dominated by a single\nsource of results, it is sometimes necessary to request diversity in\nthe sample. You can do this by selecting a single-value field and setting\na maximum number of documents per value for that field. For example:\n+\n[source,js]\n--------------------------------------------------\n\"sample_diversity\": {\n  \"field\": \"category.raw\",\n  \"max_docs_per_value\": 500\n}\n--------------------------------------------------\n======\n====\n\n// [discrete]\n// === Authorization\n\n[discrete]\n=== Examples\n\n[discrete]\n[[basic-search]]\n==== Basic exploration\n\nAn initial search typically begins with a query to identify strongly related terms.\n\n[source,console]\n--------------------------------------------------\nPOST clicklogs/_graph/explore\n{\n  \"query\": {                  <1>\n    \"match\": {\n      \"query.raw\": \"midi\"\n    }\n  },\n  \"vertices\": [               <2>\n    {\n      \"field\": \"product\"\n    }\n  ],\n  \"connections\": {            <3>\n    \"vertices\": [\n      {\n        \"field\": \"query.raw\"\n      }\n    ]\n  }\n}\n--------------------------------------------------\n\n<1> Seed the exploration with a query. This example is searching\nclicklogs for people who searched for the term \"midi\".\n<2> Identify the vertices to include in the graph. This example is looking for\nproduct codes that are significantly associated with searches for \"midi\".\n<3> Find the connections. This example is looking for other search\nterms that led people to click on the products that are associated with\nsearches for \"midi\".\n\nThe response from the explore API looks like this:\n\n[source,js]\n--------------------------------------------------\n{\n   \"took\": 0,\n   \"timed_out\": false,\n   \"failures\": [],\n   \"vertices\": [ <1>\n      {\n         \"field\": \"query.raw\",\n         \"term\": \"midi cable\",\n         \"weight\": 0.08745858139552132,\n         \"depth\": 1\n      },\n      {\n         \"field\": \"product\",\n         \"term\": \"8567446\",\n         \"weight\": 0.13247784285434397,\n         \"depth\": 0\n      },\n      {\n         \"field\": \"product\",\n         \"term\": \"1112375\",\n         \"weight\": 0.018600718471158982,\n         \"depth\": 0\n      },\n      {\n         \"field\": \"query.raw\",\n         \"term\": \"midi keyboard\",\n         \"weight\": 0.04802242866755111,\n         \"depth\": 1\n      }\n   ],\n   \"connections\": [ <2>\n      {\n         \"source\": 0,\n         \"target\": 1,\n         \"weight\": 0.04802242866755111,\n         \"doc_count\": 13\n      },\n      {\n         \"source\": 2,\n         \"target\": 3,\n         \"weight\": 0.08120623870976627,\n         \"doc_count\": 23\n      }\n   ]\n}\n--------------------------------------------------\n<1> An array of all of the vertices that were discovered. A vertex is an indexed\nterm, so the field and term value are provided. The `weight` attribute specifies\na significance score. The `depth` attribute specifies the hop-level at which\nthe term was first encountered.\n<2> The connections between the vertices in the array. The `source` and `target`\nproperties are indexed into the vertices array and indicate which vertex term led\nto the other as part of exploration. The `doc_count` value indicates how many\ndocuments in the sample set contain this pairing of terms (this is\nnot a global count for all documents in the data stream or index).\n\n[discrete]\n[[optional-controls]]\n==== Optional controls\n\nThe default settings are configured to remove noisy data and\nget the \"big picture\" from your data. This example shows how to specify\nadditional parameters to influence how the graph is built.\n\nFor tips on tuning the settings for more detailed forensic evaluation where\nevery document could be of interest, see the\n{kibana-ref}/graph-troubleshooting.html[Troubleshooting] guide.\n\n\n[source,console]\n--------------------------------------------------\nPOST clicklogs/_graph/explore\n{\n  \"query\": {\n    \"match\": {\n      \"query.raw\": \"midi\"\n    }\n  },\n  \"controls\": {\n    \"use_significance\": false,        <1>\n    \"sample_size\": 2000,              <2>\n    \"timeout\": 2000,                  <3>\n    \"sample_diversity\": {             <4>\n      \"field\": \"category.raw\",\n      \"max_docs_per_value\": 500\n    }\n  },\n  \"vertices\": [\n    {\n      \"field\": \"product\",\n      \"size\": 5,                      <5>\n      \"min_doc_count\": 10,            <6>\n      \"shard_min_doc_count\": 3        <7>\n    }\n  ],\n  \"connections\": {\n    \"query\": {                        <8>\n      \"bool\": {\n        \"filter\": [\n          {\n            \"range\": {\n              \"query_time\": {\n                \"gte\": \"2015-10-01 00:00:00\"\n              }\n            }\n          }\n        ]\n      }\n    },\n    \"vertices\": [\n      {\n        \"field\": \"query.raw\",\n        \"size\": 5,\n        \"min_doc_count\": 10,\n        \"shard_min_doc_count\": 3\n      }\n    ]\n  }\n}\n--------------------------------------------------\n\n<1> Disable `use_significance` to include all associated terms, not just the\nones that are significantly associated with the query.\n<2> Increase the sample size to consider a larger set of documents on\neach shard.\n<3> Limit how long a graph request runs before returning results.\n<4> Ensure diversity in the sample by setting a limit on the number of documents\nper value in a particular single-value field, such as a category field.\n<5> Control the maximum number of vertex terms returned for each field.\n<6> Set a certainty threshold that specifies how many documents have to contain\na pair of terms before we consider it to be a useful connection.\n<7> Specify how many documents on a shard have to contain a pair of terms before\nthe connection is returned for global consideration.\n<8> Restrict which document are considered as you explore connected terms.\n\n\n[discrete]\n[[spider-search]]\n==== Spidering operations\n\nAfter an initial search, you typically want to select vertices of interest and\nsee what additional vertices are connected. In graph-speak, this operation is\nreferred to as \"spidering\". By submitting a series of requests, you can\nprogressively build a graph of related information.\n\nTo spider out, you need to specify two things:\n\n * The set of vertices for which you want to find additional connections\n * The set of vertices you already know about that you want to exclude from the\n results of the spidering operation.\n\nYou specify this information using `include` and `exclude` clauses. For example,\nthe following request starts with the product `1854873` and spiders\nout to find additional search terms associated with that product. The terms\n\"midi\", \"midi keyboard\", and \"synth\" are excluded from the results.\n\n[source,console]\n--------------------------------------------------\nPOST clicklogs/_graph/explore\n{\n   \"vertices\": [\n      {\n         \"field\": \"product\",\n         \"include\": [ \"1854873\" ] <1>\n      }\n   ],\n   \"connections\": {\n      \"vertices\": [\n         {\n            \"field\": \"query.raw\",\n            \"exclude\": [ <2>\n               \"midi keyboard\",\n               \"midi\",\n               \"synth\"\n            ]\n         }\n      ]\n   }\n}\n--------------------------------------------------\n\n<1> The vertices you want to start from are specified\nas an array of terms in an `include` clause.\n<2> The `exclude` clause prevents terms you already know about from being\nincluded in the results.\n"
}