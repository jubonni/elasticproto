{
    "meta": {
        "size": 12063,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/context-suggester.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "context-suggester",
        "version": "8.15"
    },
    "doc": "[[context-suggester]]\n==== Context Suggester\n\nThe completion suggester considers all documents in the index, but it is often\ndesirable to serve suggestions filtered and/or boosted by some criteria.\nFor example, you want to suggest song titles filtered by certain artists or\nyou want to boost song titles based on their genre.\n\nTo achieve suggestion filtering and/or boosting, you can add context mappings while\nconfiguring a completion field. You can define multiple context mappings for a\ncompletion field.\nEvery context mapping has a unique name and a type. There are two types: `category`\nand `geo`. Context mappings are configured under the `contexts` parameter in\nthe field mapping.\n\nNOTE: It is mandatory to provide a context when indexing and querying\n      a context enabled completion field.\n\nNOTE: The maximum allowed number of completion field context mappings is 10.\n\nThe following defines types, each with two context mappings for a completion\nfield:\n\n[source,console]\n--------------------------------------------------\nPUT place\n{\n  \"mappings\": {\n    \"properties\": {\n      \"suggest\": {\n        \"type\": \"completion\",\n        \"contexts\": [\n          {                                 <1>\n            \"name\": \"place_type\",\n            \"type\": \"category\"\n          },\n          {                                 <2>\n            \"name\": \"location\",\n            \"type\": \"geo\",\n            \"precision\": 4\n          }\n        ]\n      }\n    }\n  }\n}\nPUT place_path_category\n{\n  \"mappings\": {\n    \"properties\": {\n      \"suggest\": {\n        \"type\": \"completion\",\n        \"contexts\": [\n          {                           <3>\n            \"name\": \"place_type\",\n            \"type\": \"category\",\n            \"path\": \"cat\"\n          },\n          {                           <4>\n            \"name\": \"location\",\n            \"type\": \"geo\",\n            \"precision\": 4,\n            \"path\": \"loc\"\n          }\n        ]\n      },\n      \"loc\": {\n        \"type\": \"geo_point\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TESTSETUP\n\n<1> Defines a `category` context named 'place_type' where the categories must be\n    sent with the suggestions.\n<2> Defines a `geo` context named 'location' where the categories must be sent\n    with the suggestions.\n<3> Defines a `category` context named 'place_type' where the categories are\n    read from the `cat` field.\n<4> Defines a `geo` context named 'location' where the categories are read from\n    the `loc` field.\n\nNOTE: Adding context mappings increases the index size for completion field. The completion index\nis entirely heap resident, you can monitor the completion field index size using <<indices-stats>>.\n\n[[suggester-context-category]]\n[discrete]\n===== Category Context\n\nThe `category` context allows you to associate one or more categories with suggestions at index\ntime. At query time, suggestions can be filtered and boosted by their associated categories.\n\nThe mappings are set up like the `place_type` fields above. If `path` is defined\nthen the categories are read from that path in the document, otherwise they must\nbe sent in the suggest field like this:\n\n[source,console]\n--------------------------------------------------\nPUT place/_doc/1\n{\n  \"suggest\": {\n    \"input\": [ \"timmy's\", \"starbucks\", \"dunkin donuts\" ],\n    \"contexts\": {\n      \"place_type\": [ \"cafe\", \"food\" ]                    <1>\n    }\n  }\n}\n--------------------------------------------------\n\n<1> These suggestions will be associated with 'cafe' and 'food' category.\n\nIf the mapping had a `path` then the following index request would be enough to\nadd the categories:\n\n[source,console]\n--------------------------------------------------\nPUT place_path_category/_doc/1\n{\n  \"suggest\": [\"timmy's\", \"starbucks\", \"dunkin donuts\"],\n  \"cat\": [\"cafe\", \"food\"] <1>\n}\n--------------------------------------------------\n\n<1> These suggestions will be associated with 'cafe' and 'food' category.\n\nNOTE: If context mapping references another field and the categories\nare explicitly indexed, the suggestions are indexed with both set\nof categories.\n\n\n[discrete]\n====== Category Query\n\nSuggestions can be filtered by one or more categories. The following\nfilters suggestions by multiple categories:\n\n[source,console]\n--------------------------------------------------\nPOST place/_search?pretty\n{\n  \"suggest\": {\n    \"place_suggestion\": {\n      \"prefix\": \"tim\",\n      \"completion\": {\n        \"field\": \"suggest\",\n        \"size\": 10,\n        \"contexts\": {\n          \"place_type\": [ \"cafe\", \"restaurants\" ]\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\nNOTE: If multiple categories or category contexts are set on the query\nthey are merged as a disjunction. This means that suggestions match\nif they contain at least one of the provided context values.\n\nSuggestions with certain categories can be boosted higher than others.\nThe following filters suggestions by categories and additionally boosts\nsuggestions associated with some categories:\n\n[source,console]\n--------------------------------------------------\nPOST place/_search?pretty\n{\n  \"suggest\": {\n    \"place_suggestion\": {\n      \"prefix\": \"tim\",\n      \"completion\": {\n        \"field\": \"suggest\",\n        \"size\": 10,\n        \"contexts\": {\n          \"place_type\": [                             <1>\n            { \"context\": \"cafe\" },\n            { \"context\": \"restaurants\", \"boost\": 2 }\n          ]\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\n<1> The context query filter suggestions associated with\n    categories 'cafe' and 'restaurants' and boosts the\n    suggestions associated with 'restaurants' by a\n    factor of `2`\n\nIn addition to accepting category values, a context query can be composed of\nmultiple category context clauses. The following parameters are supported for a\n`category` context clause:\n\n[horizontal]\n`context`::\n    The value of the category to filter/boost on.\n    This is mandatory.\n\n`boost`::\n    The factor by which the score of the suggestion\n    should be boosted, the score is computed by\n    multiplying the boost with the suggestion weight,\n    defaults to `1`\n\n`prefix`::\n    Whether the category value should be treated as a\n    prefix or not. For example, if set to `true`,\n    you can filter category of 'type1', 'type2' and\n    so on, by specifying a category prefix of 'type'.\n    Defaults to `false`\n\nNOTE: If a suggestion entry matches multiple contexts the final score is computed as the\nmaximum score produced by any matching contexts.\n\n[[suggester-context-geo]]\n[discrete]\n===== Geo location Context\n\nA `geo` context allows you to associate one or more geo points or geohashes with suggestions\nat index time. At query time, suggestions can be filtered and boosted if they are within\na certain distance of a specified geo location.\n\nInternally, geo points are encoded as geohashes with the specified precision.\n\n[discrete]\n====== Geo Mapping\n\nIn addition to the `path` setting, `geo` context mapping accepts the following settings:\n\n[horizontal]\n`precision`::\n    This defines the precision of the geohash to be indexed and can be specified\n    as a distance value (`5m`, `10km` etc.), or as a raw geohash precision (`1`..`12`).\n    Defaults to a raw geohash precision value of `6`.\n\nNOTE: The index time `precision` setting sets the maximum geohash precision that\ncan be used at query time.\n\n[discrete]\n====== Indexing geo contexts\n\n`geo` contexts can be explicitly set with suggestions or be indexed from a geo point field in the\ndocument via the `path` parameter, similar to `category` contexts. Associating multiple geo location context\nwith a suggestion, will index the suggestion for every geo location. The following indexes a suggestion\nwith two geo location contexts:\n\n[source,console]\n--------------------------------------------------\nPUT place/_doc/1\n{\n  \"suggest\": {\n    \"input\": \"timmy's\",\n    \"contexts\": {\n      \"location\": [\n        {\n          \"lat\": 43.6624803,\n          \"lon\": -79.3863353\n        },\n        {\n          \"lat\": 43.6624718,\n          \"lon\": -79.3873227\n        }\n      ]\n    }\n  }\n}\n--------------------------------------------------\n\n[discrete]\n====== Geo location Query\n\nSuggestions can be filtered and boosted with respect to how close they are to one or\nmore geo points. The following filters suggestions that fall within the area represented by\nthe encoded geohash of a geo point:\n\n[source,console]\n--------------------------------------------------\nPOST place/_search\n{\n  \"suggest\": {\n    \"place_suggestion\": {\n      \"prefix\": \"tim\",\n      \"completion\": {\n        \"field\": \"suggest\",\n        \"size\": 10,\n        \"contexts\": {\n          \"location\": {\n            \"lat\": 43.662,\n            \"lon\": -79.380\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\nNOTE: When a location with a lower precision at query time is specified, all suggestions\nthat fall within the area will be considered.\n\nNOTE: If multiple categories or category contexts are set on the query\nthey are merged as a disjunction. This means that suggestions match\nif they contain at least one of the provided context values.\n\nSuggestions that are within an area represented by a geohash can also be boosted higher\nthan others, as shown by the following:\n\n[source,console]\n--------------------------------------------------\nPOST place/_search?pretty\n{\n  \"suggest\": {\n    \"place_suggestion\": {\n      \"prefix\": \"tim\",\n      \"completion\": {\n        \"field\": \"suggest\",\n        \"size\": 10,\n        \"contexts\": {\n          \"location\": [             <1>\n                      {\n              \"lat\": 43.6624803,\n              \"lon\": -79.3863353,\n              \"precision\": 2\n            },\n            {\n              \"context\": {\n                \"lat\": 43.6624803,\n                \"lon\": -79.3863353\n              },\n              \"boost\": 2\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\n<1> The context query filters for suggestions that fall under\n    the geo location represented by a geohash of '(43.662, -79.380)'\n    with a precision of '2' and boosts suggestions\n    that fall under the geohash representation of '(43.6624803, -79.3863353)'\n    with a default precision of '6' by a factor of `2`\n\nNOTE: If a suggestion entry matches multiple contexts the final score is computed as the\nmaximum score produced by any matching contexts.\n\nIn addition to accepting context values, a context query can be composed of\nmultiple context clauses. The following parameters are supported for a\n`geo` context clause:\n\n[horizontal]\n`context`::\n    A geo point object or a geo hash string to filter or\n    boost the suggestion by. This is mandatory.\n\n`boost`::\n    The factor by which the score of the suggestion\n    should be boosted, the score is computed by\n    multiplying the boost with the suggestion weight,\n    defaults to `1`\n\n`precision`::\n    The precision of the geohash to encode the query geo point.\n    This can be specified as a distance value (`5m`, `10km` etc.),\n    or as a raw geohash precision (`1`..`12`).\n    Defaults to index time precision level.\n\n`neighbours`::\n    Accepts an array of precision values at which\n    neighbouring geohashes should be taken into account.\n    precision value can be a distance value (`5m`, `10km` etc.)\n    or a raw geohash precision (`1`..`12`). Defaults to\n    generating neighbours for index time precision level.\n\nNOTE: The precision field does not result in a distance match.\nSpecifying a distance value like `10km` only results in a geohash precision value that represents tiles of that size.\nThe precision will be used to encode the search geo point into a geohash tile for completion matching.\nA consequence of this is that points outside that tile, even if very close to the search point, will not be matched.\nReducing the precision, or increasing the distance, can reduce the risk of this happening, but not entirely remove it.\n"
}