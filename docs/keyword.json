{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.841580",
        "size": 8082,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/keyword.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "keyword",
        "version": "8.15"
    },
    "doc": "[[keyword]]\n=== Keyword type family\n++++\n<titleabbrev>Keyword</titleabbrev>\n++++\n\nThe keyword family includes the following field types:\n\n* <<keyword-field-type,`keyword`>>, which is used for structured content such as IDs, email\naddresses, hostnames, status codes, zip codes, or tags.\n* <<constant-keyword-field-type,`constant_keyword`>> for keyword fields that always contain\nthe same value.\n* <<wildcard-field-type,`wildcard`>> for unstructured machine-generated content.\nThe `wildcard` type is optimized for fields with large values or high\ncardinality.\n\nKeyword fields are often used in <<sort-search-results,sorting>>,\n<<search-aggregations,aggregations>>, and <<term-level-queries,term-level\nqueries>>, such as <<query-dsl-term-query,`term`>>.\n\nTIP: Avoid using keyword fields for full-text search. Use the <<text,`text`>>\nfield type instead.\n\n[discrete]\n[[keyword-field-type]]\n=== Keyword field type\n\nBelow is an example of a mapping for a basic `keyword` field:\n\n[source,console]\n--------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"tags\": {\n        \"type\":  \"keyword\"\n      }\n    }\n  }\n}\n--------------------------------\n\n[TIP]\n.Mapping numeric identifiers\n====\ninclude::numeric.asciidoc[tag=map-ids-as-keyword]\n====\n\n[discrete]\n[[keyword-params]]\n==== Parameters for basic keyword fields\n\nThe following parameters are accepted by `keyword` fields:\n\n<<doc-values,`doc_values`>>::\n\n    Should the field be stored on disk in a column-stride fashion, so that it\n    can later be used for sorting, aggregations, or scripting? Accepts `true`\n    (default) or `false`.\n\n<<eager-global-ordinals,`eager_global_ordinals`>>::\n\n    Should global ordinals be loaded eagerly on refresh? Accepts `true` or `false`\n    (default). Enabling this is a good idea on fields that are frequently used for\n    terms aggregations.\n\n<<multi-fields,`fields`>>::\n\n    Multi-fields allow the same string value to be indexed in multiple ways for\n    different purposes, such as one field for search and a multi-field for\n    sorting and aggregations.\n\n<<ignore-above,`ignore_above`>>::\n\n    Do not index any string longer than this value. Defaults to `2147483647`\n    so that all values would be accepted. Please however note that default\n    dynamic mapping rules create a sub `keyword` field that overrides this\n    default by setting `ignore_above: 256`.\n\n<<mapping-index,`index`>>::\n\n    Should the field be quickly searchable? Accepts `true` (default) and\n     `false`. `keyword` fields that only have <<doc-values,`doc_values`>>\n     enabled can still be queried, albeit slower.\n\n<<index-options,`index_options`>>::\n\n    What information should be stored in the index, for scoring purposes.\n    Defaults to `docs` but can also be set to `freqs` to take term frequency into account\n    when computing scores.\n\n<<mapping-field-meta,`meta`>>::\n\n    Metadata about the field.\n\n<<norms,`norms`>>::\n\n    Whether field-length should be taken into account when scoring queries.\n    Accepts `true` or `false` (default).\n\n<<null-value,`null_value`>>::\n\n    Accepts a string value which is substituted for any explicit `null`\n    values. Defaults to `null`, which means the field is treated as missing.\n    Note that this cannot be set if the `script` value is used.\n\n`on_script_error`::\n\n    Defines what to do if the script defined by the `script` parameter\n    throws an error at indexing time. Accepts `fail` (default), which\n    will cause the entire document to be rejected, and `continue`, which\n    will register the field in the document's\n    <<mapping-ignored-field,`_ignored`>> metadata field and continue\n    indexing. This parameter can only be set if the `script` field is\n    also set.\n\n`script`::\n\n    If this parameter is set, then the field will index values generated\n    by this script, rather than reading the values directly from the\n    source. If a value is set for this field on the input document, then\n    the document will be rejected with an error.\n    Scripts are in the same format as their\n    <<runtime-mapping-fields,runtime equivalent>>. Values emitted by the\n    script are normalized as usual, and will be ignored if they are longer\n    that the value set on `ignore_above`.\n\n<<mapping-store,`store`>>::\n\n    Whether the field value should be stored and retrievable separately from\n    the <<mapping-source-field,`_source`>> field. Accepts `true` or `false`\n    (default).\n\n<<similarity,`similarity`>>::\n\n    Which scoring algorithm or _similarity_ should be used. Defaults\n    to `BM25`.\n\n<<normalizer,`normalizer`>>::\n\n    How to pre-process the keyword prior to indexing. Defaults to `null`,\n    meaning the keyword is kept as-is.\n\n`split_queries_on_whitespace`::\n\n    Whether <<full-text-queries,full text queries>> should split the input on whitespace\n    when building a query for this field.\n    Accepts `true` or `false` (default).\n\n`time_series_dimension`::\n    (Optional, Boolean)\n+\n--\n// tag::dimension[]\nMarks the field as a <<time-series-dimension,time series dimension>>. Defaults\nto `false`.\n\nThe\n<<index-mapping-dimension-fields-limit,`index.mapping.dimension_fields.limit`>>\nindex setting limits the number of dimensions in an index.\n\nDimension fields have the following constraints:\n\n* The `doc_values` and `index` mapping parameters must be `true`.\n// end::dimension[]\n* Dimension values are used to identify a document\u2019s time series. If dimension values are altered in any way during indexing, the document will be stored as belonging to different from intended time series. As a result there are additional constraints:\n** The field cannot use a <<normalizer,`normalizer`>>.\n--\n\n[[keyword-synthetic-source]]\n==== Synthetic `_source`\n\nIMPORTANT: Synthetic `_source` is Generally Available only for TSDB indices\n(indices that have `index.mode` set to `time_series`). For other indices\nsynthetic `_source` is in technical preview. Features in technical preview may\nbe changed or removed in a future release. Elastic will work to fix\nany issues, but features in technical preview are not subject to the support SLA\nof official GA features.\n\nSynthetic source may sort `keyword` fields and remove duplicates.\nFor example:\n[source,console,id=synthetic-source-keyword-example-default]\n----\nPUT idx\n{\n  \"settings\": {\n    \"index\": {\n      \"mapping\": {\n        \"source\": {\n          \"mode\": \"synthetic\"\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"kwd\": { \"type\": \"keyword\" }\n    }\n  }\n}\nPUT idx/_doc/1\n{\n  \"kwd\": [\"foo\", \"foo\", \"bar\", \"baz\"]\n}\n----\n// TEST[s/$/\\nGET idx\\/_doc\\/1?filter_path=_source\\n/]\n\nWill become:\n\n[source,console-result]\n----\n{\n  \"kwd\": [\"bar\", \"baz\", \"foo\"]\n}\n----\n// TEST[s/^/{\"_source\":/ s/\\n$/}/]\n\nIf a `keyword` field sets `store` to `true` then order and duplicates\nare preserved. For example:\n[source,console,id=synthetic-source-keyword-example-stored]\n----\nPUT idx\n{\n  \"settings\": {\n    \"index\": {\n      \"mapping\": {\n        \"source\": {\n          \"mode\": \"synthetic\"\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"kwd\": { \"type\": \"keyword\", \"store\": true }\n    }\n  }\n}\nPUT idx/_doc/1\n{\n  \"kwd\": [\"foo\", \"foo\", \"bar\", \"baz\"]\n}\n----\n// TEST[s/$/\\nGET idx\\/_doc\\/1?filter_path=_source\\n/]\n\nWill become:\n\n[source,console-result]\n----\n{\n  \"kwd\": [\"foo\", \"foo\", \"bar\", \"baz\"]\n}\n----\n// TEST[s/^/{\"_source\":/ s/\\n$/}/]\n\nValues longer than `ignore_above` are preserved but sorted to the end.\nFor example:\n[source,console,id=synthetic-source-keyword-example-ignore-above]\n----\nPUT idx\n{\n  \"settings\": {\n    \"index\": {\n      \"mapping\": {\n        \"source\": {\n          \"mode\": \"synthetic\"\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"kwd\": { \"type\": \"keyword\", \"ignore_above\": 3 }\n    }\n  }\n}\nPUT idx/_doc/1\n{\n  \"kwd\": [\"foo\", \"foo\", \"bang\", \"bar\", \"baz\"]\n}\n----\n// TEST[s/$/\\nGET idx\\/_doc\\/1?filter_path=_source\\n/]\n\nWill become:\n\n[source,console-result]\n----\n{\n  \"kwd\": [\"bar\", \"baz\", \"foo\", \"bang\"]\n}\n----\n// TEST[s/^/{\"_source\":/ s/\\n$/}/]\n\n\ninclude::constant-keyword.asciidoc[]\n\ninclude::wildcard.asciidoc[]\n"
}