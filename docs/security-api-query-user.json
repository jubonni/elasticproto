{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.260583",
        "size": 8658,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-query-user.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "security-api-query-user",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[security-api-query-user]]\n=== Query User API\n\n++++\n<titleabbrev>Query User</titleabbrev>\n++++\n\nRetrieves <<native-realm,native users>> with <<query-dsl,Query DSL>> in a <<paginate-search-results,paginated>> fashion.\n\nNOTE: As opposed to the <<security-api-get-user,get user api>>, <<built-in-users,built-in users>> are excluded from the\nresult. This API is only for <<native-realm,native users>>.\n\n[[security-api-query-user-request]]\n==== {api-request-title}\n\n`GET /_security/_query/user`\n\n`POST /_security/_query/user`\n\n[[security-api-query-user-prereqs]]\n==== {api-prereq-title}\n\n* To use this API, you must have at least the  `read_security` cluster privilege.\n\n[[security-api-query-user-desc]]\n==== {api-description-title}\n\nUse this API to retrieve users managed by the\n<<native-realm,native realm>> in a paginated manner.\nYou can optionally filter the results with a query.\n\n[[security-api-query-user-request-body]]\n==== {api-request-body-title}\n\nYou can specify the following parameters in the request body:\n\n`query`::\n(Optional, string) A <<query-dsl,query>> to filter which users to return.\nThe query supports a subset of query types, including\n<<query-dsl-match-all-query,`match_all`>>, <<query-dsl-bool-query,`bool`>>,\n<<query-dsl-term-query,`term`>>, <<query-dsl-terms-query,`terms`>>,\n<<query-dsl-match-query,`match`>>, <<query-dsl-ids-query,`ids`>>,\n<<query-dsl-prefix-query,`prefix`>>, <<query-dsl-wildcard-query,`wildcard`>>,\n<<query-dsl-exists-query,`exists`>>, <<query-dsl-range-query,`range`>>,\nand <<query-dsl-simple-query-string-query,`simple query string`>>.\n+\nYou can query the following public values associated with a user.\n+\n.Valid values for `query`\n[%collapsible%open]\n====\n`username`::\nAn identifier for the user.\n\n`roles`::\nAn array of the role names of the <<defining-roles, roles>> that are assigned to the user.\n\n`full_name`::\nFull name of the user.\n\n`email`::\nThe email of the user.\n\n`enabled`::\nSpecifies whether the user is enabled.\n====\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=from]\n+\nBy default, you cannot page through more than 10,000 hits using the `from` and\n`size` parameters. To page through more hits, use the\n<<search-after,`search_after`>> parameter.\n\n`size`::\n(Optional, integer) The number of hits to return. Must not be negative and defaults to `10`.\n+\nBy default, you cannot page through more than 10,000 hits using the `from` and\n`size` parameters. To page through more hits, use the\n<<search-after,`search_after`>> parameter.\n\n`sort`::\n(Optional, object) <<sort-search-results,Sort definition>>. You can sort on `username`, `roles` or `enabled`.\nIn addition, sort can also be applied to the `_doc` field to sort by index order.\n\n`search_after`::\n(Optional, array) <<search-after,Search after>> definition.\n\n[[security-api-query-user-query-params]]\n==== {api-query-parms-title}\n\n`with_profile_uid`::\n(Optional, boolean) Determines whether to retrieve the <<user-profile,user profile>> `uid`,\nif exists, for the users. Defaults to `false`.\n\n[[security-api-query-user-response-body]]\n==== {api-response-body-title}\n\nThis API returns the following top level fields:\n\n`total`::\nThe total number of users found.\n\n`count`::\nThe number of users returned in the response.\n\n`users`::\nA list of users that match the query.\n\n[[security-api-query-user-example]]\n==== {api-examples-title}\n\nThe following request lists all users, assuming you have the\n`read_security` privilege:\n\n[source,console]\n----\nGET /_security/_query/user\n----\n// TEST[setup:jacknich_user,sandrakn_user]\n\nA successful call returns a JSON structure that contains the information\nretrieved from one or more users:\n\n[source,console-result]\n----\n{\n    \"total\": 2,\n    \"count\": 2,\n    \"users\": [ <1>\n        {\n            \"username\": \"jacknich\",\n            \"roles\": [\n                \"admin\",\n                \"other_role1\"\n            ],\n            \"full_name\": \"Jack Nicholson\",\n            \"email\": \"jacknich@example.com\",\n            \"metadata\": {\n                \"intelligence\": 7\n            },\n            \"enabled\": true\n        },\n        {\n            \"username\": \"sandrakn\",\n            \"roles\": [\n                \"admin\",\n                \"other_role1\"\n            ],\n            \"full_name\": \"Sandra Knight\",\n            \"email\": \"sandrakn@example.com\",\n            \"metadata\": {\n                \"intelligence\": 7\n            },\n            \"enabled\": true\n        }\n    ]\n}\n----\n// NOTCONSOLE\n\n<1> The list of users that were retrieved for this request\n\nIf you create a user with the following details:\n\n[source,console]\n----\nPOST /_security/user/jacknich\n{\n  \"password\" : \"l0ng-r4nd0m-p@ssw0rd\",\n  \"roles\" : [ \"admin\", \"other_role1\" ],\n  \"full_name\" : \"Jack Nicholson\",\n  \"email\" : \"jacknich@example.com\",\n  \"metadata\" : {\n    \"intelligence\" : 7\n  }\n}\n----\n\nA successful call returns a JSON structure:\n\n[source,console-result]\n----\n{\n  \"created\": true\n}\n----\n\nUse the user information retrieve the user with a query:\n\n[source,console]\n----\nPOST /_security/_query/user\n{\n    \"query\": {\n        \"prefix\": {\n            \"roles\": \"other\"\n        }\n    }\n}\n----\n// TEST[setup:jacknich_user]\nA successful call returns a JSON structure for a user:\n\n[source,console-result]\n--------------------------------------------------\n{\n    \"total\": 1,\n    \"count\": 1,\n    \"users\": [\n        {\n            \"username\": \"jacknich\",\n            \"roles\": [\n                \"admin\",\n                \"other_role1\"\n            ],\n            \"full_name\": \"Jack Nicholson\",\n            \"email\": \"jacknich@example.com\",\n            \"metadata\": {\n                \"intelligence\": 7\n            },\n            \"enabled\": true\n        }\n    ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nTo retrieve the user `profile_uid` as part of the response:\n\n[source,console]\n--------------------------------------------------\nPOST /_security/_query/user?with_profile_uid=true\n{\n    \"query\": {\n        \"prefix\": {\n            \"roles\": \"other\"\n        }\n    }\n}\n--------------------------------------------------\n// TEST[setup:jacknich_user]\n\n[source,console-result]\n--------------------------------------------------\n{\n    \"total\": 1,\n    \"count\": 1,\n    \"users\": [\n        {\n            \"username\": \"jacknich\",\n            \"roles\": [\n                \"admin\",\n                \"other_role1\"\n            ],\n            \"full_name\": \"Jack Nicholson\",\n            \"email\": \"jacknich@example.com\",\n            \"metadata\": {\n                \"intelligence\": 7\n            },\n            \"enabled\": true,\n            \"profile_uid\": \"u_79HkWkwmnBH5gqFKwoxggWPjEBOur1zLPXQPEl1VBW0_0\"\n        }\n    ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nUse a `bool` query to issue complex logical conditions and use\n`from`, `size`, `sort` to help paginate the result:\n\n[source,js]\n----\nPOST /_security/_query/user\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"wildcard\": {\n            \"email\": \"*example.com\" <1>\n          }\n        },\n        {\n          \"term\": {\n            \"enabled\": true <2>\n          }\n        }\n      ],\n      \"filter\": [\n        {\n          \"wildcard\": {\n            \"roles\": \"*other*\" <3>\n          }\n        }\n      ]\n    }\n  },\n  \"from\": 1, <4>\n  \"size\": 2, <5>\n  \"sort\": [\n    { \"username\": { \"order\": \"desc\"} } <6>\n  ]\n}\n----\n// NOTCONSOLE\n\n<1> The email must end with `example.com`\n<2> The user must be enabled\n<3> The result will be filtered to only contain users with at least one role that contains the substring `other`\n<4> The offset to begin the search result is the 2nd (zero-based index) user\n<5> The page size of the response is 2 users\n<6> The result is sorted by `username` in descending order\n\nThe response contains a list of matched users along with their sort values:\n\n[source,js]\n----\n{\n    \"total\": 5,\n    \"count\": 2,\n    \"users\": [\n        {\n            \"username\": \"ray\",\n            \"roles\": [\n                \"other_role3\"\n            ],\n            \"full_name\": \"Ray Nicholson\",\n            \"email\": \"rayn@example.com\",\n            \"metadata\": {\n                \"intelligence\": 7\n            },\n            \"enabled\": true,\n            \"_sort\": [\n                \"ray\" <1>\n            ]\n        },\n        {\n            \"username\": \"lorraine\",\n            \"roles\": [\n                \"other_role3\"\n            ],\n            \"full_name\": \"Lorraine Nicholson\",\n            \"email\": \"lorraine@example.com\",\n            \"metadata\": {\n                \"intelligence\": 7\n            },\n            \"enabled\": true,\n            \"_sort\": [\n                \"lorraine\"\n            ]\n        }\n    ]\n}\n----\n// NOTCONSOLE\n\n<1> The sort value is `username`\n"
}