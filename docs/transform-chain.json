{
    "meta": {
        "timestamp": "2024-11-01T03:07:08.832271",
        "size": 1995,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/transform-chain.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "transform-chain",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[transform-chain]]\n=== {watcher} chain {watcher-transform}\n++++\n<titleabbrev>Chain {watcher-transform}</titleabbrev>\n++++\n\nA <<transform,{watcher-transform}>> that executes an ordered list of configured\n{watcher-transforms} in a chain, where the output of one transform serves as the\ninput of the next transform in the chain. The payload that is accepted by this\ntransform serves as the input of the first transform in the chain and the output\nof the last transform in the chain is the output of the `chain` transform as a\nwhole.\n\nYou can use chain {watcher-transforms} to build more complex transforms out of\nthe other available transforms. For example, you can combine a\n<<transform-search,`search`>> {watcher-transform} and a\n<<transform-script,`script`>> {watcher-transform}, as shown in the following snippet:\n\n[source,js]\n--------------------------------------------------\n\"transform\" : {\n  \"chain\" : [ <1>\n    {\n      \"search\" : {  <2>\n        \"request\": {\n          \"indices\" : [ \"logstash-*\" ],\n          \"body\" : {\n            \"size\" : 0,\n            \"query\" : {\n              \"match\" : { \"priority\" : \"error\" }\n            }\n          }\n        }\n      }\n    },\n    {\n      \"script\" : \"return [ 'error_count' : ctx.payload.hits.total ]\"  <3>\n    }\n  ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n<1> The `chain` {watcher-transform} definition\n<2> The first transform in the chain (in this case, a `search` {watcher-transform})\n<3> The second and final transform in the chain (in this case, a `script`\n    {watcher-transform})\n\nThis example executes a `count` search on the cluster to look for `error` events.\nThe search results are then passed to the second `script` {watcher-transform}.\nThe `script` {watcher-transform} extracts the total hit count and assigns it to\nthe `error_count` field in a newly-generated payload. This new payload is the\noutput of the `chain` {watcher-transform} and replaces the payload in the watch\nexecution context.\n"
}