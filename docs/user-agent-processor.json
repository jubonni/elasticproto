{
    "meta": {
        "size": 4797,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/user-agent-processor.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "user-agent-processor",
        "version": "8.15"
    },
    "doc": "[[user-agent-processor]]\n=== User agent processor\n++++\n<titleabbrev>User agent</titleabbrev>\n++++\n\nThe `user_agent` processor extracts details from the user agent string a browser sends with its web requests.\nThis processor adds this information by default under the `user_agent` field.\n\nThe ingest-user-agent module ships by default with the regexes.yaml made available by uap-java with an Apache 2.0 license. For more details see https://github.com/ua-parser/uap-core.\n\n[[using-ingest-user-agent]]\n==== Using the user_agent Processor in a Pipeline\n\n[[ingest-user-agent-options]]\n.User-agent options\n[options=\"header\"]\n|======\n| Name                   | Required  | Default                                                                                         | Description\n| `field`                | yes       | -                                                                                               | The field containing the user agent string.\n| `target_field`         | no        | user_agent                                                                                      | The field that will be filled with the user agent details.\n| `regex_file`           | no        | -                                                                                               | The name of the file in the `config/ingest-user-agent` directory containing the regular expressions for parsing the user agent string. Both the directory and the file have to be created before starting Elasticsearch. If not specified, ingest-user-agent will use the regexes.yaml from uap-core it ships with (see below).\n| `properties`           | no        | [`name`, `os`, `device`, `original`, `version`] | Controls what properties are added to `target_field`.\n| `extract_device_type`  | no        | `false`                                                                                         | beta:[] Extracts device type from the user agent string on a best-effort basis.\n| `ignore_missing`       | no        | `false`                                                                                         | If `true` and `field` does not exist, the processor quietly exits without modifying the document\n|======\n\nHere is an example that adds the user agent details to the `user_agent` field based on the `agent` field:\n\n[source,console]\n--------------------------------------------------\nPUT _ingest/pipeline/user_agent\n{\n  \"description\" : \"Add user agent information\",\n  \"processors\" : [\n    {\n      \"user_agent\" : {\n        \"field\" : \"agent\"\n      }\n    }\n  ]\n}\nPUT my-index-000001/_doc/my_id?pipeline=user_agent\n{\n  \"agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36\"\n}\nGET my-index-000001/_doc/my_id\n--------------------------------------------------\n\nWhich returns\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"found\": true,\n  \"_index\": \"my-index-000001\",\n  \"_id\": \"my_id\",\n  \"_version\": 1,\n  \"_seq_no\": 22,\n  \"_primary_term\": 1,\n  \"_source\": {\n    \"agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36\",\n    \"user_agent\": {\n      \"name\": \"Chrome\",\n      \"original\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36\",\n      \"version\": \"51.0.2704.103\",\n      \"os\": {\n        \"name\": \"Mac OS X\",\n        \"version\": \"10.10.5\",\n        \"full\": \"Mac OS X 10.10.5\"\n      },\n      \"device\" : {\n        \"name\" : \"Mac\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"_seq_no\": \\d+/\"_seq_no\" : $body._seq_no/ s/\"_primary_term\": 1/\"_primary_term\" : $body._primary_term/]\n\n===== Using a custom regex file\nTo use a custom regex file for parsing the user agents, that file has to be put into the `config/ingest-user-agent` directory and\nhas to have a `.yml` filename extension. The file has to be present at node startup, any changes to it or any new files added\nwhile the node is running will not have any effect.\n\nIn practice, it will make most sense for any custom regex file to be a variant of the default file, either a more recent version\nor a customised version.\n\nThe default file included in `ingest-user-agent` is the `regexes.yaml` from uap-core: https://github.com/ua-parser/uap-core/blob/master/regexes.yaml\n\n[[ingest-user-agent-settings]]\n===== Node Settings\n\nThe `user_agent` processor supports the following setting:\n\n`ingest.user_agent.cache_size`::\n\n    The maximum number of results that should be cached. Defaults to `1000`.\n\nNote that these settings are node settings and apply to all `user_agent` processors, i.e. there is one cache for all defined `user_agent` processors.\n"
}