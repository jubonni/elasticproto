{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.769590",
        "size": 4082,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/http-rest-request-tracer.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "http-rest-request-tracer",
        "version": "8.15"
    },
    "doc": "==== Request tracing\n\nYou can trace individual requests made on the HTTP and transport layers.\n\nWARNING: Tracing can generate extremely high log volumes that can destabilize\nyour cluster. Do not enable request tracing on busy or important clusters.\n\n[[http-rest-request-tracer]]\n===== REST request tracer\n\nThe HTTP layer has a dedicated tracer that logs incoming requests and the\ncorresponding outgoing responses. Activate the tracer by setting the level of\nthe `org.elasticsearch.http.HttpTracer` logger to `TRACE`:\n\n[source,console]\n--------------------------------------------------\nPUT _cluster/settings\n{\n   \"persistent\" : {\n      \"logger.org.elasticsearch.http.HttpTracer\" : \"TRACE\"\n   }\n}\n--------------------------------------------------\n\nYou can also control which URIs will be traced, using a set of include and\nexclude wildcard patterns. By default every request will be traced.\n\n[source,console]\n--------------------------------------------------\nPUT _cluster/settings\n{\n   \"persistent\" : {\n      \"http.tracer.include\" : \"*\",\n      \"http.tracer.exclude\" : \"\"\n   }\n}\n--------------------------------------------------\n\nBy default, the tracer logs a summary of each request and response which\nmatches these filters. To record the body of each request and response too, set\nthe system property `es.insecure_network_trace_enabled` to `true`, and then set\nthe levels of both the `org.elasticsearch.http.HttpTracer` and\n`org.elasticsearch.http.HttpBodyTracer` loggers to `TRACE`:\n\n[source,console]\n--------------------------------------------------\nPUT _cluster/settings\n{\n   \"persistent\" : {\n      \"logger.org.elasticsearch.http.HttpTracer\" : \"TRACE\",\n      \"logger.org.elasticsearch.http.HttpBodyTracer\" : \"TRACE\"\n   }\n}\n--------------------------------------------------\n\nEach message body is compressed, encoded, and split into chunks to avoid\ntruncation:\n\n[source,text]\n----\n[TRACE][o.e.h.HttpBodyTracer     ] [master] [276] response body [part 1]: H4sIAAAAAAAA/9...\n[TRACE][o.e.h.HttpBodyTracer     ] [master] [276] response body [part 2]: 2oJ93QyYLWWhcD...\n[TRACE][o.e.h.HttpBodyTracer     ] [master] [276] response body (gzip compressed, base64-encoded, and split into 2 parts on preceding log lines)\n----\n\nEach chunk is annotated with an internal request ID (`[276]` in this example)\nwhich you should use to correlate the chunks with the corresponding summary\nlines. To reconstruct the output, base64-decode the data and decompress it\nusing `gzip`. For instance, on Unix-like systems:\n\n[source,sh]\n----\ncat httptrace.log | sed -e 's/.*://' | base64 --decode | gzip --decompress\n----\n\nWARNING: HTTP request and response bodies may contain sensitive information\nsuch as credentials and keys, so HTTP body tracing is disabled by default. You\nmust explicitly enable it on each node by setting the system property\n`es.insecure_network_trace_enabled` to `true`. This feature is primarily\nintended for test systems which do not contain any sensitive information. If\nyou set this property on a system which contains sensitive information, you\nmust protect your logs from unauthorized access.\n\n[[transport-tracer]]\n===== Transport tracer\n\nThe transport layer has a dedicated tracer that logs incoming and outgoing\nrequests and responses. Activate the tracer by setting the level of the\n`org.elasticsearch.transport.TransportService.tracer` logger to `TRACE`:\n\n[source,console]\n--------------------------------------------------\nPUT _cluster/settings\n{\n   \"persistent\" : {\n      \"logger.org.elasticsearch.transport.TransportService.tracer\" : \"TRACE\"\n   }\n}\n--------------------------------------------------\n\nYou can also control which actions will be traced, using a set of include and\nexclude wildcard patterns. By default every request will be traced except for\nfault detection pings:\n\n[source,console]\n--------------------------------------------------\nPUT _cluster/settings\n{\n   \"persistent\" : {\n      \"transport.tracer.include\" : \"*\",\n      \"transport.tracer.exclude\" : \"internal:coordination/fault_detection/*\"\n   }\n}\n--------------------------------------------------\n"
}