{
    "meta": {
        "size": 7321,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-knn-query.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "query-dsl-knn-query",
        "version": "8.15"
    },
    "doc": "[[query-dsl-knn-query]]\n=== Knn query\n++++\n<titleabbrev>Knn</titleabbrev>\n++++\n\nFinds the _k_ nearest vectors to a query vector, as measured by a similarity\nmetric. _knn_ query finds nearest vectors through approximate search on indexed\ndense_vectors. The preferred way to do approximate kNN search is through the\n<<knn-search,top level knn section>> of a search request. _knn_ query is reserved for\nexpert cases, where there is a need to combine this query with other queries.\n\n[[knn-query-ex-request]]\n==== Example request\n\n[source,console]\n----\nPUT my-image-index\n{\n  \"mappings\": {\n    \"properties\": {\n       \"image-vector\": {\n        \"type\": \"dense_vector\",\n        \"dims\": 3,\n        \"index\": true,\n        \"similarity\": \"l2_norm\"\n      },\n      \"file-type\": {\n        \"type\": \"keyword\"\n      },\n      \"title\": {\n        \"type\": \"text\"\n      }\n    }\n  }\n}\n----\n\n. Index your data.\n+\n[source,console]\n----\nPOST my-image-index/_bulk?refresh=true\n{ \"index\": { \"_id\": \"1\" } }\n{ \"image-vector\": [1, 5, -20], \"file-type\": \"jpg\", \"title\": \"mountain lake\" }\n{ \"index\": { \"_id\": \"2\" } }\n{ \"image-vector\": [42, 8, -15], \"file-type\": \"png\", \"title\": \"frozen lake\"}\n{ \"index\": { \"_id\": \"3\" } }\n{ \"image-vector\": [15, 11, 23], \"file-type\": \"jpg\", \"title\": \"mountain lake lodge\" }\n----\n//TEST[continued]\n\n. Run the search using the `knn` query, asking for the top 10 nearest vectors\nfrom each shard, and then combine shard results to get the top 3 global results.\n+\n[source,console]\n----\nPOST my-image-index/_search\n{\n  \"size\" : 3,\n  \"query\" : {\n    \"knn\": {\n      \"field\": \"image-vector\",\n      \"query_vector\": [-5, 9, -12],\n      \"k\": 10\n    }\n  }\n}\n----\n//TEST[continued]\n\n\n[[knn-query-top-level-parameters]]\n==== Top-level parameters for `knn`\n\n`field`::\n+\n--\n(Required, string) The name of the vector field to search against. Must be a\n<<index-vectors-knn-search, `dense_vector` field with indexing enabled>>.\n--\n\n`query_vector`::\n+\n--\n(Optional, array of floats or string) Query vector. Must have the same number of dimensions\nas the vector field you are searching against. Must be either an array of floats or a hex-encoded byte vector.\nEither this or `query_vector_builder` must be provided.\n--\n\n`query_vector_builder`::\n+\n--\n(Optional, object) Query vector builder.\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=knn-query-vector-builder]\n--\n\n`k`::\n+\n--\n(Optional, integer) The number of nearest neighbors to return from each shard.\n{es} collects `k` results from each shard, then merges them to find the global top results.\nThis value must be less than or equal to `num_candidates`. Defaults to `num_candidates`.\n--\n\n`num_candidates`::\n+\n--\n(Optional, integer) The number of nearest neighbor candidates to consider per shard\nwhile doing knn search. Cannot exceed 10,000. Increasing `num_candidates` tends to\nimprove the accuracy of the final results.\nDefaults to `1.5 * k` if `k` is set, or `1.5 * size` if `k` is not set.\n--\n\n`filter`::\n+\n--\n(Optional, query object) Query to filter the documents that can match.\nThe kNN search will return the top documents that also match this filter.\nThe value can be a single query or a list of queries. If `filter` is not provided,\nall documents are allowed to match.\n\nThe filter is a pre-filter, meaning that it is applied **during** the approximate\nkNN search to ensure that `num_candidates` matching documents are returned.\n--\n\n`similarity`::\n+\n--\n(Optional, float) The minimum similarity required for a document to be considered\na match. The similarity value calculated relates to the raw\n<<dense-vector-similarity, `similarity`>> used. Not the document score. The matched\ndocuments are then scored according to <<dense-vector-similarity, `similarity`>>\nand the provided `boost` is applied.\n--\n\n`boost`::\n+\n--\n(Optional, float) Floating point number used to multiply the\nscores of matched documents. This value cannot be negative. Defaults to `1.0`.\n--\n\n`_name`::\n+\n--\n(Optional, string) Name field to identify the query\n--\n\n[[knn-query-filtering]]\n==== Pre-filters and post-filters in knn query\n\nThere are two ways to filter documents that match a kNN query:\n\n. **pre-filtering** \u2013 filter is applied during the approximate kNN search\nto ensure that `k` matching documents are returned.\n. **post-filtering** \u2013 filter is applied after the approximate kNN search\ncompletes, which results in fewer than k results, even when there are enough\nmatching documents.\n\nPre-filtering is supported through the `filter` parameter of the `knn` query.\nAlso filters from <<filter-alias,aliases>> are applied as pre-filters.\n\nAll other filters found in the Query DSL tree are applied as post-filters.\nFor example, `knn` query finds the top 3 documents with the nearest vectors\n(k=3), which are combined with  `term` filter, that is\npost-filtered. The final set of documents will contain only a single document\nthat passes the post-filter.\n\n\n[source,console]\n----\nPOST my-image-index/_search\n{\n  \"size\" : 10,\n  \"query\" : {\n    \"bool\" : {\n      \"must\" : {\n        \"knn\": {\n          \"field\": \"image-vector\",\n          \"query_vector\": [-5, 9, -12],\n          \"k\": 3\n        }\n      },\n      \"filter\" : {\n        \"term\" : { \"file-type\" : \"png\" }\n      }\n    }\n  }\n}\n----\n//TEST[continued]\n\n[[knn-query-in-hybrid-search]]\n==== Hybrid search with knn query\nKnn query can be used as a part of hybrid search, where knn query is combined\nwith other lexical queries. For example, the query below finds documents with\n`title` matching `mountain lake`, and combines them with the top 10 documents\nthat have the closest image vectors to the `query_vector`. The combined documents\nare then scored and the top 3 top scored documents are returned.\n\n+\n[source,console]\n----\nPOST my-image-index/_search\n{\n  \"size\" : 3,\n  \"query\": {\n    \"bool\": {\n      \"should\": [\n        {\n          \"match\": {\n            \"title\": {\n              \"query\": \"mountain lake\",\n              \"boost\": 1\n            }\n          }\n        },\n        {\n          \"knn\": {\n            \"field\": \"image-vector\",\n            \"query_vector\": [-5, 9, -12],\n            \"k\": 10,\n            \"boost\": 2\n          }\n        }\n      ]\n    }\n  }\n}\n----\n//TEST[continued]\n\n\n[[knn-query-with-nested-query]]\n==== Knn query inside a nested query\n\n`knn` query can be used inside a nested query. The behaviour here is similar\nto <<nested-knn-search, top level nested kNN search>>:\n\n* kNN search over nested dense_vectors diversifies the top results over\nthe top-level document\n* `filter`  over the top-level document metadata is supported and acts as a\npre-filter\n* `filter` over `nested` field metadata is not supported\n\nA sample query can look like below:\n\n[source,js]\n----\n{\n  \"query\" : {\n    \"nested\" : {\n      \"path\" : \"paragraph\",\n        \"query\" : {\n          \"knn\": {\n            \"query_vector\": [\n                0.45,\n                45\n            ],\n            \"field\": \"paragraph.vector\",\n            \"num_candidates\": 2\n        }\n      }\n    }\n  }\n}\n----\n// NOTCONSOLE\n\n[[knn-query-aggregations]]\n==== Knn query with aggregations\n`knn` query calculates aggregations on top `k` documents from each shard.\nThus, the final results from aggregations contain\n`k * number_of_shards` documents. This is different from\nthe <<knn-search,top level knn section>> where aggregations are\ncalculated on the global top `k` nearest documents.\n"
}