{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.378068",
        "size": 6241,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/service-accounts.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": false,
        "title": "service-accounts",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[service-accounts]]\n=== Service accounts\n\nThe {stack-security-features} provide _service accounts_ specifically for\nintegration with external services that connect to {es}, such as {fleet} server.\nService accounts have a fixed set of privileges and cannot authenticate\nuntil you create a service account token for them. Additionally, service\naccounts are predefined in code, and are always enabled.\n\nA service account corresponds to a specific external service. You create service\naccount tokens for a service account. The service can then authenticate with the\ntoken and perform relevant actions. For example, {fleet} server can use its\nservice token to authenticate with {es} and then manage its own API keys.\n\nYou can create multiple service tokens for the same service account, which\nprevents credential sharing between multiple instances of the same\nexternal service. Each instance can assume the same identity while using\ntheir own distinct service token for authentication.\n\nService accounts provide flexibility over <<built-in-users,built-in users>>\nbecause they:\n\n* Do not rely on the <<native-realm,internal `native` realm>>, and aren't\nalways required to rely on the `.security` index\n* Use a <<security-api-create-api-key-request-body,role descriptor>> named after the service account principal instead of\ntraditional roles\n* Support multiple credentials through service account tokens\n\nService accounts are not included in the response of the\n<<security-api-get-user,get users API>>. To retrieve a service account, use the\n<<security-api-get-service-accounts,get service accounts API>>. Use the\n<<security-api-get-service-credentials,get service account credentials API>>\nto retrieve all service credentials for a service account.\n\n[discrete]\n[[service-accounts-explanation]]\n=== Service accounts usage\nService accounts have a\n<<security-api-get-service-accounts-path-params,unique principal>> that takes\nthe format of `<namespace>/<service>`, where the `namespace` is a top-level\ngrouping of service accounts, and `service` is the name of the service and\nmust be unique within its namespace.\n\nService accounts are predefined in code. The following service accounts are\navailable:\n\n`elastic/fleet-server`:: The service account used by the {fleet} server to\ncommunicate with {es}.\n\n`elastic/kibana`:: The service account used by {kib} to communicate with\n{es}.\n\n`elastic/enterprise-search-server`:: The service account used by Enterprise Search\nto communicate with {es}.\n\n// tag::service-accounts-usage[]\nIMPORTANT: Do not attempt to use service accounts for authenticating individual\nusers. Service accounts can only be authenticated with service tokens, which are\nnot applicable to regular users.\n// end::service-accounts-usage[]\n\n[discrete]\n[[service-accounts-tokens]]\n=== Service account tokens\nA service account token, or service token, is a unique string that a\nservice uses to authenticate with {es}. For a given service account, each token\nmust have a unique name. Because tokens include access credentials, they should\nalways be kept secret by whichever client is using them.\n\nService tokens can be backed by either the `.security` index (recommended) or\nthe `service_tokens` file. You can create multiple service tokens for a single\nservice account, which enables multiple instances of the same service to run\nwith different credentials.\n\nYou must create a service token to use a service account. You can\ncreate a service token using either:\n\n* The <<security-api-create-service-token,create service account token API>>,\nwhich saves the new service token in the `.security` index and returns\nthe bearer token in the HTTP response.\n* The <<service-tokens-command,elasticsearch-service-tokens>> CLI tool, which\nsaves the new service token in the `$ES_HOME/config/service_tokens` file\nand outputs the bearer token to your terminal\n\nWe recommend that you create service tokens via the REST API rather than the CLI.\nThe API stores service tokens within the `.security` index which means that the\ntokens are available for authentication on all nodes, and will be backed up within\ncluster snapshots.\nThe use of the CLI is intended for cases where there is an external orchestration\nprocess (such as {ece-ref}[{ece}] or {eck-ref}[{eck}]) that will manage the\ncreation and distribution of the `service_tokens` file.\n\nBoth of these methods (API and CLI) create a service token with a guaranteed\nsecret string length of `22`.\nThe minimal, acceptable length of a secret string for a service token is `10`.\nIf the secret string doesn't meet this minimal length, authentication with {es}\nwill fail without even checking the value of the service token.\n\nService tokens never expire. You must actively\n<<security-api-delete-service-token,delete>> them if they are no longer needed.\n\n[discrete]\n[[authenticate-with-service-account-token]]\n=== Authenticate with service tokens\n\nNOTE: Service accounts currently do not support basic authentication.\n\nTo use a service account token, include the generated token value in a request\nwith an `Authorization: Bearer` header:\n\n[source,shell]\n----\ncurl -H \"Authorization: Bearer AAEAAWVsYXN0aWM...vZmxlZXQtc2VydmVyL3Rva2VuMTo3TFdaSDZ\" http://localhost:9200/_security/_authenticate\n----\n// NOTCONSOLE\n\nA successful authentication response includes a `token` field, which contains a\n`name` field for the name of the service token and a `type` field for the\ntype of the service token:\n\n[source,js]\n----\n{\n  \"username\": \"elastic/fleet-server\",\n  \"roles\": [],\n  \"full_name\": \"Service account - elastic/fleet-server\",\n  \"email\": null,\n  \"token\": {\n    \"name\": \"token1\",                 <1>\n    \"type\": \"_service_account_index\"  <2>\n  },\n  \"metadata\": {\n    \"_elastic_service_account\": true\n  },\n  \"enabled\": true,\n  \"authentication_realm\": {\n    \"name\": \"_service_account\",\n    \"type\": \"_service_account\"\n  },\n  \"lookup_realm\": {\n    \"name\": \"_service_account\",\n    \"type\": \"_service_account\"\n  },\n  \"authentication_type\": \"token\"\n}\n----\n// NOTCONSOLE\n<1> Name of the service account token.\n<2> Type of service account token. The value always begins with\n`_service_account_` and is followed by a string that indicates the service\ntoken backend in use (can be either `file` or `index`).\n"
}