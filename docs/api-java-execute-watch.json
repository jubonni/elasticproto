{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.510599",
        "size": 2048,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/api-java-execute-watch.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "api-java-execute-watch",
        "version": "8.15"
    },
    "doc": "[discrete]\n[[api-java-execute-watch]]\n=== Execute watch API\n\nThis API enables on-demand execution of a watch stored in the `.watches` index.\nIt can be used to test a watch without executing all its actions or by ignoring\nits condition. The response contains a `BytesReference` that represents the\nrecord that would be written to the `.watcher-history` index.\n\nThe following example executes a watch with the name `my-watch`\n\n[source,java]\n--------------------------------------------------\nExecuteWatchResponse executeWatchResponse = watcherClient.prepareExecuteWatch(\"my-watch\")\n\n    // execute the actions, ignoring the watch condition\n    .setIgnoreCondition(true)\n\n    // A map containing alternative input to use instead of the output of\n    // the watch's input\n    .setAlternativeInput(new HashMap<String, Object>())\n\n    // Trigger data to use (Note that \"scheduled_time\" is not provided to the\n    // ctx.trigger by this execution method so you may want to include it here)\n    .setTriggerData(new HashMap<String, Object>())\n\n    // Simulating the \"email_admin\" action while ignoring its throttle state. Use\n    // \"_all\" to set the action execution mode to all actions\n    .setActionMode(\"_all\", ActionExecutionMode.FORCE_SIMULATE)\n\n    // If the execution of this watch should be written to the `.watcher-history`\n    // index and reflected in the persisted Watch\n    .setRecordExecution(false)\n\n    // Indicates whether the watch should execute in debug mode. In debug mode the\n    // returned watch record will hold the execution vars\n    .setDebug(true)\n\n    .get();\n--------------------------------------------------\n\nOnce the response is returned, you can explore it by getting execution record\nsource:\n\nTIP:  The `XContentSource` class provides convenient methods to explore the\n      source\n\n[source,java]\n--------------------------------------------------\nXContentSource source = executeWatchResponse.getRecordSource();\nString actionId = source.getValue(\"result.actions.0.id\");\n--------------------------------------------------\n"
}