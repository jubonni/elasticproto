{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.848067",
        "size": 2976,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/painless-literals.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "painless-literals",
        "version": "8.15"
    },
    "doc": "[[painless-literals]]\n=== Literals\n\nUse a literal to specify a value directly in an\n<<painless-operators, operation>>.\n\n[[integer-literals]]\n==== Integers\n\nUse an integer literal to specify an integer type value in decimal, octal, or\nhex notation of a <<primitive-types, primitive type>> `int`, `long`, `float`,\nor `double`. Use the following single letter designations to specify the\nprimitive type: `l` or `L` for `long`, `f` or `F` for `float`, and `d` or `D`\nfor `double`. If not specified, the type defaults to `int`. Use `0` as a prefix\nto specify an integer literal as octal, and use `0x` or `0X` as a prefix to\nspecify an integer literal as hex.\n\n*Grammar*\n\n[source,ANTLR4]\n----\nINTEGER: '-'? ( '0' | [1-9] [0-9]* ) [lLfFdD]?;\nOCTAL:   '-'? '0' [0-7]+ [lL]?;\nHEX:     '-'? '0' [xX] [0-9a-fA-F]+ [lL]?;\n----\n\n*Examples*\n\n* Integer literals.\n+\n[source,Painless]\n----\n0     <1>\n0D    <2>\n1234L <3>\n-90f  <4>\n-022  <5>\n0xF2A <6>\n----\n+\n<1> `int 0`\n<2> `double 0.0`\n<3> `long 1234`\n<4> `float -90.0`\n<5> `int -18` in octal\n<6> `int 3882` in hex\n\n[[float-literals]]\n==== Floats\n\nUse a floating point literal to specify a floating point type value of a\n<<primitive-types, primitive type>> `float` or `double`. Use the following\nsingle letter designations to specify the primitive type: `f` or `F` for `float`\nand `d` or `D` for `double`. If not specified, the type defaults to `double`.\n\n*Grammar*\n\n[source,ANTLR4]\n----\nDECIMAL: '-'? ( '0' | [1-9] [0-9]* ) (DOT [0-9]+)? EXPONENT? [fFdD]?;\nEXPONENT: ( [eE] [+\\-]? [0-9]+ );\n----\n\n*Examples*\n\n* Floating point literals.\n+\n[source,Painless]\n----\n0.0      <1>\n1E6      <2>\n0.977777 <3>\n-126.34  <4>\n89.9F    <5>\n----\n+\n<1> `double 0.0`\n<2> `double 1000000.0` in exponent notation\n<3> `double 0.977777`\n<4> `double -126.34`\n<5> `float 89.9`\n\n[[string-literals]]\n==== Strings\n\nUse a string literal to specify a <<string-type, `String` type>> value with\neither single-quotes or double-quotes. Use a `\\\"` token to include a\ndouble-quote as part of a double-quoted string literal. Use a `\\'` token to\ninclude a single-quote as part of a single-quoted string literal. Use a `\\\\`\ntoken to include a backslash as part of any string literal.\n\n*Grammar*\n\n[source,ANTLR4]\n----\nSTRING: ( '\"'  ( '\\\\\"'  | '\\\\\\\\' | ~[\\\\\"] )*? '\"'  )\n      | ( '\\'' ( '\\\\\\'' | '\\\\\\\\' | ~[\\\\'] )*? '\\'' );\n----\n\n*Examples*\n\n* String literals using single-quotes.\n+\n[source,Painless]\n----\n'single-quoted string literal'\n'\\'single-quoted with escaped single-quotes\\' and backslash \\\\'\n'single-quoted with non-escaped \"double-quotes\"'\n----\n+\n* String literals using double-quotes.\n+\n[source,Painless]\n----\n\"double-quoted string literal\"\n\"\\\"double-quoted with escaped double-quotes\\\" and backslash: \\\\\"\n\"double-quoted with non-escaped 'single-quotes'\"\n----\n\n[[character-literals]]\n==== Characters\n\nCharacter literals are not specified directly. Instead, use the\n<<string-character-casting, cast operator>> to convert a `String` type value\ninto a `char` type value.\n"
}