{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.716275",
        "size": 5477,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-move-to-step.html",
        "type": "documentation",
        "role": [
            "xpack",
            "child_attributes"
        ],
        "has_code": true,
        "title": "ilm-move-to-step",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[ilm-move-to-step]]\n=== Move to lifecycle step API\n++++\n<titleabbrev>Move to step</titleabbrev>\n++++\n\nTriggers execution of a specific step in the <<index-lifecycle-management,lifecycle>> policy.\n\n[[ilm-move-to-step-request]]\n==== {api-request-title}\n\n`POST _ilm/move/<index>`\n\n[[ilm-move-to-step-prereqs]]\n==== {api-prereq-title}\n\n* If the {es} {security-features} are enabled, you must have the `manage_ilm`\nprivileges on the indices being managed to use this API. For more information,\nsee <<security-privileges>>.\n\n[[ilm-move-to-step-desc]]\n==== {api-description-title}\n\nWARNING: This operation can result in the loss of data. Manually moving an index\ninto a specific step executes that step even if it has already been performed.\nThis is a potentially destructive action and this should be considered an expert\nlevel API.\n\nManually moves an index into the specified step and executes that step.\nYou must specify both the current step and the step to be executed in the\nbody of the request.\n\nThe request will fail if the current step does not match the step currently\nbeing executed for the index. This is to prevent the index from being moved from\nan unexpected step into the next step.\n\nWhen specifying the target (`next_step`) to which the index will be moved, either the `name` or both\nthe `action` and `name` fields are optional. If only the phase is specified, the index will move to\nthe first step of the first action in the target phase. If the phase and action are specified, the index will move to\nthe first step of the specified action in the specified phase. Only actions specified in the ILM\npolicy are considered valid, an index cannot move to a step that is not part of its policy.\n\n[[ilm-move-to-step-path-params]]\n==== {api-path-parms-title}\n\n`<index>`::\n  (Required, string) Identifier for the index.\n\n[[ilm-move-to-step-query-params]]\n==== {api-query-parms-title}\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=timeoutparms]\n\n[role=\"child_attributes\"]\n[[ilm-move-to-step-request-body]]\n==== {api-request-body-title}\n\n`current_step`::\n(Required, object)\n+\n.Properties of `current_step`\n[%collapsible%open]\n====\n`phase`::\n(Required, string)\nThe name of the current phase.\nMust match the phase as returned by the <<ilm-explain-lifecycle, explain>> API.\n\n`action`::\n(Required, string)\nThe name of the current action. \nMust match the action as returned by the <<ilm-explain-lifecycle, explain>> API.\n\n`name`::\n(Required, string)\nThe name of the current step. \nMust match the step as returned by the <<ilm-explain-lifecycle, explain>> API.\nIf {ilm-init} encounters a problem while performing an action, \nit halts execution of the policy and transitions to the `ERROR` step.\nIf you are trying to advance a policy after troubleshooting a failure, \nyou specify this `ERROR` step as the current step. \nFor more information, see <<index-lifecycle-error-handling, {ilm-init} error handling>>.\n\n====\n\n`next_step`::\n(Required, object)\n+\n.Properties of `next_step`\n[%collapsible%open]\n====\n`phase`::\n(Required, string)\nThe name of the phase that contains the action you want to perform or resume.\n\n`action`::\n(Optional, string)\nThe name action you want to perform or resume. Required if `name` used.\n\n`name`::\n(Optional, string)\nThe name of the step to move to and execute. Required if `action` used.\n\n====\n\n[[ilm-move-to-step-example]]\n==== {api-examples-title}\n\nThe following example moves `my-index-000001` from the initial step to the\n`forcemerge` step:\n\n//////////////////////////\n\n[source,console]\n--------------------------------------------------\nPUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"warm\": {\n        \"min_age\": \"10d\",\n        \"actions\": {\n          \"forcemerge\": {\n            \"max_num_segments\": 1\n          }\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"30d\",\n        \"actions\": {\n          \"delete\": {}\n        }\n      }\n    }\n  }\n}\n\nPUT my-index-000001\n{\n  \"settings\": {\n    \"index.lifecycle.name\": \"my_policy\"\n  }\n}\n--------------------------------------------------\n\n//////////////////////////\n\n[source,console]\n--------------------------------------------------\nPOST _ilm/move/my-index-000001\n{\n  \"current_step\": { <1>\n    \"phase\": \"new\",\n    \"action\": \"complete\",\n    \"name\": \"complete\"\n  },\n  \"next_step\": { <2>\n    \"phase\": \"warm\",\n    \"action\": \"forcemerge\", <3>\n    \"name\": \"forcemerge\" <4>\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n<1> The step that the index is expected to be in\n<2> The step that you want to execute\n<3> The optional action to which the index will be moved\n<4> The optional step name to which the index will be moved\n\nIf the request succeeds, you receive the following result:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"acknowledged\": true\n}\n--------------------------------------------------\n// TEST[continued]\n\nThe request will fail if the index is not in the `new` phase as specified\nby the `current_step`.\n\nThe following example pushes `my-index-000001` from the end of hot phase into\nthe start of warm:\n\n[source,console]\n--------------------------------------------------\nPOST _ilm/move/my-index-000001\n{\n  \"current_step\": {\n    \"phase\": \"hot\",\n    \"action\": \"complete\",\n    \"name\": \"complete\"\n  },\n  \"next_step\": {\n    \"phase\": \"warm\"\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[skip: can't consistently get ILM in a completed hot phase during CI checks]"
}