{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.273271",
        "size": 16513,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-shape.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "geo-shape",
        "version": "8.15"
    },
    "doc": "[[geo-shape]]\n=== Geoshape field type\n++++\n<titleabbrev>Geoshape</titleabbrev>\n++++\n\nThe `geo_shape` data type facilitates the indexing of and searching\nwith arbitrary geoshapes such as rectangles, lines and polygons. If the data being\nindexed contains shapes other than just points, it is necessary to use this mapping.\nIf the data contains only points, it can be indexed as either\n<<geo-point,`geo_point`>> or `geo_shape`.\n\nDocuments using this type can be used:\n\n* to find geoshapes within:\n** a <<query-dsl-geo-bounding-box-query,bounding box>>\n** a certain <<query-dsl-geo-distance-query,distance>> of a central point\n** a <<query-dsl-geo-shape-query,`geo_shape` query>> (for example, intersecting polygons).\n* to aggregate documents by geographic grids:\n** either <<search-aggregations-bucket-geohashgrid-aggregation,`geo_hash`>>\n** or <<search-aggregations-bucket-geotilegrid-aggregation,`geo_tile`>>\n** or <<search-aggregations-bucket-geohexgrid-aggregation,`geo_hex`>>\n\n[[geo-shape-mapping-options]]\n[discrete]\n==== Mapping Options\n\nThe `geo_shape` mapping maps GeoJSON or WKT geometry objects to the `geo_shape`\ntype. To enable it, users must explicitly map fields to the `geo_shape`\ntype.\n\n[NOTE]\n=============================================\nIn https://datatracker.ietf.org/doc/html/rfc7946[GeoJSON]\nand https://www.ogc.org/standard/sfa/[WKT], and therefore Elasticsearch,\nthe correct *coordinate order is longitude, latitude (X, Y)* within coordinate\narrays. This differs from many Geospatial APIs (e.g., Google Maps) that generally\nuse the colloquial latitude, longitude (Y, X).\n=============================================\n\n[cols=\"<,<,<\",options=\"header\",]\n|=======================================================================\n|Option |Description| Default\n\n|`orientation`\na|Optional. Default <<polygon-orientation,orientation>> for the field's\nWKT polygons.\n\nThis parameter sets and returns only a `RIGHT` (counterclockwise) or `LEFT`\n(clockwise) value. However, you can specify either value in multiple ways.\n\nTo set `RIGHT`, use one of the following arguments or its uppercase\nvariant:\n\n* `right`\n* `counterclockwise`\n* `ccw`\n\nTo set `LEFT`, use one of the following arguments or its uppercase\nvariant:\n\n* `left`\n* `clockwise`\n* `cw`\n| `RIGHT`\n\n|`ignore_malformed` |If true, malformed GeoJSON or WKT shapes are ignored. If\nfalse (default), malformed GeoJSON and WKT shapes throw an exception and reject the\nentire document.\n| `false`\n\n|`ignore_z_value` |If `true` (default) three dimension points will be accepted (stored in source)\nbut only latitude and longitude values will be indexed; the third dimension is ignored. If `false`,\ngeopoints containing any more than latitude and longitude (two dimensions) values throw an exception\nand reject the whole document.\n| `true`\n\n|`coerce` |If `true` unclosed linear rings in polygons will be automatically closed.\n| `false`\n\n|`index` |Should the field be quickly searchable? Accepts `true` (default) and `false`.\nFields that only have <<doc-values,`doc_values`>> enabled can still be queried, albeit slower.\n| `true`\n\n|`doc_values` |Should the field be stored on disk in a column-stride fashion,\nso that it can later be used for aggregations or scripting?\n| `true`\n\n|=======================================================================\n\n\n[[geoshape-indexing-approach]]\n[discrete]\n==== Indexing approach\nGeoshape types are indexed by decomposing the shape into a triangular mesh and\nindexing each triangle as a 7 dimension point in a BKD tree. This provides\nnear perfect spatial resolution (down to 1e-7 decimal degree precision) since all\nspatial relations are computed using an encoded vector representation of the\noriginal shape. Performance of the tessellator primarily\ndepends on the number of vertices that define the polygon/multi-polygon.\n\n[discrete]\n===== Example\n\n[source,console]\n--------------------------------------------------\nPUT /example\n{\n  \"mappings\": {\n    \"properties\": {\n      \"location\": {\n        \"type\": \"geo_shape\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TESTSETUP\n\n[[input-structure]]\n[discrete]\n==== Input Structure\n\nShapes can be represented using either the http://geojson.org[GeoJSON]\nor https://docs.opengeospatial.org/is/12-063r5/12-063r5.html[Well-Known Text]\n(WKT) format. The following table provides a mapping of GeoJSON and WKT\nto Elasticsearch types:\n\n[cols=\"<,<,<,<\",options=\"header\",]\n|=======================================================================\n|GeoJSON Type |WKT Type |Elasticsearch Type |Description\n\n|`Point` |`POINT` |`point` |A single geographic coordinate. Note: Elasticsearch uses WGS-84 coordinates only.\n|`LineString` |`LINESTRING` |`linestring` |An arbitrary line given two or more points.\n|`Polygon` |`POLYGON` |`polygon` |A _closed_ polygon whose first and last point\nmust match, thus requiring `n + 1` vertices to create an `n`-sided\npolygon and a minimum of `4` vertices.\n|`MultiPoint` |`MULTIPOINT` |`multipoint` |An array of unconnected, but likely related\npoints.\n|`MultiLineString` |`MULTILINESTRING` |`multilinestring` |An array of separate linestrings.\n|`MultiPolygon` |`MULTIPOLYGON` |`multipolygon` |An array of separate polygons.\n|`GeometryCollection` |`GEOMETRYCOLLECTION` |`geometrycollection` | A GeoJSON shape similar to the\n`multi*` shapes except that multiple types can coexist (e.g., a Point\nand a LineString).\n|`N/A` |`BBOX` |`envelope` |A bounding rectangle, or envelope, specified by\nspecifying only the top left and bottom right points.\n|=======================================================================\n\n[NOTE]\n=============================================\nFor all types, both the inner `type` and `coordinates` fields are\nrequired.\n=============================================\n\n[[geo-point-type]]\n[discrete]\n===== http://geojson.org/geojson-spec.html#id2[Point]\n\nA point is a single geographic coordinate, such as the location of a\nbuilding or the current position given by a smartphone's Geolocation\nAPI. The following is an example of a point in GeoJSON.\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"Point\",\n    \"coordinates\" : [-77.03653, 38.897676]\n  }\n}\n--------------------------------------------------\n\nThe following is an example of a point in WKT:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : \"POINT (-77.03653 38.897676)\"\n}\n--------------------------------------------------\n\n[discrete]\n[[geo-linestring]]\n===== http://geojson.org/geojson-spec.html#id3[LineString]\n\nA linestring defined by an array of two or more positions. By\nspecifying only two points, the linestring will represent a straight\nline. Specifying more than two points creates an arbitrary path. The\nfollowing is an example of a linestring in GeoJSON.\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"LineString\",\n    \"coordinates\" : [[-77.03653, 38.897676], [-77.009051, 38.889939]]\n  }\n}\n--------------------------------------------------\n\nThe following is an example of a linestring in WKT:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : \"LINESTRING (-77.03653 38.897676, -77.009051 38.889939)\"\n}\n--------------------------------------------------\n\nThe above linestring would draw a straight line starting at the White\nHouse to the US Capitol Building.\n\n[discrete]\n[[geo-polygon]]\n===== http://geojson.org/geojson-spec.html#id4[Polygon]\n\nA polygon is defined by a list of a list of points. The first and last\npoints in each (outer) list must be the same (the polygon must be\nclosed). The following is an example of a polygon in GeoJSON.\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"Polygon\",\n    \"coordinates\" : [\n      [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]\n    ]\n  }\n}\n--------------------------------------------------\n\nThe following is an example of a polygon in WKT:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : \"POLYGON ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0))\"\n}\n--------------------------------------------------\n\nThe first array represents the outer boundary of the polygon, the other\narrays represent the interior shapes (\"holes\"). The following is a GeoJSON example\nof a polygon with a hole:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"Polygon\",\n    \"coordinates\" : [\n      [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ],\n      [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2] ]\n    ]\n  }\n}\n--------------------------------------------------\n\nThe following is an example of a polygon with a hole in WKT:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : \"POLYGON ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8, 100.2 0.2))\"\n}\n--------------------------------------------------\n\n[discrete]\n[[polygon-orientation]]\n===== Polygon orientation\n\nA polygon's orientation indicates the order of its vertices: `RIGHT`\n(counterclockwise) or `LEFT` (clockwise). {es} uses a polygon\u2019s orientation to\ndetermine if it crosses the international dateline (+/-180\u00b0 longitude).\n\nYou can set a default orientation for WKT polygons using the\n<<geo-shape-mapping-options,`orientation` mapping parameter>>. This is because\nthe WKT specification doesn't specify or enforce a default orientation.\n\nGeoJSON polygons use a default orientation of `RIGHT`, regardless of\n`orientation` mapping parameter's value. This is because the\nhttps://tools.ietf.org/html/rfc7946#section-3.1.6[GeoJSON specification]\nmandates that an outer polygon use a counterclockwise orientation and interior\nshapes use a clockwise orientation.\n\nYou can override the default orientation for GeoJSON polygons using the\ndocument-level `orientation` parameter. For example, the following indexing\nrequest specifies a document-level `orientation` of `LEFT`.\n\n[source,console]\n----\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"Polygon\",\n    \"orientation\" : \"LEFT\",\n    \"coordinates\" : [\n      [ [-177.0, 10.0], [176.0, 15.0], [172.0, 0.0], [176.0, -15.0], [-177.0, -10.0], [-177.0, 10.0] ]\n    ]\n  }\n}\n----\n\n{es} only uses a polygon\u2019s orientation to determine if it crosses the\ninternational dateline. If the difference between a polygon\u2019s minimum longitude\nand the maximum longitude is less than 180\u00b0, the polygon doesn't cross the\ndateline and its orientation has no effect.\n\nIf the difference between a polygon\u2019s minimum longitude and the maximum\nlongitude is 180\u00b0 or greater, {es} checks whether the polygon's document-level\n`orientation` differs from the default orientation. If the orientation differs,\n{es} considers the polygon to cross the international dateline and splits the\npolygon at the dateline.\n\n[discrete]\n[[geo-multipoint]]\n===== http://geojson.org/geojson-spec.html#id5[MultiPoint]\n\nThe following is an example of a list of GeoJSON points:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"MultiPoint\",\n    \"coordinates\" : [\n      [102.0, 2.0], [103.0, 2.0]\n    ]\n  }\n}\n--------------------------------------------------\n\nThe following is an example of a list of WKT points:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : \"MULTIPOINT (102.0 2.0, 103.0 2.0)\"\n}\n--------------------------------------------------\n\n[discrete]\n[[geo-multilinestring]]\n===== http://geojson.org/geojson-spec.html#id6[MultiLineString]\n\nThe following is an example of a list of GeoJSON linestrings:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"MultiLineString\",\n    \"coordinates\" : [\n      [ [102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0] ],\n      [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0] ],\n      [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8] ]\n    ]\n  }\n}\n--------------------------------------------------\n\nThe following is an example of a list of WKT linestrings:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : \"MULTILINESTRING ((102.0 2.0, 103.0 2.0, 103.0 3.0, 102.0 3.0), (100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8))\"\n}\n--------------------------------------------------\n\n[discrete]\n[[geo-multipolygon]]\n===== http://geojson.org/geojson-spec.html#id7[MultiPolygon]\n\nThe following is an example of a list of GeoJSON polygons (second polygon contains a hole):\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"MultiPolygon\",\n    \"coordinates\" : [\n      [ [[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]] ],\n      [ [[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],\n        [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]] ]\n    ]\n  }\n}\n--------------------------------------------------\n\nThe following is an example of a list of WKT polygons (second polygon contains a hole):\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : \"MULTIPOLYGON (((102.0 2.0, 103.0 2.0, 103.0 3.0, 102.0 3.0, 102.0 2.0)), ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8, 100.2 0.2)))\"\n}\n--------------------------------------------------\n\n[discrete]\n[[geo-geometry_collection]]\n===== http://geojson.org/geojson-spec.html#geometrycollection[Geometry Collection]\n\nThe following is an example of a collection of GeoJSON geometry objects:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\": \"GeometryCollection\",\n    \"geometries\": [\n      {\n        \"type\": \"Point\",\n        \"coordinates\": [100.0, 0.0]\n      },\n      {\n        \"type\": \"LineString\",\n        \"coordinates\": [ [101.0, 0.0], [102.0, 1.0] ]\n      }\n    ]\n  }\n}\n--------------------------------------------------\n\nThe following is an example of a collection of WKT geometry objects:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : \"GEOMETRYCOLLECTION (POINT (100.0 0.0), LINESTRING (101.0 0.0, 102.0 1.0))\"\n}\n--------------------------------------------------\n\n\n[discrete]\n===== Envelope\n\nElasticsearch supports an `envelope` type, which consists of coordinates\nfor upper left and lower right points of the shape to represent a\nbounding rectangle in the format `[[minLon, maxLat], [maxLon, minLat]]`:\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : {\n    \"type\" : \"envelope\",\n    \"coordinates\" : [ [100.0, 1.0], [101.0, 0.0] ]\n  }\n}\n--------------------------------------------------\n\nThe following is an example of an envelope using the WKT BBOX format:\n\n*NOTE:* WKT specification expects the following order: minLon, maxLon, maxLat, minLat.\n\n[source,console]\n--------------------------------------------------\nPOST /example/_doc\n{\n  \"location\" : \"BBOX (100.0, 102.0, 2.0, 0.0)\"\n}\n--------------------------------------------------\n\n[discrete]\n===== Circle\n\nNeither GeoJSON nor WKT supports a point-radius circle type. Instead, use a\n<<ingest-circle-processor,circle ingest processor>> to approximate the circle as\na <<geo-polygon,`polygon`>>.\n\n[discrete]\n==== Sorting and Retrieving index Shapes\n\nDue to the complex input structure and index representation of shapes,\nit is not currently possible to sort shapes or retrieve their fields\ndirectly. The `geo_shape` value is only retrievable through the `_source`\nfield.\n\n[[geo-shape-synthetic-source]]\n==== Synthetic source\n\nIMPORTANT: Synthetic `_source` is Generally Available only for TSDB indices\n(indices that have `index.mode` set to `time_series`). For other indices\nsynthetic `_source` is in technical preview. Features in technical preview may\nbe changed or removed in a future release. Elastic will work to fix\nany issues, but features in technical preview are not subject to the support SLA\nof official GA features.\n"
}