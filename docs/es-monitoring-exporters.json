{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.209271",
        "size": 7805,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/es-monitoring-exporters.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "es-monitoring-exporters",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[es-monitoring-exporters]]\n== Exporters\n\ninclude::production.asciidoc[tag=monitoring-rec]\n\nThe purpose of exporters is to take data collected from any Elastic Stack\nsource and route it to the monitoring cluster. It is possible to configure\nmore than one exporter, but the general and default setup is to use a single\nexporter.\n\nThere are two types of exporters in {es}:\n\n`local`::\nThe default exporter used by {es} {monitor-features}. This exporter routes data\nback into the _same_ cluster. See <<local-exporter>>.\n\n`http`::\nThe preferred exporter, which you can use to route data into any supported\n{es} cluster accessible via HTTP. Production environments should always use a\nseparate monitoring cluster. See <<http-exporter>>.\n\nBoth exporters serve the same purpose: to set up the monitoring cluster and route\nmonitoring data. However, they perform these tasks in very different ways. Even\nthough things happen differently, both exporters are capable of sending all of\nthe same data.\n\nExporters are configurable at both the node and cluster level. Cluster-wide\nsettings, which are updated with the\n<<cluster-update-settings,`_cluster/settings` API>>, take precedence over\nsettings in the `elasticsearch.yml` file on each node. When you update an\nexporter, it is completely replaced by the updated version of the exporter.\n\nIMPORTANT: It is critical that all nodes share the same setup. Otherwise,\nmonitoring data might be routed in different ways or to different places.\n\nWhen the exporters route monitoring data into the monitoring cluster, they use\n`_bulk` indexing for optimal performance. All monitoring data is forwarded in\nbulk to all enabled exporters on the same node. From there, the exporters\nserialize the monitoring data and send a bulk request to the monitoring cluster.\nThere is no queuing--in memory or persisted to disk--so any failure during the\nexport results in the loss of that batch of monitoring data. This design limits\nthe impact on {es} and the assumption is that the next pass will succeed.\n\nRouting monitoring data involves indexing it into the appropriate monitoring\nindices. Once the data is indexed, it exists in a monitoring index that, by\ndefault, is named with a daily index pattern. For {es} monitoring data, this is\nan index that matches `.monitoring-es-6-*`. From there, the data lives inside\nthe monitoring cluster and must be curated or cleaned up as necessary. If you do\nnot curate the monitoring data, it eventually fills up the nodes and the cluster\nmight fail due to lack of disk space.\n\nTIP: You are strongly recommended to manage the curation of indices and\nparticularly the monitoring indices. To do so, you can take advantage of the\n<<local-exporter-cleaner,cleaner service>> or\n{curator-ref-current}/index.html[Elastic Curator].\n\n//TO-DO: Add information about index lifecycle management https://github.com/elastic/x-pack-elasticsearch/issues/2814\n\nThere is also a disk watermark (known as the flood stage\nwatermark), which protects clusters from running out of disk space. When this\nfeature is triggered, it makes all indices (including monitoring indices)\nread-only until the issue is fixed and a user manually makes the index writeable\nagain. While an active monitoring index is read-only, it will naturally fail to\nwrite (index) new data and will continuously log errors that indicate the write\nfailure. For more information, see <<disk-based-shard-allocation>>.\n\n[discrete]\n[[es-monitoring-default-exporter]]\n=== Default exporters\n\nIf a node or cluster does not explicitly define an exporter, the following\ndefault exporter is used:\n\n[source,yaml]\n---------------------------------------------------\nxpack.monitoring.exporters.default_local: <1>\n  type: local\n---------------------------------------------------\n<1> The exporter name uniquely defines the exporter, but it is otherwise unused.\n    When you specify your own exporters, you do not need to explicitly overwrite\n    or reference `default_local`.\n\nIf another exporter is already defined, the default exporter is _not_ created.\nWhen you define a new exporter, if the default exporter exists, it is\nautomatically removed.\n\n[discrete]\n[[es-monitoring-templates]]\n=== Exporter templates and ingest pipelines\n\nBefore exporters can route monitoring data, they must set up certain {es}\nresources. These resources include templates and ingest pipelines. The\nfollowing table lists the templates that are required before an exporter can\nroute monitoring data:\n\n[options=\"header\"]\n|=======================\n| Template                    | Purpose\n| `.monitoring-alerts`        | All cluster alerts for monitoring data.\n| `.monitoring-beats`         | All Beats monitoring data.\n| `.monitoring-es`            | All {es} monitoring data.\n| `.monitoring-kibana`        | All {kib} monitoring data.\n| `.monitoring-logstash`      | All Logstash monitoring data.\n|=======================\n\nThe templates are ordinary {es} templates that control the default settings and\nmappings for the monitoring indices.\n\nBy default, monitoring indices are created daily (for example,\n`.monitoring-es-6-2017.08.26`). You can change the default date suffix for\nmonitoring indices with the `index.name.time_format` setting. You can use this\nsetting to control how frequently monitoring indices are created by a specific\n`http` exporter. You cannot use this setting with `local` exporters. For more\ninformation, see <<http-exporter-settings>>.\n\nWARNING: Some users create their own templates that match _all_ index patterns,\nwhich therefore impact the monitoring indices that get created. It is critical\nthat you do not disable `_source` storage for the monitoring indices. If you do,\n{kib} {monitor-features} do not work and you cannot visualize monitoring data\nfor your cluster.\n\nThe following table lists the ingest pipelines that are required before an\nexporter can route monitoring data:\n\n[options=\"header\"]\n|=======================\n| Pipeline               | Purpose\n| `xpack_monitoring_2`   | Upgrades X-Pack monitoring data coming from X-Pack\n5.0 - 5.4 to be compatible with the format used in 5.5 {monitor-features}.\n| `xpack_monitoring_6`   | A placeholder pipeline that is empty.\n|=======================\n\nExporters handle the setup of these resources before ever sending data. If\nresource setup fails (for example, due to security permissions), no data is sent\nand warnings are logged.\n\nNOTE: Empty pipelines are evaluated on the coordinating node during indexing and\nthey are ignored without any extra effort. This inherently makes them a safe,\nno-op operation.\n\nFor monitoring clusters that have disabled `node.ingest` on all nodes, it is\npossible to disable the use of the ingest pipeline feature. However, doing so\nblocks its purpose, which is to upgrade older monitoring data as our mappings\nimprove over time. Beginning in 6.0, the ingest pipeline feature is a\nrequirement on the monitoring cluster; you must have `node.ingest` enabled on at\nleast one node.\n\nWARNING: Once any node running 5.5 or later has set up the templates and ingest\npipeline on a monitoring cluster, you must use {kib} 5.5 or later to view all\nsubsequent data on the monitoring cluster. The easiest way to determine\nwhether this update has occurred is by checking for the presence of indices\nmatching `.monitoring-es-6-*` (or more concretely the existence of the\nnew pipeline). Versions prior to 5.5 used `.monitoring-es-2-*`.\n\nEach resource that is created by an exporter has a `version` field,\nwhich is used to determine whether the resource should be replaced. The `version`\nfield value represents the latest version of {monitor-features} that changed the\nresource. If a resource is edited by someone or something external to the\n{monitor-features}, those changes are lost the next time an automatic update\noccurs.\n"
}