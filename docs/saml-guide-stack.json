{
    "meta": {
        "timestamp": "2024-11-01T03:07:10.131288",
        "size": 50050,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/saml-guide-stack.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "saml-guide-stack",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[saml-guide-stack]]\n\n== Configuring SAML single-sign-on on the {stack}\n\nThe Elastic Stack supports SAML single-sign-on (SSO) into {kib}, using {es} as\na backend service. In SAML terminology, the Elastic Stack is operating as a\n_Service Provider_.\n\nThe other component that is needed to enable SAML single-sign-on is the\n_Identity Provider_, which is a service that handles your credentials and\nperforms that actual authentication of users.\n\nIf you are interested in configuring SSO into {kib}, then you will need to\nprovide {es} with information about your _Identity Provider_, and you will need\nto register the Elastic Stack as a known _Service Provider_ within that\nIdentity Provider. There are also a few configuration changes that are\nrequired in {kib} to activate the SAML authentication provider.\n\nNOTE: The SAML support in {kib} is designed on the expectation that it will be\nthe primary (or sole) authentication method for users of that {kib} instance.\nOnce you enable SAML authentication in {kib} it will affect all users who try\nto login. The <<saml-configure-kibana>> section provides more detail about how\nthis works.\n\n[[saml-guide-idp]]\n=== The identity provider\n\nThe Elastic Stack supports the SAML 2.0 _Web Browser SSO_ and the SAML\n2.0 _Single Logout_ profiles and can integrate with any Identity Provider (IdP)\nthat supports at least the SAML 2.0 _Web Browser SSO Profile_.\nIt has been tested with a number of popular IdP implementations, such as\nhttps://www.elastic.co/blog/how-to-configure-elasticsearch-saml-authentication-with-adfs[Microsoft Active Directory Federation Services (ADFS)],\nhttps://www.elastic.co/blog/saml-based-single-sign-on-with-elasticsearch-and-azure-active-directory[Azure Active Directory (AAD)],\nand https://www.elastic.co/blog/how-to-set-up-okta-saml-login-kibana-elastic-cloud[Okta].\n\nThis guide assumes that you have an existing IdP and wish to add {kib} as a\nService Provider.\n\nThe Elastic Stack uses a standard SAML _metadata_ document, in XML format that\ndefines the capabilities and features of your IdP. You should be able to\ndownload or generate such a document within your IdP administration interface.\n\nDownload the IdP metadata document and store it within the `config` directory on\neach {es} node. For the purposes of this guide, we will assume that you are\nstoring it as `config/saml/idp-metadata.xml`.\n\nThe IdP will have been assigned an identifier (_EntityID_ in SAML terminology)\nwhich is most commonly expressed in _Uniform Resource Identifier_ (URI) form.\nYour admin interface may tell you what this is, or you might need to\nread the metadata document to find it - look for the `entityID` attribute on the\n`EntityDescriptor` element.\n\nMost IdPs will provide an appropriate metadata file with all the features that\nthe Elastic Stack requires, and should only require the configuration steps\ndescribed below. For completeness sake, the minimum requirements that the Elastic\nStack has for the IdP's metadata are:\n\n- An `<EntityDescriptor>` with an `entityID` that matches the {es}\n  <<saml-create-realm, configuration>>\n- An `<IDPSSODescriptor>` that supports the SAML 2.0 protocol\n  (`urn:oasis:names:tc:SAML:2.0:protocol`).\n- At least one `<KeyDescriptor>` that is configured for _signing_ (that is, it\n  has `use=\"signing\"` or leaves the `use` unspecified)\n- A `<SingleSignOnService>` with binding of HTTP-Redirect\n  (`urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect`)\n- If you wish to support <<saml-logout, Single Logout>>, a `<SingleLogoutService>`\n  with binding of HTTP-Redirect\n  (`urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect`)\n\nThe Elastic Stack requires that all messages from the IdP are signed.\nFor authentication `<Response>` messages, the signature may be applied to either\nthe response itself, or to the individual assertions.\nFor `<LogoutRequest>` messages, the message itself must be signed, and the\nsignature should be provided as a URL parameter, as required by the HTTP-Redirect\nbinding.\n\n[[saml-elasticsearch-authentication]]\n=== Configure {es} for SAML authentication\n\nThere are five configuration steps to enable SAML authentication in {es}:\n\n. <<saml-enable-http,Enable SSL/TLS for HTTP>>\n. <<saml-enable-token,Enable the Token Service>>\n. <<saml-create-realm,Create one or more SAML realms>>\n. <<saml-role-mapping,Configure role mappings>>\n. Generate a SAML Metadata file for use by your Identity Provider _(optional)_\n\n[[saml-enable-http]]\n==== Enable TLS for HTTP\n\nIf your {es} cluster is operating in production mode, then you must\nconfigure the HTTP interface to use SSL/TLS before you can enable SAML\nauthentication.\n\nFor more information, see\n<<encrypt-http-communication>>.\n\n[[saml-enable-token]]\n==== Enable the token service\n\nThe {es} SAML implementation makes use of the {es} Token Service. This service\nis automatically enabled if you configure TLS on the HTTP interface, and can be\nexplicitly configured by including the following in your `elasticsearch.yml` file:\n\n[source, yaml]\n------------------------------------------------------------\nxpack.security.authc.token.enabled: true\n------------------------------------------------------------\n\n[[saml-create-realm]]\n==== Create a SAML realm\n\nSAML authentication is enabled by configuring a SAML realm within the\nauthentication chain for {es}.\n\nThis realm has a few mandatory settings, and a number of optional settings.\nThe available settings are described in detail in <<security-settings>>. For\nexample, <<ref-saml-settings>>, <<ref-saml-signing-settings>>,\n<<ref-saml-encryption-settings>>, <<ref-saml-ssl-settings>>.\nThis guide will walk you through the most common settings.\n\nCreate a realm by adding the following to your `elasticsearch.yml`\nconfiguration file. Each configuration value is explained below.\n\n[source, yaml]\n------------------------------------------------------------\nxpack.security.authc.realms.saml.saml1:\n  order: 2\n  idp.metadata.path: saml/idp-metadata.xml\n  idp.entity_id: \"https://sso.example.com/\"\n  sp.entity_id:  \"https://kibana.example.com/\"\n  sp.acs: \"https://kibana.example.com/api/security/saml/callback\"\n  sp.logout: \"https://kibana.example.com/logout\"\n  attributes.principal: \"urn:oid:0.9.2342.19200300.100.1.1\"\n  attributes.groups: \"urn:oid:1.3.6.1.4.1.5923.1.5.1.\"\n------------------------------------------------------------\n\nIMPORTANT: SAML is used when authenticating via {kib}, but it is not an\neffective means of authenticating directly to the {es} REST API. For this reason\nwe recommend that you include at least one additional realm such as the\n<<native-realm, native realm>> in your authentication chain for use by API\nclients.\n\nThe configuration values used in the example above are:\n\nxpack.security.authc.realms.saml.saml1::\n    This defines a new `saml` authentication realm named \"saml1\".\n    See <<realms>> for more explanation of realms.\n\norder::\n    The order of the realm within the realm chain. Realms with a lower order\n    have highest priority and are consulted first. We recommend giving\n    password-based realms such as file, native, LDAP, and Active Directory the\n    lowest order (highest priority), followed by SSO realms such as SAML and\n    OpenID Connect. If you have multiple realms of the same type, give the most\n    frequently accessed realm the lowest order to have it consulted first.\n\nidp.metadata.path::\n    This is the path to the metadata file that you saved for your Identity Provider.\n    The path that you enter here is relative to your `config/` directory.\n    {es} will automatically monitor this file for changes and will\n    reload the configuration whenever it is updated.\n\nidp.entity_id::\n    This is the identifier (SAML EntityID) that your IdP uses.\n    It should match the `entityID` attribute within the metadata file.\n\nsp.entity_id::\n    This is a unique identifier for your {kib} instance, expressed as a URI.\n    You will use this value when you add {kib} as a service provider within your IdP.\n    We recommend that you use the base URL for your {kib} instance as the entity ID.\n\nsp.acs::\n    The _Assertion Consumer Service_ (ACS) endpoint is the URL within {kib} that accepts\n    authentication messages from the IdP.\n    This ACS endpoint supports the SAML HTTP-POST binding only.\n    It must be a URL that is accessible from the web browser of the user who is\n    attempting to login to {kib}, it does not need to be directly accessible by {es}\n    or the IdP.\n    The correct value may vary depending on how you have installed {kib} and\n    whether there are any proxies involved, but it will typically be\n    +$\\{kibana-url}/api/security/saml/callback+ where _$\\{kibana-url}_ is the base URL for\n    your {kib} instance.\n\nsp.logout::\n    This is the URL within {kib} that accepts logout messages from the IdP.\n    Like the `sp.acs` URL, it must be accessible from the web browser, but does\n    not need to be directly accessible by {es} or the IdP. The correct value may\n    vary depending on how you have installed {kib} and whether there are any\n    proxies involved, but it will typically be +$\\{kibana-url}/logout+ where\n    _$\\{kibana-url}_ is the base URL for your {kib} instance.\n\nattributes.principal:: See <<saml-attributes-mapping>>.\nattributes.groups:: See <<saml-attributes-mapping>>.\n\n[[saml-attributes-mapping]]\n==== Attribute mapping\n\nWhen a user connects to {kib} through your Identity Provider, the Identity\nProvider will supply a SAML Assertion about the user. The assertion will contain\nan _Authentication Statement_ indicating that the user has successfully\nauthenticated to the IdP and one or more _Attribute Statements_ that will\ninclude _Attributes_ for the user.\n\nThese attributes may include such things as:\n\n- the user's username\n- the user's email address\n- the user's groups or roles\n\nAttributes in SAML are named using a URI such as\n`urn:oid:0.9.2342.19200300.100.1.1` or\n`http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn`, and have one or\nmore values associated with them.\n\nThese attribute identifiers vary between IdPs, and most IdPs offer ways to\ncustomize the URIs and their associated value.\n\n{es} uses these attributes to infer information about the user who has\nlogged in, and they can be used for role mapping (below).\n\nIn order for these attributes to be useful, {es} and the IdP need to have a\ncommon value for the names of the attributes. This is done manually, by\nconfiguring the IdP and the SAML realm to use the same URI name for\neach logical user attribute.\n\nThe recommended steps for configuring these SAML attributes are as follows:\n\n. Consult your IdP to see what user attributes it can provide.\n  This varies greatly between providers, but you should be able to obtain a list\n  from the documentation, or from your local admin.\n\n. Read through the list of <<saml-es-user-properties, user properties>> that {es}\n  supports, and decide which of them are useful to you, and can be provided by\n  your IdP. At a _minimum_, the `principal` attribute is required.\n\n. Configure your IdP to \"release\" those attributes to your {kib} SAML service\n  provider. This process varies by provider - some will provide a user interface\n  for this, while others may require that you edit configuration files.\n  Usually the IdP (or your local administrator) will have suggestions about what\n  URI to use for each attribute. You can simply accept those suggestions, as the\n  {es} service is entirely configurable and does not require that any specific\n  URIs are used.\n\n. Configure the SAML realm in {es} to associate the {es} user properties (see\n  <<saml-es-user-properties, the listing>> below), to the URIs that you configured\n  in your IdP. In the example above, we have configured the `principal` and\n  `groups` attributes.\n\n[[saml-attribute-mapping-nameid]]\n===== Special attribute names\n\nIn general, {es} expects that the configured value for an attribute will be a\nURI such as `urn:oid:0.9.2342.19200300.100.1.1`, however there are some\nadditional names that can be used:\n\n`nameid`::\n    This uses the SAML `NameID` value (all leading and trailing whitespace removed)\n    instead of a SAML attribute. SAML\n    `NameID` elements are an optional, but frequently provided, field within a\n    SAML Assertion that the IdP may use to identify the Subject of that\n    Assertion. In some cases the `NameID` will relate to the user's login\n    identifier (username) within the IdP, but in many cases they will be\n    internally generated identifiers that have no obvious meaning outside\n    of the IdP.\n\n`nameid:persistent`::\n    This uses the SAML `NameID` value (all leading and trailing whitespace removed),\n    but only if the NameID format is\n    `urn:oasis:names:tc:SAML:2.0:nameid-format:persistent`.\n    A SAML `NameID` element has an optional `Format` attribute that indicates\n    the semantics of the provided name. It is common for IdPs to be configured\n    with \"transient\" NameIDs that present a new identifier for each session.\n    Since it is rarely useful to use a transient NameID as part of an attribute\n    mapping, the \"nameid:persistent\" attribute name can be used as a safety\n    mechanism that will cause an error if you attempt to map from a `NameID`\n    that does not have a persistent value.\n\nNOTE: Identity Providers can be either statically configured to release a `NameID`\nwith a specific format, or they can be configured to try to conform with the\nrequirements of the SP. The SP declares its requirements as part of the\nAuthentication Request, using an element which is called the `NameIDPolicy`. If\nthis is needed, you can set the relevant <<ref-saml-settings, settings>> named\n`nameid_format` in order to request that the IdP releases a `NameID` with a\nspecific format.\n\n_friendlyName_::\n    A SAML attribute may have a _friendlyName_ in addition to its URI based name.\n    For example the attribute with a name of `urn:oid:0.9.2342.19200300.100.1.1`\n    might also have a friendlyName of `uid`.\n    You may use these friendly names within an attribute mapping, but it is\n    recommended that you use the URI based names, as friendlyNames are neither\n    standardized or mandatory.\n\nThe example below configures a realm to use a persistent nameid for the principal,\nand the attribute with the friendlyName \"roles\" for the user's groups.\n\n[source, yaml]\n------------------------------------------------------------\nxpack.security.authc.realms.saml.saml1:\n  order: 2\n  idp.metadata.path: saml/idp-metadata.xml\n  idp.entity_id: \"https://sso.example.com/\"\n  sp.entity_id:  \"https://kibana.example.com/\"\n  sp.acs: \"https://kibana.example.com/api/security/saml/callback\"\n  attributes.principal: \"nameid:persistent\"\n  attributes.groups: \"roles\"\n  nameid_format: \"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\"\n------------------------------------------------------------\n\n[[saml-es-user-properties]]\n===== {es} user properties\n\nThe {es} SAML realm can be configured to map SAML `attributes` to the\nfollowing properties on the authenticated user:\n\nprincipal:: _(Required)_\n    This is the _username_ that will be applied to a user that authenticates\n    against this realm.\n    The `principal` appears in places such as the {es} audit logs.\n\ngroups:: _(Recommended)_\n    If you wish to use your IdP's concept of groups or roles as the basis for a\n    user's {es} privileges, you should map them with this attribute.\n    The `groups` are passed directly to your\n    <<saml-role-mapping, role mapping rules>>.\n+\n[NOTE]\n====\nSome IdPs are configured to send the `groups` list as a single value, comma-separated\nstring. To map this SAML attribute to the `attributes.groups` setting in the {es}\nrealm, you can configure a string delimiter using the `attribute_delimiters.group`\nsetting.\n\nFor example, splitting the SAML attribute value\n`engineering,elasticsearch-admins,employees` on a delimiter value of `,` will\nresult in `engineering`, `elasticsearch-admins`, and `employees` as the list of\ngroups for the user.\n====\n\nname:: _(Optional)_ The user's full name.\nmail:: _(Optional)_ The user's email address.\ndn:: _(Optional)_ The user's X.500 _Distinguished Name_.\n\n===== Extracting partial values from SAML attributes\n\nThere are some occasions where the IdP's attribute may contain more information\nthan you wish to use within {es}. A common example of this is one where the\nIdP works exclusively with email addresses, but you would like the user's\n`principal` to use the _local-name_ part of the email address.\nFor example if their email address was `james.wong@staff.example.com`, then you\nwould like their principal to simply be `james.wong`.\n\nThis can be achieved using the `attribute_patterns` setting in the {es}\nrealm, as demonstrated in the realm configuration below:\n\n[source, yaml]\n------------------------------------------------------------\nxpack.security.authc.realms.saml.saml1:\n  order: 2\n  idp.metadata.path: saml/idp-metadata.xml\n  idp.entity_id: \"https://sso.example.com/\"\n  sp.entity_id:  \"https://kibana.example.com/\"\n  sp.acs: \"https://kibana.example.com/api/security/saml/callback\"\n  attributes.principal: \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\"\n  attribute_patterns.principal: \"^([^@]+)@staff\\\\.example\\\\.com$\"\n------------------------------------------------------------\n\nIn this case, the user's `principal` is mapped from an email attribute, but a\nregular expression is applied to the value before it is assigned to the user.\nIf the regular expression matches, then the result of the first group is used as\neffective value. If the regular expression does not match then the attribute\nmapping fails.\n\nIn this example, the email address must belong to the `staff.example.com` domain,\nand then the local-part (anything before the `@`) is used as the principal.\nAny users who try to login using a different email domain will fail because the\nregular expression will not match against their email address, and thus their\nprincipal attribute - which is mandatory - will not be populated.\n\nIMPORTANT: Small mistakes in these regular expressions can have significant\nsecurity consequences. For example, if we accidentally left off the trailing\n`$` from the example above, then we would match any email address where the\ndomain starts with `staff.example.com`, and this would accept an email\naddress such as `admin@staff.example.com.attacker.net`. It is important that\nyou make sure your regular expressions are as precise as possible so that\nyou do not inadvertently open an avenue for user impersonation attacks.\n\n[[req-authn-context]]\n==== Requesting specific authentication methods\n\nIt is sometimes necessary for a SAML SP to be able to impose specific\nrestrictions regarding the authentication that will take place at an IdP,\nin order to assess the level of confidence that it can place in\nthe corresponding authentication response. The restrictions might have to do\nwith the authentication method (password, client certificates, etc), the\nuser identification method during registration, and other details. {es} implements\nhttps://docs.oasis-open.org/security/saml/v2.0/saml-authn-context-2.0-os.pdf[SAML 2.0 Authentication Context], which can be used for this purpose as defined in SAML 2.0 Core\nSpecification.\n\nIn short, the SAML SP defines a set of Authentication Context Class Reference\nvalues, which describe the restrictions to be imposed on the IdP, and sends these\nin the Authentication Request. The IdP attempts to grant these restrictions.\nIf it cannot grant them, the authentication attempt fails. If the user is\nsuccessfully authenticated, the Authentication Statement of the SAML Response\ncontains an indication of the restrictions that were satisfied.\n\nYou can define the Authentication Context Class Reference values by using the `req_authn_context_class_ref` option in the SAML realm configuration. See\n<<ref-saml-settings>>.\n\n{es} supports only the `exact` comparison method for the Authentication Context.\nWhen it receives the Authentication Response from the IdP, {es} examines the\nvalue of the Authentication Context Class Reference that is part of the\nAuthentication Statement of the SAML Assertion. If it matches one of the\nrequested values, the authentication is considered successful. Otherwise, the\nauthentication attempt fails.\n\n[[saml-logout]]\n==== SAML logout\n\nThe SAML protocol supports the concept of Single Logout (SLO).\nThe level of support for SLO varies between Identity Providers.\nYou should consult the documentation for your IdP to determine what Logout\nservices it offers.\n\nBy default the Elastic Stack will support SAML SLO if the following are true:\n\n- Your IdP metadata specifies that the IdP offers a SLO service\n- Your IdP releases a NameID in the subject of the SAML assertion that it issues for your users\n- You configure `sp.logout`\n- The setting `idp.use_single_logout` is not `false`\n\n===== IdP SLO service\n\nOne of the values that {es} reads from the IdP's SAML metadata is the\n`<SingleLogoutService>`. In order for Single Logout to work with the Elastic\nstack, {es} requires that this exist and support a binding of\n`urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect`.\n\nThe Elastic Stack will send both `<LogoutRequest>` and `<LogoutResponse>`\nmessages to this service as appropriate.\n\n===== The sp.logout setting\n\nThe {es} realm setting `sp.logout` specifies a URL in {kib} to which the IdP can\nsend both `<LogoutRequest>` and `<LogoutResponse>` messages. This service uses\nthe SAML HTTP-Redirect binding.\n\n{es} will process `<LogoutRequest>` messages, and perform a global signout that\ninvalidates any existing {es} security tokens that are associated with the\nprovided SAML session.\n\nIf you do not configure a value for `sp.logout`, {es} will refuse all\n`<LogoutRequest>` messages.\n\nNOTE: It is common for IdPs to require that `LogoutRequest` messages be signed,\nso you may need to configure <<saml-enc-sign,signing credentials>>.\n\n===== The idp.use_single_logout setting\n\nIf your IdP provides a `<SingleLogoutService>` but you do not wish to use it,\nyou can configure `idp.use_single_logout: false` in your SAML realm, and {es}\nwill ignore the SLO service that your IdP provides. In this case, when a user\nlogs out of {kib} it will invalidate their {es} session (security token), but\nwill not perform any logout at the IdP.\n\n===== Using {kib} without single logout\n\nIf your IdP does not support Single Logout, or you choose not to use it, then\n{kib} will perform a \"local logout\" only.\n\nThis means that {kib} will invalidate the session token it is using to\ncommunicate with {es}, but will not be able to perform any sort of invalidation\nof the Identity Provider session. In most cases this will mean that {kib} users\nare still considered to be logged in to the IdP. Consequently, if the user\nnavigates to the {kib} landing page, they will be automatically reauthenticated,\nand will commence a new {kib} session without needing to enter any credentials.\n\nThe possible solutions to this problem are:\n\n- Ask your IdP administrator or vendor to provide a Single Logout service\n- If your Idp does provide a Single Logout Service, make sure it is included in\n  the IdP metadata file, and do _not_ set `idp.use_single_logout` to `false`.\n- Advise your users to close their browser after logging out of {kib}\n- Enable the `force_authn` setting on your SAML realm. This setting causes the\n  Elastic Stack to request fresh authentication from the IdP every time a user\n  attempts to log in to {kib}.\n  This setting defaults to `false` because it can be a more cumbersome user\n  experience, but it can also be an effective protection to stop users\n  piggy-backing on existing IdP sessions.\n\n\n[[saml-enc-sign]]\n==== Encryption and signing\n\nThe Elastic Stack supports generating signed SAML messages (for authentication\nand/or logout), verifying signed SAML messages from the IdP (for both\nauthentication and logout) and can process encrypted content.\n\nYou can configure {es} for signing, encryption or both, with the same\nor separate keys used for each of those.\n\nThe Elastic Stack uses X.509 certificates with RSA private keys for SAML\ncryptography. These keys can be generated using any standard SSL tool, including\nthe `elasticsearch-certutil` tool.\n\nYour IdP may require that the Elastic Stack have a cryptographic key for signing\nSAML messages, and that you provide the corresponding signing certificate within\nthe Service Provider configuration (either within the Elastic Stack SAML\nmetadata file or manually configured within the IdP administration interface).\nWhile most IdPs do not expected authentication requests to be signed, it is\ncommonly the case that signatures are required for logout requests. Your IdP\nwill validate these signatures against the signing certificate that has been\nconfigured for the Elastic Stack Service Provider.\n\nEncryption certificates are rarely needed, but the Elastic Stack supports them\nfor cases where IdPs or local policies mandate their use.\n\n===== Generating certificates and keys\n\n{es} supports certificates and keys in either PEM, PKCS#12 or JKS format.\nSome Identity Providers are more restrictive in the formats they support, and\nwill require you to provide the certificates as a file in a particular format.\nYou should consult the documentation for your IdP to determine what formats they\nsupport. Since PEM format is the most commonly supported format, the examples\nbelow will generate certificates in that format.\n\nUsing the <<certutil,`elasticsearch-certutil` tool>>, you can generate a\nsigning certificate with the following command:\n\n[source, sh]\n--------------------------------------------------\nbin/elasticsearch-certutil cert --self-signed --pem --days 1100 --name saml-sign --out saml-sign.zip\n--------------------------------------------------\n\nThis will\n\n- generate a certificate and key pair (the `cert` subcommand)\n- create the files in PEM format (`-pem` option)\n- generate a certificate that is valid for 3 years (`-days 1100`)\n- name the certificate `saml-sign` (`-name` option)\n- save the certificate and key in the `saml-sign.zip` file (`-out` option)\n\nThe generated zip archive will contain 3 files:\n\n- `saml-sign.crt`, the public certificate to be used for signing\n- `saml-sign.key`, the private key for the certificate\n- `ca.crt`, a CA certificate that is not need, and can be ignored.\n\nEncryption certificates can be generated with the same process.\n\n===== Configuring {es} for signing\n\nBy default, {es} will sign _all_ outgoing SAML messages if a signing\nkey has been configured.\n\nIf you wish to use *PEM formatted* keys and certificates for signing, then\nyou should configure the following settings on the SAML realm:\n\n`signing.certificate`::\nThe path to the PEM formatted certificate file. e.g. `saml/saml-sign.crt`\n\n`signing.key`::\nThe path to the PEM formatted key file. e.g. `saml/saml-sign.key`\n\n`signing.secure_key_passphrase`::\nThe passphrase for the key, if the file is encrypted. This is a\n<<secure-settings,secure setting>> that must be set with the\n`elasticsearch-keystore` tool.\n\nIf you wish to use *PKCS#12 formatted* files or a *Java Keystore* for\nsigning, then you should configure the following settings on the SAML realm:\n\n`signing.keystore.path`::\nThe path to the PKCS#12 or JKS keystore. e.g. `saml/saml-sign.p12`\n\n`signing.keystore.alias`::\nThe alias of the key within the keystore. e.g. `signing-key`\n\n`signing.keystore.secure_password`::\nThe passphrase for the keystore, if the file is encrypted. This is a\n<<secure-settings,secure setting>> that must be set with the\n`elasticsearch-keystore` tool.\n\nIf you wish to sign some, but not all outgoing *SAML messages*, then you\nshould configure the following setting on the SAML realm:\n\n`signing.saml_messages`::\nA list of message types to sign. A message type is identified by the\n_local name_ of the XML element used for the message. Supported values\nare: `AuthnRequest`, `LogoutRequest` and `LogoutResponse`.\n\n===== Configuring {es} for encrypted messages\n\nThe {es} {security-features} support a single key for message decryption. If a\nkey is configured, then {es} attempts to use it to decrypt\n`EncryptedAssertion` and `EncryptedAttribute` elements in Authentication\nresponses, and `EncryptedID` elements in Logout requests.\n\n{es} rejects any SAML message that contains an `EncryptedAssertion`\nthat cannot be decrypted.\n\nIf an `Assertion` contains both encrypted and plain-text attributes, then\nfailure to decrypt the encrypted attributes will not cause an automatic\nrejection. Rather, {es} processes the available plain-text attributes\n(and any `EncryptedAttributes` that could be decrypted).\n\nIf you wish to use *PEM formatted* keys and certificates for SAML encryption,\nthen you should configure the following settings on the SAML realm:\n\n`encryption.certificate`::\nThe path to the PEM formatted certificate file. e.g. `saml/saml-crypt.crt`\n\n`encryption.key`::\nThe path to the PEM formatted key file. e.g. `saml/saml-crypt.key`\n\n`encryption.secure_key_passphrase`::\nThe passphrase for the key, if the file is encrypted. This is a\n<<secure-settings,secure setting>> that must be set with the\n`elasticsearch-keystore` tool.\n\nIf you wish to use *PKCS#12 formatted* files or a *Java Keystore* for SAML\nencryption, then you should configure the following settings on the SAML realm:\n\n`encryption.keystore.path`::\nThe path to the PKCS#12 or JKS keystore. e.g. `saml/saml-crypt.p12`\n\n`encryption.keystore.alias`::\nThe alias of the key within the keystore. e.g. `encryption-key`\n\n`encryption.keystore.secure_password`::\nThe passphrase for the keystore, if the file is encrypted. This is a\n<<secure-settings,secure setting>> that must be set with the\n`elasticsearch-keystore` tool.\n\n[[saml-sp-metadata]]\n=== Generating SP metadata\n\nSome Identity Providers support importing a metadata file from the Service\nProvider. This will automatically configure many of the integration options\nbetween the IdP and the SP.\n\nThe {stack} supports generating such a metadata file using the\n<<saml-metadata,`bin/elasticsearch-saml-metadata` command>> or the\n<<security-api-saml-sp-metadata,SAML service provider metadata API>>.\n\nYou can generate the SAML metadata by issuing the API request to {es} and store\nit as an XML file using tools like `jq`. For example, the following command\ngenerates the metadata for the SAML realm `realm1` and saves it to a\n`metadata.xml` file:\n\n[\"source\",\"console\"]\n--\ncurl -u user_name:password  -X GET http://localhost:9200/_security/saml/metadata/saml1 -H 'Content-Type: application/json' | jq -r '.[]' > metadata.xml\n--\n\n[[saml-role-mapping]]\n=== Configuring role mappings\n\nWhen a user authenticates using SAML, they are identified to the Elastic Stack,\nbut this does not automatically grant them access to perform any actions or\naccess any data.\n\nYour SAML users cannot do anything until they are assigned roles. This can be done\nthrough either the\n<<security-api-put-role-mapping,add role mapping API>> or with\n<<authorization_realms,authorization realms>>.\n\nNOTE: You cannot use <<mapping-roles-file,role mapping files>>\nto grant roles to users authenticating via SAML.\n\nThis is an example of a simple role mapping that grants the `example_role` role\nto any user who authenticates against the `saml1` realm:\n\n[source,console]\n--------------------------------------------------\nPUT /_security/role_mapping/saml-example\n{\n  \"roles\": [ \"example_role\" ], <1>\n  \"enabled\": true,\n  \"rules\": {\n    \"field\": { \"realm.name\": \"saml1\" }\n  }\n}\n--------------------------------------------------\n\n<1> The `example_role` role is *not* a builtin Elasticsearch role.\nThis example assumes that you have created a custom role of your own, with\nappropriate access to your <<roles-indices-priv,data streams, indices,>> and\n{kibana-ref}/kibana-privileges.html#kibana-feature-privileges[Kibana features].\n\nThe attributes that are mapped via the realm configuration are used to process\nrole mapping rules, and these rules determine which roles a user is granted.\n\nThe user fields that are provided to the role\nmapping are derived from the SAML attributes as follows:\n\n- `username`: The `principal` attribute\n- `dn`: The `dn` attribute\n- `groups`: The `groups` attribute\n- `metadata`: See <<saml-user-metadata>>\n\nFor more information, see <<mapping-roles>> and\n<<security-role-mapping-apis>>.\n\nIf your IdP has the ability to provide groups or roles to Service Providers,\nthen you should map this SAML attribute to the `attributes.groups` setting in\nthe {es} realm, and then make use of it in a role mapping as per the example\nbelow.\n\nThis mapping grants the {es} `finance_data` role, to any users who authenticate\nvia the `saml1` realm with the `finance-team` group.\n\n[source,console]\n--------------------------------------------------\nPUT /_security/role_mapping/saml-finance\n{\n  \"roles\": [ \"finance_data\" ],\n  \"enabled\": true,\n  \"rules\": { \"all\": [\n        { \"field\": { \"realm.name\": \"saml1\" } },\n        { \"field\": { \"groups\": \"finance-team\" } } <1>\n  ] }\n}\n--------------------------------------------------\n<1> The `groups` attribute supports using wildcards (`*`). Refer to the\n<<security-api-put-role-mapping-example,create or update role mappings API>> for\nmore information.\n\nIf your users also exist in a repository that can be directly accessed by {es}\n(such as an LDAP directory) then you can use\n<<authorization_realms, authorization realms>> instead of role mappings.\n\nIn this case, you perform the following steps:\n1. In your SAML realm, assigned a SAML attribute to act as the lookup userid,\n   by configuring the `attributes.principal` setting.\n2. Create a new realm that can lookup users from your local repository (e.g. an\n   `ldap` realm)\n3. In your SAML realm, set `authorization_realms` to the name of the realm you\n   created in step 2.\n\n[[saml-user-metadata]]\n=== User metadata\n\nBy default users who authenticate via SAML will have some additional metadata\nfields.\n\n- `saml_nameid` will be set to the value of the `NameID` element in the SAML\n  authentication response\n- `saml_nameid_format` will be set to the full URI of the NameID's `format`\n  attribute\n- Every SAML Attribute that is provided in the authentication response\n  (regardless of whether it is mapped to an {es} user property), will be added\n  as the metadata field `saml(name)` where \"name\" is the full URI name of the\n  attribute. For example `saml(urn:oid:0.9.2342.19200300.100.1.3)`.\n- For every SAML Attribute that has a _friendlyName_, will also be added as the\n  metadata field `saml_friendlyName` where \"name\" is the full URI name of the\n  attribute. For example `saml_mail`.\n\nThis behaviour can be disabled by adding `populate_user_metadata: false` to as\na setting in the saml realm.\n\n[[saml-configure-kibana]]\n=== Configuring {kib}\n\nSAML authentication in {kib} requires a small number of additional settings\nin addition to the standard {kib} security configuration. The\n{kibana-ref}/using-kibana-with-security.html[{kib} security documentation]\nprovides details on the available configuration options that you can apply.\n\nIn particular, since your {es} nodes have been configured to use TLS on the HTTP\ninterface, you must configure {kib} to use a `https` URL to connect to {es}, and\nyou may need to configure `elasticsearch.ssl.certificateAuthorities` to trust\nthe certificates that {es} has been configured to use.\n\nSAML authentication in {kib} is subject to the following timeout settings in\n`kibana.yml`:\n\n- {kibana-ref}/xpack-security-session-management.html#session-idle-timeout[`xpack.security.session.idleTimeout`]\n- {kibana-ref}/xpack-security-session-management.html#session-lifespan[`xpack.security.session.lifespan`]\n\nYou may want to adjust these timeouts based on your security requirements.\n\nThe three additional settings that are required for SAML support are shown below:\n\n[source, yaml]\n------------------------------------------------------------\nxpack.security.authc.providers:\n  saml.saml1:\n    order: 0\n    realm: \"saml1\"\n------------------------------------------------------------\n\nThe configuration values used in the example above are:\n\n`xpack.security.authc.providers`::\nAdd `saml` provider to instruct {kib} to use SAML SSO as the authentication\nmethod.\n\n`xpack.security.authc.providers.saml.<provider-name>.realm`::\nSet this to the name of the SAML realm that you have used in your <<saml-create-realm,\nElasticsearch realm configuration>>, for instance: `saml1`\n\n[[saml-kibana-basic]]\n==== Supporting SAML and basic authentication in {kib}\n\nThe SAML support in {kib} is designed on the expectation that it will be the\nprimary (or sole) authentication method for users of that {kib} instance.\nHowever, it is possible to support both SAML and Basic authentication within a\nsingle {kib} instance by setting `xpack.security.authc.providers` as per the\nexample below:\n\n[source, yaml]\n------------------------------------------------------------\nxpack.security.authc.providers:\n  saml.saml1:\n    order: 0\n    realm: \"saml1\"\n  basic.basic1:\n    order: 1\n------------------------------------------------------------\n\nIf {kib} is configured in this way, users are presented with a choice\nat the Login Selector UI. They log in with SAML or they provide a username and password and rely on one\nof the other security realms within {es}. Only users who have\na username and password for a configured {es} authentication realm can\nlog in via {kib} login form.\n\nAlternatively, when the `basic` authentication provider is enabled, you can\nplace a reverse proxy in front of {kib}, and configure it to send a basic\nauthentication header (`Authorization: Basic ....`) for each request.\nIf this header is present and valid, {kib} will not initiate the SAML\nauthentication process.\n\n==== Operating multiple {kib} instances\n\nIf you wish to have multiple {kib} instances that authenticate against the same\n{es} cluster, then each {kib} instance that is configured for SAML authentication,\nrequires its own SAML realm.\n\nEach SAML realm must have its own unique Entity ID (`sp.entity_id`), and its own\n_Assertion Consumer Service_ (`sp.acs`). Each {kib} instance will be mapped to\nthe correct realm by looking up the matching `sp.acs` value.\n\nThese realms may use the same Identity Provider, but are not required to.\n\nThe following is example of having 3 difference {kib} instances, 2 of which\nuse the same internal IdP, and another which uses a different IdP.\n\n[source, yaml]\n------------------------------------------------------------\nxpack.security.authc.realms.saml.saml_finance:\n  order: 2\n  idp.metadata.path: saml/idp-metadata.xml\n  idp.entity_id: \"https://sso.example.com/\"\n  sp.entity_id:  \"https://kibana.finance.example.com/\"\n  sp.acs: \"https://kibana.finance.example.com/api/security/saml/callback\"\n  sp.logout: \"https://kibana.finance.example.com/logout\"\n  attributes.principal: \"urn:oid:0.9.2342.19200300.100.1.1\"\n  attributes.groups: \"urn:oid:1.3.6.1.4.1.5923.1.5.1.\"\nxpack.security.authc.realms.saml.saml_sales:\n  order: 3\n  idp.metadata.path: saml/idp-metadata.xml\n  idp.entity_id: \"https://sso.example.com/\"\n  sp.entity_id:  \"https://kibana.sales.example.com/\"\n  sp.acs: \"https://kibana.sales.example.com/api/security/saml/callback\"\n  sp.logout: \"https://kibana.sales.example.com/logout\"\n  attributes.principal: \"urn:oid:0.9.2342.19200300.100.1.1\"\n  attributes.groups: \"urn:oid:1.3.6.1.4.1.5923.1.5.1.\"\nxpack.security.authc.realms.saml.saml_eng:\n  order: 4\n  idp.metadata.path: saml/idp-external.xml\n  idp.entity_id: \"https://engineering.sso.example.net/\"\n  sp.entity_id:  \"https://kibana.engineering.example.com/\"\n  sp.acs: \"https://kibana.engineering.example.com/api/security/saml/callback\"\n  sp.logout: \"https://kibana.engineering.example.com/logout\"\n  attributes.principal: \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn\"\n------------------------------------------------------------\n\nIt is possible to have one or more {kib} instances that use SAML, while other\ninstances use basic authentication against another realm type (e.g.\n<<native-realm, Native>> or <<ldap-realm, LDAP>>).\n\n[[saml-troubleshooting]]\n=== Troubleshooting SAML Realm Configuration\n\nThe SAML 2.0 specification offers a lot of options and flexibility for the implementers\nof the standard which in turn adds to the complexity and the number of configuration options\nthat are available both at the Service Provider (Elastic Stack) and at the Identity Provider.\nAdditionally, different security domains have different security requirements that need\nspecific configuration to be satisfied.\nA conscious effort has been made to mask this complexity with sane defaults and the detailed\ndocumentation above but in case you encounter issues while configuring a SAML realm, you can\nlook through our <<trb-security-saml,SAML troubleshooting documentation>> that has\nsuggestions and resolutions for common issues.\n\n[[saml-no-kibana]]\n=== SAML without {kib}\n\nThe SAML realm in {es} is designed to allow users to authenticate to {kib} and as\nsuch, most of the parts of the guide above make the assumption that {kib} is used.\nThis section describes how a custom web application could use the relevant SAML\nREST APIs in order to authenticate the users to {es} with SAML.\n\nNOTE: This section assumes that the reader is familiar with the SAML 2.0 standard\nand more specifically with the SAML 2.0 Web Browser Single Sign On profile.\n\nSingle sign-on realms such as OpenID Connect and SAML make use of the Token Service in\n{es} and in principle exchange a SAML or OpenID Connect Authentication response for\nan {es} access token and a refresh token. The access token is used as credentials\nfor subsequent calls to {es}. The refresh token enables the user to get new {es}\naccess tokens after the current one expires.\n\n[[saml-no-kibana-realm]]\n==== SAML realm\n\nYou must create a SAML realm and configure it accordingly\nin {es}. See <<saml-elasticsearch-authentication>>\n\n[[saml-no-kibana-user]]\n==== Service Account user for accessing the APIs\n\nThe realm is designed with the assumption that there needs to be a privileged entity\nacting as an authentication proxy. In this case, the custom web application is the\nauthentication proxy handling the authentication of end users (more correctly,\n\"delegating\" the authentication to the SAML Identity Provider). The SAML related\nAPIs require authentication and the necessary authorization level for the authenticated\nuser. For this reason, you must create a Service Account user and assign it a role\nthat gives it the `manage_saml` cluster privilege. The use of the `manage_token`\ncluster privilege will be necessary after the authentication takes place, so that\nthe service account user can maintain access in order refresh access tokens on\nbehalf of the authenticated users or to subsequently log them out.\n\n[source,console]\n--------------------------------------------------\nPOST /_security/role/saml-service-role\n{\n  \"cluster\" : [\"manage_saml\", \"manage_token\"]\n}\n--------------------------------------------------\n\n[source,console]\n--------------------------------------------------\nPOST /_security/user/saml-service-user\n{\n  \"password\" : \"<somePasswordHere>\",\n  \"roles\"    : [\"saml-service-role\"]\n}\n--------------------------------------------------\n\n[[saml-no-kibana-sp-init-sso]]\n==== Handling the SP-initiated authentication flow\n\nOn a high level, the custom web application would need to perform the\nfollowing steps in order to authenticate a user with SAML against {es}:\n\n. Make an HTTP POST request to `_security/saml/prepare`, authenticating as\nthe `saml-service-user` user. Use either the name of the SAML realm in the {es} configuration or the value for\nthe Assertion Consumer Service URL in the request body.\nSee the <<security-api-saml-prepare-authentication,SAML prepare authentication API>> for more details.\n+\n[source,console]\n--------------------------------------------------\nPOST /_security/saml/prepare\n{\n  \"realm\" : \"saml1\"\n}\n--------------------------------------------------\n\n. Handle the response from `/_security/saml/prepare`. The response from {es} will contain 3 parameters:\n  `redirect`, `realm` and `id`. The custom web application would need to store the value for `id`\n in the user's session (client side in a cookie or server side if session information is\npersisted this way). It must also redirect the user's browser to the URL that was returned in the\n  `redirect` parameter. The `id` value should not be disregarded as it is used as a nonce in SAML in\norder to mitigate against replay attacks.\n. Handle a subsequent response from the SAML IdP. After the user is successfully authenticated with the\nIdentity Provider they will be redirected back to the Assertion Consumer Service URL. This `sp.acs` needs to be\ndefined as a URL which the custom web application handles. When it receives this HTTP POST request, the\ncustom web application must parse it and make an HTTP POST request itself to the\n`_security/saml/authenticate` API. It must authenticate as the `saml-service-user` user and pass\nthe Base64 encoded SAML Response that was sent as the body of the request. It must also pass the value for `id` that it had saved in the user's session previously.\n+\nSee <<security-api-saml-authenticate,SAML authenticate API>> for more details.\n+\n[source,console]\n-----------------------------------------------------------------------\nPOST /_security/saml/authenticate\n{\n  \"content\" : \"PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMD.....\",\n  \"ids\" : [\"4fee3b046395c4e751011e97f8900b5273d56685\"]\n}\n-----------------------------------------------------------------------\n// TEST[skip:handled in IT]\n+\nElasticsearch will validate this and if all is correct will respond with an access token that can be used\nas a `Bearer` token for subsequent requests. It also supplies a refresh token that can be later used to refresh the given\naccess token as described in <<security-api-get-token,get token API>>.\n. The response to calling `/_security/saml/authenticate` will contain only the username of the authenticated\nuser. If you need to get the values for the SAML Attributes that were contained in the SAML\nResponse for that user, you can call the Authenticate API `/_security/_authenticate/` using the access token as a `Bearer` token\nand the SAML attribute values will be contained in the response as part of the <<saml-user-metadata>>.\n\n[[saml-no-kibana-idp-init-sso]]\n==== Handling the IdP-initiated authentication flow\n\n{es} can also handle the IdP-initiated Single Sign On flow of the SAML 2 Web Browser SSO profile. In this\ncase the authentication starts with an unsolicited authentication response from the SAML Identity\nProvider. The difference with the <<saml-no-kibana-sp-init-sso, SP initiated SSO>> is that the web application needs to handle\nrequests to the `sp.acs` that will not come as responses to previous redirections. As such, it will not have a session\nfor the user already, and it will not have any stored values for the `id` parameter. The request to the\n`_security/saml/authenticate` API will look like the one below in this case:\n\n\n[source,console]\n-----------------------------------------------------------------------\nPOST /_security/saml/authenticate\n{\n  \"content\" : \"PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMD.....\",\n  \"ids\" : []\n}\n-----------------------------------------------------------------------\n// TEST[skip:handled in IT]\n\n[[saml-no-kibana-slo]]\n==== Handling the logout flow\n. At some point, if necessary, the custom web application can log the user out by using the\n  <<security-api-saml-logout,SAML logout API>> and passing the access token and refresh token as parameters. For example:\n+\n[source,console]\n--------------------------------------------------\nPOST /_security/saml/logout\n{\n  \"token\" : \"46ToAxZVaXVVZTVKOVF5YU04ZFJVUDVSZlV3\",\n  \"refresh_token\": \"mJdXLtmvTUSpoLwMvdBt_w\"\n}\n--------------------------------------------------\n// TEST[skip:handled in IT]\n+\nIf the SAML realm is configured accordingly and the IdP supports it (see <<saml-logout>>), this request will trigger a SAML\nSP-initiated Single Logout. In this case, the response will include a `redirect`\nparameter indicating where the user needs to be redirected at the IdP in order to complete the logout.\n. Alternatively, the IdP might initiate the Single Logout flow at some point. In order to handle this,\nthe Logout URL (`sp.logout`) needs to be handled by the custom web app. The query part of the URL that the\nuser will be redirected to will contain a SAML Logout request and this query part needs to be relayed to {es}\nusing the <<security-api-saml-invalidate,SAML invalidate API>>\n+\n[source,console]\n--------------------------------------------------\nPOST /_security/saml/invalidate\n{\n  \"query\" : \"SAMLRequest=nZFda4MwFIb%2FiuS%2BmviRpqFaClKQdbvo2g12M2KMraCJ9cRR9utnW4Wyi13sMie873MeznJ1aWrnS3VQGR0j4mLkKC1NUeljjA77zYyhVbIE0dR%2By7fmaHq7U%2BdegXWGpAZ%2B%2F4pR32luBFTAtWgUcCv56%2Fp5y30X87Yz1khTIycdgpUW9kY7WdsC9zxoXTvMvWuVV98YyMnSGH2SYE5pwALBIr9QKiwDGpW0oGVUznGeMyJZKFkQ4jBf5HnhUymjIhzCAL3KNFihbYx8TBYzzGaY7EnIyZwHzCWMfiDnbRIftkSjJr%2BFu0e9v%2B0EgOquRiiZjKpiVFp6j50T4WXoyNJ%2FEWC9fdqc1t%2F1%2B2F3aUpjzhPiXpqMz1%2FHSn4A&SigAlg=http%3A%2F%2Fwww.w3.org%2F2001%2F04%2Fxmldsig-more%23rsa-sha256&Signature=MsAYz2NFdovMG2mXf6TSpu5vlQQyEJAg%2B4KCwBqJTmrb3yGXKUtIgvjqf88eCAK32v3eN8vupjPC8LglYmke1ZnjK0%2FKxzkvSjTVA7mMQe2AQdKbkyC038zzRq%2FYHcjFDE%2Bz0qISwSHZY2NyLePmwU7SexEXnIz37jKC6NMEhus%3D\",\n  \"realm\" : \"saml1\"\n}\n--------------------------------------------------\n// TEST[skip:handled in IT]\n+\nThe custom web application will then need to also handle the response, which will include a `redirect`\nparameter with a URL in the IdP that contains the SAML Logout response. The application should redirect the user\nthere to complete the logout.\n\nFor SP-initiated Single Logout, the IdP may send back a logout response which can be verified by {es}\nusing the <<security-api-saml-complete-logout,SAML complete logout API>>.\n"
}