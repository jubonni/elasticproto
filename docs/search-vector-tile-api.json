{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.446580",
        "size": 26498,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-vector-tile-api.html",
        "type": "documentation",
        "role": [
            "child_attributes",
            "child_attributes",
            "child_attributes"
        ],
        "has_code": false,
        "title": "search-vector-tile-api",
        "version": "8.15"
    },
    "doc": "[[search-vector-tile-api]]\n=== Vector tile search API\n++++\n<titleabbrev>Vector tile search</titleabbrev>\n++++\n\n\nSearches a vector tile for geospatial values. Returns results as a binary\nhttps://docs.mapbox.com/vector-tiles/specification[Mapbox vector tile].\n\n////\n[source,console]\n----\nPUT my-index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"my-geo-field\": {\n        \"type\": \"geo_point\"\n      }\n    }\n  }\n}\n\nPUT my-index/_doc/0?refresh\n{\n  \"my-geo-field\": \"POINT (-122.0863176 37.3864953)\"\n}\n----\n////\n\n[source,console]\n----\nGET my-index/_mvt/my-geo-field/15/5271/12710\n----\n// TEST[continued]\n\n[[search-vector-tile-api-request]]\n==== {api-request-title}\n\n`GET <target>/_mvt/<field>/<zoom>/<x>/<y>`\n\n`POST <target>/_mvt/<field>/<zoom>/<x>/<y>`\n\n[[search-vector-tile-api-prereqs]]\n==== {api-prereq-title}\n\n* Before using this API, you should be familiar with the\nhttps://github.com/mapbox/vector-tile-spec[Mapbox vector tile specification].\n\n* If the {es} {security-features} are enabled, you must have the `read`\n<<privileges-list-indices,index privilege>> for the target data stream, index,\nor alias. For cross-cluster search, see <<remote-clusters>>.\n\n[[search-vector-tile-api-path-params]]\n==== {api-path-parms-title}\n\n`<target>`::\n(Required, string) Comma-separated list of data streams, indices, or aliases to\nsearch. Supports wildcards (`*`). To search all data streams and indices, omit\nthis parameter or use `*` or `_all`.\n+\nTo search a remote cluster, use the `<cluster>:<target>` syntax. See\n<<modules-cross-cluster-search>>.\n\n`<field>`::\n(Required, string) Field containing geospatial values to return. Must be a\n<<geo-point,`geo_point`>> or <<geo-shape,`geo_shape`>> field. The field must\nhave <<doc-values,doc values>> enabled. Cannot be a nested field.\n+\nNOTE: Vector tiles do not natively support geometry collections. For\n`geometrycollection` values in a `geo_shape` field, the API returns a `hits`\nlayer feature for each element of the collection.\nThis behavior may change in a future release.\n\n`<zoom>`::\n(Required, integer) Zoom level for the vector tile to search. Accepts `0`-`29`.\n\n`<x>`::\n(Required, integer) X coordinate for the vector tile to search.\n\n`<y>`::\n(Required, integer) Y coordinate for the vector tile to search.\n\n[[search-vector-tile-api-desc]]\n==== {api-description-title}\n\nInternally, {es} translates a vector tile search API request into a\n<<search-search,search>> containing:\n\n* A <<query-dsl-geo-bounding-box-query,`geo_bounding_box`>> query on the\n`<field>`. The query uses the `<zoom>/<x>/<y>` tile as a bounding box.\n\n* A <<search-aggregations-bucket-geotilegrid-aggregation,`geotile_grid`>> or\n<<search-aggregations-bucket-geohexgrid-aggregation,`geohex_grid`>> aggregation\non the `<field>`. The `grid_agg` parameter determines the aggregation type. The\naggregation uses the `<zoom>/<x>/<y>` tile as a bounding box.\n\n* Optionally, a\n<<search-aggregations-metrics-geobounds-aggregation,`geo_bounds`>> aggregation\non the `<field>`. The search only includes this aggregation if the\n`exact_bounds` parameter is `true`.\n\n* If the optional parameter `with_labels` is true, the internal search will include\na dynamic runtime field that calls the `getLabelPosition` function of the geometry doc value.\nThis enables the generation of new point features containing suggested geometry labels,\nso that, for example, multi-polygons will have only one label.\n\nFor example, {es} may translate a vector tile search API request with a\n`grid_agg` argument of `geotile` and an `exact_bounds` argument of `true`\ninto the following search:\n\n[source,console]\n----\nGET my-index/_search\n{\n  \"size\": 10000,\n  \"query\": {\n    \"geo_bounding_box\": {\n      \"my-geo-field\": {\n        \"top_left\": {\n          \"lat\": -40.979898069620134,\n          \"lon\": -45\n        },\n        \"bottom_right\": {\n          \"lat\": -66.51326044311186,\n          \"lon\": 0\n        }\n      }\n    }\n  },\n  \"aggregations\": {\n    \"grid\": {\n      \"geotile_grid\": {\n        \"field\": \"my-geo-field\",\n        \"precision\": 11,\n        \"size\": 65536,\n        \"bounds\": {\n          \"top_left\": {\n            \"lat\": -40.979898069620134,\n            \"lon\": -45\n          },\n          \"bottom_right\": {\n            \"lat\": -66.51326044311186,\n            \"lon\": 0\n          }\n        }\n      }\n    },\n    \"bounds\": {\n      \"geo_bounds\": {\n        \"field\": \"my-geo-field\",\n        \"wrap_longitude\": false\n      }\n    }\n  }\n}\n----\n// TEST[continued]\n\nThe API returns results as a binary\nhttps://github.com/mapbox/vector-tile-spec[Mapbox vector tile]. Mapbox vector\ntiles are encoded as https://github.com/protocolbuffers/protobuf[Google\nProtobufs (PBF)]. By default, the tile contains three layers:\n\n* A `hits` layer containing a feature for each `<field>` value matching the\n`geo_bounding_box` query.\n\n*  An `aggs` layer containing a feature for each cell of the `geotile_grid` or\n`geohex_grid`. The layer only contains features for cells with matching data.\n\n* A `meta` layer containing:\n** A feature containing a bounding box. By default, this is the bounding box of\nthe tile.\n** Value ranges for any sub-aggregations on the `geotile_grid` or `geohex_grid`.\n** Metadata for the search.\n\nThe API only returns features that can display at its zoom level. For example,\nif a polygon feature has no area at its zoom level, the API omits it.\n\nThe API returns errors as UTF-8 encoded JSON.\n\n[role=\"child_attributes\"]\n[[search-vector-tile-api-query-params]]\n==== {api-query-parms-title}\n\nIMPORTANT: You can specify several options for this API as either a query\nparameter or request body parameter. If you specify both parameters, the query\nparameter takes precedence.\n\n// tag::exact-bounds[]\n`exact_bounds`::\n(Optional, Boolean)\nIf `false`, the `meta` layer's feature is the bounding box of the tile. Defaults\nto `false`.\n+\nIf `true`, the `meta` layer's feature is a bounding box resulting from a\n<<search-aggregations-metrics-geobounds-aggregation,`geo_bounds`>> aggregation.\nThe aggregation runs on `<field>` values that intersect the `<zoom>/<x>/<y>`\ntile with `wrap_longitude` set to `false`. The resulting bounding box may be\nlarger than the vector tile.\n// end::exact-bounds[]\n\n// tag::extent-param[]\n`extent`::\n(Optional, integer) Size, in pixels, of a side of the tile. Vector tiles are\nsquare with equal sides. Defaults to `4096`.\n// end::extent-param[]\n\n// tag::buffer-param[]\n`buffer`::\n(Optional, integer) Size, in pixels, of a clipping buffer outside the tile.\nThis allows renderers to avoid outline artifacts from geometries that extend past the extent of the tile.\nDefaults to `5`.\n// end::buffer-param[]\n\n// tag::grid-agg[]\n`grid_agg`::\n(Optional, string) Aggregation used to create a grid for the `<field>`.\n+\n.Valid values for `grid_agg`\n[%collapsible%open]\n====\n`geotile` (Default)::\n<<search-aggregations-bucket-geotilegrid-aggregation,`geotile_grid`>> aggregation.\n\n`geohex`::\n<<search-aggregations-bucket-geohexgrid-aggregation,`geohex_grid`>> aggregation.\n====\n// end::grid-agg[]\n\n// tag::grid-precision[]\n`grid_precision`::\n(Optional, integer) Precision level for cells in the `grid_agg`. Accepts\n`0`-`8`. Defaults to `8`. If `0`, results don't include the `aggs` layer.\n+\n.Grid precision for `geotile`\n[%collapsible%open]\n====\nFor a `grid_agg` of `geotile`, you can use cells in the `aggs` layer as tiles\nfor lower zoom levels. `grid_precision` represents the additional zoom levels\navailable through these cells. The final precision is computed by as\nfollows:\n\n`<zoom> + grid_precision`\n\nFor example, if `<zoom>` is `7` and `grid_precision` is `8`, then the\n`geotile_grid` aggregation will use a precision of `15`. The maximum final\nprecision is `29`.\n\nThe `grid_precision` also determines the number of cells for the grid as\nfollows:\n\n`(2^grid_precision) x (2^grid_precision)`\n\nFor example, a value of `8` divides the tile into a grid of 256 x 256 cells. The\n`aggs` layer only contains features for cells with matching data.\n====\n+\n.Grid precision for `geohex`\n[%collapsible%open]\n====\nFor a `grid_agg` of `geohex`, {es} uses `<zoom>` and `grid_precision` to\ncalculate a final precision as follows:\n\n`<zoom> + grid_precision`\n\nThis precision determines the https://h3geo.org/docs/core-library/restable[H3\nresolution of the hexagonal cells] produced by the `geohex` aggregation. The\nfollowing table maps the H3 resolution for each precision.\n\nFor example, if `<zoom>` is `3` and `grid_precision` is `3`, the precision is\n`6`. At a precision of `6`, hexagonal cells have an H3 resolution of `2`. If\n`<zoom>` is `3` and `grid_precision` is `4`, the precision is `7`. At a\nprecision of `7`, hexagonal cells have an H3 resolution of `3`.\n\n[cols=\"<,<,<,<,<\",options=\"header\",]\n|====\n|Precision | Unique tile bins| H3 resolution| Unique hex bins | Ratio\n|1\t|4\t                 |0\t|122\t            |30.5\n|2\t|16\t                 |0\t|122\t            |7.625\n|3\t|64\t                 |1\t|842\t            |13.15625\n|4\t|256\t               |1\t|842\t            |3.2890625\n|5\t|1024\t               |2\t|5882\t            |5.744140625\n|6\t|4096\t               |2\t|5882\t            |1.436035156\n|7\t|16384\t             |3\t|41162\t          |2.512329102\n|8\t|65536\t             |3\t|41162\t          |0.6280822754\n|9\t|262144\t             |4\t|288122\t          |1.099098206\n|10\t|1048576\t           |4\t|288122\t          |0.2747745514\n|11\t|4194304\t           |5\t|2016842\t        |0.4808526039\n|12\t|16777216\t           |6\t|14117882\t        |0.8414913416\n|13\t|67108864\t           |6\t|14117882\t        |0.2103728354\n|14\t|268435456\t         |7\t|98825162\t        |0.3681524172\n|15\t|1073741824\t         |8\t|691776122\t      |0.644266719\n|16\t|4294967296\t         |8\t|691776122\t      |0.1610666797\n|17\t|17179869184\t       |9\t|4842432842\t      |0.2818666889\n|18\t|68719476736\t       |10 |33897029882\t    |0.4932667053\n|19\t|274877906944\t       |11 |237279209162\t  |0.8632167343\n|20\t|1099511627776\t     |11 |237279209162\t  |0.2158041836\n|21\t|4398046511104\t     |12 |1660954464122\t  |0.3776573213\n|22\t|17592186044416\t     |13 |11626681248842\t|0.6609003122\n|23\t|70368744177664\t     |13 |11626681248842\t|0.165225078\n|24\t|281474976710656\t   |14 |81386768741882\t|0.2891438866\n|25\t|1125899906842620\t   |15 |569707381193162\t|0.5060018015\n|26\t|4503599627370500\t   |15 |569707381193162\t|0.1265004504\n|27\t|18014398509482000\t |15 |569707381193162\t|0.03162511259\n|28\t|72057594037927900\t |15 |569707381193162\t|0.007906278149\n|29\t|288230376151712000\t |15 |569707381193162\t|0.001976569537\n|====\n\nHexagonal cells don't align perfectly on a vector tile. Some cells may intersect\nmore than one vector tile. To compute the H3 resolution for each precision, {es}\ncompares the average density of hexagonal bins at each resolution with the\naverage density of tile bins at each zoom level. {es} uses the H3 resolution\nthat is closest to the corresponding `geotile` density.\n====\n// end::grid-precision[]\n\n// tag::grid-type[]\n`grid_type`::\n(Optional, string) Determines the geometry type for features in the `aggs`\nlayer. In the `aggs` layer, each feature represents a cell in the grid.\n+\n.Valid values for `grid_type`\n[%collapsible%open]\n====\n`grid` (Default)::\nEach feature is a `Polygon` of the cell's geometry. For a `grid_agg` of\n`geotile`, the feature is the cell's bounding box. For a `grid_agg` of\n`geohex`, the feature is the hexagonal cell's boundaries.\n\n`point`::\nEach feature is a `Point` that's the centroid of the cell.\n\n`centroid`::\nEach feature is a `Point` that's the centroid of the data within the cell. For\ncomplex geometries, the actual centroid may be outside the cell. In these cases,\nthe feature is set to the closest point to the centroid inside the cell.\n====\n// end::grid-type[]\n\n// tag::size[]\n`size`::\n(Optional, integer) Maximum number of features to return in the `hits` layer.\nAccepts `0`-`10000`. Defaults to `10000`. If `0`, results don't include the\n`hits` layer.\n// end::size[]\n\n// tag::track_total_hits[]\n`track_total_hits`::\n(Optional, integer or Boolean)\nNumber of hits matching the query to count accurately. Defaults to `10000`.\n+\nIf `true`, the exact number of hits is returned at the cost of some performance.\nIf `false`, the response does not include the total number of hits matching the query.\n// end::track_total_hits[]\n\n// tag::with_labels[]\n`with_labels`::\n(Optional, Boolean)\nIf true, the hits and aggs layers will contain additional point features representing\nsuggested label positions for the original features.\n* `Point` and `MultiPoint` features will have one of the points selected.\n* `Polygon` and `MultiPolygon` features will have a single point generated,\neither the centroid, if it is within the polygon, or another point within the\npolygon selected from the <<geoshape-indexing-approach,sorted triangle-tree>>.\n* `LineString` features will likewise provide a roughly central point selected\nfrom the <<geoshape-indexing-approach,triangle-tree>>.\n* The aggregation results will provide one central point for each aggregation bucket.\n\n+\nAll attributes from the original features will also be copied to the new label features.\nIn addition, the new features will be distinguishable using the tag `_mvt_label_position`.\n// end::with_labels[]\n\n[role=\"child_attributes\"]\n[[search-vector-tile-api-request-body]]\n==== {api-request-body-title}\n\n`aggs`::\n(Optional, <<search-aggregations,aggregation object>>)\n<<run-sub-aggs,Sub-aggregations>> for the `grid_agg`. Supports the following\naggregation types:\n+\n* <<search-aggregations-metrics-avg-aggregation,`avg`>>\n* <<search-aggregations-metrics-boxplot-aggregation,`boxplot`>>\n* <<search-aggregations-metrics-cardinality-aggregation,`cardinality`>>\n* <<search-aggregations-metrics-extendedstats-aggregation,`extended stats`>>\n* <<search-aggregations-metrics-max-aggregation,`max`>>\n* <<search-aggregations-metrics-median-absolute-deviation-aggregation,`median absolute deviation`>>\n* <<search-aggregations-metrics-min-aggregation,`min`>>\n* <<search-aggregations-metrics-percentile-aggregation,`percentile`>>\n* <<search-aggregations-metrics-percentile-rank-aggregation,`percentile-rank`>>\n* <<search-aggregations-metrics-stats-aggregation,`stats`>>\n* <<search-aggregations-metrics-sum-aggregation,`sum`>>\n* <<search-aggregations-metrics-valuecount-aggregation,`value count`>>\n+\nThe aggregation names can't start with `_mvt_`. The `_mvt_` prefix is reserved\nfor internal aggregations.\n\ninclude::search-vector-tile-api.asciidoc[tag=exact-bounds]\n\ninclude::search-vector-tile-api.asciidoc[tag=extent-param]\n\ninclude::search-vector-tile-api.asciidoc[tag=buffer-param]\n\n`fields`::\n(Optional, array of strings and objects) Fields to return in the `hits` layer.\nSupports wildcards (`*`).\n+\nThis parameter does not support fields with <<array,array values>>. Fields with\narray values may return inconsistent results.\n+\nYou can specify fields in the array as a string or object.\n+\n.Properties of `fields` objects\n[%collapsible%open]\n====\ninclude::search.asciidoc[tag=fields-param-props]\n====\n\ninclude::search-vector-tile-api.asciidoc[tag=grid-agg]\n\ninclude::search-vector-tile-api.asciidoc[tag=grid-precision]\n\ninclude::search-vector-tile-api.asciidoc[tag=grid-type]\n\n`query`::\n(Optional, object) <<query-dsl,Query DSL>> used to filter documents for the\nsearch.\n\ninclude::{es-ref-dir}/search/search.asciidoc[tag=runtime-mappings-def]\n\ninclude::search-vector-tile-api.asciidoc[tag=size]\n\n`sort`::\n(Optional, array of <<sort-search-results,sort objects>>) Sorts features in the\n`hits` layer.\n+\nBy default, the API calculates a bounding box for each feature. It sorts\nfeatures based on this box's diagonal length, from longest to shortest.\n\ninclude::search-vector-tile-api.asciidoc[tag=track_total_hits]\n\ninclude::search-vector-tile-api.asciidoc[tag=with_labels]\n\n[role=\"child_attributes\"]\n[[search-vector-tile-api-response]]\n==== Response\n\nReturned vector tiles contain the following data:\n\n`hits`::\n(object) Layer containing results for the `geo_bounding_box` query.\n+\n.Properties of `hits`\n[%collapsible%open]\n====\n// tag::extent[]\n`extent`::\n(integer) Size, in pixels, of a side of the tile. Vector tiles are square with\nequal sides.\n// end::extent[]\n\n// tag::version[]\n`version`::\n(integer) Major version number of the\nhttps://github.com/mapbox/vector-tile-spec[Mapbox vector tile specification].\n// end::version[]\n\n`features`::\n(array of objects) Array of features. Contains a feature for each `<field>`\nvalue that matches the `geo_bounding_box` query.\n+\n.Properties of `features` objects\n[%collapsible%open]\n=====\n// tag::geometry[]\n`geometry`::\n(object) Geometry for the feature.\n+\n.Properties of `geometry`\n[%collapsible%open]\n======\n`type`::\n(string) Geometry type for the feature. Valid values are:\n\n* `UNKNOWN`\n* `POINT`\n* `LINESTRING`\n* `POLYGON`\n\n`coordinates`::\n(array of integers or array of arrays) Tile coordinates for the feature.\n======\n// end::geometry[]\n\n`properties`::\n(object) Properties for the feature.\n+\n.Properties of `properties`\n[%collapsible%open]\n======\n`_id`::\n(string) Document `_id` for the feature's document.\n\n`_index`::\n(string) Name of the index for the feature's document.\n\n`<field>`::\nField value. Only returned for fields in the `fields` parameter.\n======\n// tag::feature-type[]\n`type`::\n(integer) Identifier for the feature's geometry type. Values are:\n+\n* `1` (`POINT`)\n* `2` (`LINESTRING`)\n* `3` (`POLYGON`)\n// end::feature-type[]\n=====\n====\n\n`aggs`::\n(object) Layer containing results for the `grid_agg` aggregation and its\nsub-aggregations.\n+\n.Properties of `aggs`\n[%collapsible%open]\n====\ninclude::search-vector-tile-api.asciidoc[tag=extent]\n\ninclude::search-vector-tile-api.asciidoc[tag=version]\n\n`features`::\n(array of objects) Array of features. Contains a feature for each cell of the grid.\n+\n.Properties of `features` objects\n[%collapsible%open]\n=====\ninclude::search-vector-tile-api.asciidoc[tag=geometry]\n\n`properties`::\n(object) Properties for the feature.\n+\n.Properties of `properties`\n[%collapsible%open]\n======\n`_count`::\n(long) Count of the cell's documents.\n\n`_key`::\n(string) Bucket key of the cell in the format `<zoom>/<x>/<y>`.\n\n`<sub-aggregation>.value`::\nSub-aggregation results for the cell. Only returned for sub-aggregations in the\n`aggs` parameter.\n======\ninclude::search-vector-tile-api.asciidoc[tag=feature-type]\n=====\n====\n\n`meta`::\n(object) Layer containing metadata for the request.\n+\n.Properties of `meta`\n[%collapsible%open]\n====\ninclude::search-vector-tile-api.asciidoc[tag=extent]\n\ninclude::search-vector-tile-api.asciidoc[tag=version]\n\n`features`::\n(array of objects) Contains a feature for a bounding box.\n+\n.Properties of `features` objects\n[%collapsible%open]\n=====\ninclude::search-vector-tile-api.asciidoc[tag=geometry]\n\n`properties`::\n(object) Properties for the feature.\n+\n.Properties of `properties`\n[%collapsible%open]\n======\n`_shards.failed`::\n(integer) Number of shards that failed to execute the search. See the search\nAPI's <<search-api-shards,`shards`>> response property.\n\n`_shards.skipped`::\n(integer) Number of shards that skipped the search. See the search\nAPI's <<search-api-shards,`shards`>> response property.\n\n`_shards.successful`::\n(integer)  Number of shards that executed the search successfully. See the\nsearch API's <<search-api-shards,`shards`>> response property.\n\n`_shards.total`::\n(integer) Total number of shards that required querying, including unallocated\nshards. See the search API's <<search-api-shards,`shards`>> response property.\n\n`aggregations._count.avg`::\n(float) Average `_count` value for features in the `aggs` layer.\n\n`aggregations._count.count`::\n(integer) Number of unique `_count` values for features in the `aggs` layer.\n\n`aggregations._count.max`::\n(float) Largest `_count` value for features in the `aggs` layer.\n\n`aggregations._count.min`::\n(float) Smallest `_count` value for features in the `aggs` layer.\n\n`aggregations._count.sum`::\n(float) Sum of `_count` values for features in the `aggs` layer.\n\n`aggregations.<sub-aggregation>.avg`::\n(float) Average value for the sub-aggregation's results.\n\n`aggregations.<agg_name>.count`::\n(integer) Number of unique values from the sub-aggregation's results.\n\n`aggregations.<agg_name>.max`::\n(float) Largest value from the sub-aggregation's results.\n\n`aggregations.<agg_name>.min`::\n(float) Smallest value from the sub-aggregation's results.\n\n`aggregations.<agg_name>.sum`::\n(float) Sum of values for the sub-aggregation's results.\n\n`hits.max_score`::\n(float) Highest document `_score` for the search's hits.\n\n`hits.total.relation`::\n(string) Indicates whether `hits.total.value` is accurate or a lower bound.\nPossible values are:\n\n`eq`::: Accurate\n\n`gte`::: Lower bound\n\n`hits.total.value`::\n(integer) Total number of hits for the search.\n\n`timed_out`::\n(Boolean) If `true`, the search timed out before completion. Results may be\npartial or empty.\n\n`took`::\n(integer) Milliseconds it took {es} to run the search. See the search API's\n<<search-api-took,`took`>> response property.\n======\ninclude::search-vector-tile-api.asciidoc[tag=feature-type]\n=====\n====\n\n[[search-vector-tile-api-api-example]]\n==== {api-examples-title}\n\nThe following requests create the `museum` index and add several geospatial\n`location` values.\n\n[source,console]\n----\nPUT museums\n{\n  \"mappings\": {\n    \"properties\": {\n      \"location\": {\n        \"type\": \"geo_point\"\n      },\n      \"name\": {\n        \"type\": \"keyword\"\n      },\n      \"price\": {\n        \"type\": \"long\"\n      },\n      \"included\": {\n        \"type\": \"boolean\"\n      }\n    }\n  }\n}\n\nPOST museums/_bulk?refresh\n{ \"index\": { \"_id\": \"1\" } }\n{ \"location\": \"POINT (4.912350 52.374081)\", \"name\": \"NEMO Science Museum\",  \"price\": 1750, \"included\": true }\n{ \"index\": { \"_id\": \"2\" } }\n{ \"location\": \"POINT (4.901618 52.369219)\", \"name\": \"Museum Het Rembrandthuis\", \"price\": 1500, \"included\": false }\n{ \"index\": { \"_id\": \"3\" } }\n{ \"location\": \"POINT (4.914722 52.371667)\", \"name\": \"Nederlands Scheepvaartmuseum\", \"price\":1650, \"included\": true }\n{ \"index\": { \"_id\": \"4\" } }\n{ \"location\": \"POINT (4.914722 52.371667)\", \"name\": \"Amsterdam Centre for Architecture\", \"price\":0, \"included\": true }\n----\n\nThe following request searches the index for `location` values that intersect\nthe `13/4207/2692` vector tile.\n\n[source,console]\n----\nGET museums/_mvt/location/13/4207/2692\n{\n  \"grid_agg\": \"geotile\",\n  \"grid_precision\": 2,\n  \"fields\": [\n    \"name\",\n    \"price\"\n  ],\n  \"query\": {\n    \"term\": {\n      \"included\": true\n    }\n  },\n  \"aggs\": {\n    \"min_price\": {\n      \"min\": {\n        \"field\": \"price\"\n      }\n    },\n    \"max_price\": {\n      \"max\": {\n        \"field\": \"price\"\n      }\n    },\n    \"avg_price\": {\n      \"avg\": {\n        \"field\": \"price\"\n      }\n    }\n  }\n}\n----\n// TEST[continued]\n\nThe API returns results as a binary vector tile. When decoded into JSON, the\ntile contains the following data:\n\n[source,js]\n----\n{\n  \"hits\": {\n    \"extent\": 4096,\n    \"version\": 2,\n    \"features\": [\n      {\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [\n            3208,\n            3864\n          ]\n        },\n        \"properties\": {\n          \"_id\": \"1\",\n          \"_index\": \"museums\",\n          \"name\": \"NEMO Science Museum\",\n          \"price\": 1750\n        },\n        \"type\": 1\n      },\n      {\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [\n            3429,\n            3496\n          ]\n        },\n        \"properties\": {\n          \"_id\": \"3\",\n          \"_index\": \"museums\",\n          \"name\": \"Nederlands Scheepvaartmuseum\",\n          \"price\": 1650\n        },\n        \"type\": 1\n      },\n      {\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [\n            3429,\n            3496\n          ]\n        },\n        \"properties\": {\n          \"_id\": \"4\",\n          \"_index\": \"museums\",\n          \"name\": \"Amsterdam Centre for Architecture\",\n          \"price\": 0\n        },\n        \"type\": 1\n      }\n    ]\n  },\n  \"aggs\": {\n    \"extent\": 4096,\n    \"version\": 2,\n    \"features\": [\n      {\n        \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [\n            [\n              [\n                3072,\n                3072\n              ],\n              [\n                4096,\n                3072\n              ],\n              [\n                4096,\n                4096\n              ],\n              [\n                3072,\n                4096\n              ],\n              [\n                3072,\n                3072\n              ]\n            ]\n          ]\n        },\n        \"properties\": {\n          \"_count\": 3,\n          \"max_price.value\": 1750.0,\n          \"min_price.value\": 0.0,\n          \"avg_price.value\": 1133.3333333333333\n        },\n        \"type\": 3\n      }\n    ]\n  },\n  \"meta\": {\n    \"extent\": 4096,\n    \"version\": 2,\n    \"features\": [\n      {\n        \"geometry\": {\n          \"type\": \"Polygon\",\n          \"coordinates\": [\n            [\n              [\n                0,\n                0\n              ],\n              [\n                4096,\n                0\n              ],\n              [\n                4096,\n                4096\n              ],\n              [\n                0,\n                4096\n              ],\n              [\n                0,\n                0\n              ]\n            ]\n          ]\n        },\n        \"properties\": {\n          \"_shards.failed\": 0,\n          \"_shards.skipped\": 0,\n          \"_shards.successful\": 1,\n          \"_shards.total\": 1,\n          \"aggregations._count.avg\": 3.0,\n          \"aggregations._count.count\": 1,\n          \"aggregations._count.max\": 3.0,\n          \"aggregations._count.min\": 3.0,\n          \"aggregations._count.sum\": 3.0,\n          \"aggregations.avg_price.avg\": 1133.3333333333333,\n          \"aggregations.avg_price.count\": 1,\n          \"aggregations.avg_price.max\": 1133.3333333333333,\n          \"aggregations.avg_price.min\": 1133.3333333333333,\n          \"aggregations.avg_price.sum\": 1133.3333333333333,\n          \"aggregations.max_price.avg\": 1750.0,\n          \"aggregations.max_price.count\": 1,\n          \"aggregations.max_price.max\": 1750.0,\n          \"aggregations.max_price.min\": 1750.0,\n          \"aggregations.max_price.sum\": 1750.0,\n          \"aggregations.min_price.avg\": 0.0,\n          \"aggregations.min_price.count\": 1,\n          \"aggregations.min_price.max\": 0.0,\n          \"aggregations.min_price.min\": 0.0,\n          \"aggregations.min_price.sum\": 0.0,\n          \"hits.max_score\": 0.0,\n          \"hits.total.relation\": \"eq\",\n          \"hits.total.value\": 3,\n          \"timed_out\": false,\n          \"took\": 2\n        },\n        \"type\": 3\n      }\n    ]\n  }\n}\n----\n// NOTCONSOLE\n"
}