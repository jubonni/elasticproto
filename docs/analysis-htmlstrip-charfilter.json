{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.415281",
        "size": 2817,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-htmlstrip-charfilter.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "analysis-htmlstrip-charfilter",
        "version": "8.15"
    },
    "doc": "[[analysis-htmlstrip-charfilter]]\n=== HTML strip character filter\n++++\n<titleabbrev>HTML strip</titleabbrev>\n++++\n\nStrips HTML elements from a text and replaces HTML entities with their decoded\nvalue (e.g, replaces `&amp;` with `&`).\n\nThe `html_strip` filter uses Lucene's\n{lucene-analysis-docs}/charfilter/HTMLStripCharFilter.html[HTMLStripCharFilter].\n\n[[analysis-htmlstrip-charfilter-analyze-ex]]\n==== Example\n\nThe following <<indices-analyze,analyze API>> request uses the\n`html_strip` filter to change the text `<p>I&apos;m so <b>happy</b>!</p>` to\n`\\nI'm so happy!\\n`.\n\n[source,console]\n----\nGET /_analyze\n{\n  \"tokenizer\": \"keyword\",\n  \"char_filter\": [\n    \"html_strip\"\n  ],\n  \"text\": \"<p>I&apos;m so <b>happy</b>!</p>\"\n}\n----\n\nThe filter produces the following text:\n\n[source,text]\n----\n[ \\nI'm so happy!\\n ]\n----\n\n////\n[source,console-result]\n----\n{\n  \"tokens\": [\n    {\n      \"token\": \"\\nI'm so happy!\\n\",\n      \"start_offset\": 0,\n      \"end_offset\": 32,\n      \"type\": \"word\",\n      \"position\": 0\n    }\n  ]\n}\n----\n////\n\n[[analysis-htmlstrip-charfilter-analyzer-ex]]\n==== Add to an analyzer\n\nThe following <<indices-create-index,create index API>> request uses the\n`html_strip` filter to configure a new\n<<analysis-custom-analyzer,custom analyzer>>.\n\n[source,console]\n----\nPUT /my-index-000001\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"keyword\",\n          \"char_filter\": [\n            \"html_strip\"\n          ]\n        }\n      }\n    }\n  }\n}\n----\n\n[[analysis-htmlstrip-charfilter-configure-parms]]\n==== Configurable parameters\n\n`escaped_tags`::\n(Optional, array of strings)\nArray of HTML elements without enclosing angle brackets (`< >`). The filter\nskips these HTML elements when stripping HTML from the text. For example, a\nvalue of `[ \"p\" ]` skips the `<p>` HTML element.\n\n[[analysis-htmlstrip-charfilter-customize]]\n==== Customize\n\nTo customize the `html_strip` filter, duplicate it to create the basis for a new\ncustom character filter. You can modify the filter using its configurable\nparameters.\n\nThe following <<indices-create-index,create index API>> request\nconfigures a new <<analysis-custom-analyzer,custom analyzer>> using a custom\n`html_strip` filter, `my_custom_html_strip_char_filter`.\n\nThe `my_custom_html_strip_char_filter` filter skips the removal of the `<b>`\nHTML element.\n\n[source,console]\n----\nPUT my-index-000001\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"keyword\",\n          \"char_filter\": [\n            \"my_custom_html_strip_char_filter\"\n          ]\n        }\n      },\n      \"char_filter\": {\n        \"my_custom_html_strip_char_filter\": {\n          \"type\": \"html_strip\",\n          \"escaped_tags\": [\n            \"b\"\n          ]\n        }\n      }\n    }\n  }\n}\n----\n"
}