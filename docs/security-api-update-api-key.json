{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.767070",
        "size": 8139,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-update-api-key.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "security-api-update-api-key",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[security-api-update-api-key]]\n=== Update API key API\n\n++++\n<titleabbrev>Update API key</titleabbrev>\n++++\n\n[[security-api-update-api-key-request]]\n==== {api-request-title}\n\n`PUT /_security/api_key/<id>`\n\n[[security-api-update-api-key-prereqs]]\n==== {api-prereq-title}\n\n* To use this API, you must have at least the `manage_own_api_key` cluster privilege.\nUsers can only update API keys that they created or that were granted to them.\nTo update another user's API key, use the <<run-as-privilege,`run_as` feature>>\nto submit a request on behalf of another user.\n\nIMPORTANT: It's not possible to use an API key as the authentication credential for this API.\nTo update an API key, the owner user's credentials are required.\n\n[[security-api-update-api-key-desc]]\n==== {api-description-title}\n\nUse this API to update API keys created by the <<security-api-create-api-key,create API Key>> or <<security-api-grant-api-key,grant API Key>> APIs.\nIf you need to apply the same update to many API keys, you can use <<security-api-bulk-update-api-keys,bulk update API Keys>> to reduce overhead.\n\nIt's not possible to update expired API keys, or API keys that have been invalidated by <<security-api-invalidate-api-key,invalidate API Key>>.\n\nThis API supports updates to an API key's access scope, metadata and expiration.\nThe access scope of an API key is derived from the <<security-api-update-api-key-api-key-role-descriptors,`role_descriptors`>> you specify in the request, and a snapshot of the owner user's permissions at the time of the request.\nThe snapshot of the owner's permissions is updated automatically on every call.\n\n[IMPORTANT]\n====\nIf you don't specify <<security-api-update-api-key-api-key-role-descriptors,`role_descriptors`>> in the request, a call to this API might still change the API key's access scope.\nThis change can occur if the owner user's permissions have changed since the API key was created or last modified.\n====\n\n[[security-api-update-api-key-path-params]]\n==== {api-path-parms-title}\n\n`id`::\n(Required, string) The ID of the API key to update.\n\n[[security-api-update-api-key-request-body]]\n==== {api-request-body-title}\n\nYou can specify the following parameters in the request body, which is optional.\n\n[[security-api-update-api-key-api-key-role-descriptors]]\n`role_descriptors`::\n(Optional, object) The role descriptors to assign to this API key.\nThe API key's effective permissions are an intersection of its assigned privileges and the point in time snapshot of permissions of the owner user.\nYou can assign new privileges by specifying them in this parameter.\nTo remove assigned privileges, you can supply an empty `role_descriptors` parameter, i.e., an empty object `{}`.\nIf an API key has no assigned privileges, it inherits the owner user's full permissions.\nThe snapshot of the owner's permissions is always updated, whether you supply the `role_descriptors` parameter or not.\nThe structure of a role descriptor is the same as the request for the <<api-key-role-descriptors, create API keys API>>.\n\n`metadata`::\n(Optional, object) Arbitrary metadata that you want to associate with the API key.\nIt supports nested data structure.\nWithin the `metadata` object, top-level keys beginning with `_` are reserved for system usage.\nWhen specified, this fully replaces metadata previously associated with the API key.\n\n`expiration`::\n(Optional, string) Expiration time for the API key. By default, API keys never expire. Can be omitted to leave unchanged.\n\n[[security-api-update-api-key-response-body]]\n==== {api-response-body-title}\n\n`updated`::\n(boolean) If `true`, the API key was updated.\nIf `false`, the API key didn't change because no change was detected.\n\n[[security-api-update-api-key-example]]\n==== {api-examples-title}\n\nIf you create an API key as follows:\n\n[source,console]\n------------------------------------------------------------\nPOST /_security/api_key\n{\n  \"name\": \"my-api-key\",\n  \"role_descriptors\": {\n    \"role-a\": {\n      \"cluster\": [\"all\"],\n      \"indices\": [\n        {\n          \"names\": [\"index-a*\"],\n          \"privileges\": [\"read\"]\n        }\n      ]\n    }\n  },\n  \"metadata\": {\n    \"application\": \"my-application\",\n    \"environment\": {\n       \"level\": 1,\n       \"trusted\": true,\n       \"tags\": [\"dev\", \"staging\"]\n    }\n  }\n}\n------------------------------------------------------------\n\nA successful call returns a JSON structure that provides API key information.\nFor example:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"id\": \"VuaCfGcBCdbkQm-e5aOx\",\n  \"name\": \"my-api-key\",\n  \"api_key\": \"ui2lp2axTNmsyakw9tvNnw\",\n  \"encoded\": \"VnVhQ2ZHY0JDZGJrUW0tZTVhT3g6dWkybHAyYXhUTm1zeWFrdzl0dk5udw==\"\n}\n--------------------------------------------------\n// TESTRESPONSE[s/VuaCfGcBCdbkQm-e5aOx/$body.id/]\n// TESTRESPONSE[s/ui2lp2axTNmsyakw9tvNnw/$body.api_key/]\n// TESTRESPONSE[s/VnVhQ2ZHY0JDZGJrUW0tZTVhT3g6dWkybHAyYXhUTm1zeWFrdzl0dk5udw==/$body.encoded/]\n\nFor the examples below, assume that the owner user's permissions are:\n\n[[security-api-update-api-key-examples-user-permissions]]\n[source,js]\n--------------------------------------------------\n{\n  \"cluster\": [\"all\"],\n  \"indices\": [\n    {\n      \"names\": [\"*\"],\n      \"privileges\": [\"all\"]\n    }\n  ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nThe following example updates the API key created above, assigning it new role descriptors and metadata:\n\n[source,console]\n----\nPUT /_security/api_key/VuaCfGcBCdbkQm-e5aOx\n{\n  \"role_descriptors\": {\n    \"role-a\": {\n      \"indices\": [\n        {\n          \"names\": [\"*\"],\n          \"privileges\": [\"write\"]\n        }\n      ]\n    }\n  },\n  \"metadata\": {\n    \"environment\": {\n       \"level\": 2,\n       \"trusted\": true,\n       \"tags\": [\"production\"]\n    }\n  }\n}\n----\n// TEST[s/VuaCfGcBCdbkQm-e5aOx/\\${body.id}/]\n// TEST[continued]\n\nA successful call returns a JSON structure indicating that the API key was updated:\n\n[source,console-result]\n----\n{\n  \"updated\": true\n}\n----\n\nThe API key's effective permissions after the update will be the intersection of the supplied role descriptors and the <<security-api-update-api-key-examples-user-permissions, owner user's permissions>>:\n\n[source,js]\n--------------------------------------------------\n{\n  \"indices\": [\n    {\n      \"names\": [\"*\"],\n      \"privileges\": [\"write\"]\n    }\n  ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nThe following example removes the API key's previously assigned permissions, making it inherit the owner user's full permissions.\n\n[source,console]\n----\nPUT /_security/api_key/VuaCfGcBCdbkQm-e5aOx\n{\n  \"role_descriptors\": {}\n}\n----\n// TEST[skip:api key id not available anymore]\n\nWhich returns the response:\n\n[source,console-result]\n----\n{\n  \"updated\": true\n}\n----\n\nThe API key's effective permissions after the update will be the same as the owner user's:\n\n[source,js]\n--------------------------------------------------\n{\n  \"cluster\": [\"all\"],\n  \"indices\": [\n    {\n      \"names\": [\"*\"],\n      \"privileges\": [\"all\"]\n    }\n  ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nFor the next example, assume that the owner user's permissions have changed from <<security-api-update-api-key-examples-user-permissions, the original permissions>> to:\n\n[source,js]\n--------------------------------------------------\n{\n  \"cluster\": [\"manage_security\"],\n  \"indices\": [\n    {\n      \"names\": [\"*\"],\n      \"privileges\": [\"read\"]\n    }\n  ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nThe following request auto-updates the snapshot of the user's permissions associated with the API key:\n\n[source,console]\n----\nPUT /_security/api_key/VuaCfGcBCdbkQm-e5aOx\n----\n// TEST[skip:api key id not available anymore]\n\nWhich returns the response:\n\n[source,console-result]\n----\n{\n  \"updated\": true\n}\n----\n\nResulting in the following effective permissions for the API key:\n\n[source,js]\n--------------------------------------------------\n{\n  \"cluster\": [\"manage_security\"],\n  \"indices\": [\n    {\n      \"names\": [\"*\"],\n      \"privileges\": [\"read\"]\n    }\n  ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n"
}