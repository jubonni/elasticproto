{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.466578",
        "size": 2900,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-node-enrollment.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "security-api-node-enrollment",
        "version": "8.15"
    },
    "doc": "[[security-api-node-enrollment]]\n=== Enroll Node API\n++++\n<titleabbrev>Enroll node</titleabbrev>\n++++\n\nAllows a new node to join an existing cluster with security features enabled.\n\n[[security-api-node-enrollment-api-request]]\n==== {api-request-title}\n\n`GET /_security/enroll/node`\n\n[[security-api-node-enrollment-api-desc]]\n==== {api-description-title}\n\nThe purpose of the enroll node API is to allow a new node to join an existing cluster\nwhere security is enabled. The enroll node API response contains all the necessary information\nfor the joining node to bootstrap discovery and security related settings so that it\ncan successfully join the cluster.\n\nNOTE: The response contains key and certificate material that allows the\ncaller to generate valid signed certificates for the HTTP layer of all nodes in the cluster.\n\n[[security-api-node-enrollment-api-examples]]\n==== {api-examples-title}\n\n[source,console]\n--------------------------------------------------\nGET /security/enroll/node\n--------------------------------------------------\n// TEST[skip:Determine behavior for keystore with multiple keys]\nThe API returns a response such as\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"http_ca_key\" : \"MIIJlAIBAzCCCVoGCSqGSIb3DQEHAaCCCUsEgglHMIIJQzCCA98GCSqGSIb3DQ....vsDfsA3UZBAjEPfhubpQysAICCAA=\", <1>\n  \"http_ca_cert\" : \"MIIJlAIBAzCCCVoGCSqGSIb3DQEHAaCCCUsEgglHMIIJQzCCA98GCSqGSIb3DQ....vsDfsA3UZBAjEPfhubpQysAICCAA=\", <2>\n  \"transport_ca_cert\" : \"MIIJlAIBAzCCCVoGCSqGSIb3DQEHAaCCCUsEgglHMIIJQzCCA98GCSqG....vsDfsA3UZBAjEPfhubpQysAICCAA=\", <3>\n  \"transport_key\" : \"MIIEJgIBAzCCA98GCSqGSIb3DQEHAaCCA9AEggPMMIIDyDCCA8QGCSqGSIb3....YuEiOXvqZ6jxuVSQ0CAwGGoA==\", <4>\n  \"transport_cert\" : \"MIIEJgIBAzCCA98GCSqGSIb3DQEHAaCCA9AEggPMMIIDyDCCA8QGCSqGSIb3....YuEiOXvqZ6jxuVSQ0CAwGGoA==\", <5>\n  \"nodes_addresses\" : [                          <6>\n    \"192.168.1.2:9300\"\n  ]\n}\n--------------------------------------------------\n<1> The CA private key that can be used by the new node in order to sign its certificate\n    for the HTTP layer, as a Base64 encoded string of the ASN.1 DER encoding of the key.\n<2> The CA certificate that can be used by the new node in order to sign its certificate\n    for the HTTP layer, as a Base64 encoded string of the ASN.1 DER encoding of the certificate.\n<3> The CA certificate that is used to sign the TLS certificate for the transport layer, as\n    a Base64 encoded string of the ASN.1 DER encoding of the certificate.\n<4> The private key that the node can use for TLS for its transport layer, as a Base64 encoded\n    string of the ASN.1 DER encoding of the key.\n<5> The certificate that the node can use for TLS for its transport layer, as a Base64 encoded\n    string of the ASN.1 DER encoding of the certificate.\n<6> A list of transport addresses in the form of `host:port` for the nodes that are already\n    members of the cluster.\n"
}