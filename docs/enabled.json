{
    "meta": {
        "timestamp": "2024-11-01T02:49:24.999065",
        "size": 3151,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/enabled.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "enabled",
        "version": "8.15"
    },
    "doc": "[[enabled]]\n=== `enabled`\n\nElasticsearch tries to index all of the fields you give it, but sometimes you\nwant to just store the field without indexing it. For instance, imagine that\nyou are using Elasticsearch as a web session store. You may want to index the\nsession ID and last update time, but you don't need to query or run\naggregations on the session data itself.\n\nThe `enabled` setting, which can be applied only to the top-level mapping\ndefinition and to <<object,`object`>> fields, causes Elasticsearch to skip\nparsing of the contents of the field entirely. The JSON can still be retrieved\nfrom the <<mapping-source-field,`_source`>> field, but it is not searchable or\nstored in any other way:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"user_id\": {\n        \"type\":  \"keyword\"\n      },\n      \"last_updated\": {\n        \"type\": \"date\"\n      },\n      \"session_data\": { <1>\n        \"type\": \"object\",\n        \"enabled\": false\n      }\n    }\n  }\n}\n\nPUT my-index-000001/_doc/session_1\n{\n  \"user_id\": \"kimchy\",\n  \"session_data\": { <2>\n    \"arbitrary_object\": {\n      \"some_array\": [ \"foo\", \"bar\", { \"baz\": 2 } ]\n    }\n  },\n  \"last_updated\": \"2015-12-06T18:20:22\"\n}\n\nPUT my-index-000001/_doc/session_2\n{\n  \"user_id\": \"jpountz\",\n  \"session_data\": \"none\", <3>\n  \"last_updated\": \"2015-12-06T18:22:13\"\n}\n--------------------------------------------------\n\n<1> The `session_data` field is disabled.\n<2> Any arbitrary data can be passed to the `session_data` field as it will be entirely ignored.\n<3> The `session_data` will also ignore values that are not JSON objects.\n\nThe entire mapping may be disabled as well, in which case the document is\nstored in the <<mapping-source-field,`_source`>> field, which means it can be\nretrieved, but none of its contents are indexed in any way:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"enabled\": false <1>\n  }\n}\n\nPUT my-index-000001/_doc/session_1\n{\n  \"user_id\": \"kimchy\",\n  \"session_data\": {\n    \"arbitrary_object\": {\n      \"some_array\": [ \"foo\", \"bar\", { \"baz\": 2 } ]\n    }\n  },\n  \"last_updated\": \"2015-12-06T18:20:22\"\n}\n\nGET my-index-000001/_doc/session_1 <2>\n\nGET my-index-000001/_mapping <3>\n--------------------------------------------------\n\n<1> The entire mapping is disabled.\n<2> The document can be retrieved.\n<3> Checking the mapping reveals that no fields have been added.\n\nThe `enabled` setting for existing fields and the top-level mapping\ndefinition cannot be updated.\n\nNote that because Elasticsearch completely skips parsing the field\ncontents, it is possible to add non-object data to a disabled field:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"session_data\": {\n        \"type\": \"object\",\n        \"enabled\": false\n      }\n    }\n  }\n}\n\nPUT my-index-000001/_doc/session_1\n{\n  \"session_data\": \"foo bar\" <1>\n}\n--------------------------------------------------\n\n<1> The document is added successfully, even though `session_data` contains non-object data."
}