{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.069605",
        "size": 14402,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/async-search.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "async-search",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[async-search]]\n=== Async search\n\nThe async search API let you asynchronously execute a search request, monitor\nits progress, and retrieve partial results as they become available.\n\n[[submit-async-search]]\n==== Submit async search API\n\nExecutes a search request asynchronously. It accepts the same parameters and\nrequest body as the <<search-search,search API>>.\n\n[source,console,id=submit-async-search-date-histogram-example]\n--------------------------------------------------\nPOST /sales*/_async_search?size=0\n{\n  \"sort\": [\n    { \"date\": { \"order\": \"asc\" } }\n  ],\n  \"aggs\": {\n    \"sale_date\": {\n      \"date_histogram\": {\n        \"field\": \"date\",\n        \"calendar_interval\": \"1d\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[setup:sales]\n// TEST[s/size=0/size=0&wait_for_completion_timeout=10s&keep_on_completion=true/]\n\nThe response contains an identifier of the search being executed. You can use\nthis ID to later retrieve the search's final results. The currently available\nsearch results are returned as part of the\n<<search-api-response-body,`response`>> object.\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\", <1>\n  \"is_partial\" : true, <2>\n  \"is_running\" : true, <3>\n  \"start_time_in_millis\" : 1583945890986,\n  \"expiration_time_in_millis\" : 1584377890986,\n  \"response\" : {\n    \"took\" : 1122,\n    \"timed_out\" : false,\n    \"num_reduce_phases\" : 0,\n    \"_shards\" : {\n      \"total\" : 562, <4>\n      \"successful\" : 3, <5>\n      \"skipped\" : 0,\n      \"failed\" : 0\n    },\n    \"hits\" : {\n      \"total\" : {\n        \"value\" : 157483, <6>\n        \"relation\" : \"gte\"\n      },\n      \"max_score\" : null,\n      \"hits\" : [ ]\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n// TESTRESPONSE[s/\"is_partial\" : true/\"is_partial\": $body.is_partial/]\n// TESTRESPONSE[s/\"is_running\" : true/\"is_running\": $body.is_running/]\n// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n// TESTRESPONSE[s/\"response\"/\"completion_time_in_millis\": $body.completion_time_in_millis,\\n  \"response\"/]\n// TESTRESPONSE[s/\"took\" : 1122/\"took\": $body.response.took/]\n// TESTRESPONSE[s/\"num_reduce_phases\" : 0,//]\n// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n// TESTRESPONSE[s/\"successful\" : 3/\"successful\": $body.response._shards.successful/]\n// TESTRESPONSE[s/\"value\" : 157483/\"value\": $body.response.hits.total.value/]\n// TESTRESPONSE[s/\"relation\" : \"gte\"/\"relation\": $body.response.hits.total.relation/]\n// TESTRESPONSE[s/\"hits\" : \\[ \\]\\n\\s\\s\\s\\s\\}/\"hits\" : \\[\\]},\"aggregations\":  $body.response.aggregations/]\n\n<1> Identifier of the async search that can be used to monitor its progress,\nretrieve its results, and/or delete it\n<2> When the query is no longer running, indicates whether the search failed\nor was successfully completed on all shards. While the query is being\nexecuted, `is_partial` is always set to `true`\n<3> Whether the search is still being executed or it has completed\n<4> How many shards the search will be executed on, overall\n<5> How many shards have successfully completed the search\n<6> How many documents are currently matching the query, which belong to the\nshards that have already completed the search\n\nNOTE: Although the query is no longer running, hence `is_running` is set to\n`false`, results may be partial. That happens in case the search failed after\nsome shards returned their results, or when the node that is coordinating the\n async search dies.\n\nIt is possible to block and wait until the search is completed up to a certain\ntimeout by providing the `wait_for_completion_timeout` parameter, which\ndefaults to `1` second. When the async search completes within such timeout,\nthe response won't include the ID as the results are not stored in the cluster.\nThe `keep_on_completion` parameter, which defaults to `false`, can be set to\n`true` to request that results are stored for later retrieval also when the\nsearch completes within the `wait_for_completion_timeout`.\n\nYou can also specify how long the async search needs to be available through the\n`keep_alive` parameter, which defaults to `5d` (five days). Ongoing async\nsearches and any saved search results are deleted after this period.\n\nNOTE: When the primary sort of the results is an indexed field, shards get\nsorted based on minimum and maximum value that they hold for that field, hence\npartial results become available following the sort criteria that was requested.\n\nThe submit async search API supports the same\n<<search-search-api-query-params,parameters>> as the search API, though some\nhave different default values:\n\n* `batched_reduce_size` defaults to `5`: this affects how often partial results\nbecome available, which happens whenever shard results are reduced. A partial\nreduction is performed every time the coordinating node has received a certain\nnumber of new shard responses (`5` by default).\n* `request_cache` defaults to `true`\n* `pre_filter_shard_size` defaults to `1` and cannot be changed: this is to\nenforce the execution of a pre-filter roundtrip to retrieve statistics from\neach shard so that the ones that surely don't hold any document matching the\nquery get skipped.\n* `ccs_minimize_roundtrips` defaults to `false`. When doing a {ccs}, setting\nit to `true` may improve overall search latency, particularly when searching\nclusters with a large number of shards. However, when set to `true`, the progress\nof searches on the remote clusters will not be received until the search finishes\non all clusters. See <<modules-cross-cluster-search>> for more information.\n\n\nWARNING: Async search does not support <<scroll-search-results,scroll>>\nnor search requests that only include the <<search-suggesters,suggest section>>.\n\nWARNING: By default, {es} doesn't allow to store an async search response\nlarger than 10Mb, and an attempt to do this results in an error. The maximum\nallowed size for a stored async search response can be set by changing the\n`search.max_async_search_response_size` cluster level setting.\n\n[[get-async-search]]\n==== Get async search\n\nThe get async search API retrieves the results of a previously submitted async\nsearch request given its id.\n\nIf the {es} {security-features} are enabled, the access to the results of a\nspecific async search is restricted to only\n<<can-access-resources-check,the user or API key that submitted it>>.\n\n[source,console,id=get-async-search-date-histogram-example]\n--------------------------------------------------\nGET /_async_search/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\n--------------------------------------------------\n// TEST[continued s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/\\${body.id}/]\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\",\n  \"is_partial\" : false, <1>\n  \"is_running\" : false, <2>\n  \"start_time_in_millis\" : 1583945890986,\n  \"expiration_time_in_millis\" : 1584377890986, <3>\n  \"completion_time_in_millis\" : 1583945903130, <4>\n  \"response\" : {\n    \"took\" : 12144,\n    \"timed_out\" : false,\n    \"num_reduce_phases\" : 46, <5>\n    \"_shards\" : {\n      \"total\" : 562,\n      \"successful\" : 188, <6>\n      \"skipped\" : 0,\n      \"failed\" : 0\n    },\n    \"hits\" : {\n      \"total\" : {\n        \"value\" : 456433,\n        \"relation\" : \"eq\"\n      },\n      \"max_score\" : null,\n      \"hits\" : [ ]\n    },\n    \"aggregations\" : { <7>\n      \"sale_date\" :  {\n        \"buckets\" : []\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/$body.id/]\n// TESTRESPONSE[s/\"is_partial\" : true/\"is_partial\" : false/]\n// TESTRESPONSE[s/\"is_running\" : true/\"is_running\" : false/]\n// TESTRESPONSE[s/1583945890986/$body.start_time_in_millis/]\n// TESTRESPONSE[s/1584377890986/$body.expiration_time_in_millis/]\n// TESTRESPONSE[s/1583945903130/$body.completion_time_in_millis/]\n// TESTRESPONSE[s/\"took\" : 12144/\"took\": $body.response.took/]\n// TESTRESPONSE[s/\"total\" : 562/\"total\": $body.response._shards.total/]\n// TESTRESPONSE[s/\"successful\" : 188/\"successful\": $body.response._shards.successful/]\n// TESTRESPONSE[s/\"value\" : 456433/\"value\": $body.response.hits.total.value/]\n// TESTRESPONSE[s/\"buckets\" : \\[\\]/\"buckets\": $body.response.aggregations.sale_date.buckets/]\n// TESTRESPONSE[s/\"num_reduce_phases\" : 46,//]\n\n<1> When the query is no longer running, indicates whether the search failed\nor was successfully completed on all shards. While the query is being\nexecuted, `is_partial` is always set to `true`\n<2> Whether the search is still being executed or it has completed\n<3> When the async search will expire\n<4> When the async search has finished, the completion_time is indicated (start_time + took)\n<5> Indicates how many reductions of the results have been performed. If this\nnumber increases compared to the last retrieved results, you can expect\nadditional results included in the search response\n<6> Indicates how many shards have executed the query. Note that in order for\nshard results to be included in the search response, they need to be reduced\nfirst.\n<7> Partial aggregations results, coming from the shards that have already\ncompleted the execution of the query.\n\nThe `wait_for_completion_timeout` parameter can also be provided when calling\nthe Get Async Search API, in order to wait for the search to be completed up\nuntil the provided timeout. Final results will be returned if available before\nthe timeout expires, otherwise the currently available results will be returned\nonce the timeout expires. By default no timeout is set meaning that the\ncurrently available results will be returned without any additional wait.\n\nThe `keep_alive` parameter specifies how long the async search should be\navailable in the cluster. When not specified, the `keep_alive` set with the\ncorresponding submit async request will be used. Otherwise, it is possible to\noverride such value and extend the validity of the request. When this period\nexpires, the search, if still running, is cancelled. If the search is completed,\nits saved results are deleted.\n\n\n[[get-async-search-status]]\n==== Get async search status\n\nThe get async search status API, without retrieving search results, shows only\nthe status of a previously submitted async search request given its `id`.\n\nIf the {es} {security-features} are enabled, the access to the status of a\nspecific async search is restricted to:\n\n* The <<can-access-resources-check,user or API key that submitted>> the original async search request.\n* Users that have the `monitor` cluster privilege or higher.\n\nYou can also specify how long the async search needs to be available through the\n`keep_alive` parameter, which defaults to `5d` (five days). Ongoing async\nsearches and any saved search results are deleted after this period.\n\n[source,console,id=get-async-search-status-example]\n--------------------------------------------------\nGET /_async_search/status/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\n--------------------------------------------------\n// TEST[continued s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/\\${body.id}/]\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\",\n  \"is_running\" : true,\n  \"is_partial\" : true,\n  \"start_time_in_millis\" : 1583945890986,\n  \"expiration_time_in_millis\" : 1584377890986,\n  \"_shards\" : {\n      \"total\" : 562,\n      \"successful\" : 188, <1>\n      \"skipped\" : 0,\n      \"failed\" : 0\n  }\n}\n--------------------------------------------------\n// TEST[skip: a sample output of a status of a running async search]\n\n<1> Indicates how many shards have executed the query so far.\n\nFor an async search that has been completed, the status response has an\nadditional `completion_status` field that shows the status code of the completed\nasync search.\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\",\n  \"is_running\" : false,\n  \"is_partial\" : false,\n  \"start_time_in_millis\" : 1583945890986,\n  \"expiration_time_in_millis\" : 1584377890986,\n  \"_shards\" : {\n      \"total\" : 562,\n      \"successful\" : 562,\n      \"skipped\" : 0,\n      \"failed\" : 0\n  },\n \"completion_status\" : 200 <1>\n}\n--------------------------------------------------\n// TEST[skip: a sample output of a status of a completed async search]\n\n<1> Indicates that the async search was successfully completed.\n\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\",\n  \"is_running\" : false,\n  \"is_partial\" : true,\n  \"start_time_in_millis\" : 1583945890986,\n  \"expiration_time_in_millis\" : 1584377890986,\n  \"_shards\" : {\n      \"total\" : 562,\n      \"successful\" : 450,\n      \"skipped\" : 0,\n      \"failed\" : 112\n  },\n \"completion_status\" : 503 <1>\n}\n--------------------------------------------------\n// TEST[skip: a sample output of a status of a completed async search]\n\n<1> Indicates that the async search was completed with an error.\n\n\n[[delete-async-search]]\n==== Delete async search\n\nYou can use the delete async search API to manually delete an async search by\nID. If the search is still running, the search request will be cancelled.\nOtherwise, the saved search results are deleted.\n\n[source,console,id=delete-async-search-date-histogram-example]\n--------------------------------------------------\nDELETE /_async_search/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\n--------------------------------------------------\n// TEST[continued s/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=/\\${body.id}/]\n\nIf the {es} {security-features} are enabled, the deletion of a specific async\nsearch is restricted to:\n\n  * The <<can-access-resources-check,user or API key that submitted>> the original async search request.\n  * Users that have the `cancel_task` cluster privilege or higher.\n"
}