{
    "meta": {
        "size": 8154,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-get-job.html",
        "type": "documentation",
        "role": [
            "xpack",
            "child_attributes"
        ],
        "has_code": true,
        "title": "rollup-get-job",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[rollup-get-job]]\n=== Get {rollup-jobs} API\n++++\n<titleabbrev>Get job</titleabbrev>\n++++\n\ndeprecated::[8.11.0,\"Rollups will be removed in a future version. Use <<downsampling,downsampling>> instead.\"]\n\nRetrieves the configuration, stats, and status of {rollup-jobs}.\n\n[[rollup-get-job-request]]\n==== {api-request-title}\n\n`GET _rollup/job/<job_id>`\n\n[[rollup-get-job-prereqs]]\n==== {api-prereq-title}\n\n* If the {es} {security-features} are enabled, you must have `monitor`,\n`monitor_rollup`, `manage` or `manage_rollup` cluster privileges to use this API.\nFor more information, see <<security-privileges>>.\n\n[[rollup-get-job-desc]]\n==== {api-description-title}\n\nThe API can return the details for a single {rollup-job} or for all {rollup-jobs}.\n\nNOTE: This API returns only active (both `STARTED` and `STOPPED`) jobs. If a job\nwas created, ran for a while then deleted, this API does not return any details\nabout that job.\n\nFor details about a historical {rollup-job}, the\n<<rollup-get-rollup-caps,rollup capabilities API>> may be more useful.\n\n[[rollup-get-job-path-params]]\n==== {api-path-parms-title}\n\n`<job_id>`::\n  (Optional, string) Identifier for the {rollup-job}. If it is `_all` or omitted,\n   the API returns all {rollup-jobs}.\n\n[role=\"child_attributes\"]\n[[rollup-get-job-response-body]]\n==== {api-response-body-title}\n\n`jobs`::\n(array) An array of {rollup-job} resources.\n+\n.Properties of {rollup-job} resources\n[%collapsible%open]\n====\n`config`:::\n(object) Contains the configuration for the {rollup-job}. This information is\nidentical to the configuration that was supplied when creating the job via the\n<<rollup-put-job,create job API>>.\n\n`stats`:::\n(object) Contains transient statistics about the {rollup-job}, such as how many\ndocuments have been processed and how many rollup summary docs have been\nindexed. These stats are not persisted. If a node is restarted, these stats are\nreset.\n\n`status`:::\n(object) Contains the current status of the indexer for the {rollup-job}. The\npossible values and their meanings are:\n+\n- `stopped` means the indexer is paused and will not process data, even if its\ncron interval triggers.\n- `started` means the indexer is running, but not actively indexing data. When\nthe cron interval triggers, the job's indexer will begin to process data.\n- `indexing` means the indexer is actively processing data and creating new\nrollup documents. When in this state, any subsequent cron interval triggers will\nbe ignored because the job is already active with the prior trigger.\n- `abort` is a transient state, which is usually not witnessed by the user. It\nis used if the task needs to be shut down for some reason (job has been deleted,\nan unrecoverable error has been encountered, etc). Shortly after the `abort`\nstate is set, the job will remove itself from the cluster.\n====\n\n[[rollup-get-job-example]]\n==== {api-examples-title}\n\nIf we have already created a rollup job named `sensor`, the details about the\njob can be retrieved with:\n\n[source,console]\n--------------------------------------------------\nGET _rollup/job/sensor\n--------------------------------------------------\n// TEST[setup:sensor_rollup_job]\n\nThe API yields the following response:\n\n[source,console-result]\n----\n{\n  \"jobs\": [\n    {\n      \"config\": {\n        \"id\": \"sensor\",\n        \"index_pattern\": \"sensor-*\",\n        \"rollup_index\": \"sensor_rollup\",\n        \"cron\": \"*/30 * * * * ?\",\n        \"groups\": {\n          \"date_histogram\": {\n            \"fixed_interval\": \"1h\",\n            \"delay\": \"7d\",\n            \"field\": \"timestamp\",\n            \"time_zone\": \"UTC\"\n          },\n          \"terms\": {\n            \"fields\": [\n              \"node\"\n            ]\n          }\n        },\n        \"metrics\": [\n          {\n            \"field\": \"temperature\",\n            \"metrics\": [\n              \"min\",\n              \"max\",\n              \"sum\"\n            ]\n          },\n          {\n            \"field\": \"voltage\",\n            \"metrics\": [\n              \"avg\"\n            ]\n          }\n        ],\n        \"timeout\": \"20s\",\n        \"page_size\": 1000\n      },\n      \"status\": {\n        \"job_state\": \"stopped\"\n      },\n      \"stats\": {\n        \"pages_processed\": 0,\n        \"documents_processed\": 0,\n        \"rollups_indexed\": 0,\n        \"trigger_count\": 0,\n        \"index_failures\": 0,\n        \"index_time_in_ms\": 0,\n        \"index_total\": 0,\n        \"search_failures\": 0,\n        \"search_time_in_ms\": 0,\n        \"search_total\": 0,\n        \"processing_time_in_ms\": 0,\n        \"processing_total\": 0\n      }\n    }\n  ]\n}\n----\n\nThe `jobs` array contains a single job (`id: sensor`) since we requested a single job in the endpoint's URL.\nIf we add another job, we can see how multi-job responses are handled:\n\n[source,console]\n--------------------------------------------------\nPUT _rollup/job/sensor2 <1>\n{\n  \"index_pattern\": \"sensor-*\",\n  \"rollup_index\": \"sensor_rollup\",\n  \"cron\": \"*/30 * * * * ?\",\n  \"page_size\": 1000,\n  \"groups\": {\n    \"date_histogram\": {\n      \"field\": \"timestamp\",\n      \"fixed_interval\": \"1h\",\n      \"delay\": \"7d\"\n    },\n    \"terms\": {\n      \"fields\": [ \"node\" ]\n    }\n  },\n  \"metrics\": [\n    {\n      \"field\": \"temperature\",\n      \"metrics\": [ \"min\", \"max\", \"sum\" ]\n    },\n    {\n      \"field\": \"voltage\",\n      \"metrics\": [ \"avg\" ]\n    }\n  ]\n}\n\nGET _rollup/job/_all <2>\n--------------------------------------------------\n// TEST[setup:sensor_rollup_job]\n<1> We create a second job with name `sensor2`\n<2> Then request all jobs by using `_all` in the GetJobs API\n\nWhich will yield the following response:\n\n[source,js]\n----\n{\n  \"jobs\": [\n    {\n      \"config\": {\n        \"id\": \"sensor2\",\n        \"index_pattern\": \"sensor-*\",\n        \"rollup_index\": \"sensor_rollup\",\n        \"cron\": \"*/30 * * * * ?\",\n        \"groups\": {\n          \"date_histogram\": {\n            \"fixed_interval\": \"1h\",\n            \"delay\": \"7d\",\n            \"field\": \"timestamp\",\n            \"time_zone\": \"UTC\"\n          },\n          \"terms\": {\n            \"fields\": [\n              \"node\"\n            ]\n          }\n        },\n        \"metrics\": [\n          {\n            \"field\": \"temperature\",\n            \"metrics\": [\n              \"min\",\n              \"max\",\n              \"sum\"\n            ]\n          },\n          {\n            \"field\": \"voltage\",\n            \"metrics\": [\n              \"avg\"\n            ]\n          }\n        ],\n        \"timeout\": \"20s\",\n        \"page_size\": 1000\n      },\n      \"status\": {\n        \"job_state\": \"stopped\"\n      },\n      \"stats\": {\n        \"pages_processed\": 0,\n        \"documents_processed\": 0,\n        \"rollups_indexed\": 0,\n        \"trigger_count\": 0,\n        \"index_failures\": 0,\n        \"index_time_in_ms\": 0,\n        \"index_total\": 0,\n        \"search_failures\": 0,\n        \"search_time_in_ms\": 0,\n        \"search_total\": 0,\n        \"processing_time_in_ms\": 0,\n        \"processing_total\": 0\n      }\n    },\n    {\n      \"config\": {\n        \"id\": \"sensor\",\n        \"index_pattern\": \"sensor-*\",\n        \"rollup_index\": \"sensor_rollup\",\n        \"cron\": \"*/30 * * * * ?\",\n        \"groups\": {\n          \"date_histogram\": {\n            \"fixed_interval\": \"1h\",\n            \"delay\": \"7d\",\n            \"field\": \"timestamp\",\n            \"time_zone\": \"UTC\"\n          },\n          \"terms\": {\n            \"fields\": [\n              \"node\"\n            ]\n          }\n        },\n        \"metrics\": [\n          {\n            \"field\": \"temperature\",\n            \"metrics\": [\n              \"min\",\n              \"max\",\n              \"sum\"\n            ]\n          },\n          {\n            \"field\": \"voltage\",\n            \"metrics\": [\n              \"avg\"\n            ]\n          }\n        ],\n        \"timeout\": \"20s\",\n        \"page_size\": 1000\n      },\n      \"status\": {\n        \"job_state\": \"stopped\"\n      },\n      \"stats\": {\n        \"pages_processed\": 0,\n        \"documents_processed\": 0,\n        \"rollups_indexed\": 0,\n        \"trigger_count\": 0,\n        \"index_failures\": 0,\n        \"index_time_in_ms\": 0,\n        \"index_total\": 0,\n        \"search_failures\": 0,\n        \"search_time_in_ms\": 0,\n        \"search_total\": 0,\n        \"processing_time_in_ms\": 0,\n        \"processing_total\": 0\n      }\n    }\n  ]\n}\n----\n// NOTCONSOLE\n"
}