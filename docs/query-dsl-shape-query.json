{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.414073",
        "size": 4517,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-shape-query.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "query-dsl-shape-query",
        "version": "8.15"
    },
    "doc": "[[query-dsl-shape-query]]\n[role=\"xpack\"]\n=== Shape query\n++++\n<titleabbrev>Shape</titleabbrev>\n++++\n\nQueries documents that contain fields indexed using the `shape` type.\n\nRequires the <<shape,`shape` Mapping>>.\n\nThe query supports two ways of defining the target shape, either by\nproviding a whole shape definition, or by referencing the name, or id, of a shape\npre-indexed in another index. Both formats are defined below with\nexamples.\n\n==== Inline Shape Definition\n\nSimilar to the `geo_shape` query, the `shape` query uses\nhttp://geojson.org[GeoJSON] or\n{wikipedia}/Well-known_text_representation_of_geometry[Well Known Text]\n(WKT) to represent shapes.\n\nGiven the following index:\n\n[source,console]\n--------------------------------------------------\nPUT /example\n{\n  \"mappings\": {\n    \"properties\": {\n      \"geometry\": {\n        \"type\": \"shape\"\n      }\n    }\n  }\n}\n\nPUT /example/_doc/1?refresh=wait_for\n{\n  \"name\": \"Lucky Landing\",\n  \"geometry\": {\n    \"type\": \"point\",\n    \"coordinates\": [ 1355.400544, 5255.530286 ]\n  }\n}\n--------------------------------------------------\n// TESTSETUP\n\nThe following query will find the point using the Elasticsearch's\n`envelope` GeoJSON extension:\n\n[source,console]\n--------------------------------------------------\nGET /example/_search\n{\n  \"query\": {\n    \"shape\": {\n      \"geometry\": {\n        \"shape\": {\n          \"type\": \"envelope\",\n          \"coordinates\": [ [ 1355.0, 5355.0 ], [ 1400.0, 5200.0 ] ]\n        },\n        \"relation\": \"within\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n////\n[source,console-result]\n--------------------------------------------------\n{\n  \"took\": 3,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\": 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\": {\n      \"value\": 1,\n      \"relation\": \"eq\"\n    },\n    \"max_score\": 0.0,\n    \"hits\": [\n      {\n        \"_index\": \"example\",\n        \"_id\": \"1\",\n        \"_score\": 0.0,\n        \"_source\": {\n          \"name\": \"Lucky Landing\",\n          \"geometry\": {\n            \"type\": \"point\",\n            \"coordinates\": [\n              1355.400544,\n              5255.530286\n            ]\n          }\n        }\n      }\n    ]\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"took\": 3/\"took\": $body.took/]\n////\n\n==== Pre-Indexed Shape\n\nThe Query also supports using a shape which has already been indexed in\nanother index. This is particularly useful for when\nyou have a pre-defined list of shapes which are useful to your\napplication and you want to reference this using a logical name (for\nexample 'New Zealand') rather than having to provide their coordinates\neach time. In this situation it is only necessary to provide:\n\n* `id` - The ID of the document that containing the pre-indexed shape.\n* `index` - Name of the index where the pre-indexed shape is. Defaults\nto 'shapes'.\n* `path` - The field specified as path containing the pre-indexed shape.\nDefaults to 'shape'.\n* `routing` - The routing of the shape document if required.\n\nThe following is an example of using the Filter with a pre-indexed\nshape:\n\n[source,console]\n--------------------------------------------------\nPUT /shapes\n{\n  \"mappings\": {\n    \"properties\": {\n      \"geometry\": {\n        \"type\": \"shape\"\n      }\n    }\n  }\n}\n\nPUT /shapes/_doc/footprint\n{\n  \"geometry\": {\n    \"type\": \"envelope\",\n    \"coordinates\": [ [ 1355.0, 5355.0 ], [ 1400.0, 5200.0 ] ]\n  }\n}\n\nGET /example/_search\n{\n  \"query\": {\n    \"shape\": {\n      \"geometry\": {\n        \"indexed_shape\": {\n          \"index\": \"shapes\",\n          \"id\": \"footprint\",\n          \"path\": \"geometry\"\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n==== Spatial Relations\n\nThe following is a complete list of spatial relation operators available:\n\n* `INTERSECTS` - (default) Return all documents whose `shape` field\nintersects the query geometry.\n* `DISJOINT` - Return all documents whose `shape` field\nhas nothing in common with the query geometry.\n* `WITHIN` - Return all documents whose `shape` field\nis within the query geometry.\n* `CONTAINS` - Return all documents whose `shape` field\ncontains the query geometry.\n\n[discrete]\n==== Ignore Unmapped\n\nWhen set to `true` the `ignore_unmapped` option will ignore an unmapped field\nand will not match any documents for this query. This can be useful when\nquerying multiple indexes which might have different mappings. When set to\n`false` (the default value) the query will throw an exception if the field\nis not mapped.\n"
}