{
    "meta": {
        "size": 12835,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-network.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "modules-network",
        "version": "8.15"
    },
    "doc": "[[modules-network]]\n=== Networking\n\nEach {es} node has two different network interfaces. Clients send requests to\n{es}'s REST APIs using its <<http-settings,HTTP interface>>, but nodes\ncommunicate with other nodes using the <<transport-settings,transport\ninterface>>. The transport interface is also used for communication with\n<<remote-clusters,remote clusters>>. The transport interface uses a custom\nbinary protocol sent over <<long-lived-connections,long-lived>> TCP channels.\nBoth interfaces can be configured to use <<secure-cluster,TLS for security>>.\n\nYou can configure both of these interfaces at the same time using the\n`network.*` settings. If you have a more complicated network, you might need to\nconfigure the interfaces independently using the `http.*` and `transport.*`\nsettings. Where possible, use the `network.*` settings that apply to both\ninterfaces to simplify your configuration and reduce duplication.\n\nBy default {es} binds only to `localhost` which means it cannot be accessed\nremotely. This configuration is sufficient for a local development cluster made\nof one or more nodes all running on the same host. To form a cluster across\nmultiple hosts, or which is accessible to remote clients, you must adjust some\n<<common-network-settings,network settings>> such as `network.host`.\n\n[WARNING]\n.Be careful with the network configuration!\n=============================\nNever expose an unprotected node to the public internet. If you do, you are\npermitting anyone in the world to download, modify, or delete any of the data\nin your cluster.\n=============================\n\nConfiguring {es} to bind to a non-local address will <<dev-vs-prod,convert some\nwarnings into fatal exceptions>>. If a node refuses to start after configuring\nits network settings then you must address the logged exceptions before\nproceeding.\n\n[[common-network-settings]]\n==== Commonly used network settings\n\nMost users will need to configure only the following network settings.\n\n`network.host`::\n(<<static-cluster-setting,Static>>, string)\nSets the address of this node for both HTTP and transport traffic. The node\nwill bind to this address and will also use it as its publish address. Accepts\nan IP address, a hostname, or a <<network-interface-values,special value>>.\n+\nDefaults to `_local_`. However, note that <<configuring-stack-security,security\nauto-configuration>> will add `http.host: 0.0.0.0` to your `elasticsearch.yml`\nconfiguration file, which overrides this default for HTTP traffic.\n\n`http.port`::\n(<<static-cluster-setting,Static>>, integer)\nThe port to bind for HTTP client communication. Accepts a single value or a\nrange. If a range is specified, the node will bind to the first available port\nin the range.\n+\nDefaults to `9200-9300`.\n\n`transport.port`::\n(<<static-cluster-setting,Static>>, integer)\nThe port to bind for communication between nodes. Accepts a single value or a\nrange. If a range is specified, the node will bind to the first available port\nin the range. Set this setting to a single port, not a range, on every\nmaster-eligible node.\n+\nDefaults to `9300-9400`.\n\n[[remote_cluster.port]]\n`remote_cluster.port`::\n(<<static-cluster-setting,Static>>, integer)\nThe port to bind for remote cluster client communication. Accepts a single value.\n+\nDefaults to `9443`.\n\n[[network-interface-values]]\n==== Special values for network addresses\n\nYou can configure {es} to automatically determine its addresses by using the\nfollowing special values. Use these values when configuring\n`network.host`, `network.bind_host`, `network.publish_host`, and the\ncorresponding settings for the HTTP and transport interfaces.\n\n`_local_`::\n  Any loopback addresses on the system, for example `127.0.0.1`.\n\n`_site_`::\n  Any site-local addresses on the system, for example `192.168.0.1`.\n\n`_global_`::\n  Any globally-scoped addresses on the system, for example `8.8.8.8`.\n\n`_[networkInterface]_`::\n  Use the addresses of the network interface called `[networkInterface]`. For\n  example if you wish to use the addresses of an interface called `en0` then\n  set `network.host: _en0_`.\n\n`0.0.0.0`::\n  The addresses of all available network interfaces.\n\nNOTE: In some systems these special values resolve to multiple addresses. If\nso, {es} will select one of them as its publish address and may change its\nselection on each node restart. Ensure your node is accessible at every possible\naddress.\n\nNOTE: Any values containing a `:` (e.g. an IPv6 address or some of the\n<<network-interface-values,special values>>) must be quoted because `:` is a\nspecial character in YAML.\n\n[[network-interface-values-ipv4-vs-ipv6]]\n===== IPv4 vs IPv6\n\nThese special values yield both IPv4 and IPv6 addresses by default, but you can\nalso add an `:ipv4` or `:ipv6` suffix to limit them to just IPv4 or IPv6\naddresses respectively. For example, `network.host: \"_en0:ipv4_\"` would set this\nnode's addresses to the IPv4 addresses of interface `en0`.\n\n[TIP]\n.Discovery in the Cloud\n================================\n\nMore special settings are available when running in the Cloud with either the\n{plugins}/discovery-ec2.html[EC2 discovery plugin] or the\n{plugins}/discovery-gce-network-host.html#discovery-gce-network-host[Google Compute Engine discovery plugin]\ninstalled.\n\n================================\n\n[[modules-network-binding-publishing]]\n==== Binding and publishing\n\n{es} uses network addresses for two distinct purposes known as binding and\npublishing. Most nodes will use the same address for everything, but more\ncomplicated setups may need to configure different addresses for different\npurposes.\n\nWhen an application such as {es} wishes to receive network communications, it\nmust indicate to the operating system the address or addresses whose traffic it\nshould receive. This is known as _binding_ to those addresses. {es} can bind to\nmore than one address if needed, but most nodes only bind to a single address.\n{es} can only bind to an address if it is running on a host that has a network\ninterface with that address. If necessary, you can configure the transport and\nHTTP interfaces to bind to different addresses.\n\nEach {es} node has an address at which clients and other nodes can contact it,\nknown as its _publish address_. Each node has one publish address for its HTTP\ninterface and one for its transport interface. These two addresses can be\nanything, and don't need to be addresses of the network interfaces on the host.\nThe only requirements are that each node must be:\n\n* Accessible at its HTTP publish address by all clients that will discover it\n  using sniffing.\n\n* Accessible at its transport publish address by all other nodes in its\n  cluster, and by any remote clusters that will discover it using\n  <<sniff-mode,sniff mode>>.\n\nEach node must have its own distinct publish address.\n\nIf you specify the transport publish address using a hostname then {es} will\nresolve this hostname to an IP address once during startup, and other nodes\nwill use the resulting IP address instead of resolving the name again\nthemselves. You must use a hostname such that all of the addresses to which it\nresolves are addresses at which the node is accessible from all other nodes. To\navoid confusion, it is simplest to use a hostname which resolves to a single\naddress.\n\nIf you specify the transport publish address using a\n<<network-interface-values,special value>> then {es} will resolve this value to\na single IP address during startup, and other nodes will use the resulting IP\naddress instead of resolving the value again themselves. You must use a value\nsuch that all of the addresses to which it resolves are addresses at which the\nnode is accessible from all other nodes. To avoid confusion, it is simplest to\nuse a value which resolves to a single address. It is usually a mistake to use\n`0.0.0.0` as a publish address on hosts with more than one network interface.\n\n===== Using a single address\n\nThe most common configuration is for {es} to bind to a single address at which\nit is accessible to clients and other nodes. To use this configuration, set\nonly `network.host` to the desired address. Do not separately set any bind or\npublish addresses. Do not separately specify the addresses for the HTTP or\ntransport interfaces.\n\n===== Using multiple addresses\n\nUse the <<advanced-network-settings, advanced network settings>> if you wish to\nbind {es} to multiple addresses, or to publish a different address from the\naddresses to which you are binding. Set `network.bind_host` to the bind\naddresses, and `network.publish_host` to the address at which this node is\nexposed. In complex configurations, you can configure these addresses\ndifferently for the HTTP and transport interfaces.\n\n[[advanced-network-settings]]\n==== Advanced network settings\n\nThese advanced settings let you bind to multiple addresses, or to use different\naddresses for binding and publishing. They are not required in most cases and\nyou should not use them if you can use the <<common-network-settings,commonly\nused settings>> instead.\n\n`network.bind_host`::\n(<<static-cluster-setting,Static>>, string)\nThe network address(es) to which the node should bind in order to listen for\nincoming connections. Accepts a list of IP addresses, hostnames, and\n<<network-interface-values,special values>>. Defaults to the address given by\n`network.host`. Use this setting only if binding to multiple addresses or using\ndifferent addresses for publishing and binding.\n\n`network.publish_host`::\n(<<static-cluster-setting,Static>>, string)\nThe network address that clients and other nodes can use to contact this node.\nAccepts an IP address, a hostname, or a <<network-interface-values,special\nvalue>>. Defaults to the address given by `network.host`. Use this setting only\nif binding to multiple addresses or using different addresses for publishing\nand binding.\n\nNOTE: You can specify a list of addresses for `network.host` and\n`network.publish_host`. You can also specify one or more hostnames or\n<<network-interface-values,special values>> that resolve to multiple addresses.\nIf you do this then {es} chooses one of the addresses for its publish address.\nThis choice uses heuristics based on IPv4/IPv6 stack preference and\nreachability and may change when the node restarts. Ensure\neach node is accessible at all possible publish addresses.\n\n[[tcp-settings]]\n===== Advanced TCP settings\n\nUse the following settings to control the low-level parameters of the TCP\nconnections used by the HTTP and transport interfaces.\n\n`network.tcp.keep_alive`::\n(<<static-cluster-setting,Static>>, boolean)\nConfigures the `SO_KEEPALIVE` option for network sockets, which determines\nwhether each connection sends TCP keepalive probes. Defaults to `true`.\n\n`network.tcp.keep_idle`::\n(<<static-cluster-setting,Static>>, integer)\nConfigures the `TCP_KEEPIDLE` option for network sockets, which determines the\ntime in seconds that a connection must be idle before starting to send TCP\nkeepalive probes. Defaults to `-1`, which means to use the system default. This\nvalue cannot exceed `300` seconds. Only applicable on Linux and macOS.\n\n`network.tcp.keep_interval`::\n(<<static-cluster-setting,Static>>, integer)\nConfigures the `TCP_KEEPINTVL` option for network sockets, which determines the\ntime in seconds between sending TCP keepalive probes. Defaults to `-1`, which\nmeans to use the system default. This value cannot exceed `300` seconds. Only\napplicable on Linux and macOS.\n\n`network.tcp.keep_count`::\n(<<static-cluster-setting,Static>>, integer)\nConfigures the `TCP_KEEPCNT` option for network sockets, which determines the\nnumber of unacknowledged TCP keepalive probes that may be sent on a connection\nbefore it is dropped. Defaults to `-1`, which means to use the system default.\nOnly applicable on Linux and macOS.\n\n`network.tcp.no_delay`::\n(<<static-cluster-setting,Static>>, boolean)\nConfigures the `TCP_NODELAY` option on network sockets, which determines\nwhether {wikipedia}/Nagle%27s_algorithm[TCP no delay] is enabled. Defaults to\n`true`.\n\n`network.tcp.reuse_address`::\n(<<static-cluster-setting,Static>>, boolean)\nConfigures the `SO_REUSEADDR` option for network sockets, which determines\nwhether the address can be reused or not. Defaults to `false` on Windows and\n`true` otherwise.\n\n`network.tcp.send_buffer_size`::\n(<<static-cluster-setting,Static>>, <<byte-units,byte value>>)\nConfigures the size of the TCP send buffer for network sockets. Defaults to\n`-1` which means to use the system default.\n\n`network.tcp.receive_buffer_size`::\n(<<static-cluster-setting,Static>>, <<byte-units,byte value>>)\nConfigures the size of the TCP receive buffer. Defaults to `-1` which means to\nuse the system default.\n\ninclude::http.asciidoc[]\n\ninclude::transport.asciidoc[]\n\ninclude::remote-cluster-network.asciidoc[]\n\ninclude::network/tracers.asciidoc[]\n\ninclude::network/threading.asciidoc[]\n"
}