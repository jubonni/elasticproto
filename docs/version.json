{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.883579",
        "size": 3696,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/version.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "version",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[version]]\n=== Version field type\n++++\n<titleabbrev>Version</titleabbrev>\n++++\n\nThe `version` field type is a specialization of the `keyword` field for\nhandling software version values and to support specialized precedence\nrules for them. Precedence is defined following the rules outlined by\nhttps://semver.org/[Semantic Versioning], which for example means that\nmajor, minor and patch version parts are sorted numerically (i.e.\n\"2.1.0\" < \"2.4.1\" < \"2.11.2\") and pre-release versions are sorted before\nrelease versions (i.e. \"1.0.0-alpha\" < \"1.0.0\").\n\nYou index a `version` field as follows\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"my_version\": {\n        \"type\": \"version\"\n      }\n    }\n  }\n}\n\n--------------------------------------------------\n\nThe field offers the same search capabilities as a regular keyword field. It\ncan e.g. be searched for exact matches using `match` or `term` queries and\nsupports prefix and wildcard searches. The main benefit is that `range` queries\nwill honor Semver ordering, so a `range` query between \"1.0.0\" and \"1.5.0\"\nwill include versions of \"1.2.3\" but not \"1.11.2\" for example. Note that this\nwould be different when using a regular `keyword` field for indexing where ordering\nis alphabetical.\n\nSoftware versions are expected to follow the\nhttps://semver.org/[Semantic Versioning rules] schema and precedence rules with\nthe notable exception that more or less than three main version identifiers are\nallowed (i.e. \"1.2\" or \"1.2.3.4\" qualify as valid versions while they wouldn't under\nstrict Semver rules). Version strings that are not valid under the Semver definition\n(e.g. \"1.2.alpha.4\") can still be indexed and retrieved as exact matches, however they\nwill all appear _after_ any valid version with regular alphabetical ordering. The empty\nString \"\" is considered invalid and sorted after all valid versions, but before other\ninvalid ones.\n\n[discrete]\n[[version-params]]\n==== Parameters for version fields\n\nThe following parameters are accepted by `version` fields:\n\n[horizontal]\n\n<<mapping-field-meta,`meta`>>::\n\n    Metadata about the field.\n\n[discrete]\n==== Limitations\n\nThis field type isn't optimized for heavy wildcard, regex, or fuzzy searches. While those\ntypes of queries work in this field, you should consider using a regular `keyword` field if\nyou strongly rely on these kinds of queries.\n\n[[version-synthetic-source]]\n==== Synthetic `_source`\n\nIMPORTANT: Synthetic `_source` is Generally Available only for TSDB indices\n(indices that have `index.mode` set to `time_series`). For other indices,\nsynthetic `_source` is in technical preview. Features in technical preview may\nbe changed or removed in a future release. Elastic will work to fix\nany issues, but features in technical preview are not subject to the support SLA\nof official GA features.\n\n`version` fields support <<synthetic-source,synthetic `_source`>> in their\ndefault configuration..\n\nSynthetic source may sort `version` field values and remove duplicates. For example:\n[source,console,id=synthetic-source-version-example]\n----\nPUT idx\n{\n  \"settings\": {\n    \"index\": {\n      \"mapping\": {\n        \"source\": {\n          \"mode\": \"synthetic\"\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"versions\": { \"type\": \"version\" }\n    }\n  }\n}\nPUT idx/_doc/1\n{\n  \"versions\": [\"8.0.0-beta1\", \"8.5.0\", \"0.90.12\", \"2.6.1\", \"1.3.4\", \"1.3.4\"]\n}\n----\n// TEST[s/$/\\nGET idx\\/_doc\\/1?filter_path=_source\\n/]\n\nWill become:\n\n[source,console-result]\n----\n{\n  \"versions\": [\"0.90.12\", \"1.3.4\", \"2.6.1\", \"8.0.0-beta1\", \"8.5.0\"]\n}\n----\n// TEST[s/^/{\"_source\":/ s/\\n$/}/]\n"
}