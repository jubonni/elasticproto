{
    "meta": {
        "size": 4406,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-percentiles-bucket-aggregation.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "search-aggregations-pipeline-percentiles-bucket-aggregation",
        "version": "8.15"
    },
    "doc": "[[search-aggregations-pipeline-percentiles-bucket-aggregation]]\n=== Percentiles bucket aggregation\n++++\n<titleabbrev>Percentiles bucket</titleabbrev>\n++++\n\nA sibling pipeline aggregation which calculates percentiles across all bucket of a specified metric in a sibling aggregation.\nThe specified metric must be numeric and the sibling aggregation must be a multi-bucket aggregation.\n\n==== Syntax\n\nA `percentiles_bucket` aggregation looks like this in isolation:\n\n[source,js]\n--------------------------------------------------\n{\n  \"percentiles_bucket\": {\n    \"buckets_path\": \"the_sum\"\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\n[[percentiles-bucket-params]]\n.`percentiles_bucket` Parameters\n[options=\"header\"]\n|===\n|Parameter Name |Description |Required |Default Value\n|`buckets_path` |The path to the buckets we wish to find the percentiles for (see <<buckets-path-syntax>> for more\n details) |Required |\n|`gap_policy` |The policy to apply when gaps are found in the data (see <<gap-policy>> for more\n details)|Optional | `skip`\n|`format` |{javadoc}/java.base/java/text/DecimalFormat.html[DecimalFormat pattern] for the\noutput value. If specified, the formatted value is returned in the aggregation's\n`value_as_string` property |Optional | `null`\n|`percents` |The list of percentiles to calculate |Optional | `[ 1, 5, 25, 50, 75, 95, 99 ]`\n|`keyed` |Flag which returns the range as an hash instead of an array of key-value pairs |Optional | `true`\n|===\n\nThe following snippet calculates the percentiles for the total monthly `sales` buckets:\n\n[source,console]\n--------------------------------------------------\nPOST /sales/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"sales_per_month\": {\n      \"date_histogram\": {\n        \"field\": \"date\",\n        \"calendar_interval\": \"month\"\n      },\n      \"aggs\": {\n        \"sales\": {\n          \"sum\": {\n            \"field\": \"price\"\n          }\n        }\n      }\n    },\n    \"percentiles_monthly_sales\": {\n      \"percentiles_bucket\": {\n        \"buckets_path\": \"sales_per_month>sales\", <1>\n        \"percents\": [ 25.0, 50.0, 75.0 ]         <2>\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[setup:sales]\n\n<1> `buckets_path` instructs this percentiles_bucket aggregation that we want to calculate percentiles for\nthe `sales` aggregation in the `sales_per_month` date histogram.\n<2> `percents` specifies which percentiles we wish to calculate, in this case, the 25th, 50th and 75th percentiles.\n\nAnd the following may be the response:\n\n[source,console-result]\n--------------------------------------------------\n{\n   \"took\": 11,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"sales_per_month\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2015/01/01 00:00:00\",\n               \"key\": 1420070400000,\n               \"doc_count\": 3,\n               \"sales\": {\n                  \"value\": 550.0\n               }\n            },\n            {\n               \"key_as_string\": \"2015/02/01 00:00:00\",\n               \"key\": 1422748800000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 60.0\n               }\n            },\n            {\n               \"key_as_string\": \"2015/03/01 00:00:00\",\n               \"key\": 1425168000000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 375.0\n               }\n            }\n         ]\n      },\n      \"percentiles_monthly_sales\": {\n        \"values\" : {\n            \"25.0\": 375.0,\n            \"50.0\": 375.0,\n            \"75.0\": 550.0\n         }\n      }\n   }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"took\": 11/\"took\": $body.took/]\n// TESTRESPONSE[s/\"_shards\": \\.\\.\\./\"_shards\": $body._shards/]\n// TESTRESPONSE[s/\"hits\": \\.\\.\\./\"hits\": $body.hits/]\n\n==== Percentiles_bucket implementation\n\nThe Percentile Bucket returns the nearest input data point that is not greater than the requested percentile; it does not\ninterpolate between data points.\n\nThe percentiles are calculated exactly and is not an approximation (unlike the Percentiles Metric). This means\nthe implementation maintains an in-memory, sorted list of your data to compute the percentiles, before discarding the\ndata. You may run into memory pressure issues if you attempt to calculate percentiles over many millions of\ndata-points in a single `percentiles_bucket`.\n"
}