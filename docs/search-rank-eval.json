{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.272579",
        "size": 19273,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-rank-eval.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "search-rank-eval",
        "version": "8.15"
    },
    "doc": "[[search-rank-eval]]\n=== Ranking evaluation API\n++++\n<titleabbrev>Ranking evaluation</titleabbrev>\n++++\n\nAllows you to evaluate the quality of ranked search results over a set of\ntypical search queries.\n\n[[search-rank-eval-api-request]]\n==== {api-request-title}\n\n`GET /<target>/_rank_eval`\n\n`POST /<target>/_rank_eval`\n\n[[search-rank-eval-api-prereqs]]\n==== {api-prereq-title}\n\n* If the {es} {security-features} are enabled, you must have the `read`\n<<privileges-list-indices,index privilege>> for the target data stream, index,\nor alias.\n\n[[search-rank-eval-api-desc]]\n==== {api-description-title}\n\nThe ranking evaluation API allows you to evaluate the quality of ranked search\nresults over a set of typical search queries. Given this set of queries and a\nlist of manually rated documents, the `_rank_eval` endpoint calculates and\nreturns typical information retrieval metrics like _mean reciprocal rank_,\n_precision_ or _discounted cumulative gain_.\n\nSearch quality evaluation starts with looking at the users of your search\napplication, and the things that they are searching for. Users have a specific\n_information need_; for example, they are looking for gift in a web shop or want\nto book a flight for their next holiday. They usually enter some search terms\ninto a search box or some other web form. All of this information, together with\nmeta information about the user (for example the browser, location, earlier\npreferences and so on) then gets translated into a query to the underlying\nsearch system.\n\nThe challenge for search engineers is to tweak this translation process from\nuser entries to a concrete query, in such a way that the search results contain\nthe most relevant information with respect to the user's information need. This\ncan only be done if the search result quality is evaluated constantly across a\nrepresentative test suite of typical user queries, so that improvements in the\nrankings for one particular query don't negatively affect the ranking for\nother types of queries.\n\nIn order to get started with search quality evaluation, you need three basic\nthings:\n\n. A collection of documents you want to evaluate your query performance against,\n  usually one or more data streams or indices.\n. A collection of typical search requests that users enter into your system.\n. A set of document ratings that represent the documents' relevance with respect\n  to a search request.\n\nIt is important to note that one set of document ratings is needed per test\nquery, and that the relevance judgements are based on the information need of\nthe user that entered the query.\n\nThe ranking evaluation API provides a convenient way to use this information in\na ranking evaluation request to calculate different search evaluation metrics.\nThis gives you a first estimation of your overall search quality, as well as a\nmeasurement to optimize against when fine-tuning various aspect of the query\ngeneration in your application.\n\n\n[[search-rank-eval-api-path-params]]\n==== {api-path-parms-title}\n\n`<target>`::\n(Optional, string) Comma-separated list of data streams, indices, and aliases\nused to limit the request. Supports wildcards (`*`). To target all data streams\nand indices, omit this parameter or use `*` or `_all`.\n\n[[search-rank-eval-api-query-params]]\n==== {api-query-parms-title}\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=allow-no-indices]\n+\nDefaults to `true`.\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=expand-wildcards]\n+\n--\nDefaults to `open`.\n--\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=index-ignore-unavailable]\n\n\n[[search-rank-eval-api-example]]\n==== {api-examples-title}\n\nIn its most basic form, a request to the `_rank_eval` endpoint has two sections:\n\n[source,js]\n-----------------------------\nGET /my-index-000001/_rank_eval\n{\n  \"requests\": [ ... ],                            <1>\n  \"metric\": {                                     <2>\n    \"mean_reciprocal_rank\": { ... }               <3>\n  }\n}\n-----------------------------\n// NOTCONSOLE\n\n<1> a set of typical search requests, together with their provided ratings\n<2> definition of the evaluation metric to calculate\n<3> a specific metric and its parameters\n\nThe request section contains several search requests typical to your\napplication, along with the document ratings for each particular search request.\n\n[source,js]\n-----------------------------\nGET /my-index-000001/_rank_eval\n{\n  \"requests\": [\n    {\n      \"id\": \"amsterdam_query\",                                  <1>\n      \"request\": {                                              <2>\n          \"query\": { \"match\": { \"text\": \"amsterdam\" } }\n      },\n      \"ratings\": [                                              <3>\n        { \"_index\": \"my-index-000001\", \"_id\": \"doc1\", \"rating\": 0 },\n        { \"_index\": \"my-index-000001\", \"_id\": \"doc2\", \"rating\": 3 },\n        { \"_index\": \"my-index-000001\", \"_id\": \"doc3\", \"rating\": 1 }\n      ]\n    },\n    {\n      \"id\": \"berlin_query\",\n      \"request\": {\n        \"query\": { \"match\": { \"text\": \"berlin\" } }\n      },\n      \"ratings\": [\n        { \"_index\": \"my-index-000001\", \"_id\": \"doc1\", \"rating\": 1 }\n      ]\n    }\n  ]\n}\n-----------------------------\n// NOTCONSOLE\n\n<1> The search request's ID, used to group result details later.\n<2> The query being evaluated.\n<3> A list of document ratings. Each entry contains the following arguments:\n- `_index`: The document's index. For data streams, this should be the\n   document's backing index.\n- `_id`: The document ID.\n- `rating`: The document's relevance with regard to this search request.\n\nA document `rating` can be any integer value that expresses the relevance of the\ndocument on a user-defined scale. For some of the metrics, just giving a binary\nrating (for example `0` for irrelevant and `1` for relevant) will be sufficient,\nwhile other metrics can use a more fine-grained scale.\n\n\n===== Template-based ranking evaluation\n\nAs an alternative to having to provide a single query per test request, it is\npossible to specify query templates in the evaluation request and later refer to\nthem. This way, queries with a similar structure that differ only in their\nparameters don't have to be repeated all the time in the `requests` section.\nIn typical search systems, where user inputs usually get filled into a small\nset of query templates, this helps make the evaluation request more succinct.\n\n[source,js]\n--------------------------------\nGET /my-index-000001/_rank_eval\n{\n   [...]\n  \"templates\": [\n     {\n        \"id\": \"match_one_field_query\",  <1>\n        \"template\": { <2>\n            \"inline\": {\n                \"query\": {\n                  \"match\": { \"{{field}}\": { \"query\": \"{{query_string}}\" }}\n                }\n            }\n        }\n     }\n  ],\n  \"requests\": [\n      {\n         \"id\": \"amsterdam_query\",\n         \"ratings\": [ ... ],\n         \"template_id\": \"match_one_field_query\", <3>\n         \"params\": { <4>\n            \"query_string\": \"amsterdam\",\n            \"field\": \"text\"\n          }\n     },\n    [...]\n}\n--------------------------------\n// NOTCONSOLE\n\n<1> the template id\n<2> the template definition to use\n<3> a reference to a previously defined template\n<4> the parameters to use to fill the template\n\nYou can also use a <<create-search-template,stored search template>>.\n\n[source,js]\n--------------------------------\nGET /my_index/_rank_eval\n{ \n   [...]\n  \"templates\": [\n     {\n        \"id\": \"match_one_field_query\",  <1>\n        \"template\": { <2>\n            \"id\": \"match_one_field_query\"\n        }\n     }\n  ], \n  \"requests\": [...]\n}\n--------------------------------\n// NOTCONSOLE\n\n<1> the template id used for requests\n<2> the template id stored in the cluster state\n\n===== Available evaluation metrics\n\nThe `metric` section determines which of the available evaluation metrics\nwill be used. The following metrics are supported:\n\n[discrete]\n[[k-precision]]\n===== Precision at K (P@k)\n\nThis metric measures the proportion of relevant results in the top k search results.\nIt's a form of the well-known\n{wikipedia}/Evaluation_measures_(information_retrieval)#Precision[Precision]\nmetric that only looks at the top k documents. It is the fraction of relevant\ndocuments in those first k results. A precision at 10 (P@10) value of 0.6 then\nmeans 6 out of the 10 top hits are relevant with respect to the user's\ninformation need.\n\nP@k works well as a simple evaluation metric that has the benefit of being easy\nto understand and explain. Documents in the collection need to be rated as either\nrelevant or irrelevant with respect to the current query. P@k is a set-based\nmetric and does not take into account the position of the relevant documents\nwithin the top k results, so a ranking of ten results that contains one\nrelevant result in position 10 is equally as good as a ranking of ten results\nthat contains one relevant result in position 1.\n\n[source,console]\n--------------------------------\nGET /my-index-000001/_rank_eval\n{\n  \"requests\": [\n    {\n      \"id\": \"JFK query\",\n      \"request\": { \"query\": { \"match_all\": {} } },\n      \"ratings\": []\n    } ],\n  \"metric\": {\n    \"precision\": {\n      \"k\": 20,\n      \"relevant_rating_threshold\": 1,\n      \"ignore_unlabeled\": false\n    }\n  }\n}\n--------------------------------\n// TEST[setup:my_index]\n\nThe `precision` metric takes the following optional parameters\n\n[cols=\"<,<\",options=\"header\",]\n|=======================================================================\n|Parameter |Description\n|`k` |sets the maximum number of documents retrieved per query. This value will act in place of the usual `size` parameter\nin the query. Defaults to 10.\n|`relevant_rating_threshold` |sets the rating threshold above which documents are considered to be\n\"relevant\". Defaults to `1`.\n|`ignore_unlabeled` |controls how unlabeled documents in the search results are counted.\nIf set to 'true', unlabeled documents are ignored and neither count as relevant or irrelevant. Set to 'false' (the default), they are treated as irrelevant.\n|=======================================================================\n\n\n[discrete]\n[[k-recall]]\n===== Recall at K (R@k)\n\nThis metric measures the total number of relevant results in the top k search\nresults. It's a form of the well-known\n{wikipedia}/Evaluation_measures_(information_retrieval)#Recall[Recall]\nmetric. It is the fraction of relevant documents in those first k results\nrelative to all possible relevant results. A recall at 10 (R@10) value of 0.5 then\nmeans 4 out of 8 relevant documents, with respect to the user's information\nneed, were retrieved in the 10 top hits.\n\nR@k works well as a simple evaluation metric that has the benefit of being easy\nto understand and explain. Documents in the collection need to be rated as either\nrelevant or irrelevant with respect to the current query. R@k is a set-based\nmetric and does not take into account the position of the relevant documents\nwithin the top k results, so a ranking of ten results that contains one\nrelevant result in position 10 is equally as good as a ranking of ten results\nthat contains one relevant result in position 1.\n\n[source,console]\n--------------------------------\nGET /my-index-000001/_rank_eval\n{\n  \"requests\": [\n    {\n      \"id\": \"JFK query\",\n      \"request\": { \"query\": { \"match_all\": {} } },\n      \"ratings\": []\n    } ],\n  \"metric\": {\n    \"recall\": {\n      \"k\": 20,\n      \"relevant_rating_threshold\": 1\n    }\n  }\n}\n--------------------------------\n// TEST[setup:my_index]\n\nThe `recall` metric takes the following optional parameters\n\n[cols=\"<,<\",options=\"header\",]\n|=======================================================================\n|Parameter |Description\n|`k` |sets the maximum number of documents retrieved per query. This value will act in place of the usual `size` parameter\nin the query. Defaults to 10.\n|`relevant_rating_threshold` |sets the rating threshold above which documents are considered to be\n\"relevant\". Defaults to `1`.\n|=======================================================================\n\n\n[discrete]\n===== Mean reciprocal rank\n\nFor every query in the test suite, this metric calculates the reciprocal of the\nrank of the first relevant document. For example, finding the first relevant\nresult in position 3 means the reciprocal rank is 1/3. The reciprocal rank for\neach query is averaged across all queries in the test suite to give the\n{wikipedia}/Mean_reciprocal_rank[mean reciprocal rank].\n\n[source,console]\n--------------------------------\nGET /my-index-000001/_rank_eval\n{\n  \"requests\": [\n    {\n      \"id\": \"JFK query\",\n      \"request\": { \"query\": { \"match_all\": {} } },\n      \"ratings\": []\n    } ],\n  \"metric\": {\n    \"mean_reciprocal_rank\": {\n      \"k\": 20,\n      \"relevant_rating_threshold\": 1\n    }\n  }\n}\n--------------------------------\n// TEST[setup:my_index]\n\nThe `mean_reciprocal_rank` metric takes the following optional parameters\n\n[cols=\"<,<\",options=\"header\",]\n|=======================================================================\n|Parameter |Description\n|`k` |sets the maximum number of documents retrieved per query. This value will act in place of the usual `size` parameter\nin the query. Defaults to 10.\n|`relevant_rating_threshold` |Sets the rating threshold above which documents are considered to be\n\"relevant\". Defaults to `1`.\n|=======================================================================\n\n\n[discrete]\n===== Discounted cumulative gain (DCG)\n\nIn contrast to the two metrics above,\n{wikipedia}/Discounted_cumulative_gain[discounted cumulative gain]\ntakes both the rank and the rating of the search results into account.\n\nThe assumption is that highly relevant documents are more useful for the user\nwhen appearing at the top of the result list. Therefore, the DCG formula reduces\nthe contribution that high ratings for documents on lower search ranks have on\nthe overall DCG metric.\n\n[source,console]\n--------------------------------\nGET /my-index-000001/_rank_eval\n{\n  \"requests\": [\n    {\n      \"id\": \"JFK query\",\n      \"request\": { \"query\": { \"match_all\": {} } },\n      \"ratings\": []\n    } ],\n  \"metric\": {\n    \"dcg\": {\n      \"k\": 20,\n      \"normalize\": false\n    }\n  }\n}\n--------------------------------\n// TEST[setup:my_index]\n\nThe `dcg` metric takes the following optional parameters:\n\n[cols=\"<,<\",options=\"header\",]\n|=======================================================================\n|Parameter |Description\n|`k` |sets the maximum number of documents retrieved per query. This value will act in place of the usual `size` parameter\nin the query. Defaults to 10.\n|`normalize` | If set to `true`, this metric will calculate the {wikipedia}/Discounted_cumulative_gain#Normalized_DCG[Normalized DCG].\n|=======================================================================\n\n\n[discrete]\n===== Expected Reciprocal Rank (ERR)\n\nExpected Reciprocal Rank (ERR) is an extension of the classical reciprocal rank\nfor the graded relevance case (Olivier Chapelle, Donald Metzler, Ya Zhang, and\nPierre Grinspan. Jan 2009.\nhttps://www.researchgate.net/publication/220269787_Expected_reciprocal_rank_for_graded_relevance[Expected reciprocal rank for graded relevance].)\n\nIt is based on the assumption of a cascade model of search, in which a user\nscans through ranked search results in order and stops at the first document\nthat satisfies the information need. For this reason, it is a good metric for\nquestion answering and navigation queries, but less so for survey-oriented\ninformation needs where the user is interested in finding many relevant\ndocuments in the top k results.\n\nThe metric models the expectation of the reciprocal of the position at which a\nuser stops reading through the result list. This means that a relevant document\nin a top ranking position will have a large contribution to the overall score.\nHowever, the same document will contribute much less to the score if it appears\nin a lower rank; even more so if there are some relevant (but maybe less relevant)\ndocuments preceding it. In this way, the ERR metric discounts documents that\nare shown after very relevant documents. This introduces a notion of dependency\nin the ordering of relevant documents that e.g. Precision or DCG don't account\nfor.\n\n[source,console]\n--------------------------------\nGET /my-index-000001/_rank_eval\n{\n  \"requests\": [\n    {\n      \"id\": \"JFK query\",\n      \"request\": { \"query\": { \"match_all\": {} } },\n      \"ratings\": []\n    } ],\n  \"metric\": {\n    \"expected_reciprocal_rank\": {\n      \"maximum_relevance\": 3,\n      \"k\": 20\n    }\n  }\n}\n--------------------------------\n// TEST[setup:my_index]\n\nThe `expected_reciprocal_rank` metric takes the following parameters:\n\n[cols=\"<,<\",options=\"header\",]\n|=======================================================================\n|Parameter |Description\n| `maximum_relevance` | Mandatory parameter. The highest relevance grade used in the user-supplied\nrelevance judgments.\n|`k` | sets the maximum number of documents retrieved per query. This value will act in place of the usual `size` parameter\nin the query. Defaults to 10.\n|=======================================================================\n\n\n===== Response format\n\nThe response of the `_rank_eval` endpoint contains the overall calculated result\nfor the defined quality metric, a `details` section with a breakdown of results\nfor each query in the test suite and an optional `failures` section that shows\npotential errors of individual queries. The response has the following format:\n\n[source,js]\n--------------------------------\n{\n  \"rank_eval\": {\n    \"metric_score\": 0.4,                          <1>\n      \"details\": {\n      \"my_query_id1\": {                           <2>\n        \"metric_score\": 0.6,                      <3>\n        \"unrated_docs\": [                         <4>\n          {\n            \"_index\": \"my-index-000001\",\n            \"_id\": \"1960795\"\n          }, ...\n        ],\n        \"hits\": [\n          {\n            \"hit\": {                              <5>\n              \"_index\": \"my-index-000001\",\n              \"_type\": \"page\",\n              \"_id\": \"1528558\",\n              \"_score\": 7.0556192\n            },\n            \"rating\": 1\n          }, ...\n        ],\n        \"metric_details\": {                       <6>\n          \"precision\": {\n            \"relevant_docs_retrieved\": 6,\n            \"docs_retrieved\": 10\n          }\n        }\n      },\n      \"my_query_id2\": { [... ] }\n    },\n    \"failures\": { [... ] }\n  }\n}\n--------------------------------\n// NOTCONSOLE\n\n<1> the overall evaluation quality calculated by the defined metric\n<2> the `details` section contains one entry for every query in the original `requests` section, keyed by the search request id\n<3> the `metric_score` in the `details` section shows the contribution of this query to the global quality metric score\n<4> the `unrated_docs` section contains an `_index` and `_id` entry for each document in the search result for this\nquery that didn't have a ratings value. This can be used to ask the user to supply ratings for these documents\n<5> the `hits` section shows a grouping of the search results with their supplied ratings\n<6> the `metric_details` give additional information about the calculated quality metric (e.g. how many of the retrieved\ndocuments were relevant). The content varies for each metric but allows for better interpretation of the results\n"
}