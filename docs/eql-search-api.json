{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.164271",
        "size": 19905,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/eql-search-api.html",
        "type": "documentation",
        "role": [
            "xpack",
            "child_attributes",
            "child_attributes"
        ],
        "has_code": false,
        "title": "eql-search-api",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n\n[[eql-search-api]]\n=== EQL search API\n++++\n<titleabbrev>EQL search</titleabbrev>\n++++\n\nReturns search results for an <<eql,Event Query Language (EQL)>> query.\n\nEQL assumes each document in a data stream or index corresponds to an\nevent.\n\n////\n[source,console]\n----\nDELETE /_data_stream/*\nDELETE /_index_template/*\n----\n// TEARDOWN\n////\n\n[source,console]\n----\nGET /my-data-stream/_eql/search\n{\n  \"query\": \"\"\"\n    process where process.name == \"regsvr32.exe\"\n  \"\"\"\n}\n----\n// TEST[setup:sec_logs]\n\n[[eql-search-api-request]]\n==== {api-request-title}\n\n`GET /<target>/_eql/search`\n\n`POST /<target>/_eql/search`\n\n[[eql-search-api-prereqs]]\n==== {api-prereq-title}\n\n* If the {es} {security-features} are enabled, you must have the `read`\n<<privileges-list-indices,index privilege>> for the target data stream, index,\nor alias.\n\n* See <<eql-required-fields>>.\n\n* experimental:[] For cross-cluster search, the local and remote clusters must\nuse the same {es} version if they have versions prior to 7.17.7 (included) or prior to 8.5.1 (included). For security, see <<remote-clusters>>.\n\n[[eql-search-api-limitations]]\n===== Limitations\n\nSee <<eql-syntax-limitations,EQL limitations>>.\n\n[[eql-search-api-path-params]]\n==== {api-path-parms-title}\n\n`<target>`::\n(Required, string) Comma-separated list of data streams, indices, or aliases\nused to limit the request. Supports wildcards (`*`). To search all data streams\nand indices, use `*` or `_all`.\n+\nexperimental:[] To search a remote cluster, use the `<cluster>:<target>` syntax.\nSee <<run-eql-search-across-clusters>>.\n\n[[eql-search-api-query-params]]\n==== {api-query-parms-title}\n\n`allow_no_indices`::\n(Optional, Boolean)\n+\nNOTE: This parameter's behavior differs from the `allow_no_indices` parameter\nused in other <<api-multi-index,multi-target APIs>>.\n+\nIf `false`, the request returns an error if any wildcard pattern, alias, or\n`_all` value targets only missing or closed indices. This behavior applies even\nif the request targets other open indices. For example, a request targeting\n`foo*,bar*` returns an error if an index starts with `foo` but no index starts\nwith `bar`.\n+\nIf `true`, only requests that exclusively target missing or closed indices\nreturn an error. For example, a request targeting `foo*,bar*` does not return an\nerror if an index starts with `foo` but no index starts with `bar`. However, a\nrequest that targets only `bar*` still returns an error.\n+\nDefaults to `true`.\n\n`ccs_minimize_roundtrips`::\n(Optional, Boolean) If `true`, network round-trips between the local and the\nremote cluster are minimized when running cross-cluster search (CCS) requests.\n+\nThis option is effective for requests that target data fully contained in one\nremote cluster; when data is spread across multiple clusters, the setting is\nignored.\n+\nDefaults to `true`.\n\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=expand-wildcards]\n+\nDefaults to `open`.\n\n`filter_path`::\n(Optional, string)\nComma-separated list of filters for the API response. See\n<<common-options-response-filtering>>.\n\n`ignore_unavailable`::\n(Optional, Boolean) If `false`, the request returns an error if it targets a\nmissing or closed index. Defaults to `true`.\n\n`keep_alive`::\n+\n--\n(Optional, <<time-units,time value>>)\nPeriod for which the search and its results are stored on the cluster. Defaults\nto `5d` (five days).\n\nWhen this period expires, the search and its results are deleted, even if the\nsearch is still ongoing.\n\nIf the <<eql-search-api-keep-on-completion,`keep_on_completion`>> parameter is\n`false`, {es} only stores <<eql-search-async,async searches>> that do not\ncomplete within the period set by the\n<<eql-search-api-wait-for-completion-timeout,`wait_for_completion_timeout`>>\nparameter, regardless of this value.\n\n[IMPORTANT]\n====\nYou can also specify this value using the `keep_alive` request body parameter.\nIf both parameters are specified, only the query parameter is used.\n====\n--\n\n`keep_on_completion`::\n+\n--\n(Optional, Boolean)\nIf `true`, the search and its results are stored on the cluster.\n\nIf `false`, the search and its results are stored on the cluster only if the\nrequest does not complete during the period set by the\n<<eql-search-api-wait-for-completion-timeout,`wait_for_completion_timeout`>>\nparameter. Defaults to `false`.\n\n[IMPORTANT]\n====\nYou can also specify this value using the `keep_on_completion` request body\nparameter. If both parameters are specified, only the query parameter is used.\n====\n--\n\n`wait_for_completion_timeout`::\n+\n--\n(Optional, <<time-units,time value>>)\nTimeout duration to wait for the request to finish. Defaults to no\ntimeout, meaning the request waits for complete search results.\n\nIf this parameter is specified and the request completes during this period,\ncomplete search results are returned.\n\nIf the request does not complete during this period, the search becomes an\n<<eql-search-async,async search>>.\n\n[IMPORTANT]\n====\nYou can also specify this value using the `wait_for_completion_timeout` request\nbody parameter. If both parameters are specified, only the query parameter is\nused.\n====\n--\n\n[role=\"child_attributes\"]\n[[eql-search-api-request-body]]\n==== {api-request-body-title}\n\n`event_category_field`::\n(Required*, string)\nField containing the event classification, such as `process`, `file`, or\n`network`.\n+\nDefaults to `event.category`, as defined in the {ecs-ref}/ecs-event.html[Elastic\nCommon Schema (ECS)]. If a data stream or index does not contain the\n`event.category` field, this value is required.\n+\nThe event category field must be mapped as a field type in the\n<<keyword,`keyword`>> family.\n\n`fetch_size`::\n(Optional, integer)\nMaximum number of events to search at a time for sequence queries. Defaults to\n`1000`.\n+\nThis value must be greater than `2` but cannot exceed the value of the\n<<index-max-result-window,`index.max_result_window`>> setting, which defaults to\n`10000`.\n+\nInternally, a sequence query fetches and paginates sets of events to search for\nmatches. This parameter controls the size of those sets. This parameter does not\nlimit the total number of events searched or the number of matching events\nreturned.\n+\nA greater `fetch_size` value often increases search speed but uses more memory.\n\ninclude::{es-ref-dir}/search/search.asciidoc[tag=fields-param-def]\n\n`filter`::\n(Optional, <<query-dsl,Query DSL object>>)\nQuery, written in Query DSL, used to filter the events on which the EQL query\nruns.\n\n`keep_alive`::\n+\n--\n(Optional, <<time-units,time value>>)\nPeriod for which the search and its results are stored on the cluster. Defaults\nto `5d` (five days).\n\nWhen this period expires, the search and its results are deleted, even if the\nsearch is still ongoing.\n\nIf the <<eql-search-api-keep-on-completion,`keep_on_completion`>> parameter is\n`false`, {es} only stores <<eql-search-async,async searches>> that do not\ncomplete within the period set by the\n<<eql-search-api-wait-for-completion-timeout,`wait_for_completion_timeout`>>\nparameter, regardless of this value.\n\n[IMPORTANT]\n====\nYou can also specify this value using the `keep_alive` query parameter.\nIf both parameters are specified, only the query parameter is used.\n====\n--\n\n[[eql-search-api-keep-on-completion]]\n`keep_on_completion`::\n+\n--\n(Optional, Boolean)\nIf `true`, the search and its results are stored on the cluster.\n\nIf `false`, the search and its results are stored on the cluster only if the\nrequest does not complete during the period set by the\n<<eql-search-api-wait-for-completion-timeout,`wait_for_completion_timeout`>>\nparameter. Defaults to `false`.\n\n[IMPORTANT]\n====\nYou can also specify this value using the `keep_on_completion` query parameter.\nIf both parameters are specified, only the query parameter is used.\n====\n--\n\n[[eql-search-api-request-query-param]]\n`query`::\n(Required, string)\n<<eql-syntax,EQL>> query you wish to run.\n\n`result_position`::\n(Optional, enum)\nSet of matching events or sequences to return.\n+\n.Valid values for `result_position`\n[%collapsible%open]\n====\n`tail`::\n(Default)\nReturn the most recent matches, similar to the {wikipedia}/Tail_(Unix)[Unix tail\ncommand].\n\n`head`::\nReturn the earliest matches, similar to the {wikipedia}/Head_(Unix)[Unix head\ncommand].\n====\n+\nNOTE: This parameter may change the set of returned hits. However, it does not\nchange the sort order of hits in the response.\n\ninclude::{es-ref-dir}/search/search.asciidoc[tag=runtime-mappings-def]\n\n[[eql-search-api-params-size]]\n`size`::\n(Optional, integer or float)\nFor <<eql-basic-syntax,basic queries>>, the maximum number of matching events to\nreturn.\n+\nFor <<eql-sequences,sequence queries>>, the maximum number of matching sequences\nto return.\n+\nDefaults to `10`. This value must be greater than `0`.\n+\nNOTE: You cannot use <<eql-pipe-ref,pipes>>, such as `head` or `tail`, to exceed\nthis value.\n\n[[eql-search-api-tiebreaker-field]]\n`tiebreaker_field`::\n(Optional, string)\nField used to sort hits with the same\n<<eql-search-api-timestamp-field,timestamp>> in ascending order. See\n<<eql-search-specify-a-sort-tiebreaker>>.\n\n[[eql-search-api-timestamp-field]]\n`timestamp_field`::\n+\n--\n(Required*, string)\nField containing event timestamp.\n\nDefaults to `@timestamp`, as defined in the\n{ecs-ref}/ecs-event.html[Elastic Common Schema (ECS)]. If a data stream or index\ndoes not contain the `@timestamp` field, this value is required.\n\nEvents in the API response are sorted by this field's value, converted to\nmilliseconds since the {wikipedia}/Unix_time[Unix epoch], in\nascending order.\n\nThe timestamp field should be mapped as a <<date,`date`>>. The\n<<date_nanos,`date_nanos`>> field type is not supported.\n--\n\n[[eql-search-api-wait-for-completion-timeout]]\n`wait_for_completion_timeout`::\n+\n--\n(Optional, <<time-units,time value>>)\nTimeout duration to wait for the request to finish. Defaults to no\ntimeout, meaning the request waits for complete search results.\n\nIf this parameter is specified and the request completes during this period,\ncomplete search results are returned.\n\nIf the request does not complete during this period, the search becomes an\n<<eql-search-async,async search>>.\n\n[IMPORTANT]\n====\nYou can also specify this value using the `wait_for_completion_timeout` query\nparameter. If both parameters are specified, only the query parameter is used.\n====\n--\n\n[role=\"child_attributes\"]\n[[eql-search-api-response-body]]\n==== {api-response-body-title}\n\n[[eql-search-api-response-body-search-id]]\n`id`::\n+\n--\n(string)\nIdentifier for the search.\n\nThis search ID is only provided if one of the following conditions is met:\n\n* A search request does not return complete results during the\n  <<eql-search-api-wait-for-completion-timeout,`wait_for_completion_timeout`>>\n  parameter's timeout period, becoming an <<eql-search-async,async search>>.\n\n* The search request's <<eql-search-api-keep-on-completion,`keep_on_completion`>>\n  parameter is `true`.\n\nYou can use this ID with the <<get-async-eql-search-api,get async EQL search\nAPI>> to get the current status and available results for the search or\n<<get-async-eql-status-api,get async EQL status API>> to get only\nthe current status.\n--\n\n`is_partial`::\n(Boolean)\nIf `true`, the response does not contain complete search results.\n\n`is_running`::\n+\n--\n(Boolean)\nIf `true`, the search request is still executing.\n\n[IMPORTANT]\n====\nIf this parameter and the `is_partial` parameter are `true`, the search is an\n<<eql-search-async,ongoing async search>>. If the `keep_alive` period does not\npass, the complete search results will be available when the search completes.\n\nIf `is_partial` is `true` but `is_running` is `false`, the search returned\npartial results due to a failure. Only some shards returned results or the node\ncoordinating the search failed.\n====\n--\n\n`took`::\n+\n--\n(integer)\nMilliseconds it took {es} to execute the request.\n\nThis value is calculated by measuring the time elapsed\nbetween receipt of a request on the coordinating node\nand the time at which the coordinating node is ready to send the response.\n\nTook time includes:\n\n* Communication time between the coordinating node and data nodes\n* Time the request spends in the `search` <<modules-threadpool,thread pool>>,\n  queued for execution\n* Actual execution time\n\nTook time does *not* include:\n\n* Time needed to send the request to {es}\n* Time needed to serialize the JSON response\n* Time needed to send the response to a client\n--\n\n`timed_out`::\n(Boolean)\nIf `true`, the request timed out before completion.\n\n`hits`::\n(object)\nContains matching events and sequences. Also contains related metadata.\n+\n.Properties of `hits`\n[%collapsible%open]\n====\n\n`total`::\n(object)\nMetadata about the number of matching events or sequences.\n+\n.Properties of `total`\n[%collapsible%open]\n=====\n\n`value`::\n(integer)\nFor <<eql-basic-syntax,basic queries>>, the total number of matching events.\n+\nFor <<eql-sequences,sequence queries>>, the total number of matching sequences.\n\n`relation`::\n+\n--\n(string)\nIndicates whether the number of events or sequences returned is accurate or a\nlower bound.\n\nReturned values are:\n\n`eq`::: Accurate\n`gte`::: Lower bound, including returned events or sequences\n--\n=====\n\n`sequences`::\n(array of objects)\nContains event sequences matching the query. Each object represents a\nmatching sequence. This parameter is only returned for EQL queries containing\na <<eql-sequences,sequence>>.\n+\n.Properties of `sequences` objects\n[%collapsible%open]\n=====\n`join_keys`::\n(array of values)\nShared field values used to constrain matches in the sequence. These are defined\nusing the <<eql-sequences,`by` keyword>> in the EQL query syntax.\n\n`events`::\n(array of objects)\nContains events matching the query. Each object represents a\nmatching event.\n+\n.Properties of `events` objects\n[%collapsible%open]\n======\n`_index`::\n(string)\nName of the index containing the event.\n\n`_id`::\n(string)\nUnique identifier for the event.\nThis ID is only unique within the index.\n\n`_source`::\n(object)\nOriginal JSON body passed for the event at index time.\n======\n=====\n\n[[eql-search-api-response-events]]\n`events`::\n(array of objects)\nContains events matching the query. Each object represents a\nmatching event.\n+\n.Properties of `events` objects\n[%collapsible%open]\n=====\n`_index`::\n(string)\nName of the index containing the event.\n\n`_id`::\n(string)\n(string)\nUnique identifier for the event.\nThis ID is only unique within the index.\n\n`_source`::\n(object)\nOriginal JSON body passed for the event at index time.\n=====\n====\n\n[[eql-search-api-example]]\n==== {api-examples-title}\n\n[[eql-search-api-basic-query-ex]]\n===== Basic query example\n\nThe following EQL search request searches for events with an `event.category` of\n`process` that meet the following conditions:\n\n* A `process.name` of `cmd.exe`\n* An `process.pid` other than `2013`\n\n[source,console]\n----\nGET /my-data-stream/_eql/search\n{\n  \"query\": \"\"\"\n    process where (process.name == \"cmd.exe\" and process.pid != 2013)\n  \"\"\"\n}\n----\n// TEST[setup:sec_logs]\n\nThe API returns the following response. Matching events in the `hits.events`\nproperty are sorted by <<eql-search-api-timestamp-field,timestamp>>, converted\nto milliseconds since the {wikipedia}/Unix_time[Unix epoch],\nin ascending order.\n\nIf two or more events share the same timestamp, the\n<<eql-search-api-tiebreaker-field,`tiebreaker_field`>> field is used to sort\nthe events in ascending order.\n\n[source,console-result]\n----\n{\n  \"is_partial\": false,\n  \"is_running\": false,\n  \"took\": 6,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": {\n      \"value\": 2,\n      \"relation\": \"eq\"\n    },\n    \"events\": [\n      {\n        \"_index\": \".ds-my-data-stream-2099.12.07-000001\",\n        \"_id\": \"babI3XMBI9IjHuIqU0S_\",\n        \"_source\": {\n          \"@timestamp\": \"2099-12-06T11:04:05.000Z\",\n          \"event\": {\n            \"category\": \"process\",\n            \"id\": \"edwCRnyD\",\n            \"sequence\": 1\n          },\n          \"process\": {\n            \"pid\": 2012,\n            \"name\": \"cmd.exe\",\n            \"executable\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"\n          }\n        }\n      },\n      {\n        \"_index\": \".ds-my-data-stream-2099.12.07-000001\",\n        \"_id\": \"b6bI3XMBI9IjHuIqU0S_\",\n        \"_source\": {\n          \"@timestamp\": \"2099-12-07T11:06:07.000Z\",\n          \"event\": {\n            \"category\": \"process\",\n            \"id\": \"cMyt5SZ2\",\n            \"sequence\": 3\n          },\n          \"process\": {\n            \"pid\": 2012,\n            \"name\": \"cmd.exe\",\n            \"executable\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"\n          }\n        }\n      }\n    ]\n  }\n}\n----\n// TESTRESPONSE[s/\"took\": 6/\"took\": $body.took/]\n// TESTRESPONSE[s/\"_index\": \".ds-my-data-stream-2099.12.07-000001\"/\"_index\": $body.hits.events.0._index/]\n// TESTRESPONSE[s/\"_id\": \"babI3XMBI9IjHuIqU0S_\"/\"_id\": $body.hits.events.0._id/]\n// TESTRESPONSE[s/\"_id\": \"b6bI3XMBI9IjHuIqU0S_\"/\"_id\": $body.hits.events.1._id/]\n\n[[eql-search-api-sequence-ex]]\n===== Sequence query example\n\nThe following EQL search request matches a <<eql-sequences,sequence>> of events\nthat:\n\n. Start with an event with:\n+\n--\n* An `event.category` of `file`\n* A `file.name` of `cmd.exe`\n* An `process.pid` other than `2013`\n--\n. Followed by an event with:\n+\n--\n* An `event.category` of `process`\n* A `process.executable` that contains the substring `regsvr32`\n--\n\nThese events must also share the same `process.pid` value.\n\n[source,console]\n----\nGET /my-data-stream/_eql/search\n{\n  \"query\": \"\"\"\n    sequence by process.pid\n      [ file where file.name == \"cmd.exe\" and process.pid != 2013 ]\n      [ process where stringContains(process.executable, \"regsvr32\") ]\n  \"\"\"\n}\n----\n// TEST[setup:sec_logs]\n\nThe API returns the following response. Matching sequences are included in the\n`hits.sequences` property. The `hits.sequences.join_keys` property contains the\nshared `process.pid` value for each matching event.\n\n[source,console-result]\n----\n{\n  \"is_partial\": false,\n  \"is_running\": false,\n  \"took\": 6,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": {\n      \"value\": 1,\n      \"relation\": \"eq\"\n    },\n    \"sequences\": [\n      {\n        \"join_keys\": [\n          2012\n        ],\n        \"events\": [\n          {\n            \"_index\": \".ds-my-data-stream-2099.12.07-000001\",\n            \"_id\": \"AtOJ4UjUBAAx3XR5kcCM\",\n            \"_source\": {\n              \"@timestamp\": \"2099-12-06T11:04:07.000Z\",\n              \"event\": {\n                \"category\": \"file\",\n                \"id\": \"dGCHwoeS\",\n                \"sequence\": 2\n              },\n              \"file\": {\n                \"accessed\": \"2099-12-07T11:07:08.000Z\",\n                \"name\": \"cmd.exe\",\n                \"path\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",\n                \"type\": \"file\",\n                \"size\": 16384\n              },\n              \"process\": {\n                \"pid\": 2012,\n                \"name\": \"cmd.exe\",\n                \"executable\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"\n              }\n            }\n          },\n          {\n            \"_index\": \".ds-my-data-stream-2099.12.07-000001\",\n            \"_id\": \"OQmfCaduce8zoHT93o4H\",\n            \"_source\": {\n              \"@timestamp\": \"2099-12-07T11:07:09.000Z\",\n              \"event\": {\n                \"category\": \"process\",\n                \"id\": \"aR3NWVOs\",\n                \"sequence\": 4\n              },\n              \"process\": {\n                \"pid\": 2012,\n                \"name\": \"regsvr32.exe\",\n                \"command_line\": \"regsvr32.exe  /s /u /i:https://...RegSvr32.sct scrobj.dll\",\n                \"executable\": \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\"\n              }\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n----\n// TESTRESPONSE[s/\"took\": 6/\"took\": $body.took/]\n// TESTRESPONSE[s/\"_index\": \".ds-my-data-stream-2099.12.07-000001\"/\"_index\": $body.hits.sequences.0.events.0._index/]\n// TESTRESPONSE[s/\"_id\": \"AtOJ4UjUBAAx3XR5kcCM\"/\"_id\": $body.hits.sequences.0.events.0._id/]\n// TESTRESPONSE[s/\"_id\": \"OQmfCaduce8zoHT93o4H\"/\"_id\": $body.hits.sequences.0.events.1._id/]\n"
}