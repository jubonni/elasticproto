{
    "meta": {
        "timestamp": "2024-11-01T03:07:10.480272",
        "size": 6197,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "mapping-types",
        "version": "8.15"
    },
    "doc": "[[mapping-types]]\n== Field data types\n\nEach field has a _field data type_, or _field type_. This type indicates the\nkind of data the field contains, such as strings or boolean values, and its\nintended use. For example, you can index strings to both `text` and `keyword`\nfields. However, `text` field values are <<analysis,analyzed>> for full-text\nsearch while `keyword` strings are left as-is for filtering and sorting.\n\nField types are grouped by _family_. Types in the same family have exactly the\nsame search behavior but may have different space usage or performance\ncharacteristics.\n\nCurrently, there are two type families, `keyword` and `text`. Other type\nfamilies have only a single field type. For example, the `boolean` type family\nconsists of one field type: `boolean`.\n\n\n[discrete]\n[[_core_datatypes]]\n==== Common types\n\n<<binary,`binary`>>::   Binary value encoded as a Base64 string.\n<<boolean,`boolean`>>:: `true` and `false` values.\n<<keyword, Keywords>>:: The keyword family, including `keyword`, `constant_keyword`,\n                        and `wildcard`.\n<<number,Numbers>>::    Numeric types, such as `long` and `double`, used to\n                        express amounts.\nDates::                 Date types, including <<date,`date`>> and\n                        <<date_nanos,`date_nanos`>>.\n<<field-alias,`alias`>>::     Defines an alias for an existing field.\n\n\n[discrete]\n[[object-types]]\n==== Objects and relational types\n\n<<object,`object`>>::           A JSON object.\n<<flattened,`flattened`>>::     An entire JSON object as a single field value.\n<<nested,`nested`>>::           A JSON object that preserves the relationship\n                                between its subfields.\n<<parent-join,`join`>>::        Defines a parent/child relationship for documents\n                                in the same index.\n<<passthrough,`passthrough`>>:: Provides aliases for sub-fields at the same level.\n\n\n[discrete]\n[[structured-data-types]]\n==== Structured data types\n\n<<range,Range>>::   Range types, such as `long_range`, `double_range`,\n                    `date_range`, and `ip_range`.\n<<ip,`ip`>>::       IPv4 and IPv6 addresses.\n<<version,`version`>>::  Software versions. Supports https://semver.org/[Semantic Versioning]\nprecedence rules.\n{plugins}/mapper-murmur3.html[`murmur3`]:: Compute and stores hashes of\nvalues.\n\n\n[discrete]\n[[aggregated-data-types]]\n==== Aggregate data types\n\n<<aggregate-metric-double,`aggregate_metric_double`>>:: Pre-aggregated metric values.\n<<histogram,`histogram`>>:: Pre-aggregated numerical values in the form of a histogram.\n\n\n[discrete]\n[[text-search-types]]\n==== Text search types\n\n<<text,`text` fields>>:: The text family, including `text` and `match_only_text`.\n                         Analyzed, unstructured text.\n{plugins}/mapper-annotated-text.html[`annotated-text`]:: Text containing special\nmarkup. Used for identifying named entities.\n<<completion-suggester,`completion`>>:: Used for auto-complete suggestions.\n<<search-as-you-type,`search_as_you_type`>>:: `text`-like type for\nas-you-type completion.\n<<semantic-text, `semantic_text`>>:: Used for performing <<semantic-search,semantic search>>.\n<<token-count,`token_count`>>:: A count of tokens in a text.\n\n\n[discrete]\n[[document-ranking-types]]\n==== Document ranking types\n\n<<dense-vector,`dense_vector`>>::   Records dense vectors of float values.\n<<sparse-vector,`sparse_vector`>>:: Records sparse vectors of float values.\n<<rank-feature,`rank_feature`>>::   Records a numeric feature to boost hits at\n                                    query time.\n<<rank-features,`rank_features`>>:: Records numeric features to boost hits at\n                                    query time.\n\n\n[discrete]\n[[spatial_datatypes]]\n==== Spatial data types\n\n<<geo-point,`geo_point`>>::     Latitude and longitude points.\n<<geo-shape,`geo_shape`>>::     Complex shapes, such as polygons.\n<<point,`point`>>::             Arbitrary cartesian points.\n<<shape,`shape`>>::             Arbitrary cartesian geometries.\n\n\n[discrete]\n[[other-types]]\n==== Other types\n\n<<percolator,`percolator`>>::   Indexes queries written in <<query-dsl,Query DSL>>.\n\n\n[discrete]\n[[types-array-handling]]\n=== Arrays\nIn {es}, arrays do not require a dedicated field data type. Any field can contain\nzero or more values by default, however, all values in the array must be of the\nsame field type. See <<array>>.\n\n[discrete]\n[[types-multi-fields]]\n=== Multi-fields\nIt is often useful to index the same field in different ways for different\npurposes. For instance, a `string` field could be mapped as\na `text` field for full-text search, and as a `keyword` field for\nsorting or aggregations. Alternatively, you could index a text field with\nthe <<analysis-standard-analyzer,`standard` analyzer>>, the\n<<english-analyzer,`english`>> analyzer, and the\n<<french-analyzer,`french` analyzer>>.\n\nThis is the purpose of _multi-fields_. Most field types support multi-fields\nvia the <<multi-fields>> parameter.\n\ninclude::types/aggregate-metric-double.asciidoc[]\n\ninclude::types/alias.asciidoc[]\n\ninclude::types/array.asciidoc[]\n\ninclude::types/binary.asciidoc[]\n\ninclude::types/boolean.asciidoc[]\n\ninclude::types/completion.asciidoc[]\n\ninclude::types/date.asciidoc[]\n\ninclude::types/date_nanos.asciidoc[]\n\ninclude::types/dense-vector.asciidoc[]\n\ninclude::types/flattened.asciidoc[]\n\ninclude::types/geo-point.asciidoc[]\n\ninclude::types/geo-shape.asciidoc[]\n\ninclude::types/histogram.asciidoc[]\n\ninclude::types/ip.asciidoc[]\n\ninclude::types/parent-join.asciidoc[]\n\ninclude::types/keyword.asciidoc[]\n\ninclude::types/nested.asciidoc[]\n\ninclude::types/numeric.asciidoc[]\n\ninclude::types/object.asciidoc[]\n\ninclude::types/passthrough.asciidoc[]\n\ninclude::types/percolator.asciidoc[]\n\ninclude::types/point.asciidoc[]\n\ninclude::types/range.asciidoc[]\n\ninclude::types/rank-feature.asciidoc[]\n\ninclude::types/rank-features.asciidoc[]\n\ninclude::types/search-as-you-type.asciidoc[]\n\ninclude::types/semantic-text.asciidoc[]\n\ninclude::types/shape.asciidoc[]\n\ninclude::types/sparse-vector.asciidoc[]\n\ninclude::types/text.asciidoc[]\n\ninclude::types/token-count.asciidoc[]\n\ninclude::types/unsigned_long.asciidoc[]\n\ninclude::types/version.asciidoc[]\n"
}