{
    "meta": {
        "size": 3938,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-condition-tokenfilter.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "analysis-condition-tokenfilter",
        "version": "8.15"
    },
    "doc": "[[analysis-condition-tokenfilter]]\n=== Conditional token filter\n++++\n<titleabbrev>Conditional</titleabbrev>\n++++\n\nApplies a set of token filters to tokens that match conditions in a provided\npredicate script.\n\nThis filter uses Lucene's\n{lucene-analysis-docs}/miscellaneous/ConditionalTokenFilter.html[ConditionalTokenFilter].\n\n[[analysis-condition-analyze-ex]]\n==== Example\n\nThe following <<indices-analyze,analyze API>> request uses the `condition`\nfilter to match tokens with fewer than 5 characters in `THE QUICK BROWN FOX`.\nIt then applies the <<analysis-lowercase-tokenfilter,`lowercase`>> filter to\nthose matching tokens, converting them to lowercase.\n\n[source,console]\n--------------------------------------------------\nGET /_analyze\n{\n  \"tokenizer\": \"standard\",\n  \"filter\": [\n    {\n      \"type\": \"condition\",\n      \"filter\": [ \"lowercase\" ],\n      \"script\": {\n        \"source\": \"token.getTerm().length() < 5\"\n      }\n    }\n  ],\n  \"text\": \"THE QUICK BROWN FOX\"\n}\n--------------------------------------------------\n\nThe filter produces the following tokens:\n\n[source,text]\n--------------------------------------------------\n[ the, QUICK, BROWN, fox ]\n--------------------------------------------------\n\n/////////////////////\n[source,console-result]\n--------------------------------------------------\n{\n  \"tokens\" : [\n    {\n      \"token\" : \"the\",\n      \"start_offset\" : 0,\n      \"end_offset\" : 3,\n      \"type\" : \"<ALPHANUM>\",\n      \"position\" : 0\n    },\n    {\n      \"token\" : \"QUICK\",\n      \"start_offset\" : 4,\n      \"end_offset\" : 9,\n      \"type\" : \"<ALPHANUM>\",\n      \"position\" : 1\n    },\n    {\n      \"token\" : \"BROWN\",\n      \"start_offset\" : 10,\n      \"end_offset\" : 15,\n      \"type\" : \"<ALPHANUM>\",\n      \"position\" : 2\n    },\n    {\n      \"token\" : \"fox\",\n      \"start_offset\" : 16,\n      \"end_offset\" : 19,\n      \"type\" : \"<ALPHANUM>\",\n      \"position\" : 3\n    }\n  ]\n}\n--------------------------------------------------\n/////////////////////\n\n[[analysis-condition-tokenfilter-configure-parms]]\n==== Configurable parameters\n\n`filter`::\n+\n--\n(Required, array of token filters)\nArray of token filters. If a token matches the predicate script in the `script`\nparameter, these filters are applied to the token in the order provided.\n\nThese filters can include custom token filters defined in the index mapping.\n--\n\n`script`::\n+\n--\n(Required, <<modules-scripting-using,script object>>)\nPredicate script used to apply token filters. If a token\nmatches this script, the filters in the `filter` parameter are applied to the\ntoken.\n\nFor valid parameters, see <<modules-scripting-using>>. Only inline scripts are\nsupported. Painless scripts are executed in the\n{painless}/painless-analysis-predicate-context.html[analysis predicate context]\nand require a `token` property.\n--\n\n[[analysis-condition-tokenfilter-customize]]\n==== Customize and add to an analyzer\n\nTo customize the `condition` filter, duplicate it to create the basis\nfor a new custom token filter. You can modify the filter using its configurable\nparameters.\n\nFor example, the following <<indices-create-index,create index API>> request\nuses a custom `condition` filter to configure a new\n<<analysis-custom-analyzer,custom analyzer>>. The custom `condition` filter\nmatches the first token in a stream. It then reverses that matching token using\nthe <<analysis-reverse-tokenfilter,`reverse`>> filter.\n\n[source,console]\n--------------------------------------------------\nPUT /palindrome_list\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"whitespace_reverse_first_token\": {\n          \"tokenizer\": \"whitespace\",\n          \"filter\": [ \"reverse_first_token\" ]\n        }\n      },\n      \"filter\": {\n        \"reverse_first_token\": {\n          \"type\": \"condition\",\n          \"filter\": [ \"reverse\" ],\n          \"script\": {\n            \"source\": \"token.getPosition() === 0\"\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n"
}