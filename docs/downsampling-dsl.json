{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.137272",
        "size": 21185,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/downsampling-dsl.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "downsampling-dsl",
        "version": "8.15"
    },
    "doc": "[[downsampling-dsl]]\n=== Run downsampling using data stream lifecycle\n++++\n<titleabbrev>Run downsampling using data stream lifecycle</titleabbrev>\n++++\n\nThis is a simplified example that allows you to see quickly how\n<<downsampling,downsampling>> works as part of a datastream lifecycle to reduce the\nstorage size of a sampled set of metrics. The example uses typical Kubernetes\ncluster monitoring data. To test out downsampling with data stream lifecycle, follow these steps:\n\n. Check the <<downsampling-dsl-prereqs,prerequisites>>.\n. <<downsampling-dsl-create-index-template>>.\n. <<downsampling-dsl-ingest-data>>.\n. <<downsampling-dsl-view-data-stream-state>>.\n. <<downsampling-dsl-rollover>>.\n. <<downsampling-dsl-view-results>>.\n\n[discrete]\n[[downsampling-dsl-prereqs]]\n==== Prerequisites\n\nRefer to <<tsds-prereqs,time series data stream prerequisites>>.\n\n[discrete]\n[[downsampling-dsl-create-index-template]]\n==== Create an index template with data stream lifecycle\n\nThis creates an index template for a basic data stream. The available parameters\nfor an index template are described in detail in <<set-up-a-data-stream,Set up a\ntime series data stream>>.\n\nFor simplicity, in the time series mapping all `time_series_metric` parameters\nare set to type `gauge`, but the `counter` metric type may also be used. The\n`time_series_metric` values determine the kind of statistical representations\nthat are used during downsampling.\n\nThe index template includes a set of static <<time-series-dimension,time series\ndimensions>>: `host`, `namespace`, `node`, and `pod`. The time series dimensions\nare not changed by the downsampling process.\n\nTo enable downsampling, this template includes a `lifecycle` section with <<data-streams-put-lifecycle-downsampling-example, downsampling>> object. `fixed_interval` parameter sets downsampling interval at which you want to aggregate the original time series data. `after` parameter specifies how much time after index was rolled over should pass before downsampling is performed.\n\n[source,console]\n----\nPUT _index_template/datastream_template\n{\n  \"index_patterns\": [\n    \"datastream*\"\n  ],\n  \"data_stream\": {},\n  \"template\": {\n    \"lifecycle\": {\n      \"downsampling\": [\n        {\n          \"after\": \"1m\",\n          \"fixed_interval\": \"1h\"\n        }\n      ]\n    },\n    \"settings\": {\n      \"index\": {\n        \"mode\": \"time_series\"\n      }\n    },\n    \"mappings\": {\n      \"properties\": {\n        \"@timestamp\": {\n          \"type\": \"date\"\n        },\n        \"kubernetes\": {\n          \"properties\": {\n            \"container\": {\n              \"properties\": {\n                \"cpu\": {\n                  \"properties\": {\n                    \"usage\": {\n                      \"properties\": {\n                        \"core\": {\n                          \"properties\": {\n                            \"ns\": {\n                              \"type\": \"long\"\n                            }\n                          }\n                        },\n                        \"limit\": {\n                          \"properties\": {\n                            \"pct\": {\n                              \"type\": \"float\"\n                            }\n                          }\n                        },\n                        \"nanocores\": {\n                          \"type\": \"long\",\n                          \"time_series_metric\": \"gauge\"\n                        },\n                        \"node\": {\n                          \"properties\": {\n                            \"pct\": {\n                              \"type\": \"float\"\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                },\n                \"memory\": {\n                  \"properties\": {\n                    \"available\": {\n                      \"properties\": {\n                        \"bytes\": {\n                          \"type\": \"long\",\n                          \"time_series_metric\": \"gauge\"\n                        }\n                      }\n                    },\n                    \"majorpagefaults\": {\n                      \"type\": \"long\"\n                    },\n                    \"pagefaults\": {\n                      \"type\": \"long\",\n                      \"time_series_metric\": \"gauge\"\n                    },\n                    \"rss\": {\n                      \"properties\": {\n                        \"bytes\": {\n                          \"type\": \"long\",\n                          \"time_series_metric\": \"gauge\"\n                        }\n                      }\n                    },\n                    \"usage\": {\n                      \"properties\": {\n                        \"bytes\": {\n                          \"type\": \"long\",\n                          \"time_series_metric\": \"gauge\"\n                        },\n                        \"limit\": {\n                          \"properties\": {\n                            \"pct\": {\n                              \"type\": \"float\"\n                            }\n                          }\n                        },\n                        \"node\": {\n                          \"properties\": {\n                            \"pct\": {\n                              \"type\": \"float\"\n                            }\n                          }\n                        }\n                      }\n                    },\n                    \"workingset\": {\n                      \"properties\": {\n                        \"bytes\": {\n                          \"type\": \"long\",\n                          \"time_series_metric\": \"gauge\"\n                        }\n                      }\n                    }\n                  }\n                },\n                \"name\": {\n                  \"type\": \"keyword\"\n                },\n                \"start_time\": {\n                  \"type\": \"date\"\n                }\n              }\n            },\n            \"host\": {\n              \"type\": \"keyword\",\n              \"time_series_dimension\": true\n            },\n            \"namespace\": {\n              \"type\": \"keyword\",\n              \"time_series_dimension\": true\n            },\n            \"node\": {\n              \"type\": \"keyword\",\n              \"time_series_dimension\": true\n            },\n            \"pod\": {\n              \"type\": \"keyword\",\n              \"time_series_dimension\": true\n            }\n          }\n        }\n      }\n    }\n  }\n}\n----\n\n////\n[source,console]\n----\nDELETE _index_template/*\n----\n// TEST[continued]\n////\n\n[discrete]\n[[downsampling-dsl-ingest-data]]\n==== Ingest time series data\n\nUse a bulk API request to automatically create your TSDS and index a set of ten\ndocuments.\n\n**Important:** Before running this bulk request you need to update the\ntimestamps to within three to five hours after your current time. That is,\nsearch `2022-06-21T15` and replace with your present date, and adjust the hour\nto your current time plus three hours.\n\n[source,console]\n----\nPUT /datastream/_bulk?refresh\n{\"create\": {}}\n{\"@timestamp\":\"2022-06-21T15:49:00Z\",\"kubernetes\":{\"host\":\"gke-apps-0\",\"node\":\"gke-apps-0-0\",\"pod\":\"gke-apps-0-0-0\",\"container\":{\"cpu\":{\"usage\":{\"nanocores\":91153,\"core\":{\"ns\":12828317850},\"node\":{\"pct\":2.77905e-05},\"limit\":{\"pct\":2.77905e-05}}},\"memory\":{\"available\":{\"bytes\":463314616},\"usage\":{\"bytes\":307007078,\"node\":{\"pct\":0.01770037710617187},\"limit\":{\"pct\":9.923134671484496e-05}},\"workingset\":{\"bytes\":585236},\"rss\":{\"bytes\":102728},\"pagefaults\":120901,\"majorpagefaults\":0},\"start_time\":\"2021-03-30T07:59:06Z\",\"name\":\"container-name-44\"},\"namespace\":\"namespace26\"}}\n{\"create\": {}}\n{\"@timestamp\":\"2022-06-21T15:45:50Z\",\"kubernetes\":{\"host\":\"gke-apps-0\",\"node\":\"gke-apps-0-0\",\"pod\":\"gke-apps-0-0-0\",\"container\":{\"cpu\":{\"usage\":{\"nanocores\":124501,\"core\":{\"ns\":12828317850},\"node\":{\"pct\":2.77905e-05},\"limit\":{\"pct\":2.77905e-05}}},\"memory\":{\"available\":{\"bytes\":982546514},\"usage\":{\"bytes\":360035574,\"node\":{\"pct\":0.01770037710617187},\"limit\":{\"pct\":9.923134671484496e-05}},\"workingset\":{\"bytes\":1339884},\"rss\":{\"bytes\":381174},\"pagefaults\":178473,\"majorpagefaults\":0},\"start_time\":\"2021-03-30T07:59:06Z\",\"name\":\"container-name-44\"},\"namespace\":\"namespace26\"}}\n{\"create\": {}}\n{\"@timestamp\":\"2022-06-21T15:44:50Z\",\"kubernetes\":{\"host\":\"gke-apps-0\",\"node\":\"gke-apps-0-0\",\"pod\":\"gke-apps-0-0-0\",\"container\":{\"cpu\":{\"usage\":{\"nanocores\":38907,\"core\":{\"ns\":12828317850},\"node\":{\"pct\":2.77905e-05},\"limit\":{\"pct\":2.77905e-05}}},\"memory\":{\"available\":{\"bytes\":862723768},\"usage\":{\"bytes\":379572388,\"node\":{\"pct\":0.01770037710617187},\"limit\":{\"pct\":9.923134671484496e-05}},\"workingset\":{\"bytes\":431227},\"rss\":{\"bytes\":386580},\"pagefaults\":233166,\"majorpagefaults\":0},\"start_time\":\"2021-03-30T07:59:06Z\",\"name\":\"container-name-44\"},\"namespace\":\"namespace26\"}}\n{\"create\": {}}\n{\"@timestamp\":\"2022-06-21T15:44:40Z\",\"kubernetes\":{\"host\":\"gke-apps-0\",\"node\":\"gke-apps-0-0\",\"pod\":\"gke-apps-0-0-0\",\"container\":{\"cpu\":{\"usage\":{\"nanocores\":86706,\"core\":{\"ns\":12828317850},\"node\":{\"pct\":2.77905e-05},\"limit\":{\"pct\":2.77905e-05}}},\"memory\":{\"available\":{\"bytes\":567160996},\"usage\":{\"bytes\":103266017,\"node\":{\"pct\":0.01770037710617187},\"limit\":{\"pct\":9.923134671484496e-05}},\"workingset\":{\"bytes\":1724908},\"rss\":{\"bytes\":105431},\"pagefaults\":233166,\"majorpagefaults\":0},\"start_time\":\"2021-03-30T07:59:06Z\",\"name\":\"container-name-44\"},\"namespace\":\"namespace26\"}}\n{\"create\": {}}\n{\"@timestamp\":\"2022-06-21T15:44:00Z\",\"kubernetes\":{\"host\":\"gke-apps-0\",\"node\":\"gke-apps-0-0\",\"pod\":\"gke-apps-0-0-0\",\"container\":{\"cpu\":{\"usage\":{\"nanocores\":150069,\"core\":{\"ns\":12828317850},\"node\":{\"pct\":2.77905e-05},\"limit\":{\"pct\":2.77905e-05}}},\"memory\":{\"available\":{\"bytes\":639054643},\"usage\":{\"bytes\":265142477,\"node\":{\"pct\":0.01770037710617187},\"limit\":{\"pct\":9.923134671484496e-05}},\"workingset\":{\"bytes\":1786511},\"rss\":{\"bytes\":189235},\"pagefaults\":138172,\"majorpagefaults\":0},\"start_time\":\"2021-03-30T07:59:06Z\",\"name\":\"container-name-44\"},\"namespace\":\"namespace26\"}}\n{\"create\": {}}\n{\"@timestamp\":\"2022-06-21T15:42:40Z\",\"kubernetes\":{\"host\":\"gke-apps-0\",\"node\":\"gke-apps-0-0\",\"pod\":\"gke-apps-0-0-0\",\"container\":{\"cpu\":{\"usage\":{\"nanocores\":82260,\"core\":{\"ns\":12828317850},\"node\":{\"pct\":2.77905e-05},\"limit\":{\"pct\":2.77905e-05}}},\"memory\":{\"available\":{\"bytes\":854735585},\"usage\":{\"bytes\":309798052,\"node\":{\"pct\":0.01770037710617187},\"limit\":{\"pct\":9.923134671484496e-05}},\"workingset\":{\"bytes\":924058},\"rss\":{\"bytes\":110838},\"pagefaults\":259073,\"majorpagefaults\":0},\"start_time\":\"2021-03-30T07:59:06Z\",\"name\":\"container-name-44\"},\"namespace\":\"namespace26\"}}\n{\"create\": {}}\n{\"@timestamp\":\"2022-06-21T15:42:10Z\",\"kubernetes\":{\"host\":\"gke-apps-0\",\"node\":\"gke-apps-0-0\",\"pod\":\"gke-apps-0-0-0\",\"container\":{\"cpu\":{\"usage\":{\"nanocores\":153404,\"core\":{\"ns\":12828317850},\"node\":{\"pct\":2.77905e-05},\"limit\":{\"pct\":2.77905e-05}}},\"memory\":{\"available\":{\"bytes\":279586406},\"usage\":{\"bytes\":214904955,\"node\":{\"pct\":0.01770037710617187},\"limit\":{\"pct\":9.923134671484496e-05}},\"workingset\":{\"bytes\":1047265},\"rss\":{\"bytes\":91914},\"pagefaults\":302252,\"majorpagefaults\":0},\"start_time\":\"2021-03-30T07:59:06Z\",\"name\":\"container-name-44\"},\"namespace\":\"namespace26\"}}\n{\"create\": {}}\n{\"@timestamp\":\"2022-06-21T15:40:20Z\",\"kubernetes\":{\"host\":\"gke-apps-0\",\"node\":\"gke-apps-0-0\",\"pod\":\"gke-apps-0-0-0\",\"container\":{\"cpu\":{\"usage\":{\"nanocores\":125613,\"core\":{\"ns\":12828317850},\"node\":{\"pct\":2.77905e-05},\"limit\":{\"pct\":2.77905e-05}}},\"memory\":{\"available\":{\"bytes\":822782853},\"usage\":{\"bytes\":100475044,\"node\":{\"pct\":0.01770037710617187},\"limit\":{\"pct\":9.923134671484496e-05}},\"workingset\":{\"bytes\":2109932},\"rss\":{\"bytes\":278446},\"pagefaults\":74843,\"majorpagefaults\":0},\"start_time\":\"2021-03-30T07:59:06Z\",\"name\":\"container-name-44\"},\"namespace\":\"namespace26\"}}\n{\"create\": {}}\n{\"@timestamp\":\"2022-06-21T15:40:10Z\",\"kubernetes\":{\"host\":\"gke-apps-0\",\"node\":\"gke-apps-0-0\",\"pod\":\"gke-apps-0-0-0\",\"container\":{\"cpu\":{\"usage\":{\"nanocores\":100046,\"core\":{\"ns\":12828317850},\"node\":{\"pct\":2.77905e-05},\"limit\":{\"pct\":2.77905e-05}}},\"memory\":{\"available\":{\"bytes\":567160996},\"usage\":{\"bytes\":362826547,\"node\":{\"pct\":0.01770037710617187},\"limit\":{\"pct\":9.923134671484496e-05}},\"workingset\":{\"bytes\":1986724},\"rss\":{\"bytes\":402801},\"pagefaults\":296495,\"majorpagefaults\":0},\"start_time\":\"2021-03-30T07:59:06Z\",\"name\":\"container-name-44\"},\"namespace\":\"namespace26\"}}\n{\"create\": {}}\n{\"@timestamp\":\"2022-06-21T15:38:30Z\",\"kubernetes\":{\"host\":\"gke-apps-0\",\"node\":\"gke-apps-0-0\",\"pod\":\"gke-apps-0-0-0\",\"container\":{\"cpu\":{\"usage\":{\"nanocores\":40018,\"core\":{\"ns\":12828317850},\"node\":{\"pct\":2.77905e-05},\"limit\":{\"pct\":2.77905e-05}}},\"memory\":{\"available\":{\"bytes\":1062428344},\"usage\":{\"bytes\":265142477,\"node\":{\"pct\":0.01770037710617187},\"limit\":{\"pct\":9.923134671484496e-05}},\"workingset\":{\"bytes\":2294743},\"rss\":{\"bytes\":340623},\"pagefaults\":224530,\"majorpagefaults\":0},\"start_time\":\"2021-03-30T07:59:06Z\",\"name\":\"container-name-44\"},\"namespace\":\"namespace26\"}}\n\n----\n// TEST[skip: timestamp values won't match an accepted range in the TSDS]\n\n[discrete]\n[[downsampling-dsl-view-data-stream-state]]\n==== View current state of data stream\n\nNow that you've created and added documents to the data stream, check to confirm\nthe current state of the new index.\n\n[source,console]\n----\nGET _data_stream\n----\n// TEST[skip: temporal_ranges and index names won't match]\n\nIf the data stream lifecycle policy has not yet been applied, your results will be like the\nfollowing. Note the original `index_name`: `.ds-datastream-2024.04.29-000001`.\n\n[source,console-result]\n----\n{\n  \"data_streams\": [\n    {\n      \"name\": \"datastream\",\n      \"timestamp_field\": {\n        \"name\": \"@timestamp\"\n      },\n      \"indices\": [\n        {\n          \"index_name\": \".ds-datastream-2024.04.29-000001\",\n          \"index_uuid\": \"vUMNtCyXQhGdlo1BD-cGRw\",\n          \"managed_by\": \"Data stream lifecycle\"\n        }\n      ],\n      \"generation\": 1,\n      \"status\": \"GREEN\",\n      \"template\": \"datastream_template\",\n      \"lifecycle\": {\n        \"enabled\": true,\n        \"downsampling\": [\n          {\n            \"after\": \"1m\",\n            \"fixed_interval\": \"1h\"\n          }\n        ]\n      },\n      \"next_generation_managed_by\": \"Data stream lifecycle\",\n      \"hidden\": false,\n      \"system\": false,\n      \"allow_custom_routing\": false,\n      \"replicated\": false,\n      \"rollover_on_write\": false,\n      \"time_series\": {\n        \"temporal_ranges\": [\n          {\n            \"start\": \"2024-04-29T15:55:46.000Z\",\n            \"end\": \"2024-04-29T18:25:46.000Z\"\n          }\n        ]\n      }\n    }\n  ]\n}\n----\n// TEST[skip: some fields are removed for brevity]\n// TEST[continued]\n\nNext, run a search query:\n\n[source,console]\n----\nGET datastream/_search\n----\n// TEST[skip: timestamp values won't match]\n\nThe query returns your ten newly added documents.\n\n[source,console-result]\n----\n{\n  \"took\": 23,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\": 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\": {\n      \"value\": 10,\n      \"relation\": \"eq\"\n    },\n...\n----\n// TEST[skip: some fields are removed for brevity]\n// TEST[continued]\n\n[discrete]\n[[downsampling-dsl-rollover]]\n==== Roll over the data stream\n\nData stream lifecycle will automatically roll over data stream and perform downsampling. This step is only needed in order to see downsampling results in scope of this tutorial.\n\nRoll over the data stream using the <<indices-rollover-index,rollover API>>:\n\n[source,console]\n----\nPOST /datastream/_rollover/\n----\n// TEST[continued]\n\n[discrete]\n[[downsampling-dsl-view-results]]\n==== View downsampling results\n\nBy default, data stream lifecycle actions are executed every five minutes. Downsampling takes place after the index is rolled over and the <<index-time-series-end-time, index time series end time>>\nhas lapsed as the source index is still expected to receive major writes until then. Index is now rolled over after previous step but its time series range end is likely still in the future. Once index time series range is in the past, re-run the `GET _data_stream` request.\n\n[source,console]\n----\nGET _data_stream\n----\n// TEST[skip: temporal_ranges and index names won't match]\n\nAfter the data stream lifecycle action was executed, original\n`.ds-datastream-2024.04.29-000001` index is replaced with a new, downsampled\nindex, in this case `downsample-1h-.ds-datastream-2024.04.29-000001`.\n\n[source,console-result]\n----\n{\n  \"data_streams\": [\n    {\n      \"name\": \"datastream\",\n      \"timestamp_field\": {\n        \"name\": \"@timestamp\"\n      },\n      \"indices\": [\n        {\n          \"index_name\": \"downsample-1h-.ds-datastream-2024.04.29-000001\",\n          \"index_uuid\": \"VqXuShP4T8ODAOnWFcqitg\",\n          \"managed_by\": \"Data stream lifecycle\"\n        },\n        {\n          \"index_name\": \".ds-datastream-2024.04.29-000002\",\n          \"index_uuid\": \"8gCeSdjUSWG-o-PeEAJ0jA\",\n          \"managed_by\": \"Data stream lifecycle\"\n        }\n      ],\n...\n----\n// TEST[skip: some fields are removed for brevity]\n// TEST[continued]\n\nRun a search query on the datastream (note that when querying downsampled indices there are <<querying-downsampled-indices-notes,a few nuances to be aware of>>).\n\n[source,console]\n----\nGET datastream/_search\n----\n// TEST[continued]\n\nThe new downsampled index contains just one document that includes the `min`,\n`max`, `sum`, and `value_count` statistics based off of the original sampled\nmetrics.\n\n[source,console-result]\n----\n{\n  \"took\": 26,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 2,\n    \"successful\": 2,\n    \"skipped\": 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\": {\n      \"value\": 1,\n      \"relation\": \"eq\"\n    },\n    \"max_score\": 1,\n    \"hits\": [\n      {\n        \"_index\": \"downsample-1h-.ds-datastream-2024.04.29-000001\",\n        \"_id\": \"0eL0wMf38sl_s5JnAAABjyrMjoA\",\n        \"_score\": 1,\n        \"_source\": {\n          \"@timestamp\": \"2024-04-29T17:00:00.000Z\",\n          \"_doc_count\": 10,\n          \"kubernetes\": {\n            \"container\": {\n              \"cpu\": {\n                \"usage\": {\n                  \"core\": {\n                    \"ns\": 12828317850\n                  },\n                  \"limit\": {\n                    \"pct\": 0.0000277905\n                  },\n                  \"nanocores\": {\n                    \"min\": 38907,\n                    \"max\": 153404,\n                    \"sum\": 992677,\n                    \"value_count\": 10\n                  },\n                  \"node\": {\n                    \"pct\": 0.0000277905\n                  }\n                }\n              },\n              \"memory\": {\n                \"available\": {\n                  \"bytes\": {\n                    \"min\": 279586406,\n                    \"max\": 1062428344,\n                    \"sum\": 7101494721,\n                    \"value_count\": 10\n                  }\n                },\n                \"majorpagefaults\": 0,\n                \"pagefaults\": {\n                  \"min\": 74843,\n                  \"max\": 302252,\n                  \"sum\": 2061071,\n                  \"value_count\": 10\n                },\n                \"rss\": {\n                  \"bytes\": {\n                    \"min\": 91914,\n                    \"max\": 402801,\n                    \"sum\": 2389770,\n                    \"value_count\": 10\n                  }\n                },\n                \"usage\": {\n                  \"bytes\": {\n                    \"min\": 100475044,\n                    \"max\": 379572388,\n                    \"sum\": 2668170609,\n                    \"value_count\": 10\n                  },\n                  \"limit\": {\n                    \"pct\": 0.00009923134\n                  },\n                  \"node\": {\n                    \"pct\": 0.017700378\n                  }\n                },\n                \"workingset\": {\n                  \"bytes\": {\n                    \"min\": 431227,\n                    \"max\": 2294743,\n                    \"sum\": 14230488,\n                    \"value_count\": 10\n                  }\n                }\n              },\n              \"name\": \"container-name-44\",\n              \"start_time\": \"2021-03-30T07:59:06.000Z\"\n            },\n            \"host\": \"gke-apps-0\",\n            \"namespace\": \"namespace26\",\n            \"node\": \"gke-apps-0-0\",\n            \"pod\": \"gke-apps-0-0-0\"\n          }\n        }\n      }\n    ]\n  }\n}\n----\n// TEST[skip: timestamp values won't match]\n// TEST[continued]\n\nUse the <<data-stream-stats-api,data stream stats API>> to get statistics for\nthe data stream, including the storage size.\n\n[source,console]\n----\nGET /_data_stream/datastream/_stats?human=true\n----\n// TEST[continued]\n\n[source,console-result]\n----\n{\n  \"_shards\": {\n    \"total\": 4,\n    \"successful\": 4,\n    \"failed\": 0\n  },\n  \"data_stream_count\": 1,\n  \"backing_indices\": 2,\n  \"total_store_size\": \"37.3kb\",\n  \"total_store_size_bytes\": 38230,\n  \"data_streams\": [\n    {\n      \"data_stream\": \"datastream\",\n      \"backing_indices\": 2,\n      \"store_size\": \"37.3kb\",\n      \"store_size_bytes\": 38230,\n      \"maximum_timestamp\": 1714410000000\n    }\n  ]\n}\n----\n// TEST[skip: exact size may be different]\n// TEST[continued]\n\nThis example demonstrates how downsampling works as part of a data stream lifecycle to\nreduce the storage size of metrics data as it becomes less current and less\nfrequently queried.\n\n////\n[source,console]\n----\nDELETE _data_stream/*\nDELETE _index_template/*\n----\n// TEST[continued]\n////\n"
}