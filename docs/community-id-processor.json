{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.199579",
        "size": 3230,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/community-id-processor.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "community-id-processor",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[community-id-processor]]\n=== Community ID processor\n++++\n<titleabbrev>Community ID</titleabbrev>\n++++\n\nComputes the Community ID for network flow data as defined in the\nhttps://github.com/corelight/community-id-spec[Community ID Specification].\nYou can use a community ID to correlate network events related to a single\nflow.\n\nThe community ID processor reads network flow data from related\n{ecs-ref}[Elastic Common Schema (ECS)] fields by default. If you use the ECS, no\nconfiguration is required.\n\n[[community-id-options]]\n.Community ID Options\n[options=\"header\"]\n|======\n| Name               | Required | Default       | Description\n| `source_ip`        | no       | `source.ip`   | Field containing the source IP address.\n| `source_port`      | no       | `source.port` | Field containing the source port.\n| `destination_ip`   | no       | `destination.ip` | Field containing the destination IP address.\n| `destination_port` | no       | `destination.port` | Field containing the destination port.\n| `iana_number` | no | `network.iana_number` | Field containing the IANA number.\n| `icmp_type`        | no       | `icmp.type`   | Field containing the ICMP type.\n| `icmp_code`        | no       | `icmp.code`   | Field containing the ICMP code.\n| `transport`        | no       | `network.transport` | Field containing the transport protocol name or number.\nUsed only when the `iana_number` field is not present. The following protocol names are currently supported:\n`ICMP`, `IGMP`, `TCP`, `UDP`, `GRE`, `ICMP IPv6`, `EIGRP`, `OSPF`, `PIM`, and `SCTP`.\n| `target_field`     | no       | `network.community_id` | Output field for the community ID.\n| `seed`             | no       | `0`           | Seed for the community ID hash. Must be between\n0 and 65535 (inclusive). The seed can prevent hash collisions between network domains, such as\na staging and production network that use the same addressing scheme.\n| `ignore_missing`   | no       | `true`        | If `true` and any required fields are missing,\nthe processor quietly exits without modifying the document.\n\ninclude::common-options.asciidoc[]\n|======\n\nHere is an example definition of the community ID processor:\n\n[source,js]\n--------------------------------------------------\n{\n  \"description\" : \"...\",\n  \"processors\" : [\n    {\n      \"community_id\": {\n      }\n    }\n  ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nWhen the above processor executes on the following document:\n\n[source,js]\n--------------------------------------------------\n{\n  \"_source\": {\n    \"source\": {\n      \"ip\": \"123.124.125.126\",\n      \"port\": 12345\n    },\n    \"destination\": {\n      \"ip\": \"55.56.57.58\",\n      \"port\": 80\n    },\n    \"network\": {\n      \"transport\": \"TCP\"\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIt produces this result:\n\n[source,js]\n--------------------------------------------------\n\"_source\" : {\n  \"destination\" : {\n    \"port\" : 80,\n    \"ip\" : \"55.56.57.58\"\n  },\n  \"source\" : {\n    \"port\" : 12345,\n    \"ip\" : \"123.124.125.126\"\n  },\n  \"network\" : {\n    \"community_id\" : \"1:9qr9Z1LViXcNwtLVOHZ3CL8MlyM=\",\n    \"transport\" : \"TCP\"\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n"
}