{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.486068",
        "size": 6298,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/sniffer.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "sniffer",
        "version": "8.15"
    },
    "doc": "[[sniffer]]\n== Sniffer\n\nMinimal library that allows to automatically discover nodes from a running\nElasticsearch cluster and set them to an existing `RestClient` instance.\nIt retrieves by default the nodes that belong to the cluster using the\nNodes Info api and uses jackson to parse the obtained json response.\n\nCompatible with Elasticsearch 2.x and onwards.\n\n[[java-rest-sniffer-javadoc]]\n=== Javadoc\n\nThe javadoc for the REST client sniffer can be found at {rest-client-sniffer-javadoc}/index.html.\n\n=== Maven Repository\n\nThe REST client sniffer is subject to the same release cycle as\nElasticsearch. Replace the version with the desired sniffer version, first\nreleased with `5.0.0-alpha4`. There is no relation between the sniffer version\nand the Elasticsearch version that the client can communicate with. Sniffer\nsupports fetching the nodes list from Elasticsearch 2.x and onwards.\n\nIf you are looking for a SNAPSHOT version, the Elastic Maven Snapshot repository is available\nat https://snapshots.elastic.co/maven/.\n\n==== Maven configuration\n\nHere is how you can configure the dependency using maven as a dependency manager.\nAdd the following to your `pom.xml` file:\n\n[\"source\",\"xml\",subs=\"attributes\"]\n--------------------------------------------------\n<dependency>\n    <groupId>org.elasticsearch.client</groupId>\n    <artifactId>elasticsearch-rest-client-sniffer</artifactId>\n    <version>{version}</version>\n</dependency>\n--------------------------------------------------\n\n==== Gradle configuration\n\nHere is how you can configure the dependency using gradle as a dependency manager.\nAdd the following to your `build.gradle` file:\n\n[\"source\",\"groovy\",subs=\"attributes\"]\n--------------------------------------------------\ndependencies {\n    compile 'org.elasticsearch.client:elasticsearch-rest-client-sniffer:{version}'\n}\n--------------------------------------------------\n\n=== Usage\n\nOnce a `RestClient` instance has been created as shown in <<java-rest-low-usage-initialization>>,\na `Sniffer` can be associated to it. The `Sniffer` will make use of the provided `RestClient`\nto periodically (every 5 minutes by default) fetch the list of current nodes from the cluster\nand update them by calling `RestClient#setNodes`.\n\n[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n--------------------------------------------------\ninclude-tagged::{doc-tests}/SnifferDocumentation.java[sniffer-init]\n--------------------------------------------------\n\nIt is important to close the `Sniffer` so that its background thread gets\nproperly shutdown and all of its resources are released. The `Sniffer`\nobject should have the same lifecycle as the `RestClient` and get closed\nright before the client:\n\n[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n--------------------------------------------------\ninclude-tagged::{doc-tests}/SnifferDocumentation.java[sniffer-close]\n--------------------------------------------------\n\nThe `Sniffer` updates the nodes by default every 5 minutes. This interval can\nbe customized by providing it (in milliseconds) as follows:\n\n[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n--------------------------------------------------\ninclude-tagged::{doc-tests}/SnifferDocumentation.java[sniffer-interval]\n--------------------------------------------------\n\nIt is also possible to enable sniffing on failure, meaning that after each\nfailure the nodes list gets updated straightaway rather than at the following\nordinary sniffing round. In this case a `SniffOnFailureListener` needs to\nbe created at first and provided at `RestClient` creation. Also once the\n`Sniffer` is later created, it needs to be associated with that same\n`SniffOnFailureListener` instance, which will be notified at each failure\nand use the `Sniffer` to perform the additional sniffing round as described.\n\n[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n--------------------------------------------------\ninclude-tagged::{doc-tests}/SnifferDocumentation.java[sniff-on-failure]\n--------------------------------------------------\n<1> Set the failure listener to the `RestClient` instance\n<2> When sniffing on failure, not only do the nodes get updated after each\nfailure, but an additional sniffing round is also scheduled sooner than usual,\nby default one minute after the failure, assuming that things will go back to\nnormal and we want to detect that as soon as possible. Said interval can be\ncustomized at `Sniffer` creation time through the `setSniffAfterFailureDelayMillis`\nmethod. Note that this last configuration parameter has no effect in case sniffing\non failure is not enabled like explained above.\n<3> Set the `Sniffer` instance to the failure listener\n\nThe Elasticsearch Nodes Info api doesn't return the protocol to use when\nconnecting to the nodes but only their `host:port` key-pair, hence `http`\nis used by default. In case `https` should be used instead, the\n`ElasticsearchNodesSniffer` instance has to be manually created and provided\nas follows:\n\n[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n--------------------------------------------------\ninclude-tagged::{doc-tests}/SnifferDocumentation.java[sniffer-https]\n--------------------------------------------------\n\nIn the same way it is also possible to customize the `sniffRequestTimeout`,\nwhich defaults to one second. That is the `timeout` parameter provided as a\nquery string parameter when calling the Nodes Info api, so that when the\ntimeout expires on the server side, a valid response is still returned\nalthough it may contain only a subset of the nodes that are part of the\ncluster, the ones that have responded until then.\n\n[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n--------------------------------------------------\ninclude-tagged::{doc-tests}/SnifferDocumentation.java[sniff-request-timeout]\n--------------------------------------------------\n\nAlso, a custom `NodesSniffer` implementation can be provided for advanced\nuse cases that may require fetching the nodes from external sources rather\nthan from Elasticsearch:\n\n[\"source\",\"java\",subs=\"attributes,callouts,macros\"]\n--------------------------------------------------\ninclude-tagged::{doc-tests}/SnifferDocumentation.java[custom-nodes-sniffer]\n--------------------------------------------------\n<1> Fetch the hosts from the external source\n"
}