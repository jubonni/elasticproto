{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.340083",
        "size": 20676,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "search-template",
        "version": "8.15"
    },
    "doc": "[[search-template]]\n\n=== Search templates\n\nA search template is a stored search you can run with different variables.\n\nIf you use {es} as a search backend, you can pass user input from a search bar\nas parameters for a search template. This lets you run searches without exposing\n{es}'s query syntax to your users.\n\nIf you use {es} for a custom application, search templates let you change\nyour searches without modifying your app's code.\n\n[discrete]\n[[create-search-template]]\n==== Create a search template\n\nTo create or update a search template, use the <<create-stored-script-api,create\nstored script API>>.\n\n\nThe request's `source` supports the same parameters as the <<search-search-api-request-body,search API>>'s request body.`source` also accepts https://mustache.github.io/[Mustache] variables, from an open source project https://github.com/spullara/mustache.java[mustache.java].\n\nTypically https://mustache.github.io/[Mustache] variables are enclosed in\ndouble curly brackets: `{{my-var}}`. When you run a templated search, {es}\nreplaces these variables with values from `params`. To learn more about mustache syntax - see http://mustache.github.io/mustache.5.html[Mustache.js manual] Search templates must use a `lang` of `mustache`.\n\nThe following request creates a search template with an `id` of\n`my-search-template`.\n\n[source,console]\n----\nPUT _scripts/my-search-template\n{\n  \"script\": {\n    \"lang\": \"mustache\",\n    \"source\": {\n      \"query\": {\n        \"match\": {\n          \"message\": \"{{query_string}}\"\n        }\n      },\n      \"from\": \"{{from}}\",\n      \"size\": \"{{size}}\"\n    }\n  }\n}\n----\n\n{es} stores search templates as Mustache <<modules-scripting,scripts>> in the\ncluster state. {es} compiles search templates in the `template` script context.\nSettings that limit or disable scripts also affect search templates.\n\n[discrete]\n[[validate-search-template]]\n==== Validate a search template\n\n[[_validating_templates]]\nTo test a template with different `params`, use the\n<<render-search-template-api,render search template API>>.\n\n[source,console]\n----\nPOST _render/template\n{\n  \"id\": \"my-search-template\",\n  \"params\": {\n    \"query_string\": \"hello world\",\n    \"from\": 20,\n    \"size\": 10\n  }\n}\n----\n// TEST[continued]\n\nWhen rendered, the template outputs a <<search-search-api-request-body,search\nrequest body>>.\n\n[source,console-result]\n----\n{\n  \"template_output\": {\n    \"query\": {\n      \"match\": {\n        \"message\": \"hello world\"\n      }\n    },\n    \"from\": \"20\",\n    \"size\": \"10\"\n  }\n}\n----\n\nYou can also use the API to test inline templates.\n\n[source,console]\n----\nPOST _render/template\n{\n    \"source\": {\n      \"query\": {\n        \"match\": {\n          \"message\": \"{{query_string}}\"\n        }\n      },\n      \"from\": \"{{from}}\",\n      \"size\": \"{{size}}\"\n    },\n  \"params\": {\n    \"query_string\": \"hello world\",\n    \"from\": 20,\n    \"size\": 10\n  }\n}\n----\n// TEST[continued]\n\n[discrete]\n[[run-templated-search]]\n==== Run a templated search\n\nTo run a search with a search template, use the <<search-template-api,search\ntemplate API>>. You can specify different `params` with each request.\n\n////\n[source,console]\n----\nPUT my-index/_doc/1?refresh\n{\n  \"message\": \"hello world\"\n}\n----\n// TEST[continued]\n////\n\n[source,console]\n----\nGET my-index/_search/template\n{\n  \"id\": \"my-search-template\",\n  \"params\": {\n    \"query_string\": \"hello world\",\n    \"from\": 0,\n    \"size\": 10\n  }\n}\n----\n// TEST[continued]\n\nThe response uses the same properties as the <<search-search,search API>>'s\nresponse.\n\n[source,console-result]\n----\n{\n  \"took\": 36,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\": 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\": {\n      \"value\": 1,\n      \"relation\": \"eq\"\n    },\n    \"max_score\": 0.5753642,\n    \"hits\": [\n      {\n        \"_index\": \"my-index\",\n        \"_id\": \"1\",\n        \"_score\": 0.5753642,\n        \"_source\": {\n          \"message\": \"hello world\"\n        }\n      }\n    ]\n  }\n}\n----\n// TESTRESPONSE[s/\"took\": 36/\"took\": \"$body.took\"/]\n\n[discrete]\n[[run-multiple-templated-searches]]\n==== Run multiple templated searches\n\nTo run multiple templated searches with a single request, use the\n<<multi-search-template,multi search template API>>. These requests often have\nless overhead and faster speeds than multiple individual searches.\n\n[source,console]\n----\nGET my-index/_msearch/template\n{ }\n{ \"id\": \"my-search-template\", \"params\": { \"query_string\": \"hello world\", \"from\": 0, \"size\": 10 }}\n{ }\n{ \"id\": \"my-other-search-template\", \"params\": { \"query_type\": \"match_all\" }}\n----\n// TEST[continued]\n// TEST[s/my-other-search-template/my-search-template/]\n\n[discrete]\n[[get-search-templates]]\n==== Get search templates\n\nTo retrieve a search template, use the <<get-stored-script-api,get stored\nscript API>>.\n\n[source,console]\n----\nGET _scripts/my-search-template\n----\n// TEST[continued]\n\nTo get a list of all search templates and other stored scripts, use the\n<<cluster-state,cluster state API>>.\n\n[source,console]\n----\nGET _cluster/state/metadata?pretty&filter_path=metadata.stored_scripts\n----\n// TEST[continued]\n\n[discrete]\n[[delete-search-template]]\n==== Delete a search template\n\nTo delete a search template, use the <<delete-stored-script-api,delete stored\nscript API>>.\n\n[source,console]\n----\nDELETE _scripts/my-search-template\n----\n// TEST[continued]\n\n[discrete]\n[[search-template-set-default-values]]\n==== Set default values\n\nTo set a default value for a variable, use the following syntax:\n\n[source,mustache]\n----\n{{my-var}}{{^my-var}}default value{{/my-var}}\n----\n\nIf a templated search doesn't specify a value in its `params`, the search uses\nthe default value instead. For example, the following template sets defaults\nfor `from` and `size`.\n\n[source,console]\n----\nPOST _render/template\n{\n  \"source\": {\n    \"query\": {\n      \"match\": {\n        \"message\": \"{{query_string}}\"\n      }\n    },\n    \"from\": \"{{from}}{{^from}}0{{/from}}\",\n    \"size\": \"{{size}}{{^size}}10{{/size}}\"\n  },\n  \"params\": {\n    \"query_string\": \"hello world\"\n  }\n}\n----\n\n[discrete]\n[[search-template-url-encode-strings]]\n==== URL encode strings\n\nUse the `{{#url}}` function to URL encode a string.\n\n[source,console]\n----\nPOST _render/template\n{\n  \"source\": {\n    \"query\": {\n      \"term\": {\n        \"url.full\": \"{{#url}}{{host}}/{{page}}{{/url}}\"\n      }\n    }\n  },\n  \"params\": {\n    \"host\": \"http://example.com\",\n    \"page\": \"hello-world\"\n  }\n}\n----\n\nThe template renders as:\n\n[source,console-result]\n----\n{\n  \"template_output\": {\n    \"query\": {\n      \"term\": {\n        \"url.full\": \"http%3A%2F%2Fexample.com%2Fhello-world\"\n      }\n    }\n  }\n}\n----\n\n[discrete]\n[[search-template-concatenate-values]]\n==== Concatenate values\n\nUse the `{{#join}}` function to concatenate array values as a comma-delimited\nstring. For example, the following template concatenates two email addresses.\n\n[source,console]\n----\nPOST _render/template\n{\n  \"source\": {\n    \"query\": {\n      \"match\": {\n        \"user.group.emails\": \"{{#join}}emails{{/join}}\"\n      }\n    }\n  },\n  \"params\": {\n    \"emails\": [ \"user1@example.com\", \"user_one@example.com\" ]\n  }\n}\n----\n\nThe template renders as:\n\n[source,console-result]\n----\n{\n  \"template_output\": {\n    \"query\": {\n      \"match\": {\n        \"user.group.emails\": \"user1@example.com,user_one@example.com\"\n      }\n    }\n  }\n}\n----\n\nYou can also specify a custom delimiter.\n\n[source,console]\n----\nPOST _render/template\n{\n  \"source\": {\n    \"query\": {\n      \"range\": {\n        \"user.effective.date\": {\n          \"gte\": \"{{date.min}}\",\n          \"lte\": \"{{date.max}}\",\n          \"format\": \"{{#join delimiter='||'}}date.formats{{/join delimiter='||'}}\"\n\t      }\n      }\n    }\n  },\n  \"params\": {\n    \"date\": {\n      \"min\": \"2098\",\n      \"max\": \"06/05/2099\",\n      \"formats\": [\"dd/MM/yyyy\", \"yyyy\"]\n    }\n  }\n}\n----\n\nThe template renders as:\n\n[source,console-result]\n----\n{\n  \"template_output\": {\n    \"query\": {\n      \"range\": {\n        \"user.effective.date\": {\n          \"gte\": \"2098\",\n          \"lte\": \"06/05/2099\",\n          \"format\": \"dd/MM/yyyy||yyyy\"\n        }\n      }\n    }\n  }\n}\n----\n\n[discrete]\n[[search-template-convert-json]]\n==== Convert to JSON\n\nUse the `{{#toJson}}` function to convert a variable value to its JSON\nrepresentation.\n\nFor example, the following template uses `{{#toJson}}` to pass an array. To\nensure the request body is valid JSON, the `source` is written in the string\nformat.\n\n[source,console]\n----\nPOST _render/template\n{\n  \"source\": \"{ \\\"query\\\": { \\\"terms\\\": { \\\"tags\\\": {{#toJson}}tags{{/toJson}} }}}\",\n  \"params\": {\n    \"tags\": [\n      \"prod\",\n      \"es01\"\n    ]\n  }\n}\n----\n\nThe template renders as:\n\n[source,console-result]\n----\n{\n  \"template_output\": {\n    \"query\": {\n      \"terms\": {\n        \"tags\": [\n          \"prod\",\n          \"es01\"\n        ]\n      }\n    }\n  }\n}\n----\n\nYou can also use `{{#toJson}}` to pass objects.\n\n[source,console]\n----\nPOST _render/template\n{\n  \"source\": \"{ \\\"query\\\": {{#toJson}}my_query{{/toJson}} }\",\n  \"params\": {\n    \"my_query\": {\n      \"match_all\": { }\n    }\n  }\n}\n----\n\nThe template renders as:\n\n[source,console-result]\n----\n{\n  \"template_output\" : {\n    \"query\" : {\n      \"match_all\" : { }\n    }\n  }\n}\n\n----\n\nYou can also pass an array of objects.\n\n[source,console]\n----\nPOST _render/template\n{\n  \"source\": \"{ \\\"query\\\": { \\\"bool\\\": { \\\"must\\\": {{#toJson}}clauses{{/toJson}} }}}\",\n  \"params\": {\n    \"clauses\": [\n      {\n        \"term\": {\n          \"user.id\": \"kimchy\"\n        }\n      },\n      {\n        \"term\": {\n          \"url.domain\": \"example.com\"\n        }\n      }\n    ]\n  }\n}\n----\n\nThe template renders as:\n\n[source,console-result]\n----\n{\n  \"template_output\": {\n    \"query\": {\n      \"bool\": {\n        \"must\": [\n          {\n            \"term\": {\n              \"user.id\": \"kimchy\"\n            }\n          },\n          {\n            \"term\": {\n              \"url.domain\": \"example.com\"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n----\n\n[discrete]\n[[search-template-use-conditions]]\n==== Use conditions\n\nTo create if conditions, use the following syntax:\n\n[source,mustache]\n----\n{{#condition}}content{{/condition}}\n----\n\nIf the condition variable is `true`, {es} displays its content. For example, the\nfollowing template searches data from the past year if `year_scope` is `true`.\n\n[source,console]\n----\nPOST _render/template\n{\n  \"source\": \"{ \\\"query\\\": { \\\"bool\\\": { \\\"filter\\\": [ {{#year_scope}} { \\\"range\\\": { \\\"@timestamp\\\": { \\\"gte\\\": \\\"now-1y/d\\\", \\\"lt\\\": \\\"now/d\\\" } } }, {{/year_scope}} { \\\"term\\\": { \\\"user.id\\\": \\\"{{user_id}}\\\" }}]}}}\",\n  \"params\": {\n    \"year_scope\": true,\n    \"user_id\": \"kimchy\"\n  }\n}\n----\n\nThe template renders as:\n\n[source,console-result]\n----\n{\n  \"template_output\" : {\n    \"query\" : {\n      \"bool\" : {\n        \"filter\" : [\n          {\n            \"range\" : {\n              \"@timestamp\" : {\n                \"gte\" : \"now-1y/d\",\n                \"lt\" : \"now/d\"\n              }\n            }\n          },\n          {\n            \"term\" : {\n              \"user.id\" : \"kimchy\"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n----\n\nIf `year_scope` is `false`, the template searches data from any time period.\n\n[source,console]\n----\nPOST _render/template\n{\n  \"source\": \"{ \\\"query\\\": { \\\"bool\\\": { \\\"filter\\\": [ {{#year_scope}} { \\\"range\\\": { \\\"@timestamp\\\": { \\\"gte\\\": \\\"now-1y/d\\\", \\\"lt\\\": \\\"now/d\\\" } } }, {{/year_scope}} { \\\"term\\\": { \\\"user.id\\\": \\\"{{user_id}}\\\" }}]}}}\",\n  \"params\": {\n    \"year_scope\": false,\n    \"user_id\": \"kimchy\"\n  }\n}\n----\n\nThe template renders as:\n\n[source,console-result]\n----\n{\n  \"template_output\" : {\n    \"query\" : {\n      \"bool\" : {\n        \"filter\" : [\n          {\n            \"term\" : {\n              \"user.id\" : \"kimchy\"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n----\n\nTo create if-else conditions, use the following syntax:\n\n[source,mustache]\n----\n{{#condition}}if content{{/condition}} {{^condition}}else content{{/condition}}\n----\n\nFor example, the following template searches data from the past year if\n`year_scope` is `true`. Otherwise, it searches data from the past day.\n\n[source,console]\n----\nPOST _render/template\n{\n  \"source\": \"{ \\\"query\\\": { \\\"bool\\\": { \\\"filter\\\": [ { \\\"range\\\": { \\\"@timestamp\\\": { \\\"gte\\\": {{#year_scope}} \\\"now-1y/d\\\" {{/year_scope}} {{^year_scope}} \\\"now-1d/d\\\" {{/year_scope}} , \\\"lt\\\": \\\"now/d\\\" }}}, { \\\"term\\\": { \\\"user.id\\\": \\\"{{user_id}}\\\" }}]}}}\",\n  \"params\": {\n    \"year_scope\": true,\n    \"user_id\": \"kimchy\"\n  }\n}\n----\n\n[[search-template-with-mustache-examples]]\n==== Search template examples with Mustache\n\nThe mustache templating language defines various tag types you can use within templates. The following sections describe some of these tag types and provide examples of using them in {es} <<search-template, search templates>>.\n\n[discrete]\n[[search-template-mustache-variable]]\n==== Mustache variables\nMustache tags are typically enclosed in double curly brackets. A mustache variable: `{{my-variable}}` is a type of mustache tag. When you run a templated search, {es} replaces these variables with values from `params`.\n\nFor example, consider the following search template:\n\n[source,console]\n----\nPUT _scripts/my-search-template\n{\n  \"script\": {\n    \"lang\": \"mustache\",\n    \"source\": {\n      \"query\": {\n        \"match\": {\n          \"message\": \"{{query_string}}\"\n        }\n      },\n      \"from\": \"{{from}}\",\n      \"size\": \"{{size}}\"\n    }\n  }\n}\n----\n\nTesting the above search template with `params`:\n\n[source,console]\n----\nPOST _render/template\n{\n  \"id\": \"my-search-template\",\n  \"params\": {\n    \"query_string\": \"hello world\",\n    \"from\": 20,\n    \"size\": 10\n  }\n}\n----\n// TEST[continued]\n\nWhen rendered, the `{{query_string}}` in `message` is replaced with `hello world` passed in `params`.\n[source,console-result]\n----\n{\n  \"template_output\": {\n    \"query\": {\n      \"match\": {\n        \"message\": \"hello world\"\n      }\n    },\n    \"from\": \"20\",\n    \"size\": \"10\"\n  }\n}\n----\n\nIf your search template doesn't pass a value to your `query_string` the message would be replaced with a empty string.\n\nFor example:\n\n[source,console]\n----\nPOST _render/template\n{\n  \"id\": \"my-search-template\",\n  \"params\": {\n    \"from\": 20,\n    \"size\": 10\n  }\n}\n----\n// TEST[continued]\n\nWhen rendered, template outputs as:\n\n[source,console-result]\n----\n{\n  \"template_output\": {\n    \"query\": {\n      \"match\": {\n        \"message\": \"\"\n      }\n    },\n    \"from\": \"20\",\n    \"size\": \"10\"\n  }\n}\n----\n\n[discrete]\n[[search-template-sections]]\n==== Sections\n\nSections are also a type of Mustache tags. You can use `sections` in your search template with a nested or unnested object. A section begins with `{{#my-section-variable}}` and ends with `{{/my-section-variable}}`.\n\nThe following search template shows an example using sections with nested objects:\n\n[source,console]\n----\nPOST _render/template\n{\n  \"source\":\n  \"\"\"\n  {\n    \"query\": {\n      \"match\": {\n        {{#query_message}}\n          {{#query_string}}\n        \"message\": \"Hello {{#first_name_section}}{{first_name}}{{/first_name_section}} {{#last_name_section}}{{last_name}}{{/last_name_section}}\"\n          {{/query_string}}\n        {{/query_message}}\n      }\n    }\n  }\n  \"\"\",\n  \"params\": {\n    \"query_message\": {\n       \"query_string\": {\n         \"first_name_section\": {\"first_name\": \"John\"},\n         \"last_name_section\": {\"last_name\": \"kimchy\"}\n       }\n    }\n  }\n}\n----\n\nThe template renders as:\n\n[source,console-result]\n----\n{\n  \"template_output\": {\n    \"query\": {\n      \"match\": {\n        \"message\": \"Hello John kimchy\"\n      }\n    }\n  }\n}\n----\n\n[discrete]\n[[search-template-lists]]\n===== Lists\nYou can pass a list of objects and loop over each item in your search template.\n\nFor example, following search template combines <<search-template-sections,sections>> and matches all the usernames:\n\n[source,console]\n----\nPUT _scripts/my-search-template\n{\n  \"script\": {\n    \"lang\": \"mustache\",\n    \"source\": {\n      \"query\":{\n        \"multi_match\":{\n          \"query\": \"{{query_string}}\",\n          \"fields\": \"\"\"[{{#text_fields}}{{user_name}},{{/text_fields}}]\"\"\"\n        }\n      }\n    }\n  }\n}\n----\n\nTesting the template:\n\n[source,console]\n----\nPOST _render/template\n{\n  \"id\": \"my-search-template\",\n  \"params\": {\n    \"query_string\": \"My string\",\n    \"text_fields\": [\n      {\n        \"user_name\": \"John\"\n      },\n      {\n        \"user_name\": \"kimchy\"\n      }\n    ]\n  }\n}\n----\n// TEST[continued]\n\nWhen rendered, template outputs:\n\n[source,console-result]\n----\n{\n  \"template_output\": {\n    \"query\": {\n      \"multi_match\": {\n        \"query\": \"My string\",\n        \"fields\": \"[John,kimchy,]\"\n      }\n    }\n  }\n}\n----\n\nNOTE: The above will cause a trailing comma issue, which causes invalid JSON. A workaround would be to include an <<search-template-inverted-section,inverted section>> and adding a variable to make sure it's the last item in the array.\n\nFor example:\n\n[source,console]\n----\nPUT _scripts/my-search-template\n{\n  \"script\": {\n    \"lang\": \"mustache\",\n    \"source\": {\n      \"query\":{\n        \"multi_match\":{\n          \"query\": \"{{query_string}}\",\n          \"fields\": \"\"\"[{{#text_fields}}{{user_name}}{{^last}},{{/last}}{{/text_fields}}]\"\"\"\n        }\n      }\n    }\n  }\n}\n----\n\nTesting the `my-search-template` again with a variable: `last` to determine it's the last item in the array:\n[source,console]\n----\nPOST _render/template\n{\n  \"id\": \"my-search-template\",\n  \"params\": {\n    \"query_string\": \"My string\",\n    \"text_fields\": [\n      {\n        \"user_name\": \"John\",\n        \"last\": false\n      },\n      {\n        \"user_name\": \"kimchy\",\n        \"last\": true\n      }\n    ]\n  }\n}\n----\n// TEST[continued]\n\nWhen rendered the template outputs:\n\n[source,console-result]\n----\n{\n  \"template_output\": {\n    \"query\": {\n      \"multi_match\": {\n        \"query\": \"My string\",\n        \"fields\": \"[John,kimchy]\"\n      }\n    }\n  }\n}\n----\n\n[discrete]\n[[search-template-lambdas]]\n===== Lambdas\n{es} has pre-built custom functions to support converting the text into a specific format.\n\nTo Learn more about usage of mustache lambdas, check out the examples in <<search-template-url-encode-strings,Url encode strings>>, <<search-template-concatenate-values,Concatenate values>>, and <<search-template-convert-json, Convert to json>>.\n\n[discrete]\n[[search-template-inverted-section]]\n==== Inverted sections\nInverted sections are useful when you want to set a value once.\n\nTo use inverted sections use following syntax:\n\n[source,mustache]\n----\n{{^my-variable}} content {{/my-variable}}\n----\n\nFor example, in the following search template if `name_exists` is `false`, `message` is set with `Hello World`, else it is set to empty string.\n\n[source,console]\n----\nPOST _render/template\n{\n  \"source\": {\n    \"query\": {\n      \"match\": {\n        \"message\": \"{{^name_exists}}Hello World{{/name_exists}}\"\n      }\n    }\n  },\n  \"params\": {\n     \"name_exists\": false\n  }\n}\n----\n\nThey can also be combined with  <<search-template-use-conditions,conditions>> and <<search-template-set-default-values,default values>>.\n\nFor example, in the following search template, if `name_exists` is `true`, the value of `{{query_string}}` is replaced.   If `name_exists` is `false`, it is set to the default value `World`.\n\n[source,console]\n----\nPOST _render/template\n{\n  \"source\": {\n    \"query\": {\n      \"match\": {\n        \"message\": \"Hello {{#name_exists}}{{query_string}}{{/name_exists}}{{^name_exists}}World{{/name_exists}}\"\n      }\n    }\n  },\n  \"params\": {\n    \"query_string\": \"Kimchy\",\n     \"name_exists\": true\n  }\n}\n----\n\nWhen rendered, template output:\n\n[source,console-result]\n----\n{\n  \"template_output\": {\n    \"query\": {\n      \"match\": {\n        \"message\": \"Hello Kimchy\"\n      }\n    }\n  }\n}\n----\n\n[discrete]\n[[search-template-set-delimiter]]\n==== Set delimiter\nYou can change the default delimiter: double curly brackets `{{my-variable}}` to any custom delimiter in your search template.\n\nFor example, the following search template changes the default delimiter to a single round bracket `(query_string)`.\n\n[source,console]\n----\nPUT _scripts/my-search-template\n{\n  \"script\": {\n    \"lang\": \"mustache\",\n    \"source\":\n    \"\"\"\n    {\n      \"query\": {\n        \"match\": {\n           {{=( )=}}\n          \"message\": \"(query_string)\"\n          (={{ }}=)\n        }\n      }\n    }\n    \"\"\"\n  }\n}\n----\nTesting the template with new delimiter:\n\n[source,console]\n----\nPOST _render/template\n{\n  \"id\": \"my-search-template\",\n  \"params\": {\n    \"query_string\": \"hello world\"\n  }\n}\n----\n// TEST[continued]\n\nWhen rendered, template outputs:\n\n[source,console-result]\n----\n{\n  \"template_output\": {\n    \"query\": {\n      \"match\": {\n        \"message\": \"hello world\"\n      }\n    }\n  }\n}\n----\n\n[discrete]\n[[search-template-unsupported-features]]\n==== Unsupported features\nThe following mustache features are not supported in {es} search templates:\n\n* Partials\n"
}