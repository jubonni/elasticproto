{
    "meta": {
        "size": 12393,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "docs-get",
        "version": "8.15"
    },
    "doc": "[[docs-get]]\n=== Get API\n++++\n<titleabbrev>Get</titleabbrev>\n++++\n\nRetrieves the specified JSON document from an index.\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_doc/0\n--------------------------------------------------\n// TEST[setup:my_index]\n\n[[docs-get-api-request]]\n==== {api-request-title}\n\n`GET <index>/_doc/<_id>`\n\n`HEAD <index>/_doc/<_id>`\n\n`GET <index>/_source/<_id>`\n\n`HEAD <index>/_source/<_id>`\n\n[[docs-get-api-prereqs]]\n==== {api-prereq-title}\n\n* If the {es} {security-features} are enabled, you must have the `read`\n<<privileges-list-indices,index privilege>> for the target index or index alias.\n\n[[docs-get-api-desc]]\n==== {api-description-title}\nYou use GET to retrieve a document and its source or stored fields from a\nparticular index. Use HEAD to verify that a document exists. You can\nuse the `_source` resource retrieve just the document source or verify\nthat it exists.\n\n[discrete]\n[[realtime]]\n===== Realtime\n\nBy default, the get API is realtime, and is not affected by the refresh\nrate of the index (when data will become visible for search). In case where\nstored fields are requested (see `stored_fields` parameter) and the document\nhas been updated but is not yet refreshed, the get API will have to parse\nand analyze the source to extract the stored fields. In order to disable\nrealtime GET, the `realtime` parameter can be set to `false`.\n\n[discrete]\n[[get-source-filtering]]\n===== Source filtering\n\nBy default, the get operation returns the contents of the `_source` field unless\nyou have used the `stored_fields` parameter or if the `_source` field is disabled.\nYou can turn off `_source` retrieval by using the `_source` parameter:\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_doc/0?_source=false\n--------------------------------------------------\n// TEST[setup:my_index]\n\nIf you only need one or two fields from the `_source`, use the `_source_includes`\nor `_source_excludes` parameters to include or filter out particular fields.\nThis can be especially helpful with large documents where partial retrieval can\nsave on network overhead. Both parameters take a comma separated list\nof fields or wildcard expressions. Example:\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_doc/0?_source_includes=*.id&_source_excludes=entities\n--------------------------------------------------\n// TEST[setup:my_index]\n\nIf you only want to specify includes, you can use a shorter notation:\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_doc/0?_source=*.id\n--------------------------------------------------\n// TEST[setup:my_index]\n\n[discrete]\n[[get-routing]]\n===== Routing\n\nIf routing is used during indexing, the routing value also needs to be\nspecified to retrieve a document. For example:\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_doc/2?routing=user1\n--------------------------------------------------\n// TEST[continued]\n\nThis request gets the document with id `2`, but it is routed based on the\nuser. The document is not fetched if the correct routing is not specified.\n\n[discrete]\n[[preference]]\n===== Preference\n\nControls a `preference` of which shard replicas to execute the get\nrequest on. By default, the operation is randomized between the shard\nreplicas.\n\nThe `preference` can be set to:\n\n`_local`::\n\tThe operation will prefer to be executed on a local\n\tallocated shard if possible.\n\nCustom (string) value::\n\tA custom value will be used to guarantee that\n\tthe same shards will be used for the same custom value. This can help\n\twith \"jumping values\" when hitting different shards in different refresh\n\tstates. A sample value can be something like the web session id, or the\n\tuser name.\n\n[discrete]\n[[get-refresh]]\n===== Refresh\n\nThe `refresh` parameter can be set to `true` in order to refresh the\nrelevant shard before the get operation and make it searchable. Setting\nit to `true` should be done after careful thought and verification that\nthis does not cause a heavy load on the system (and slows down\nindexing).\n\n[discrete]\n[[get-distributed]]\n===== Distributed\n\nThe get operation gets hashed into a specific shard id. It then gets\nredirected to one of the replicas within that shard id and returns the\nresult. The replicas are the primary shard and its replicas within that\nshard id group. This means that the more replicas we have, the\nbetter GET scaling we will have.\n\n[discrete]\n[[get-versioning]]\n===== Versioning support\n\nYou can use the `version` parameter to retrieve the document only if\nits current version is equal to the specified one.\n\nInternally, Elasticsearch has marked the old document as deleted and added an\nentirely new document. The old version of the document doesn\u2019t disappear\nimmediately, although you won\u2019t be able to access it. Elasticsearch cleans up\ndeleted documents in the background as you continue to index more data.\n\n[[docs-get-api-path-params]]\n==== {api-path-parms-title}\n\n`<index>`::\n(Required, string) Name of the index that contains the document.\n\n`<_id>`::\n(Required, string) Unique identifier of the document.\n\n[[docs-get-api-query-params]]\n==== {api-query-parms-title}\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=preference]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=realtime]\n\n`refresh`::\n(Optional, Boolean) If `true`, the request refreshes the relevant shard before\nretrieving the document. Defaults to `false`.\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=routing]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=stored_fields]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=source]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=source_excludes]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=source_includes]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=doc-version]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=version_type]\n\n[[docs-get-api-response-body]]\n==== {api-response-body-title}\n\n`_index`::\nThe name of the index the document belongs to.\n\n`_id`::\nThe unique identifier for the document.\n\n`_version`::\nThe document version. Incremented each time the document is updated.\n\n`_seq_no`::\nThe sequence number assigned to the document for the indexing\noperation. Sequence numbers are used to ensure an older version of a document\ndoesn\u2019t overwrite a newer version. See <<optimistic-concurrency-control-index>>.\n\n`_primary_term`::\nThe primary term assigned to the document for the indexing operation.\nSee <<optimistic-concurrency-control-index>>.\n\n`found`::\nIndicates whether the document exists: `true` or `false`.\n\n`_routing`::\nThe explicit routing, if set.\n\n'_source'::\nIf `found` is `true`, contains the document data formatted in JSON.\nExcluded if the `_source` parameter is set to `false` or the `stored_fields`\nparameter is set to `true`.\n\n'_fields'::\nIf the `stored_fields` parameter is set to `true` and `found` is\n`true`, contains the document fields stored in the index.\n\n[[docs-get-api-example]]\n==== {api-examples-title}\n\nRetrieve the JSON document with the `_id` 0 from the `my-index-000001` index:\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_doc/0\n--------------------------------------------------\n// TEST[setup:my_index]\n\nThe API returns the following result:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"_index\": \"my-index-000001\",\n  \"_id\": \"0\",\n  \"_version\": 1,\n  \"_seq_no\": 0,\n  \"_primary_term\": 1,\n  \"found\": true,\n  \"_source\": {\n    \"@timestamp\": \"2099-11-15T14:12:12\",\n    \"http\": {\n      \"request\": {\n        \"method\": \"get\"\n      },\n      \"response\": {\n        \"status_code\": 200,\n        \"bytes\": 1070000\n      },\n      \"version\": \"1.1\"\n    },\n    \"source\": {\n      \"ip\": \"127.0.0.1\"\n    },\n    \"message\": \"GET /search HTTP/1.1 200 1070000\",\n    \"user\": {\n      \"id\": \"kimchy\"\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"_seq_no\": \\d+/\"_seq_no\": $body._seq_no/ s/\"_primary_term\": 1/\"_primary_term\": $body._primary_term/]\n\nCheck to see if a document with the `_id` 0 exists:\n\n[source,console]\n--------------------------------------------------\nHEAD my-index-000001/_doc/0\n--------------------------------------------------\n// TEST[setup:my_index]\n\n{es} returns a status code of `200 - OK` if the document exists, or\n`404 - Not Found` if it doesn't.\n\n[discrete]\n[[_source]]\n===== Get the source field only\n\nUse the `<index>/_source/<id>` resource to get\njust the `_source` field of a document. For example:\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_source/1\n--------------------------------------------------\n// TEST[continued]\n\nYou can use the source filtering parameters to control which parts of the\n`_source` are returned:\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_source/1/?_source_includes=*.id&_source_excludes=entities\n--------------------------------------------------\n// TEST[continued]\n\nYou can use HEAD with the `_source` endpoint to efficiently\ntest whether or not the document _source exists. A document's source is not\navailable if it is disabled in the <<mapping-source-field,mapping>>.\n\n[source,console]\n--------------------------------------------------\nHEAD my-index-000001/_source/1\n--------------------------------------------------\n// TEST[continued]\n\n[discrete]\n[[get-stored-fields]]\n===== Get stored fields\n\nUse the `stored_fields` parameter to specify the set of stored fields you want\nto retrieve. Any requested fields that are not stored are ignored.\nConsider for instance the following mapping:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n   \"mappings\": {\n       \"properties\": {\n          \"counter\": {\n             \"type\": \"integer\",\n             \"store\": false\n          },\n          \"tags\": {\n             \"type\": \"keyword\",\n             \"store\": true\n          }\n       }\n   }\n}\n--------------------------------------------------\n\nNow we can add a document:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001/_doc/1\n{\n  \"counter\": 1,\n  \"tags\": [ \"production\" ]\n}\n--------------------------------------------------\n// TEST[continued]\n\nAnd then try to retrieve it:\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_doc/1?stored_fields=tags,counter\n--------------------------------------------------\n// TEST[continued]\n\nThe API returns the following result:\n\n[source,console-result]\n--------------------------------------------------\n{\n   \"_index\": \"my-index-000001\",\n   \"_id\": \"1\",\n   \"_version\": 1,\n   \"_seq_no\" : 22,\n   \"_primary_term\" : 1,\n   \"found\": true,\n   \"fields\": {\n      \"tags\": [\n         \"production\"\n      ]\n   }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"_seq_no\" : \\d+/\"_seq_no\" : $body._seq_no/ s/\"_primary_term\" : 1/\"_primary_term\" : $body._primary_term/]\n\nField values fetched from the document itself are always returned as an array.\nSince the `counter` field is not stored, the get request ignores it.\n\nYou can also retrieve metadata fields like the `_routing` field:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001/_doc/2?routing=user1\n{\n  \"counter\" : 1,\n  \"tags\" : [\"env2\"]\n}\n--------------------------------------------------\n// TEST[continued]\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_doc/2?routing=user1&stored_fields=tags,counter\n--------------------------------------------------\n// TEST[continued]\n\nThe API returns the following result:\n\n[source,console-result]\n--------------------------------------------------\n{\n   \"_index\": \"my-index-000001\",\n   \"_id\": \"2\",\n   \"_version\": 1,\n   \"_seq_no\" : 13,\n   \"_primary_term\" : 1,\n   \"_routing\": \"user1\",\n   \"found\": true,\n   \"fields\": {\n      \"tags\": [\n         \"env2\"\n      ]\n   }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"_seq_no\" : \\d+/\"_seq_no\" : $body._seq_no/ s/\"_primary_term\" : 1/\"_primary_term\" : $body._primary_term/]\n\nOnly leaf fields can be retrieved with the `stored_field` option. Object fields\ncan't be returned--if specified, the request fails.\n"
}