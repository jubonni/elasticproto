{
    "meta": {
        "size": 5033,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "query-dsl-term-query",
        "version": "8.15"
    },
    "doc": "[[query-dsl-term-query]]\n=== Term query\n++++\n<titleabbrev>Term</titleabbrev>\n++++\n\nReturns documents that contain an *exact* term in a provided field.\n\nYou can use the `term` query to find documents based on a precise value such as\na price, a product ID, or a username.\n\n[WARNING]\n====\nAvoid using the `term` query for <<text, `text`>> fields.\n\nBy default, {es} changes the values of `text` fields as part of <<analysis,\nanalysis>>. This can make finding exact matches for `text` field values\ndifficult.\n\nTo search `text` field values, use the <<query-dsl-match-query,`match`>> query\ninstead.\n====\n\n[[term-query-ex-request]]\n==== Example request\n\n[source,console]\n----\nGET /_search\n{\n  \"query\": {\n    \"term\": {\n      \"user.id\": {\n        \"value\": \"kimchy\",\n        \"boost\": 1.0\n      }\n    }\n  }\n}\n----\n\n[[term-top-level-params]]\n==== Top-level parameters for `term`\n`<field>`::\n(Required, object) Field you wish to search.\n\n[[term-field-params]]\n==== Parameters for `<field>`\n`value`::\n(Required, string) Term you wish to find in the provided `<field>`. To return a\ndocument, the term must exactly match the field value, including whitespace and\ncapitalization.\n\n`boost`::\n(Optional, float) Floating point number used to decrease or increase the\n<<relevance-scores,relevance scores>> of a query. Defaults to `1.0`.\n+\nYou can use the `boost` parameter to adjust relevance scores for searches\ncontaining two or more queries.\n+\nBoost values are relative to the default value of `1.0`. A boost value between\n`0` and `1.0` decreases the relevance score. A value greater than `1.0`\nincreases the relevance score.\n\n`case_insensitive` added:[7.10.0]::\n(Optional, Boolean) Allows ASCII case insensitive matching of the\nvalue with the indexed field values when set to true. Default is false which means\nthe case sensitivity of matching depends on the underlying field's mapping.\n\n[[term-query-notes]]\n==== Notes\n\n[[avoid-term-query-text-fields]]\n===== Avoid using the `term` query for `text` fields\nBy default, {es} changes the values of `text` fields during analysis. For\nexample, the default <<analysis-standard-analyzer, standard analyzer>> changes\n`text` field values as follows:\n\n* Removes most punctuation\n* Divides the remaining content into individual words, called\n<<analysis-tokenizers, tokens>>\n* Lowercases the tokens\n\nTo better search `text` fields, the `match` query also analyzes your provided\nsearch term before performing a search. This means the `match` query can search\n`text` fields for analyzed tokens rather than an exact term.\n\nThe `term` query does *not* analyze the search term. The `term` query only\nsearches for the *exact* term you provide. This means the `term` query may\nreturn poor or no results when searching `text` fields.\n\nTo see the difference in search results, try the following example.\n\n. Create an index with a `text` field called `full_text`.\n+\n--\n\n[source,console]\n----\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"full_text\": { \"type\": \"text\" }\n    }\n  }\n}\n----\n\n--\n\n. Index a document with a value of `Quick Brown Foxes!` in the `full_text`\nfield.\n+\n--\n\n[source,console]\n----\nPUT my-index-000001/_doc/1\n{\n  \"full_text\":   \"Quick Brown Foxes!\"\n}\n----\n// TEST[continued]\n\nBecause `full_text` is a `text` field, {es} changes `Quick Brown Foxes!` to\n`[quick, brown, fox]` during analysis.\n\n--\n\n. Use the `term` query to search for `Quick Brown Foxes!` in the `full_text`\nfield. Include the `pretty` parameter so the response is more readable.\n+\n--\n\n[source,console]\n----\nGET my-index-000001/_search?pretty\n{\n  \"query\": {\n    \"term\": {\n      \"full_text\": \"Quick Brown Foxes!\"\n    }\n  }\n}\n----\n// TEST[continued]\n\nBecause the `full_text` field no longer contains the *exact* term `Quick Brown\nFoxes!`, the `term` query search returns no results.\n\n--\n\n. Use the `match` query to search for `Quick Brown Foxes!` in the `full_text`\nfield.\n+\n--\n\n////\n\n[source,console]\n----\nPOST my-index-000001/_refresh\n----\n// TEST[continued]\n\n////\n\n[source,console]\n----\nGET my-index-000001/_search?pretty\n{\n  \"query\": {\n    \"match\": {\n      \"full_text\": \"Quick Brown Foxes!\"\n    }\n  }\n}\n----\n// TEST[continued]\n\nUnlike the `term` query, the `match` query analyzes your provided search term,\n`Quick Brown Foxes!`, before performing a search. The `match` query then returns\nany documents containing the `quick`, `brown`, or `fox` tokens in the\n`full_text` field.\n\nHere's the response for the `match` query search containing the indexed document\nin the results.\n\n[source,console-result]\n----\n{\n  \"took\" : 1,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 1,\n    \"successful\" : 1,\n    \"skipped\" : 0,\n    \"failed\" : 0\n  },\n  \"hits\" : {\n    \"total\" : {\n      \"value\" : 1,\n      \"relation\" : \"eq\"\n    },\n    \"max_score\" : 0.8630463,\n    \"hits\" : [\n      {\n        \"_index\" : \"my-index-000001\",\n        \"_id\" : \"1\",\n        \"_score\" : 0.8630463,\n        \"_source\" : {\n          \"full_text\" : \"Quick Brown Foxes!\"\n        }\n      }\n    ]\n  }\n}\n----\n// TESTRESPONSE[s/\"took\" : 1/\"took\" : $body.took/]\n--\n"
}