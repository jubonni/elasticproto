{
    "meta": {
        "size": 19027,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-functions-math.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "sql-functions-math",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[sql-functions-math]]\n=== Mathematical Functions\n\nAll math and trigonometric functions require their input (where applicable)\nto be numeric.\n\n[[sql-functions-math-generic]]\n[discrete]\n=== Generic\n\n[[sql-functions-math-abs]]\n==== `ABS`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nABS(numeric_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n\n*Output*: numeric\n\n*Description*: Returns the {wikipedia}/Absolute_value[absolute value] of `numeric_exp`. The return type is the same as the input type.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[abs]\n--------------------------------------------------\n\n[[sql-functions-math-cbrt]]\n==== `CBRT`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nCBRT(numeric_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n\n*Output*: double numeric value\n\n*Description*: Returns the {wikipedia}/Cube_root[cube root] of `numeric_exp`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathInlineCbrtWithNegativeValue]\n--------------------------------------------------\n\n[[sql-functions-math-ceil]]\n==== `CEIL/CEILING`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nCEIL(numeric_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n\n*Output*: integer or long numeric value\n\n*Description*: Returns the smallest integer greater than or equal to `numeric_exp`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathInlineCeiling]\n--------------------------------------------------\n\n[[sql-functions-math-e]]\n==== `E`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nE()\n--------------------------------------------------\n\n*Input*: _none_\n\n*Output*: `2.718281828459045`\n\n*Description*: Returns {wikipedia}/E_%28mathematical_constant%29[Euler's number].\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathEulersNumber]\n--------------------------------------------------\n\n[[sql-functions-math-exp]]\n==== `EXP`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nEXP(numeric_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> float numeric expression. If `null`, the function returns `null`.\n\n*Output*: double numeric value\n\n*Description*: Returns {wikipedia}/Exponential_function[Euler's number at the power] of `numeric_exp` e^numeric_exp^.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathExpInline]\n--------------------------------------------------\n\n[[sql-functions-math-expm1]]\n==== `EXPM1`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nEXPM1(numeric_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> float numeric expression. If `null`, the function returns `null`.\n\n*Output*: double numeric value\n\n*Description*: Returns https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#expm1-double-[Euler's number at the power] of `numeric_exp` minus 1 (e^numeric_exp^ - 1).\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathExpm1Inline]\n--------------------------------------------------\n\n[[sql-functions-math-floor]]\n==== `FLOOR`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nFLOOR(numeric_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n\n*Output*: integer or long numeric value\n\n*Description*: Returns the largest integer less than or equal to `numeric_exp`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathInlineFloor]\n--------------------------------------------------\n\n[[sql-functions-math-log]]\n==== `LOG`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nLOG(numeric_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n\n*Output*: double numeric value\n\n*Description*: Returns the {wikipedia}/Natural_logarithm[natural logarithm] of `numeric_exp`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathInlineLog]\n--------------------------------------------------\n\n[[sql-functions-math-log10]]\n==== `LOG10`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nLOG10(numeric_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n\n*Output*: double numeric value\n\n*Description*: Returns the {wikipedia}/Common_logarithm[base 10 logarithm] of `numeric_exp`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathInlineLog10]\n--------------------------------------------------\n\n[[sql-functions-math-pi]]\n==== `PI`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nPI()\n--------------------------------------------------\n\n*Input*: _none_\n\n*Output*: `3.141592653589793`\n\n*Description*: Returns {wikipedia}/Pi[PI number].\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathPINumber]\n--------------------------------------------------\n\n[[sql-functions-math-power]]\n==== `POWER`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nPOWER(\n    numeric_exp, <1>\n    integer_exp) <2>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n<2> integer expression. If `null`, the function returns `null`.\n\n*Output*: double numeric value\n\n*Description*: Returns the value of `numeric_exp` to the power of `integer_exp`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathInlinePowerPositive]\n--------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathInlinePowerNegative]\n--------------------------------------------------\n\n[[sql-functions-math-random]]\n==== `RANDOM/RAND`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nRANDOM(seed) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n\n*Output*: double numeric value\n\n*Description*: Returns a random double using the given seed.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathRandom]\n--------------------------------------------------\n\n[[sql-functions-math-round]]\n==== `ROUND`\n\n.Synopsis:\n[source, sql]\n----\nROUND(\n    numeric_exp      <1>\n    [, integer_exp]) <2>\n----\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n<2> integer expression; optional. If `null`, the function returns `null`.\n\n*Output*: numeric \n\n*Description*: Returns `numeric_exp` rounded to `integer_exp` places right of the decimal point. If `integer_exp` is negative,\n`numeric_exp` is rounded to |`integer_exp`| places to the left of the decimal point. If `integer_exp` is omitted,\nthe function will perform as if `integer_exp` would be 0. The returned numeric data type is the same as the data type \nof `numeric_exp`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathRoundWithPositiveParameter]\n--------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathRoundWithNegativeParameter]\n--------------------------------------------------\n\n[[sql-functions-math-sign]]\n==== `SIGN/SIGNUM`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nSIGN(numeric_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n\n*Output*: [-1, 0, 1]\n\n*Description*: Returns an indicator of the sign of `numeric_exp`. If `numeric_exp` is less than zero, \u20131 is returned. If `numeric_exp` equals zero, 0 is returned. If `numeric_exp` is greater than zero, 1 is returned.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathInlineSign]\n--------------------------------------------------\n\n\n[[sql-functions-math-sqrt]]\n==== `SQRT`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nSQRT(numeric_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n\n*Output*: double numeric value\n\n*Description*: Returns {wikipedia}/Square_root[square root] of `numeric_exp`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathInlineSqrt]\n--------------------------------------------------\n\n[[sql-functions-math-truncate]]\n==== `TRUNCATE/TRUNC`\n\n.Synopsis:\n[source, sql]\n----\nTRUNCATE(\n    numeric_exp      <1>\n    [, integer_exp]) <2>\n----\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n<2> integer expression; optional. If `null`, the function returns `null`.\n\n*Output*: numeric \n\n*Description*: Returns `numeric_exp` truncated to `integer_exp` places right of the decimal point. If `integer_exp` is negative,\n`numeric_exp` is truncated to |`integer_exp`| places to the left of the decimal point. If `integer_exp` is omitted,\nthe function will perform as if `integer_exp` would be 0. The returned numeric data type is the same as the data type \nof `numeric_exp`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathTruncateWithPositiveParameter]\n--------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathTruncateWithNegativeParameter]\n--------------------------------------------------\n\n[[sql-functions-math-trigonometric]]\n[discrete]\n=== Trigonometric\n\n[[sql-functions-math-acos]]\n==== `ACOS`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nACOS(numeric_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n\n*Output*: double numeric value\n\n*Description*: Returns the {wikipedia}/Inverse_trigonometric_functions[arccosine] of `numeric_exp` as an angle, expressed in radians.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathInlineAcos]\n--------------------------------------------------\n\n[[sql-functions-math-asin]]\n==== `ASIN`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nASIN(numeric_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n\n*Output*: double numeric value\n\n*Description*: Returns the {wikipedia}/Inverse_trigonometric_functions[arcsine] of `numeric_exp` as an angle, expressed in radians.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathInlineAsin]\n--------------------------------------------------\n\n[[sql-functions-math-atan]]\n==== `ATAN`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nATAN(numeric_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n\n*Output*: double numeric value\n\n*Description*: Returns the {wikipedia}/Inverse_trigonometric_functions[arctangent] of `numeric_exp` as an angle, expressed in radians.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathInlineAtan]\n--------------------------------------------------\n\n[[sql-functions-math-atan2]]\n==== `ATAN2`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nATAN2(\n    ordinate, <1>\n    abscisa)  <2>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n<2> numeric expression. If `null`, the function returns `null`.\n\n*Output*: double numeric value\n\n*Description*: Returns the {wikipedia}/Atan2[arctangent of the `ordinate` and `abscisa` coordinates] specified as an angle, expressed in radians.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathInlineAtan2]\n--------------------------------------------------\n\n[[sql-functions-math-cos]]\n==== `COS`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nCOS(numeric_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n\n*Output*: double numeric value\n\n*Description*: Returns the {wikipedia}/Trigonometric_functions#cosine[cosine] of `numeric_exp`, where `numeric_exp` is an angle expressed in radians.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathInlineCosine]\n--------------------------------------------------\n\n[[sql-functions-math-cosh]]\n==== `COSH`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nCOSH(numeric_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n\n*Output*: double numeric value\n\n*Description*: Returns the {wikipedia}/Hyperbolic_function[hyperbolic cosine] of `numeric_exp`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathInlineCosh]\n--------------------------------------------------\n\n[[sql-functions-math-cot]]\n==== `COT`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nCOT(numeric_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n\n*Output*: double numeric value\n\n*Description*: Returns the {wikipedia}/Trigonometric_functions#Cosecant,_secant,_and_cotangent[cotangent] of `numeric_exp`, where `numeric_exp` is an angle expressed in radians.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathInlineCotangent]\n--------------------------------------------------\n\n[[sql-functions-math-degrees]]\n==== `DEGREES`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nDEGREES(numeric_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n\n*Output*: double numeric value\n\n*Description*: Convert from {wikipedia}/Radian[radians]\nto {wikipedia}/Degree_(angle)[degrees].\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathInlineDegrees]\n--------------------------------------------------\n\n[[sql-functions-math-radians]]\n==== `RADIANS`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nRADIANS(numeric_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n\n*Output*: double numeric value\n\n*Description*: Convert from {wikipedia}/Degree_(angle)[degrees]\nto {wikipedia}/Radian[radians].\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathInlineRadians]\n--------------------------------------------------\n\n[[sql-functions-math-sin]]\n==== `SIN`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nSIN(numeric_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n\n*Output*: double numeric value\n\n*Description*: Returns the {wikipedia}/Trigonometric_functions#sine[sine] of `numeric_exp`, where `numeric_exp` is an angle expressed in radians.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathInlineSine]\n--------------------------------------------------\n\n[[sql-functions-math-sinh]]\n==== `SINH`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nSINH(numeric_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n\n*Output*: double numeric value\n\n*Description*: Returns the {wikipedia}/Hyperbolic_function[hyperbolic sine] of `numeric_exp`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathInlineSinh]\n--------------------------------------------------\n\n[[sql-functions-math-tan]]\n==== `TAN`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nTAN(numeric_exp) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric expression. If `null`, the function returns `null`.\n\n*Output*: double numeric value\n\n*Description*: Returns the {wikipedia}/Trigonometric_functions#tangent[tangent] of `numeric_exp`, where `numeric_exp` is an angle expressed in radians.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[mathInlineTanget]\n--------------------------------------------------\n"
}