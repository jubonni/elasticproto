{
    "meta": {
        "size": 5946,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-extendedstats-aggregation.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "search-aggregations-metrics-extendedstats-aggregation",
        "version": "8.15"
    },
    "doc": "[[search-aggregations-metrics-extendedstats-aggregation]]\n=== Extended stats aggregation\n++++\n<titleabbrev>Extended stats</titleabbrev>\n++++\n\nA `multi-value` metrics aggregation that computes stats over numeric values extracted from the aggregated documents.\n\nThe `extended_stats` aggregations is an extended version of the <<search-aggregations-metrics-stats-aggregation,`stats`>> aggregation, where additional metrics are added such as `sum_of_squares`, `variance`, `std_deviation` and `std_deviation_bounds`.\n\nAssuming the data consists of documents representing exams grades (between 0 and 100) of students\n\n[source,console]\n--------------------------------------------------\nGET /exams/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"grades_stats\": { \"extended_stats\": { \"field\": \"grade\" } }\n  }\n}\n--------------------------------------------------\n// TEST[setup:exams]\n\nThe above aggregation computes the grades statistics over all documents. The aggregation type is `extended_stats` and the `field` setting defines the numeric field of the documents the stats will be computed on. The above will return the following:\n\nThe `std_deviation` and `variance` are calculated as population metrics so they are always the same as `std_deviation_population` and `variance_population` respectively.\n\n[source,console-result]\n--------------------------------------------------\n{\n  ...\n\n  \"aggregations\": {\n    \"grades_stats\": {\n      \"count\": 2,\n      \"min\": 50.0,\n      \"max\": 100.0,\n      \"avg\": 75.0,\n      \"sum\": 150.0,\n      \"sum_of_squares\": 12500.0,\n      \"variance\": 625.0,\n      \"variance_population\": 625.0,\n      \"variance_sampling\": 1250.0,\n      \"std_deviation\": 25.0,\n      \"std_deviation_population\": 25.0,\n      \"std_deviation_sampling\": 35.35533905932738,\n      \"std_deviation_bounds\": {\n        \"upper\": 125.0,\n        \"lower\": 25.0,\n        \"upper_population\": 125.0,\n        \"lower_population\": 25.0,\n        \"upper_sampling\": 145.71067811865476,\n        \"lower_sampling\": 4.289321881345245\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\\.\\.\\./\"took\": $body.took,\"timed_out\": false,\"_shards\": $body._shards,\"hits\": $body.hits,/]\n\nThe name of the aggregation (`grades_stats` above) also serves as the key by which the aggregation result can be retrieved from the returned response.\n\n==== Standard Deviation Bounds\nBy default, the `extended_stats` metric will return an object called `std_deviation_bounds`, which provides an interval of plus/minus two standard\ndeviations from the mean. This can be a useful way to visualize variance of your data. If you want a different boundary, for example\nthree standard deviations, you can set `sigma` in the request:\n\n[source,console]\n--------------------------------------------------\nGET /exams/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"grades_stats\": {\n      \"extended_stats\": {\n        \"field\": \"grade\",\n        \"sigma\": 3          <1>\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[setup:exams]\n<1> `sigma` controls how many standard deviations +/- from the mean should be displayed\n\n`sigma` can be any non-negative double, meaning you can request non-integer values such as `1.5`. A value of `0` is valid, but will simply\nreturn the average for both `upper` and `lower` bounds.\n\nThe `upper` and `lower` bounds are calculated as population metrics so they are always the same as `upper_population` and\n`lower_population` respectively.\n\n.Standard Deviation and Bounds require normality\n[NOTE]\n=====\nThe standard deviation and its bounds are displayed by default, but they are not always applicable to all data-sets. Your data must\nbe normally distributed for the metrics to make sense. The statistics behind standard deviations assumes normally distributed data, so\nif your data is skewed heavily left or right, the value returned will be misleading.\n=====\n\n==== Script\n\nIf you need to aggregate on a value that isn't indexed, use a <<runtime,runtime field>>.\nSay the we found out that the grades we've been working on were for an exam that was above\nthe level of the students and we want to \"correct\" it:\n\n[source,console]\n----\nGET /exams/_search\n{\n  \"size\": 0,\n  \"runtime_mappings\": {\n    \"grade.corrected\": {\n      \"type\": \"double\",\n      \"script\": {\n        \"source\": \"emit(Math.min(100, doc['grade'].value * params.correction))\",\n        \"params\": {\n          \"correction\": 1.2\n        }\n      }\n    }\n  },\n  \"aggs\": {\n    \"grades_stats\": {\n      \"extended_stats\": { \"field\": \"grade.corrected\" }\n    }\n  }\n}\n----\n// TEST[setup:exams]\n// TEST[s/_search/_search?filter_path=aggregations/]\n\n////\n[source,console-result]\n----\n{\n  \"aggregations\": {\n    \"grades_stats\": {\n      \"count\": 2,\n      \"min\": 60.0,\n      \"max\": 100.0,\n      \"avg\": 80.0,\n      \"sum\": 160.0,\n      \"sum_of_squares\": 13600.0,\n      \"variance\": 400.0,\n      \"variance_population\": 400.0,\n      \"variance_sampling\": 800.0,\n      \"std_deviation\": 20.0,\n      \"std_deviation_population\": 20.0,\n      \"std_deviation_sampling\": 28.284271247461902,\n      \"std_deviation_bounds\": {\n        \"upper\": 120.0,\n        \"lower\": 40.0,\n        \"upper_population\": 120.0,\n        \"lower_population\": 40.0,\n        \"upper_sampling\": 136.5685424949238,\n        \"lower_sampling\": 23.431457505076196\n      }\n    }\n  }\n}\n----\n////\n\n==== Missing value\n\nThe `missing` parameter defines how documents that are missing a value should be treated.\nBy default they will be ignored but it is also possible to treat them as if they\nhad a value.\n\n[source,console]\n--------------------------------------------------\nGET /exams/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"grades_stats\": {\n      \"extended_stats\": {\n        \"field\": \"grade\",\n        \"missing\": 0        <1>\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[setup:exams]\n\n<1> Documents without a value in the `grade` field will fall into the same bucket as documents that have the value `0`.\n"
}