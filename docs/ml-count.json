{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.691275",
        "size": 8897,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-count.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "ml-count",
        "version": "8.15"
    },
    "doc": "[\"appendix\",role=\"exclude\",id=\"ml-count-functions\"]\n= Count functions\n\nCount functions detect anomalies when the number of events in a bucket is\nanomalous.\n\nUse `non_zero_count` functions if your data is sparse and you want to ignore\ncases where the bucket count is zero.\n\nUse `distinct_count` functions to determine when the number of distinct values\nin one field is unusual, as opposed to the total count.\n\nUse high-sided functions if you want to monitor unusually high event rates.\nUse low-sided functions if you want to look at drops in event rate.\n\nThe {ml-features} include the following count functions:\n\n* xref:ml-count[`count`, `high_count`, `low_count`]\n* xref:ml-nonzero-count[`non_zero_count`, `high_non_zero_count`, `low_non_zero_count`]\n* xref:ml-distinct-count[`distinct_count`, `high_distinct_count`, `low_distinct_count`]\n\n[discrete]\n[[ml-count]]\n== Count, high_count, low_count\n\nThe `count` function detects anomalies when the number of events in a bucket is\nanomalous.\n\nThe `high_count` function detects anomalies when the count of events in a bucket \nare unusually high.\n\nThe `low_count` function detects anomalies when the count of events in a bucket \nare unusually low.\n\nThese functions support the following properties:\n\n* `by_field_name` (optional)\n* `over_field_name` (optional)\n* `partition_field_name` (optional)\n\nFor more information about those properties, see the\n{ref}/ml-put-job.html#ml-put-job-request-body[create {anomaly-jobs} API].\n\n.Example 1: Analyzing events with the count function\n[source,console]\n--------------------------------------------------\nPUT _ml/anomaly_detectors/example1\n{\n  \"analysis_config\": {\n    \"detectors\": [{\n      \"function\" : \"count\"\n    }]\n  },\n  \"data_description\": {\n    \"time_field\":\"timestamp\",\n    \"time_format\": \"epoch_ms\"\n  }\n}\n--------------------------------------------------\n// TEST[skip:needs-licence]\n\nThis example is probably the simplest possible analysis. It identifies\ntime buckets during which the overall count of events is higher or lower than\nusual.\n\nWhen you use this function in a detector in your {anomaly-job}, it models the\nevent rate and detects when the event rate is unusual compared to its past\nbehavior.\n\n.Example 2: Analyzing errors with the high_count function\n[source,console]\n--------------------------------------------------\nPUT _ml/anomaly_detectors/example2\n{\n  \"analysis_config\": {\n    \"detectors\": [{\n      \"function\" : \"high_count\",\n      \"by_field_name\" : \"error_code\",\n      \"over_field_name\": \"user\"\n    }]\n  },\n  \"data_description\": {\n    \"time_field\":\"timestamp\",\n    \"time_format\": \"epoch_ms\"\n  }\n}\n--------------------------------------------------\n// TEST[skip:needs-licence]\n\nIf you use this `high_count` function in a detector in your {anomaly-job}, it\nmodels the event rate for each error code. It detects users that generate an\nunusually high count of error codes compared to other users.\n\n\n.Example 3: Analyzing status codes with the low_count function\n[source,console]\n--------------------------------------------------\nPUT _ml/anomaly_detectors/example3\n{\n  \"analysis_config\": {\n    \"detectors\": [{\n      \"function\" : \"low_count\",\n      \"by_field_name\" : \"status_code\"\n    }]\n  },\n  \"data_description\": {\n    \"time_field\":\"timestamp\",\n    \"time_format\": \"epoch_ms\"\n  }\n}\n--------------------------------------------------\n// TEST[skip:needs-licence]\n\nIn this example, the function detects when the count of events for a status code \nis lower than usual.\n\nWhen you use this function in a detector in your {anomaly-job}, it models the\nevent rate for each status code and detects when a status code has an unusually\nlow count compared to its past behavior.\n\n.Example 4: Analyzing aggregated data with the count function\n[source,console]\n--------------------------------------------------\nPUT _ml/anomaly_detectors/example4\n{\n  \"analysis_config\": {\n    \"summary_count_field_name\" : \"events_per_min\",\n    \"detectors\": [{\n      \"function\" : \"count\"\n    }]\n  },\n  \"data_description\": {\n    \"time_field\":\"timestamp\",\n    \"time_format\": \"epoch_ms\"\n  }\n}  \n--------------------------------------------------\n// TEST[skip:needs-licence]\n\nIf you are analyzing an aggregated `events_per_min` field, do not use a sum\nfunction (for example, `sum(events_per_min)`). Instead, use the count function\nand the `summary_count_field_name` property. For more information, see \n<<ml-configuring-aggregation>>.\n\n[discrete]\n[[ml-nonzero-count]]\n== Non_zero_count, high_non_zero_count, low_non_zero_count\n\nThe `non_zero_count` function detects anomalies when the number of events in a\nbucket is anomalous, but it ignores cases where the bucket count is zero. Use\nthis function if you know your data is sparse or has gaps and the gaps are not\nimportant.\n\nThe `high_non_zero_count` function detects anomalies when the number of events\nin a bucket is unusually high and it ignores cases where the bucket count is\nzero.\n\nThe `low_non_zero_count` function detects anomalies when the number of events in\na bucket is unusually low and it ignores cases where the bucket count is zero.\n\nThese functions support the following properties:\n\n* `by_field_name` (optional)\n* `partition_field_name` (optional)\n\nFor more information about those properties, see the\n{ref}/ml-put-job.html#ml-put-job-request-body[create {anomaly-jobs} API].\n\nFor example, if you have the following number of events per bucket:\n\n====\n\n1,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,43,31,0,0,0,0,0,0,0,0,0,0,0,0,2,1\n\n====\n\nThe `non_zero_count` function models only the following data:\n\n====\n\n1,22,2,43,31,2,1\n\n====\n\n.Example 5: Analyzing signatures with the high_non_zero_count function\n[source,console]\n--------------------------------------------------\nPUT _ml/anomaly_detectors/example5\n{\n  \"analysis_config\": {\n    \"detectors\": [{\n      \"function\" : \"high_non_zero_count\",\n      \"by_field_name\" : \"signaturename\"\n    }]\n  },\n  \"data_description\": {\n    \"time_field\":\"timestamp\",\n    \"time_format\": \"epoch_ms\"\n  }\n}\n--------------------------------------------------\n// TEST[skip:needs-licence]\n\nIf you use this `high_non_zero_count` function in a detector in your\n{anomaly-job}, it models the count of events for the `signaturename` field. It\nignores any buckets where the count is zero and detects when a `signaturename`\nvalue has an unusually high count of events compared to its past behavior.\n\nNOTE: Population analysis (using an `over_field_name` property value) is not\nsupported for the `non_zero_count`, `high_non_zero_count`, and\n`low_non_zero_count` functions. If you want to do population analysis and your\ndata is sparse, use the `count` functions, which are optimized for that scenario.\n\n\n[discrete]\n[[ml-distinct-count]]\n== Distinct_count, high_distinct_count, low_distinct_count\n\nThe `distinct_count` function detects anomalies where the number of distinct\nvalues in one field is unusual.\n\nThe `high_distinct_count` function detects unusually high numbers of distinct\nvalues in one field.\n\nThe `low_distinct_count` function detects unusually low numbers of distinct\nvalues in one field.\n\nThese functions support the following properties:\n\n* `field_name` (required)\n* `by_field_name` (optional)\n* `over_field_name` (optional)\n* `partition_field_name` (optional)\n\nFor more information about those properties, see the\n{ref}/ml-put-job.html#ml-put-job-request-body[create {anomaly-jobs} API].\n\n.Example 6: Analyzing users with the distinct_count function\n[source,console]\n--------------------------------------------------\nPUT _ml/anomaly_detectors/example6\n{\n  \"analysis_config\": {\n    \"detectors\": [{\n      \"function\" : \"distinct_count\",\n      \"field_name\" : \"user\"\n    }]\n  },\n  \"data_description\": {\n    \"time_field\":\"timestamp\",\n    \"time_format\": \"epoch_ms\"\n  }\n}\n--------------------------------------------------\n// TEST[skip:needs-licence]\n\nThis `distinct_count` function detects when a system has an unusual number\nof logged in users. When you use this function in a detector in your\n{anomaly-job}, it models the distinct count of users. It also detects when the\ndistinct number of users is unusual compared to the past.\n\n.Example 7: Analyzing ports with the high_distinct_count function\n[source,console]\n--------------------------------------------------\nPUT _ml/anomaly_detectors/example7\n{\n  \"analysis_config\": {\n    \"detectors\": [{\n      \"function\" : \"high_distinct_count\",\n      \"field_name\" : \"dst_port\",\n      \"over_field_name\": \"src_ip\"\n    }]\n  },\n  \"data_description\": {\n    \"time_field\":\"timestamp\",\n    \"time_format\": \"epoch_ms\"\n  }\n}\n--------------------------------------------------\n// TEST[skip:needs-licence]\n\nThis example detects instances of port scanning. When you use this function in a\ndetector in your {anomaly-job}, it models the distinct count of ports. It also\ndetects the `src_ip` values that connect to an unusually high number of \ndifferent `dst_ports` values compared to other `src_ip` values.\n"
}