{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.326067",
        "size": 9160,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-as-you-type.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "search-as-you-type",
        "version": "8.15"
    },
    "doc": "[[search-as-you-type]]\n=== Search-as-you-type field type\n++++\n<titleabbrev>Search-as-you-type</titleabbrev>\n++++\n\nThe `search_as_you_type` field type is a text-like field that is optimized to\nprovide out-of-the-box support for queries that serve an as-you-type completion\nuse case. It creates a series of subfields that are analyzed to index terms\nthat can be efficiently matched by a query that partially matches the entire\nindexed text value. Both prefix completion (i.e matching terms starting at the\nbeginning of the input) and infix completion (i.e. matching terms at any\nposition within the input) are supported.\n\nWhen adding a field of this type to a mapping\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"my_field\": {\n        \"type\": \"search_as_you_type\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n\nThis creates the following fields\n\n[horizontal]\n\n`my_field`::\n\n    Analyzed as configured in the mapping. If an analyzer is not configured,\n    the default analyzer for the index is used\n\n`my_field._2gram`::\n\n    Wraps the analyzer of `my_field` with a shingle token filter of shingle\n    size 2\n\n`my_field._3gram`::\n\n    Wraps the analyzer of `my_field` with a shingle token filter of shingle\n    size 3\n\n`my_field._index_prefix`::\n\n    Wraps the analyzer of `my_field._3gram` with an edge ngram token filter\n\n\nThe size of shingles in subfields can be configured with the `max_shingle_size`\nmapping parameter. The default is 3, and valid values for this parameter are\ninteger values 2 - 4 inclusive. Shingle subfields will be created for each\nshingle size from 2 up to and including the `max_shingle_size`. The\n`my_field._index_prefix` subfield will always use the analyzer from the shingle\nsubfield with the `max_shingle_size` when constructing its own analyzer.\n\nIncreasing the `max_shingle_size` will improve matches for queries with more\nconsecutive terms, at the cost of larger index size. The default\n`max_shingle_size` should usually be sufficient.\n\nThe same input text is indexed into each of these fields automatically, with\ntheir differing analysis chains, when an indexed document has a value for the\nroot field `my_field`.\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001/_doc/1?refresh\n{\n  \"my_field\": \"quick brown fox jump lazy dog\"\n}\n--------------------------------------------------\n// TEST[continued]\n\nThe most efficient way of querying to serve a search-as-you-type use case is\nusually a <<query-dsl-multi-match-query,`multi_match`>> query of type\n<<query-dsl-match-bool-prefix-query,`bool_prefix`>> that targets the root\n`search_as_you_type` field and its shingle subfields. This can match the query\nterms in any order, but will score documents higher if they contain the terms\nin order in a shingle subfield.\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_search\n{\n  \"query\": {\n    \"multi_match\": {\n      \"query\": \"brown f\",\n      \"type\": \"bool_prefix\",\n      \"fields\": [\n        \"my_field\",\n        \"my_field._2gram\",\n        \"my_field._3gram\"\n      ]\n    }\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"took\" : 44,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 1,\n    \"successful\" : 1,\n    \"skipped\" : 0,\n    \"failed\" : 0\n  },\n  \"hits\" : {\n    \"total\" : {\n      \"value\" : 1,\n      \"relation\" : \"eq\"\n    },\n    \"max_score\" : 0.8630463,\n    \"hits\" : [\n      {\n        \"_index\" : \"my-index-000001\",\n        \"_id\" : \"1\",\n        \"_score\" : 0.8630463,\n        \"_source\" : {\n          \"my_field\" : \"quick brown fox jump lazy dog\"\n        }\n      }\n    ]\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"took\" : 44/\"took\" : $body.took/]\n// TESTRESPONSE[s/\"max_score\" : 0.8630463/\"max_score\" : $body.hits.max_score/]\n// TESTRESPONSE[s/\"_score\" : 0.8630463/\"_score\" : $body.hits.hits.0._score/]\n\nTo search for documents that strictly match the query terms in order, or to\nsearch using other properties of phrase queries, use a\n<<query-dsl-match-query-phrase-prefix,`match_phrase_prefix` query>> on the root\nfield. A <<query-dsl-match-query-phrase,`match_phrase` query>> can also be used\nif the last term should be matched exactly, and not as a prefix. Using phrase\nqueries may be less efficient than using the `match_bool_prefix` query.\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_search\n{\n  \"query\": {\n    \"match_phrase_prefix\": {\n      \"my_field\": \"brown f\"\n    }\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\n[[specific-params]]\n==== Parameters specific to the `search_as_you_type` field\n\nThe following parameters are accepted in a mapping for the `search_as_you_type`\nfield and are specific to this field type\n\n`max_shingle_size`::\n+\n--\n(Optional, integer)\nLargest shingle size to create. Valid values are `2` (inclusive) to `4`\n(inclusive). Defaults to `3`.\n\nA subfield is created for each integer between `2` and this value. For example,\na value of `3` creates two subfields: `my_field._2gram` and `my_field._3gram`\n\nMore subfields enables more specific queries but increases index size.\n--\n\n[[general-params]]\n==== Parameters of the field type as a text field\n\nThe following parameters are accepted in a mapping for the `search_as_you_type`\nfield due to its nature as a text-like field, and behave similarly to their\nbehavior when configuring a field of the <<text,`text`>> data type. Unless\notherwise noted, these options configure the root fields subfields in\nthe same way.\n\n<<analyzer,`analyzer`>>::\n\n    The <<analysis,analyzer>> which should be used for\n    `text` fields, both at index-time and at\n    search-time (unless overridden by the\n    <<search-analyzer,`search_analyzer`>>). Defaults to the default index\n    analyzer, or the <<analysis-standard-analyzer,`standard` analyzer>>.\n\n<<mapping-index,`index`>>::\n\n    Should the field be searchable? Accepts `true` (default) or `false`.\n\n<<index-options,`index_options`>>::\n\n    What information should be stored in the index, for search and highlighting\n    purposes. Defaults to `positions`.\n\n<<norms,`norms`>>::\n\n    Whether field-length should be taken into account when scoring queries.\n    Accepts `true` or `false`. This option configures the root field\n    and shingle subfields, where its default is `true`. It does not configure\n    the prefix subfield, where it is `false`.\n\n<<mapping-store,`store`>>::\n\n    Whether the field value should be stored and retrievable separately from\n    the <<mapping-source-field,`_source`>> field. Accepts `true` or `false`\n    (default). This option only configures the root field, and does not\n    configure any subfields.\n\n<<search-analyzer,`search_analyzer`>>::\n\n    The <<analyzer,`analyzer`>> that should be used at search time on\n    <<text,`text`>> fields. Defaults to the `analyzer` setting.\n\n<<search-quote-analyzer,`search_quote_analyzer`>>::\n\n    The <<analyzer,`analyzer`>> that should be used at search time when a\n    phrase is encountered. Defaults to the `search_analyzer` setting.\n\n<<similarity,`similarity`>>::\n\n    Which scoring algorithm or _similarity_ should be used. Defaults\n    to `BM25`.\n\n<<term-vector,`term_vector`>>::\n\n    Whether term vectors should be stored for the field. Defaults to `no`. This option configures the root field and shingle\n    subfields, but not the prefix subfield.\n\n\n[[prefix-queries]]\n==== Optimization of prefix queries\n\nWhen making a <<query-dsl-prefix-query,`prefix`>> query to the root field or\nany of its subfields, the query will be rewritten to a\n<<query-dsl-term-query,`term`>> query on the `._index_prefix` subfield. This\nmatches more efficiently than is typical of `prefix` queries on text fields,\nas prefixes up to a certain length of each shingle are indexed directly as\nterms in the `._index_prefix` subfield.\n\nThe analyzer of the `._index_prefix` subfield slightly modifies the\nshingle-building behavior to also index prefixes of the terms at the end of the\nfield's value that normally would not be produced as shingles. For example, if\nthe value `quick brown fox` is indexed into a `search_as_you_type` field with\n`max_shingle_size` of 3, prefixes for `brown fox` and `fox` are also indexed\ninto the `._index_prefix` subfield even though they do not appear as terms in\nthe `._3gram` subfield. This allows for completion of all the terms in the\nfield's input.\n\n[[search-as-you-type-synthetic-source]]\n===== Synthetic `_source`\n\nIMPORTANT: Synthetic `_source` is Generally Available only for TSDB indices\n(indices that have `index.mode` set to `time_series`). For other indices\nsynthetic `_source` is in technical preview. Features in technical preview may\nbe changed or removed in a future release. Elastic will work to fix\nany issues, but features in technical preview are not subject to the support SLA\nof official GA features.\n\n`search_as_you_type` fields support <<synthetic-source,synthetic `_source`>> in their\ndefault configuration.\n"
}