{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.775082",
        "size": 25692,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/node-tool.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "node-tool",
        "version": "8.15"
    },
    "doc": "[[node-tool]]\n== elasticsearch-node\n\nThe `elasticsearch-node` command enables you to perform certain unsafe\noperations on a node that are only possible while it is shut down. This command\nallows you to adjust the <<modules-node,role>> of a node, unsafely edit cluster\nsettings and may be able to recover some data after a disaster or start a node\neven if it is incompatible with the data on disk.\n\n[discrete]\n=== Synopsis\n\n[source,shell]\n--------------------------------------------------\nbin/elasticsearch-node repurpose|unsafe-bootstrap|detach-cluster|override-version\n  [-E <KeyValuePair>]\n  [-h, --help] ([-s, --silent] | [-v, --verbose])\n--------------------------------------------------\n\n[discrete]\n=== Description\n\nThis tool has a number of modes:\n\n* `elasticsearch-node repurpose` can be used to delete unwanted data from a\n  node if it used to be a <<data-node,data node>> or a\n  <<master-node,master-eligible node>> but has been repurposed not to have one\n  or other of these roles.\n\n* `elasticsearch-node remove-settings` can be used to remove persistent settings\n  from the cluster state in case where it contains incompatible settings that\n  prevent the cluster from forming.\n\n* `elasticsearch-node remove-index-settings` can be used to remove index settings\n  from the cluster state in case where it contains incompatible index settings that\n  prevent the cluster from forming.\n\n* `elasticsearch-node remove-customs` can be used to remove custom metadata\n  from the cluster state in case where it contains broken metadata that\n  prevents the cluster state from being loaded.\n\n* `elasticsearch-node unsafe-bootstrap` can be used to perform _unsafe cluster\n  bootstrapping_. It forces one of the nodes to form a brand-new cluster on\n  its own, using its local copy of the cluster metadata.\n\n* `elasticsearch-node detach-cluster` enables you to move nodes from one\n  cluster to another. This can be used to move nodes into a new cluster\n  created with the `elasticsearch-node unsafe-bootstrap` command. If unsafe\n  cluster bootstrapping was not possible, it also enables you to move nodes\n  into a brand-new cluster.\n\n* `elasticsearch-node override-version` enables you to start up a node\n  even if the data in the data path was written by an incompatible version of\n  {es}. This may sometimes allow you to downgrade to an earlier version of\n  {es}.\n\n:tool-name: node\ninclude::cli-jvm-options.asciidoc[]\n:!tool-name:\n\n[[node-tool-repurpose]]\n[discrete]\n==== Changing the role of a node\n\nThere may be situations where you want to repurpose a node without following\nthe <<change-node-role,proper repurposing processes>>. The `elasticsearch-node\nrepurpose` tool allows you to delete any excess on-disk data and start a node\nafter repurposing it.\n\nThe intended use is:\n\n* Stop the node\n* Update `elasticsearch.yml` by setting `node.roles` as desired.\n* Run `elasticsearch-node repurpose` on the node\n* Start the node\n\nIf you run `elasticsearch-node repurpose` on a node without the `data` role and\nwith the `master` role then it will delete any remaining shard data on that\nnode, but it will leave the index and cluster metadata alone. If you run\n`elasticsearch-node repurpose` on a node without the `data` and `master` roles\nthen it will delete any remaining shard data and index metadata, but it will\nleave the cluster metadata alone.\n\n[WARNING]\nRunning this command can lead to data loss for the indices mentioned if the\ndata contained is not available on other nodes in the cluster. Only run this\ntool if you understand and accept the possible consequences, and only after\ndetermining that the node cannot be repurposed cleanly.\n\nThe tool provides a summary of the data to be deleted and asks for confirmation\nbefore making any changes. You can get detailed information about the affected\nindices and shards by passing the verbose (`-v`) option.\n\n[discrete]\n==== Removing persistent cluster settings\n\nThere may be situations where a node contains persistent cluster\nsettings that prevent the cluster from forming. Since the cluster cannot form,\nit is not possible to remove these settings using the\n<<cluster-update-settings>> API.\n\nThe `elasticsearch-node remove-settings` tool allows you to forcefully remove\nthose persistent settings from the on-disk cluster state. The tool takes a\nlist of settings as parameters that should be removed, and also supports\nwildcard patterns.\n\nThe intended use is:\n\n* Stop the node\n* Run `elasticsearch-node remove-settings name-of-setting-to-remove` on the node\n* Repeat for all other master-eligible nodes\n* Start the nodes\n\n[discrete]\n==== Removing index settings\n\nThere may be situations where an index contains index settings\nthat prevent the cluster from forming. Since the cluster cannot form,\nit is not possible to remove these settings using the\n<<indices-update-settings>> API.\n\nThe `elasticsearch-node remove-index-settings` tool allows you to forcefully remove\nthose index settings from the on-disk cluster state. The tool takes a\nlist of index settings as parameters that should be removed, and also supports\nwildcard patterns.\n\nThe intended use is:\n\n* Stop the node\n* Run `elasticsearch-node remove-index-settings name-of-index-setting-to-remove` on the node\n* Repeat for all nodes\n* Start the nodes\n\n[discrete]\n==== Removing custom metadata from the cluster state\n\nThere may be situations where a node contains custom metadata, typically\nprovided by plugins, that prevent the node from starting up and loading\nthe cluster from disk.\n\nThe `elasticsearch-node remove-customs` tool allows you to forcefully remove\nthe problematic custom metadata. The tool takes a list of custom metadata names\nas parameters that should be removed, and also supports wildcard patterns.\n\nThe intended use is:\n\n* Stop the node\n* Run `elasticsearch-node remove-customs name-of-custom-to-remove` on the node\n* Repeat for all other master-eligible nodes\n* Start the nodes\n\n[discrete]\n==== Recovering data after a disaster\n\nSometimes {es} nodes are temporarily stopped, perhaps because of the need to\nperform some maintenance activity or perhaps because of a hardware failure.\nAfter you resolve the temporary condition and restart the node,\nit will rejoin the cluster and continue normally. Depending on your\nconfiguration, your cluster may be able to remain completely available even\nwhile one or more of its nodes are stopped.\n\nSometimes it might not be possible to restart a node after it has stopped. For\nexample, the node's host may suffer from a hardware problem that cannot be\nrepaired. If the cluster is still available then you can start up a fresh node\non another host and {es} will bring this node into the cluster in place of the\nfailed node.\n\nEach node stores its data in the data directories defined by the\n<<path-settings,`path.data` setting>>. This means that in a disaster you can\nalso restart a node by moving its data directories to another host, presuming\nthat those data directories can be recovered from the faulty host.\n\n{es} <<modules-discovery-quorums,requires a response from a majority of the\nmaster-eligible nodes>> in order to elect a master and to update the cluster\nstate. This means that if you have three master-eligible nodes then the cluster\nwill remain available even if one of them has failed. However if two of the\nthree master-eligible nodes fail then the cluster will be unavailable until at\nleast one of them is restarted.\n\nIn very rare circumstances it may not be possible to restart enough nodes to\nrestore the cluster's availability. If such a disaster occurs, you should\nbuild a new cluster from a recent snapshot and re-import any data that was\ningested since that snapshot was taken.\n\nHowever, if the disaster is serious enough then it may not be possible to\nrecover from a recent snapshot either. Unfortunately in this case there is no\nway forward that does not risk data loss, but it may be possible to use the\n`elasticsearch-node` tool to construct a new cluster that contains some of the\ndata from the failed cluster.\n\n[[node-tool-override-version]]\n[discrete]\n==== Bypassing version checks\n\nThe data that {es} writes to disk is designed to be read by the current version\nand a limited set of future versions. It cannot generally be read by older\nversions, nor by versions that are more than one major version newer. The data\nstored on disk includes the version of the node that wrote it, and {es} checks\nthat it is compatible with this version when starting up.\n\nIn rare circumstances it may be desirable to bypass this check and start up an\n{es} node using data that was written by an incompatible version. This may not\nwork if the format of the stored data has changed, and it is a risky process\nbecause it is possible for the format to change in ways that {es} may\nmisinterpret, silently leading to data loss.\n\nTo bypass this check, you can use the `elasticsearch-node override-version`\ntool to overwrite the version number stored in the data path with the current\nversion, causing {es} to believe that it is compatible with the on-disk data.\n\n[[node-tool-unsafe-bootstrap]]\n[discrete]\n===== Unsafe cluster bootstrapping\n\nIf there is at least one remaining master-eligible node, but it is not possible\nto restart a majority of them, then the `elasticsearch-node unsafe-bootstrap`\ncommand will unsafely override the cluster's <<modules-discovery-voting,voting\nconfiguration>> as if performing another\n<<modules-discovery-bootstrap-cluster,cluster bootstrapping process>>.\nThe target node can then form a new cluster on its own by using\nthe cluster metadata held locally on the target node.\n\n[WARNING]\nThese steps can lead to arbitrary data loss since the target node may not hold the latest cluster\nmetadata, and this out-of-date metadata may make it impossible to use some or\nall of the indices in the cluster.\n\nSince unsafe bootstrapping forms a new cluster containing a single node, once\nyou have run it you must use the <<node-tool-detach-cluster,`elasticsearch-node\ndetach-cluster` tool>> to migrate any other surviving nodes from the failed\ncluster into this new cluster.\n\nWhen you run the `elasticsearch-node unsafe-bootstrap` tool it will analyse the\nstate of the node and ask for confirmation before taking any action. Before\nasking for confirmation it reports the term and version of the cluster state on\nthe node on which it runs as follows:\n\n[source,txt]\n----\nCurrent node cluster state (term, version) pair is (4, 12)\n----\n\nIf you have a choice of nodes on which to run this tool then you should choose\none with a term that is as large as possible. If there is more than one\nnode with the same term, pick the one with the largest version.\nThis information identifies the node with the freshest cluster state, which minimizes the\nquantity of data that might be lost. For example, if the first node reports\n`(4, 12)` and a second node reports `(5, 3)`, then the second node is preferred\nsince its term is larger. However if the second node reports `(3, 17)` then\nthe first node is preferred since its term is larger. If the second node\nreports `(4, 10)` then it has the same term as the first node, but has a\nsmaller version, so the first node is preferred.\n\n[WARNING]\nRunning this command can lead to arbitrary data loss. Only run this tool if you\nunderstand and accept the possible consequences and have exhausted all other\npossibilities for recovery of your cluster.\n\nThe sequence of operations for using this tool are as follows:\n\n1. Make sure you have really lost access to at least half of the\nmaster-eligible nodes in the cluster, and they cannot be repaired or recovered\nby moving their data paths to healthy hardware.\n2. Stop **all** remaining nodes.\n3. Choose one of the remaining master-eligible nodes to become the new elected\nmaster as described above.\n4. On this node, run the `elasticsearch-node unsafe-bootstrap` command as shown\nbelow. Verify that the tool reported `Master node was successfully\nbootstrapped`.\n5. Start this node and verify that it is elected as the master node.\n6. Run the <<node-tool-detach-cluster,`elasticsearch-node detach-cluster`\ntool>>, described below, on every other node in the cluster.\n7. Start all other nodes and verify that each one joins the cluster.\n8. Investigate the data in the cluster to discover if any was lost during this\nprocess.\n\nWhen you run the tool it will make sure that the node that is being used to\nbootstrap the cluster is not running. It is important that all other\nmaster-eligible nodes are also stopped while this tool is running, but the tool\ndoes not check this.\n\nThe message `Master node was successfully bootstrapped` does not mean that\nthere has been no data loss, it just means that tool was able to complete its\njob.\n\n[[node-tool-detach-cluster]]\n[discrete]\n===== Detaching nodes from their cluster\n\nIt is unsafe for nodes to move between clusters, because different clusters\nhave completely different cluster metadata. There is no way to safely merge the\nmetadata from two clusters together.\n\nTo protect against inadvertently joining the wrong cluster, each cluster\ncreates a unique identifier, known as the _cluster UUID_, when it first starts\nup. Every node records the UUID of its cluster and refuses to join a\ncluster with a different UUID.\n\nHowever, if a node's cluster has permanently failed then it may be desirable to\ntry and move it into a new cluster. The `elasticsearch-node detach-cluster`\ncommand lets you detach a node from its cluster by resetting its cluster UUID.\nIt can then join another cluster with a different UUID.\n\nFor example, after unsafe cluster bootstrapping you will need to detach all the\nother surviving nodes from their old cluster so they can join the new,\nunsafely-bootstrapped cluster.\n\nUnsafe cluster bootstrapping is only possible if there is at least one\nsurviving master-eligible node. If there are no remaining master-eligible nodes\nthen the cluster metadata is completely lost. However, the individual data\nnodes also contain a copy of the index metadata corresponding with their shards. This sometimes allows a new cluster to import these shards as\n<<dangling-indices,dangling indices>>. You can sometimes\nrecover some indices after the loss of all main-eligible nodes in a cluster\nby creating a new cluster and then using the `elasticsearch-node\ndetach-cluster` command to move any surviving nodes into this new cluster. Once the new cluster is fully formed,\nuse the <<dangling-indices-api,Dangling indices API>> to list, import or delete\nany dangling indices.\n\nThere is a risk of data loss when importing a dangling index because data nodes\nmay not have the most recent copy of the index metadata and do not have any\ninformation about <<docs-replication,which shard copies are in-sync>>. This\nmeans that a stale shard copy may be selected to be the primary, and some of\nthe shards may be incompatible with the imported mapping.\n\n[WARNING]\nExecution of this command can lead to arbitrary data loss. Only run this tool\nif you understand and accept the possible consequences and have exhausted all\nother possibilities for recovery of your cluster.\n\nThe sequence of operations for using this tool are as follows:\n\n1. Make sure you have really lost access to every one of the master-eligible\nnodes in the cluster, and they cannot be repaired or recovered by moving their\ndata paths to healthy hardware.\n2. Start a new cluster and verify that it is healthy. This cluster may comprise\none or more brand-new master-eligible nodes, or may be an unsafely-bootstrapped\ncluster formed as described above.\n3. Stop **all** remaining data nodes.\n4. On each data node, run the `elasticsearch-node detach-cluster` tool as shown\nbelow. Verify that the tool reported `Node was successfully detached from the\ncluster`.\n5. If necessary, configure each data node to\n<<discovery-hosts-providers,discover the new cluster>>.\n6. Start each data node and verify that it has joined the new cluster.\n7. Wait for all recoveries to have completed, and investigate the data in the\ncluster to discover if any was lost during this process. Use the\n<<dangling-indices-api,Dangling indices API>> to list, import or delete any\ndangling indices.\n\nThe message `Node was successfully detached from the cluster` does not mean\nthat there has been no data loss, it just means that tool was able to complete\nits job.\n\n\n[discrete]\n[[node-tool-parameters]]\n=== Parameters\n\n`repurpose`:: Delete excess data when a node's roles are changed.\n\n`unsafe-bootstrap`:: Specifies to unsafely bootstrap this node as a new\none-node cluster.\n\n`detach-cluster`:: Specifies to unsafely detach this node from its cluster so\nit can join a different cluster.\n\n`override-version`:: Overwrites the version number stored in the data path so\nthat a node can start despite being incompatible with the on-disk data.\n\n`remove-settings`:: Forcefully removes the provided persistent cluster settings\nfrom the on-disk cluster state.\n\n`-E <KeyValuePair>`:: Configures a setting.\n\n`-h, --help`:: Returns all of the command parameters.\n\n`-s, --silent`:: Shows minimal output.\n\n`-v, --verbose`:: Shows verbose output.\n\n[discrete]\n=== Examples\n\n[discrete]\n==== Repurposing a node as a dedicated master node\n\nIn this example, a former data node is repurposed as a dedicated master node.\nFirst update the node's settings to `node.roles: [ \"master\" ]` in its\n`elasticsearch.yml` config file. Then run the `elasticsearch-node repurpose`\ncommand to find and remove excess shard data:\n\n[source,txt]\n----\nnode$ ./bin/elasticsearch-node repurpose\n\n    WARNING: Elasticsearch MUST be stopped before running this tool.\n\nFound 2 shards in 2 indices to clean up\nUse -v to see list of paths and indices affected\nNode is being re-purposed as master and no-data. Clean-up of shard data will be performed.\nDo you want to proceed?\nConfirm [y/N] y\nNode successfully repurposed to master and no-data.\n----\n\n[discrete]\n==== Repurposing a node as a coordinating-only node\n\nIn this example, a node that previously held data is repurposed as a\ncoordinating-only node. First update the node's settings to `node.roles: []` in\nits `elasticsearch.yml` config file. Then run the `elasticsearch-node repurpose`\ncommand to find and remove excess shard data and index metadata:\n\n\n[source,txt]\n----\nnode$./bin/elasticsearch-node repurpose\n\n    WARNING: Elasticsearch MUST be stopped before running this tool.\n\nFound 2 indices (2 shards and 2 index meta data) to clean up\nUse -v to see list of paths and indices affected\nNode is being re-purposed as no-master and no-data. Clean-up of index data will be performed.\nDo you want to proceed?\nConfirm [y/N] y\nNode successfully repurposed to no-master and no-data.\n----\n\n[discrete]\n==== Removing persistent cluster settings\n\nIf your nodes contain persistent cluster settings that prevent the cluster\nfrom forming, i.e., can't be removed using the <<cluster-update-settings>> API,\nyou can run the following commands to remove one or more cluster settings.\n\n[source,txt]\n----\nnode$ ./bin/elasticsearch-node remove-settings xpack.monitoring.exporters.my_exporter.host\n\n    WARNING: Elasticsearch MUST be stopped before running this tool.\n\nThe following settings will be removed:\nxpack.monitoring.exporters.my_exporter.host: \"10.1.2.3\"\n\nYou should only run this tool if you have incompatible settings in the\ncluster state that prevent the cluster from forming.\nThis tool can cause data loss and its use should be your last resort.\n\nDo you want to proceed?\n\nConfirm [y/N] y\n\nSettings were successfully removed from the cluster state\n----\n\nYou can also use wildcards to remove multiple settings, for example using\n\n[source,txt]\n----\nnode$ ./bin/elasticsearch-node remove-settings xpack.monitoring.*\n----\n\n[discrete]\n==== Removing index settings\n\nIf your indices contain index settings that prevent the cluster\nfrom forming, you can run the following command to remove one\nor more index settings.\n\n[source,txt]\n----\nnode$ ./bin/elasticsearch-node remove-index-settings index.my_plugin.foo\n\n    WARNING: Elasticsearch MUST be stopped before running this tool.\n\nYou should only run this tool if you have incompatible index settings in the\ncluster state that prevent the cluster from forming.\nThis tool can cause data loss and its use should be your last resort.\n\nDo you want to proceed?\n\nConfirm [y/N] y\n\nIndex settings were successfully removed from the cluster state\n----\n\nYou can also use wildcards to remove multiple index settings, for example using\n\n[source,txt]\n----\nnode$ ./bin/elasticsearch-node remove-index-settings index.my_plugin.*\n----\n\n[discrete]\n==== Removing custom metadata from the cluster state\n\nIf the on-disk cluster state contains custom metadata that prevents the node\nfrom starting up and loading the cluster state, you can run the following\ncommands to remove this custom metadata.\n\n[source,txt]\n----\nnode$ ./bin/elasticsearch-node remove-customs snapshot_lifecycle\n\n    WARNING: Elasticsearch MUST be stopped before running this tool.\n\nThe following customs will be removed:\nsnapshot_lifecycle\n\nYou should only run this tool if you have broken custom metadata in the\ncluster state that prevents the cluster state from being loaded.\nThis tool can cause data loss and its use should be your last resort.\n\nDo you want to proceed?\n\nConfirm [y/N] y\n\nCustoms were successfully removed from the cluster state\n----\n\n[discrete]\n==== Unsafe cluster bootstrapping\n\nSuppose your cluster had five master-eligible nodes and you have permanently\nlost three of them, leaving two nodes remaining.\n\n* Run the tool on the first remaining node, but answer `n` at the confirmation\n  step.\n\n[source,txt]\n----\nnode_1$ ./bin/elasticsearch-node unsafe-bootstrap\n\n    WARNING: Elasticsearch MUST be stopped before running this tool.\n\nCurrent node cluster state (term, version) pair is (4, 12)\n\nYou should only run this tool if you have permanently lost half or more\nof the master-eligible nodes in this cluster, and you cannot restore the\ncluster from a snapshot. This tool can cause arbitrary data loss and its\nuse should be your last resort. If you have multiple surviving master\neligible nodes, you should run this tool on the node with the highest\ncluster state (term, version) pair.\n\nDo you want to proceed?\n\nConfirm [y/N] n\n----\n\n* Run the tool on the second remaining node, and again answer `n` at the\n  confirmation step.\n\n[source,txt]\n----\nnode_2$ ./bin/elasticsearch-node unsafe-bootstrap\n\n    WARNING: Elasticsearch MUST be stopped before running this tool.\n\nCurrent node cluster state (term, version) pair is (5, 3)\n\nYou should only run this tool if you have permanently lost half or more\nof the master-eligible nodes in this cluster, and you cannot restore the\ncluster from a snapshot. This tool can cause arbitrary data loss and its\nuse should be your last resort. If you have multiple surviving master\neligible nodes, you should run this tool on the node with the highest\ncluster state (term, version) pair.\n\nDo you want to proceed?\n\nConfirm [y/N] n\n----\n\n* Since the second node has a greater term it has a fresher cluster state, so\n  it is better to unsafely bootstrap the cluster using this node:\n\n[source,txt]\n----\nnode_2$ ./bin/elasticsearch-node unsafe-bootstrap\n\n    WARNING: Elasticsearch MUST be stopped before running this tool.\n\nCurrent node cluster state (term, version) pair is (5, 3)\n\nYou should only run this tool if you have permanently lost half or more\nof the master-eligible nodes in this cluster, and you cannot restore the\ncluster from a snapshot. This tool can cause arbitrary data loss and its\nuse should be your last resort. If you have multiple surviving master\neligible nodes, you should run this tool on the node with the highest\ncluster state (term, version) pair.\n\nDo you want to proceed?\n\nConfirm [y/N] y\nMaster node was successfully bootstrapped\n----\n\n[discrete]\n==== Detaching nodes from their cluster\n\nAfter unsafely bootstrapping a new cluster, run the `elasticsearch-node\ndetach-cluster` command to detach all remaining nodes from the failed cluster\nso they can join the new cluster:\n\n[source, txt]\n----\nnode_3$ ./bin/elasticsearch-node detach-cluster\n\n    WARNING: Elasticsearch MUST be stopped before running this tool.\n\nYou should only run this tool if you have permanently lost all of the\nmaster-eligible nodes in this cluster and you cannot restore the cluster\nfrom a snapshot, or you have already unsafely bootstrapped a new cluster\nby running `elasticsearch-node unsafe-bootstrap` on a master-eligible\nnode that belonged to the same cluster as this node. This tool can cause\narbitrary data loss and its use should be your last resort.\n\nDo you want to proceed?\n\nConfirm [y/N] y\nNode was successfully detached from the cluster\n----\n\n[discrete]\n==== Bypassing version checks\n\nRun the `elasticsearch-node override-version` command to overwrite the version\nstored in the data path so that a node can start despite being incompatible\nwith the data stored in the data path:\n\n[source, txt]\n----\nnode$ ./bin/elasticsearch-node override-version\n\n    WARNING: Elasticsearch MUST be stopped before running this tool.\n\nThis data path was last written by Elasticsearch version [x.x.x] and may no\nlonger be compatible with Elasticsearch version [y.y.y]. This tool will bypass\nthis compatibility check, allowing a version [y.y.y] node to start on this data\npath, but a version [y.y.y] node may not be able to read this data or may read\nit incorrectly leading to data loss.\n\nYou should not use this tool. Instead, continue to use a version [x.x.x] node\non this data path. If necessary, you can use reindex-from-remote to copy the\ndata from here into an older cluster.\n\nDo you want to proceed?\n\nConfirm [y/N] y\nSuccessfully overwrote this node's metadata to bypass its version compatibility checks.\n----\n"
}