{
    "meta": {
        "timestamp": "2024-11-01T03:07:10.006272",
        "size": 6412,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "query-dsl-range-query",
        "version": "8.15"
    },
    "doc": "[[query-dsl-range-query]]\n=== Range query\n++++\n<titleabbrev>Range</titleabbrev>\n++++\n\nReturns documents that contain terms within a provided range.\n\n[[range-query-ex-request]]\n==== Example request\n\nThe following search returns documents where the `age` field contains a term\nbetween `10` and `20`.\n\n[source,console]\n----\nGET /_search\n{\n  \"query\": {\n    \"range\": {\n      \"age\": {\n        \"gte\": 10,\n        \"lte\": 20,\n        \"boost\": 2.0\n      }\n    }\n  }\n}\n----\n\n[[range-query-top-level-params]]\n==== Top-level parameters for `range`\n\n`<field>`::\n+\n--\n(Required, object) Field you wish to search.\n--\n\n[[range-query-field-params]]\n==== Parameters for `<field>`\n\n`gt`::\n(Optional) Greater than.\n\n`gte`::\n(Optional) Greater than or equal to.\n\n`lt`::\n(Optional) Less than.\n\n`lte`::\n(Optional) Less than or equal to.\n\n`format`::\n+\n--\n(Optional, string) Date format used to convert `date` values in the query.\n\nBy default, {es} uses the <<mapping-date-format,date `format`>> provided in the\n`<field>`'s mapping. This value overrides that mapping format.\n\nFor valid syntax, see <<mapping-date-format,`format`>>.\n\nWARNING: If a format or date value is incomplete, the range query replaces any\nmissing components with default values. See <<missing-date-components>>.\n\n--\n\n[[querying-range-fields]]\n`relation`::\n+\n--\n(Optional, string) Indicates how the range query matches values for `range`\nfields. Valid values are:\n\n`INTERSECTS` (Default)::\nMatches documents with a range field value that intersects the query's range.\n\n`CONTAINS`::\nMatches documents with a range field value that entirely contains the query's range.\n\n`WITHIN`::\nMatches documents with a range field value entirely within the query's range.\n--\n\n`time_zone`::\n+\n--\n(Optional, string)\n{wikipedia}/List_of_UTC_time_offsets[Coordinated Universal\nTime (UTC) offset] or\n{wikipedia}/List_of_tz_database_time_zones[IANA time zone]\nused to convert `date` values in the query to UTC.\n\nValid values are ISO 8601 UTC offsets, such as `+01:00` or -`08:00`, and IANA\ntime zone IDs, such as `America/Los_Angeles`.\n\nFor an example query using the `time_zone` parameter, see\n<<range-query-time-zone,Time zone in `range` queries>>.\n\n[NOTE]\n====\nThe `time_zone` parameter does **not** affect the <<date-math,date math>> value\nof `now`. `now` is always the current system time in UTC.\n\nHowever, the `time_zone` parameter does convert dates calculated using `now` and\n<<date-math,date math rounding>>. For example, the `time_zone` parameter will\nconvert a value of `now/d`.\n====\n--\n\n`boost`::\n+\n--\n(Optional, float) Floating point number used to decrease or increase the\n<<relevance-scores,relevance scores>> of a query. Defaults to `1.0`.\n\nYou can use the `boost` parameter to adjust relevance scores for searches\ncontaining two or more queries.\n\nBoost values are relative to the default value of `1.0`. A boost value between\n`0` and `1.0` decreases the relevance score. A value greater than `1.0`\nincreases the relevance score.\n--\n\n[[range-query-notes]]\n==== Notes\n\n[[ranges-on-text-and-keyword]]\n===== Using the `range` query with `text` and `keyword` fields\nRange queries on <<text, `text`>> or <<keyword, `keyword`>> fields will not be executed if\n<<query-dsl-allow-expensive-queries, `search.allow_expensive_queries`>> is set to false.\n\n[[ranges-on-dates]]\n===== Using the `range` query with `date` fields\n\nWhen the `<field>` parameter is a <<date,`date`>> field data type, you can use\n<<date-math,date math>> with the following parameters:\n\n* `gt`\n* `gte`\n* `lt`\n* `lte`\n\nFor example, the following search returns documents where the `timestamp` field\ncontains a date between today and yesterday.\n\n[source,console]\n----\nGET /_search\n{\n  \"query\": {\n    \"range\": {\n      \"timestamp\": {\n        \"gte\": \"now-1d/d\",\n        \"lte\": \"now/d\"\n      }\n    }\n  }\n}\n----\n\n[[missing-date-components]]\n====== Missing date components\n\nFor range queries and <<search-aggregations-bucket-daterange-aggregation,date\nrange>> aggregations, {es} replaces missing date components with the following\nvalues. Missing year components are not replaced.\n\n[source,text]\n----\nMONTH_OF_YEAR:    01\nDAY_OF_MONTH:     01\nHOUR_OF_DAY:      23\nMINUTE_OF_HOUR:   59\nSECOND_OF_MINUTE: 59\nNANO_OF_SECOND:   999_999_999\n----\n\nFor example, if the format is `yyyy-MM`, {es} converts a `gt` value of `2099-12`\nto `2099-12-01T23:59:59.999_999_999Z`. This date uses the provided year (`2099`)\nand month (`12`) but uses the default day (`01`), hour (`23`), minute (`59`),\nsecond (`59`), and nanosecond (`999_999_999`).\n\n[[numeric-date]]\n====== Numeric date range value\n\nWhen no date format is specified and the range query is targeting a date field, numeric\nvalues are interpreted representing milliseconds-since-the-epoch. If you want the value\nto represent a year, e.g. 2020, you need to pass it as a String value (e.g. \"2020\") that\nwill be parsed according to the default format or the set format.\n\n[[range-query-date-math-rounding]]\n====== Date math and rounding\n{es} rounds <<date-math,date math>> values in parameters as follows:\n\n`gt`::\n+\n--\nRounds up to the first millisecond not covered by the rounded date.\n\nFor example, `2014-11-18||/M` rounds up to `2014-12-01T00:00:00.000`, excluding\nthe entire month of November.\n--\n\n`gte`::\n+\n--\nRounds down to the first millisecond.\n\nFor example, `2014-11-18||/M` rounds down to `2014-11-01T00:00:00.000`, including\nthe entire month.\n--\n\n`lt`::\n+\n--\nRounds down to the last millisecond before the rounded value.\n\nFor example, `2014-11-18||/M` rounds down to `2014-10-31T23:59:59.999`, excluding\nthe entire month of November.\n--\n\n`lte`::\n+\n--\nRounds up to the latest millisecond in the rounding interval.\n\nFor example, `2014-11-18||/M` rounds up to `2014-11-30T23:59:59.999`, including\nthe entire month.\n--\n\n[[range-query-time-zone]]\n===== Example query using `time_zone` parameter\n\nYou can use the `time_zone` parameter to convert `date` values to UTC using a\nUTC offset. For example:\n\n[source,console]\n----\nGET /_search\n{\n  \"query\": {\n    \"range\": {\n      \"timestamp\": {\n        \"time_zone\": \"+01:00\",        <1>\n        \"gte\": \"2020-01-01T00:00:00\", <2>\n        \"lte\": \"now\"                  <3>\n      }\n    }\n  }\n}\n----\n// TEST[continued]\n\n<1> Indicates that `date` values use a UTC offset of `+01:00`.\n<2> With a UTC offset of `+01:00`, {es} converts this date to\n`2019-12-31T23:00:00 UTC`.\n<3> The `time_zone` parameter does not affect the `now` value.\n"
}