{
    "meta": {
        "size": 6939,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/transform-search.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "transform-search",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[transform-search]]\n=== {watcher} search {watcher-transform}\n++++\n<titleabbrev>Search {watcher-transform}</titleabbrev>\n++++\n\nA <<transform,{watcher-transform}>> that executes a search on the cluster and\nreplaces the current payload in the watch execution context with the returned\nsearch response. The following snippet shows how a simple search transform can\nbe defined on the watch level:\n\n[source,js]\n--------------------------------------------------\n{\n  \"transform\" : {\n    \"search\" : {\n      \"request\" : {\n        \"body\" : { \"query\" : { \"match_all\" : {} }}\n      }\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nLike every other search based construct, one can make use of the full search\nAPI supported by Elasticsearch. For example, the following search\n{watcher-transform} execute a search over all events indices, matching events\nwith `error` priority:\n\n[source,js]\n--------------------------------------------------\n{\n  \"transform\" : {\n    \"search\" : {\n      \"request\" : {\n        \"indices\" : [ \"events-*\" ],\n        \"body\" : {\n          \"size\" : 0,\n          \"query\" : {\n            \"match\" : { \"priority\" : \"error\"}\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nThe following table lists all available settings for the search\n{watcher-transform}:\n\n[[transform-search-settings]]\n.Search {watcher-transform} settings\n[cols=\",^,,\", options=\"header\"]\n|======\n| Name                                          |Required   | Default           | Description\n\n| `request.search_type`                         | no        | query_then_fetch  | The search <<search-type,type>>.\n\n| `request.indices`                             | no        | all indices       | One or more indices to search on.\n\n| `request.body`                                | no        | `match_all` query | The body of the request. The\n                                                                                  <<search-search,request body>> follows\n                                                                                  the same structure you normally send in the body of\n                                                                                  a REST `_search` request. The body can be static text\n                                                                                  or include `mustache` <<templates,templates>>.\n\n| `request.indices_options.expand_wildcards`    | no        | `open`            | Determines how to expand indices wildcards. An array\n                                                                                  consisting of a combination of `open`, `closed`,\n                                                                                  and `hidden`. Alternatively a value of `none` or `all`.\n                                                                                  (see <<api-multi-index,multi-target syntax>>)\n\n| `request.indices_options.ignore_unavailable`  | no        | `true`            | A boolean value that determines whether the search\n                                                                                  should leniently ignore unavailable indices\n                                                                                  (see <<api-multi-index,multi-target syntax>>)\n\n| `request.indices_options.allow_no_indices`    | no        | `true`            | A boolean value that determines whether the search\n                                                                                  should leniently return no results when no indices\n                                                                                  are resolved (see <<api-multi-index,multi-target syntax>>)\n\n| `request.template`                            | no        | -                 | The body of the search template. See\n                                                                                  <<templates,configure templates>> for more information.\n\n| `timeout`                                     | no        | 30s               | The timeout for waiting for the search api call to\n                                                                                  return. If no response is returned within this time,\n                                                                                  the search {watcher-transform} times out and fails. This setting\n                                                                                  overrides the default timeouts.\n|======\n\n[[transform-search-template]]\n==== Template support\n\nThe search {watcher-transform} support mustache <<templates, templates>>. This\ncan either be as part of the body definition or alternatively point to an\nexisting template (either defined in a file or\n<<create-search-template,stored>> as a script in Elasticsearch).\n\nFor example, the following snippet shows a search that refers to the scheduled\ntime of the watch:\n\n[source,js]\n--------------------------------------------------\n{\n  \"transform\" : {\n    \"search\" : {\n      \"request\" : {\n        \"indices\" : [ \"logstash-*\" ],\n        \"body\" : {\n          \"size\" : 0,\n          \"query\" : {\n            \"bool\" : {\n              \"must\" : {\n                \"match\" : { \"priority\" : \"error\"}\n              },\n              \"filter\" : [\n                {\n                  \"range\" : {\n                    \"@timestamp\" : {\n                      \"gte\" : \"{{ctx.trigger.scheduled_time}}||-30s\",\n                      \"lte\" : \"{{ctx.trigger.triggered_time}}\"\n                    }\n                  }\n                }\n              ]\n            }\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nThe model of the template is a union between the provided `template.params`\nsettings and the <<watch-execution-context,standard watch execution context model>>.\n\nThe following is an example of using templates that refer to provided parameters:\n\n[source,js]\n--------------------------------------------------\n{\n  \"transform\" : {\n    \"search\" : {\n      \"request\" : {\n        \"indices\" : [ \"logstash-*\" ],\n        \"template\" : {\n          \"source\" : {\n            \"size\" : 0,\n            \"query\" : {\n              \"bool\" : {\n                \"must\" : {\n                  \"match\" : { \"priority\" : \"{{priority}}\"}\n                },\n                \"filter\" : [\n                  {\n                    \"range\" : {\n                      \"@timestamp\" : {\n                        \"gte\" : \"{{ctx.trigger.scheduled_time}}||-30s\",\n                        \"lte\" : \"{{ctx.trigger.triggered_time}}\"\n                      }\n                    }\n                  }\n                ]\n              }\n            },\n            \"params\" : {\n              \"priority\" : \"error\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n"
}