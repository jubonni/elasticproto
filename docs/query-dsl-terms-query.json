{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.650067",
        "size": 5912,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "query-dsl-terms-query",
        "version": "8.15"
    },
    "doc": "[[query-dsl-terms-query]]\n=== Terms query\n++++\n<titleabbrev>Terms</titleabbrev>\n++++\n\nReturns documents that contain one or more *exact* terms in a provided field.\n\nThe `terms` query is the same as the <<query-dsl-term-query, `term` query>>,\nexcept you can search for multiple values. A document will match if it contains\nat least one of the terms. To search for documents that contain more than one\nmatching term, use the <<query-dsl-terms-set-query, `terms_set` query>>.\n\n[[terms-query-ex-request]]\n==== Example request\n\nThe following search returns documents where the `user.id` field contains `kimchy`\nor `elkbee`.\n\n[source,console]\n----\nGET /_search\n{\n  \"query\": {\n    \"terms\": {\n      \"user.id\": [ \"kimchy\", \"elkbee\" ],\n      \"boost\": 1.0\n    }\n  }\n}\n----\n\n[[terms-top-level-params]]\n==== Top-level parameters for `terms`\n`<field>`::\n+\n--\n(Optional, object) Field you wish to search.\n\nThe value of this parameter is an array of terms you wish to find in the\nprovided field. To return a document, one or more terms must exactly match a\nfield value, including whitespace and capitalization.\n\nBy default, {es} limits the `terms` query to a maximum of 65,536\nterms. You can change this limit using the <<index-max-terms-count,\n`index.max_terms_count`>> setting.\n\n[NOTE]\nTo use the field values of an existing document as search terms, use the\n<<query-dsl-terms-lookup, terms lookup>> parameters.\n--\n\n`boost`::\n+\n--\n(Optional, float) Floating point number used to decrease or increase the\n<<relevance-scores,relevance scores>> of a query. Defaults to `1.0`.\n\nYou can use the `boost` parameter to adjust relevance scores for searches\ncontaining two or more queries.\n\nBoost values are relative to the default value of `1.0`. A boost value between\n`0` and `1.0` decreases the relevance score. A value greater than `1.0`\nincreases the relevance score.\n--\n\n[[terms-query-notes]]\n==== Notes\n\n[[query-dsl-terms-query-highlighting]]\n===== Highlighting `terms` queries\n<<highlighting,Highlighting>> is best-effort only. {es} may not\nreturn highlight results for `terms` queries depending on:\n\n* Highlighter type\n* Number of terms in the query\n\n[[query-dsl-terms-lookup]]\n===== Terms lookup\nTerms lookup fetches the field values of an existing document. {es} then uses\nthose values as search terms. This can be helpful when searching for a large set\nof terms.\n\nTo run a terms lookup, the field's <<mapping-source-field,`_source`>> must be\nenabled. You cannot use {ccs} to run a terms lookup on a remote index.\n\n[NOTE]\nBy default, {es} limits the `terms` query to a maximum of 65,536\nterms. This includes terms fetched using terms lookup. You can change\nthis limit using the <<index-max-terms-count, `index.max_terms_count`>> setting.\n\nTo reduce network traffic, a terms lookup will fetch the document's values from\na shard on a local data node if possible. If the your terms data is not large,\nconsider using an index with a single primary shard that's fully replicated\nacross all applicable data nodes to minimize network traffic.\n\nTo perform a terms lookup, use the following parameters.\n\n[[query-dsl-terms-lookup-params]]\n====== Terms lookup parameters\n\n`index`::\n(Required, string) Name of the index from which to fetch field values.\n\n`id`::\n(Required, string) <<mapping-id-field,ID>> of the document from which to fetch\nfield values.\n\n`path`::\n+\n--\n(Required, string) Name of the field from which to fetch field values. {es} uses\nthese values as search terms for the query.\n\nIf the field values include an array of nested inner objects, you can access\nthose objects using dot notation syntax.\n--\n\n`routing`::\n(Optional, string) Custom <<mapping-routing-field, routing value>> of the\ndocument from which to fetch term values. If a custom routing value was provided\nwhen the document was indexed, this parameter is required.\n\n[[query-dsl-terms-lookup-example]]\n====== Terms lookup example\n\nTo see how terms lookup works, try the following example.\n\n. Create an index with a `keyword` field named `color`.\n+\n--\n\n[source,console]\n----\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"color\": { \"type\": \"keyword\" }\n    }\n  }\n}\n----\n--\n\n. Index a document with an ID of 1 and values of `[\"blue\", \"green\"]` in the\n`color` field.\n+\n--\n\n[source,console]\n----\nPUT my-index-000001/_doc/1\n{\n  \"color\":   [\"blue\", \"green\"]\n}\n----\n// TEST[continued]\n--\n\n. Index another document with an ID of 2 and value of `blue` in the `color`\nfield.\n+\n--\n\n[source,console]\n----\nPUT my-index-000001/_doc/2\n{\n  \"color\":   \"blue\"\n}\n----\n// TEST[continued]\n--\n\n. Use the `terms` query with terms lookup parameters to find documents\ncontaining one or more of the same terms as document 2. Include the `pretty`\nparameter so the response is more readable.\n+\n--\n\n////\n\n[source,console]\n----\nPOST my-index-000001/_refresh\n----\n// TEST[continued]\n\n////\n\n[source,console]\n----\nGET my-index-000001/_search?pretty\n{\n  \"query\": {\n    \"terms\": {\n        \"color\" : {\n            \"index\" : \"my-index-000001\",\n            \"id\" : \"2\",\n            \"path\" : \"color\"\n        }\n    }\n  }\n}\n----\n// TEST[continued]\n\nBecause document 2 and document 1 both contain `blue` as a value in the `color`\nfield, {es} returns both documents.\n\n[source,console-result]\n----\n{\n  \"took\" : 17,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 1,\n    \"successful\" : 1,\n    \"skipped\" : 0,\n    \"failed\" : 0\n  },\n  \"hits\" : {\n    \"total\" : {\n      \"value\" : 2,\n      \"relation\" : \"eq\"\n    },\n    \"max_score\" : 1.0,\n    \"hits\" : [\n      {\n        \"_index\" : \"my-index-000001\",\n        \"_id\" : \"1\",\n        \"_score\" : 1.0,\n        \"_source\" : {\n          \"color\" : [\n            \"blue\",\n            \"green\"\n          ]\n        }\n      },\n      {\n        \"_index\" : \"my-index-000001\",\n        \"_id\" : \"2\",\n        \"_score\" : 1.0,\n        \"_source\" : {\n          \"color\" : \"blue\"\n        }\n      }\n    ]\n  }\n}\n----\n// TESTRESPONSE[s/\"took\" : 17/\"took\" : $body.took/]\n--\n"
}