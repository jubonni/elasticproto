{
    "meta": {
        "size": 4362,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-delayed-data-detection.html",
        "type": "documentation",
        "role": [
            "xpack",
            "screenshot",
            "screenshot"
        ],
        "has_code": false,
        "title": "ml-delayed-data-detection",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[ml-delayed-data-detection]]\n= Handling delayed data\n\nDelayed data are documents that are indexed late. That is to say, it is data \nrelated to a time that your {dfeed} has already processed and it is therefore\nnever analyzed by your {anomaly-job}.\n\nWhen you create a {dfeed}, you can specify a\n{ref}/ml-put-datafeed.html#ml-put-datafeed-request-body[`query_delay`] setting.\nThis setting enables the {dfeed} to wait for some time past real-time, which\nmeans any \"late\" data in this period is fully indexed before the {dfeed} tries\nto gather it. However, if the setting is set too low, the {dfeed} may query for\ndata before it has been indexed and consequently miss that document. Conversely,\nif it is set too high, analysis drifts farther away from real-time. The balance\nthat is struck depends upon each use case and the environmental factors of the\ncluster.\n\nIMPORTANT: If you get an error that says\n`Datafeed missed XXXX documents due to ingest latency`, consider increasing \nthe value of `query_delay'. If it doesn't help, investigate the ingest latency and its \ncause. You can do this by comparing event and ingest timestamps. High latency \nis often caused by bursts of ingested documents, misconfiguration of the ingest \npipeline, or misalignment of system clocks.\n\n== Why worry about delayed data?\n\nIf data are delayed randomly (and consequently are missing from analysis), the\nresults of certain types of functions are not really affected. In these\nsituations, it all comes out okay in the end as the delayed data is distributed\nrandomly. An example would be a `mean` metric for a field in a large collection\nof data. In this case, checking for delayed data may not provide much benefit.\nIf data are consistently delayed, however, {anomaly-jobs} with a `low_count`\nfunction may provide false positives. In this situation, it would be useful to\nsee if data comes in after an anomaly is recorded so that you can determine a\nnext course of action.\n\n== How do we detect delayed data?\n\nIn addition to the `query_delay` field, there is a delayed data check config,\nwhich enables you to configure the datafeed to look in the past for delayed data.\nEvery 15 minutes or every `check_window`, whichever is smaller, the datafeed\ntriggers a document search over the configured indices. This search looks over a\ntime span with a length of `check_window` ending with the latest finalized bucket.\nThat time span is partitioned into buckets, whose length equals the bucket span\nof the associated {anomaly-job}. The `doc_count` of those buckets are then\ncompared with the job's finalized analysis buckets to see whether any data has\narrived since the analysis. If there is indeed missing data due to their ingest\ndelay, the end user is notified. For example, you can see annotations in {kib}\nfor the periods where these delays occur:\n\n[role=\"screenshot\"]\nimage::images/ml-annotations.png[\"Delayed data annotations in the Single Metric Viewer\"]\n\n[IMPORTANT]\n====\nThe delayed data check will not work correctly in the following cases:\n\n* if the {dfeed} uses aggregations that filter data,\n* if the {dfeed} uses aggregations and the job's `analysis_config` does not have\nits `summary_count_field_name` set to `doc_count`,\n* if the {dfeed} is _not_ using aggregations and `summary_count_field_name` is\nset to any value.\n\nIf the datafeed is using aggregations, set the job's `summary_count_field_name`\nto `doc_count`. If `summary_count_field_name` is set to any value other than\n`doc_count`, the delayed data check for the datafeed must be disabled.\n====\nThere is another tool for visualizing the delayed data on the *Annotations* tab\nin the {anomaly-detect} job management page:\n\n[role=\"screenshot\"]\nimage::images/ml-datafeed-chart.png[\"Delayed data in the {dfeed} chart\"]\n\n== What to do about delayed data?\n\nThe most common course of action is to simply to do nothing. For many functions\nand situations, ignoring the data is acceptable. However, if the amount of\ndelayed data is too great or the situation calls for it, the next course of\naction to consider is to increase the `query_delay` of the datafeed. This\nincreased delay allows more time for data to be indexed. If you have real-time\nconstraints, however, an increased delay might not be desirable. In which case,\nyou would have to {ref}/tune-for-indexing-speed.html[tune for better indexing speed]. \n"
}