{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.139072",
        "size": 3532,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-flush-job.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "ml-flush-job",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[ml-flush-job]]\n= Flush jobs API\n++++\n<titleabbrev>Flush jobs</titleabbrev>\n++++\n\nForces any buffered data to be processed by the job.\n\n[[ml-flush-job-request]]\n== {api-request-title}\n\n`POST _ml/anomaly_detectors/<job_id>/_flush`\n\n[[ml-flush-job-prereqs]]\n== {api-prereq-title}\n\nRequires the `manage_ml` cluster privilege. This privilege is included in the \n`machine_learning_admin` built-in role.\n\n[[ml-flush-job-desc]]\n== {api-description-title}\n\nThe flush jobs API is only applicable when sending data for analysis using the\n<<ml-post-data,post data API>>. Depending on the content of the buffer, then it\nmight additionally calculate new results.\n\nBoth flush and close operations are similar, however the flush is more efficient\nif you are expecting to send more data for analysis. When flushing, the job\nremains open and is available to continue analyzing data. A close operation\nadditionally prunes and persists the model state to disk and the job must be\nopened again before analyzing further data.\n\n[[ml-flush-job-path-parms]]\n== {api-path-parms-title}\n\n`<job_id>`::\n(Required, string)\ninclude::{es-ref-dir}/ml/ml-shared.asciidoc[tag=job-id-anomaly-detection]\n\n[[ml-flush-job-query-parms]]\n== {api-query-parms-title}\n\n`advance_time`::\n  (string) Optional. Specifies to advance to a particular time value. Results are\n  generated and the model is updated for data from the specified time interval.\n\n`calc_interim`::\n  (Boolean) Optional. If true, calculates the interim results for the most\n  recent bucket or all buckets within the latency period.\n\n`end`::\n  (string) Optional. When used in conjunction with `calc_interim` and `start`,\n  specifies the range of buckets on which to calculate interim results.\n\n`skip_time`::\n  (string) Optional. Specifies to skip to a particular time value. Results are\n  not generated and the model is not updated for data from the specified time\n  interval.\n\n`start`::\n  (string) Optional. When used in conjunction with `calc_interim`, specifies the\n  range of buckets on which to calculate interim results.\n\n[[ml-flush-job-request-body]]\n== {api-request-body-title}\n\nYou can also specify the query parameters (such as `advance_time` and\n`calc_interim`) in the request body.\n\n[[ml-flush-job-example]]\n== {api-examples-title}\n\n[source,console]\n--------------------------------------------------\nPOST _ml/anomaly_detectors/low_request_rate/_flush\n{\n  \"calc_interim\": true\n}\n--------------------------------------------------\n// TEST[skip:Kibana sample data]\n\nWhen the operation succeeds, you receive the following results:\n\n[source,console-result]\n----\n{\n  \"flushed\": true,\n  \"last_finalized_bucket_end\": 1455234900000\n}\n----\n//TESTRESPONSE[s/\"last_finalized_bucket_end\": 1455234900000/\"last_finalized_bucket_end\": $body.last_finalized_bucket_end/]\n\nThe `last_finalized_bucket_end` provides the timestamp (in\nmilliseconds-since-the-epoch) of the end of the last bucket that was processed.\n\nIf you want to flush the job to a specific timestamp, you can use the\n`advance_time` or `skip_time` parameters. For example, to advance to 11 AM GMT\non January 1, 2018:\n\n[source,console]\n--------------------------------------------------\nPOST _ml/anomaly_detectors/total-requests/_flush\n{\n  \"advance_time\": \"1514804400000\"\n}\n--------------------------------------------------\n// TEST[skip:setup:server_metrics_openjob]\n\nWhen the operation succeeds, you receive the following results:\n\n[source,console-result]\n----\n{\n  \"flushed\": true,\n  \"last_finalized_bucket_end\": 1514804400000\n}\n----\n"
}