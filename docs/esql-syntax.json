{
    "meta": {
        "size": 4088,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/esql-syntax.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "esql-syntax",
        "version": "8.15"
    },
    "doc": "[[esql-syntax]]\n=== {esql} syntax reference\n\n++++\n<titleabbrev>Syntax reference</titleabbrev>\n++++\n\n[discrete]\n[[esql-basic-syntax]]\n=== Basic syntax\n\nAn {esql} query is composed of a <<esql-commands,source command>> followed\nby an optional series of <<esql-commands,processing commands>>,\nseparated by a pipe character: `|`. For example:\n\n[source,esql]\n----\nsource-command\n| processing-command1\n| processing-command2\n----\n\nThe result of a query is the table produced by the final processing command.\n\nFor an overview of all supported commands, functions, and operators, refer to <<esql-commands>> and <<esql-functions-operators>>.\n\n[NOTE]\n====\nFor readability, this documentation puts each processing command on a new\nline. However, you can write an {esql} query as a single line. The following\nquery is identical to the previous one:\n\n[source,esql]\n----\nsource-command | processing-command1 | processing-command2\n----\n====\n\n[discrete]\n[[esql-identifiers]]\n==== Identifiers\n\nIdentifiers need to be quoted with backticks (+{backtick}+) if:\n\n* they don't start with a letter, `_` or `@`\n* any of the other characters is not a letter, number, or `_`\n\nFor example:\n\n[source,esql]\n----\nFROM index\n| KEEP `1.field`\n----\n\nWhen referencing a function alias that itself uses a quoted identifier, the\nbackticks of the quoted identifier need to be escaped with another backtick. For\nexample:\n\n[source,esql]\n----\nFROM index\n| STATS COUNT(`1.field`)\n| EVAL my_count = `COUNT(``1.field``)`\n----\n\n[discrete]\n[[esql-literals]]\n==== Literals\n\n{esql} currently supports numeric and string literals.\n\n[discrete]\n[[esql-string-literals]]\n===== String literals\n\nA string literal is a sequence of unicode characters delimited by double\nquotes (`\"`).\n\n[source,esql]\n----\n// Filter by a string value\nFROM index\n| WHERE first_name == \"Georgi\"\n----\n\nIf the literal string itself contains quotes, these need to be escaped (`\\\\\"`).\n{esql} also supports the triple-quotes (`\"\"\"`) delimiter, for convenience:\n\n[source,esql]\n----\nROW name = \"\"\"Indiana \"Indy\" Jones\"\"\"\n----\n\nThe special characters CR, LF and TAB can be provided with the usual escaping:\n`\\r`, `\\n`, `\\t`, respectively.\n\n[discrete]\n[[esql-numeric-literals]]\n===== Numerical literals\n\nThe numeric literals are accepted in decimal and in the scientific notation\nwith the exponent marker (`e` or `E`), starting either with a digit, decimal\npoint `.` or the negative sign `-`:\n\n[source, sql]\n----\n1969    -- integer notation\n3.14    -- decimal notation\n.1234   -- decimal notation starting with decimal point\n4E5     -- scientific notation (with exponent marker)\n1.2e-3  -- scientific notation with decimal point\n-.1e2   -- scientific notation starting with the negative sign\n----\n\nThe integer numeric literals are implicitly converted to the `integer`, `long`\nor the `double` type, whichever can first accommodate the literal's value.\n\nThe floating point literals are implicitly converted the `double` type.\n\nTo obtain constant values of different types, use one of the numeric\n<<esql-type-conversion-functions, conversion functions>>.\n\n\n[discrete]\n[[esql-comments]]\n==== Comments\n{esql} uses C++ style comments:\n\n* double slash `//` for single line comments\n* `/*` and `*/` for block comments\n\n[source,esql]\n----\n// Query the employees index\nFROM employees\n| WHERE height > 2\n----\n\n[source,esql]\n----\nFROM /* Query the employees index */ employees\n| WHERE height > 2\n----\n\n[source,esql]\n----\nFROM employees\n/* Query the\n * employees\n * index */\n| WHERE height > 2\n----\n\n[discrete]\n[[esql-timespan-literals]]\n==== Timespan literals\n\nDatetime intervals and timespans can be expressed using timespan literals.\nTimespan literals are a combination of a number and a qualifier. These\nqualifiers are supported:\n\n* `millisecond`/`milliseconds`/`ms`\n* `second`/`seconds`/`sec`/`s`\n* `minute`/`minutes`/`min`\n* `hour`/`hours`/`h`\n* `day`/`days`/`d`\n* `week`/`weeks`/`w`\n* `month`/`months`/`mo`\n* `quarter`/`quarters`/`q`\n* `year`/`years`/`yr`/`y`\n\nTimespan literals are not whitespace sensitive. These expressions are all valid:\n\n* `1day`\n* `1 day`\n* `1       day`\n"
}