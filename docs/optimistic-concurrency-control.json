{
    "meta": {
        "timestamp": "2024-11-01T03:07:08.918271",
        "size": 3985,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/optimistic-concurrency-control.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "optimistic-concurrency-control",
        "version": "8.15"
    },
    "doc": "[[optimistic-concurrency-control]]\n=== Optimistic concurrency control\n\nElasticsearch is distributed. When documents are created, updated, or deleted,\nthe new version of the document has to be replicated to other nodes in the cluster. \nElasticsearch is also asynchronous and concurrent, meaning that these replication\nrequests are sent in parallel, and may arrive at their destination out of sequence. \nElasticsearch needs a way of ensuring that an older version of a document never \noverwrites a newer version.\n\n\nTo ensure an older version of a document doesn't overwrite a newer version, every\noperation performed to a document is assigned a sequence number by the primary\nshard that coordinates that change. The sequence number is increased with each\noperation and thus newer operations are guaranteed to have a higher sequence\nnumber than older operations. Elasticsearch can then use the sequence number of\noperations to make sure a newer document version is never overridden by\na change that has a smaller sequence number assigned to it.\n\nFor example, the following indexing command will create a document and assign it\nan initial sequence number and primary term:\n\n[source,console]\n--------------------------------------------------\nPUT products/_doc/1567\n{\n  \"product\" : \"r2d2\",\n  \"details\" : \"A resourceful astromech droid\"\n}\n--------------------------------------------------\n\nYou can see the assigned sequence number and primary term in the \n`_seq_no` and `_primary_term` fields of the response:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"_shards\": {\n    \"total\": 2,\n    \"failed\": 0,\n    \"successful\": 1\n  },\n  \"_index\": \"products\",\n  \"_id\": \"1567\",\n  \"_version\": 1,\n  \"_seq_no\": 362,\n  \"_primary_term\": 2,\n  \"result\": \"created\"\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"_seq_no\": 362/\"_seq_no\": $body._seq_no/]\n// TESTRESPONSE[s/\"_primary_term\": 2/\"_primary_term\": $body._primary_term/]\n\n\nElasticsearch keeps tracks of the sequence number and primary term of the last\noperation to have changed each of the documents it stores. The sequence number\nand primary term are returned in the `_seq_no` and `_primary_term` fields in\nthe response of the <<docs-get,GET API>>:\n\n[source,console]\n--------------------------------------------------\nGET products/_doc/1567\n--------------------------------------------------\n// TEST[continued]\n\nreturns:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"_index\": \"products\",\n  \"_id\": \"1567\",\n  \"_version\": 1,\n  \"_seq_no\": 362,\n  \"_primary_term\": 2,\n  \"found\": true,\n  \"_source\": {\n    \"product\": \"r2d2\",\n    \"details\": \"A resourceful astromech droid\"\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"_seq_no\": 362/\"_seq_no\": $body._seq_no/]\n// TESTRESPONSE[s/\"_primary_term\": 2/\"_primary_term\": $body._primary_term/]\n\n\nNote: The <<search-search,Search API>> can return the `_seq_no` and `_primary_term`\nfor each search hit by setting <<request-body-search-seq-no-primary-term,`seq_no_primary_term` parameter>>.\n\nThe sequence number and the primary term uniquely identify a change. By noting down \nthe sequence number and primary term returned, you can make sure to only change the\ndocument if no other change was made to it since you retrieved it. This\nis done by setting the `if_seq_no` and `if_primary_term` parameters of the \n<<docs-index_,index API>>, <<docs-update,update API>>, or <<docs-delete,delete\nAPI>>. \n\nFor example, the following indexing call will make sure to add a tag to the\ndocument without losing any potential change to the description or an addition\nof another tag by another API:\n\n[source,console]\n--------------------------------------------------\nPUT products/_doc/1567?if_seq_no=362&if_primary_term=2\n{\n  \"product\": \"r2d2\",\n  \"details\": \"A resourceful astromech droid\",\n  \"tags\": [ \"droid\" ]\n}\n--------------------------------------------------\n// TEST[continued]\n// TEST[catch: conflict]\n"
}