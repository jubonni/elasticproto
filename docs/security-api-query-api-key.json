{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.255598",
        "size": 20697,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-query-api-key.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "security-api-query-api-key",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[security-api-query-api-key]]\n=== Query API key information API\n\n++++\n<titleabbrev>Query API key information</titleabbrev>\n++++\n\n////\n[source,console]\n----\nPOST /_security/user/king\n{\n  \"password\" : \"security-test-password\",\n  \"roles\": []\n}\nPOST /_security/user/june\n{\n  \"password\" : \"security-test-password\",\n  \"roles\": []\n}\nPOST /_security/api_key/grant\n{\n  \"grant_type\": \"password\",\n  \"username\" : \"king\",\n  \"password\" : \"security-test-password\",\n  \"api_key\" : {\n    \"name\": \"king-key-no-expire\"\n  }\n}\nDELETE /_security/api_key\n{\n  \"name\" : \"king-key-no-expire\"\n}\nPOST /_security/api_key/grant\n{\n  \"grant_type\": \"password\",\n  \"username\" : \"king\",\n  \"password\" : \"security-test-password\",\n  \"api_key\" : {\n    \"name\": \"king-key-10\",\n    \"expiration\": \"10d\"\n  }\n}\nPOST /_security/api_key/grant\n{\n  \"grant_type\": \"password\",\n  \"username\" : \"king\",\n  \"password\" : \"security-test-password\",\n  \"api_key\" : {\n    \"name\": \"king-key-100\",\n    \"expiration\": \"100d\"\n  }\n}\nPOST /_security/api_key/grant\n{\n  \"grant_type\": \"password\",\n  \"username\" : \"june\",\n  \"password\" : \"security-test-password\",\n  \"api_key\" : {\n    \"name\": \"june-key-no-expire\"\n  }\n}\nPOST /_security/api_key/grant\n{\n  \"grant_type\": \"password\",\n  \"username\" : \"june\",\n  \"password\" : \"security-test-password\",\n  \"api_key\" : {\n    \"name\": \"june-key-10\",\n    \"expiration\": \"10d\"\n  }\n}\nPOST /_security/api_key/grant\n{\n  \"grant_type\": \"password\",\n  \"username\" : \"june\",\n  \"password\" : \"security-test-password\",\n  \"api_key\" : {\n    \"name\": \"june-key-100\",\n    \"expiration\": \"100d\"\n  }\n}\nDELETE /_security/api_key\n{\n  \"name\" : \"june-key-100\"\n}\n----\n// TESTSETUP\n\n[source,console]\n--------------------------------------------------\nDELETE /_security/user/king\nDELETE /_security/user/june\nDELETE /_security/api_key\n{\n  \"name\" : \"king-key-no-expire\"\n}\nDELETE /_security/api_key\n{\n  \"name\" : \"king-key-10\"\n}\nDELETE /_security/api_key\n{\n  \"name\" : \"king-key-100\"\n}\nDELETE /_security/api_key\n{\n  \"name\" : \"june-key-no-expire\"\n}\nDELETE /_security/api_key\n{\n  \"name\" : \"june-key-10\"\n}\n--------------------------------------------------\n// TEARDOWN\n\n////\n\nRetrieves information for API keys with <<query-dsl,Query DSL>>\nin a <<paginate-search-results,paginated>> fashion.\n\n[[security-api-query-api-key-request]]\n==== {api-request-title}\n\n`GET /_security/_query/api_key`\n\n`POST /_security/_query/api_key`\n\n[[security-api-query-api-key-prereqs]]\n==== {api-prereq-title}\n\n* To use this API, you must have at least the `manage_own_api_key` or the `read_security`\ncluster privileges.\n* If you have only the `manage_own_api_key` privilege, this API returns only\nthe API keys that you own. If you have the `read_security`, `manage_api_key` or greater\nprivileges (including `manage_security`), this API returns all API keys\nregardless of ownership.\n\n[[security-api-query-api-key-desc]]\n==== {api-description-title}\n\nUse this API to retrieve the API keys created with the\n<<security-api-create-api-key,create API key API>> in a paginated manner.\nYou can optionally filter the results with a query.\n\n[[security-api-query-api-key-query-params]]\n==== {api-path-parms-title}\n\n`with_limited_by`::\n(Optional, Boolean) A boolean flag to return the snapshot of the owner user's role descriptors\nassociated with the API key. An API key's actual permission is the intersection of\nits <<api-key-role-descriptors,assigned role descriptors>> and the owner user's role descriptors\n(effectively limited by it). An API key cannot retrieve any API key's limited-by role descriptors\n(including itself) unless it has `manage_api_key` or higher privileges.\n\n`with_profile_uid`::\n(Optional, boolean) Determines whether to also retrieve the <<user-profile,user profile>> `uid`, for the API key owner user.\nIf it exists, the profile uid is returned under the `profile_uid` response field for each API key.\nDefaults to `false`.\n\n`typed_keys`::\n(Optional, Boolean) If `true`, aggregation names are prefixed by their respective types in the response.\nDefaults to `false`.\n\n[[security-api-query-api-key-request-body]]\n==== {api-request-body-title}\n\nYou can specify the following parameters in the request body:\n\n`query`::\n(Optional, object) A <<query-dsl,query>> to filter which API keys to return.\nIf the query parameter is missing, it is equivalent to a `match_all` query.\nThe query supports a subset of query types, including\n<<query-dsl-match-all-query,`match_all`>>, <<query-dsl-bool-query,`bool`>>,\n<<query-dsl-term-query,`term`>>, <<query-dsl-terms-query,`terms`>>,\n<<query-dsl-match-query,`match`>>, <<query-dsl-ids-query,`ids`>>,\n<<query-dsl-prefix-query,`prefix`>>, <<query-dsl-wildcard-query,`wildcard`>>,\n<<query-dsl-exists-query,`exists`>>, <<query-dsl-range-query,`range`>>,\nand <<query-dsl-simple-query-string-query,`simple query string`>>.\n+\nYou can query the following public values associated with an API key.\n+\nNOTE: The queryable string values associated with API keys are internally mapped as <<keyword,`keywords`>>.\nConsequently, if no <<analysis-analyzers,`analyzer`>> parameter is specified for a\n<<query-dsl-match-query,`match`>> query, then the provided match query string is interpreted as\na single keyword value. Such a <<query-dsl-match-query,`match`>> query is hence equivalent to a\n<<query-dsl-term-query,`term`>> query.\n+\n.Valid values for `query`\n[%collapsible%open]\n====\n`id`::\nID of the API key. Note `id` must be queried with the <<query-dsl-ids-query,`ids`>> query.\n\n`type`::\nAPI keys can be of type `rest`, if created via the <<security-api-create-api-key, Create API key>> or\nthe <<security-api-grant-api-key, Grant API key>> APIs, or of type `cross_cluster` if created via\nthe <<security-api-create-cross-cluster-api-key, Create Cross-Cluster API key>> API.\n\n`name`::\nName of the API key.\n\n`creation`::\nCreation time of the API key in milliseconds.\n\n`expiration`::\nExpiration time of the API key in milliseconds. This is `null` if the key was not configured to expire.\n\n`invalidated`::\nIndicates whether the API key is invalidated. If `true`, the key is invalidated.\nDefaults to `false`.\n\n`invalidation`::\nInvalidation time of the API key in milliseconds. This field is only set for invalidated API keys.\n\n`username`::\nUsername of the API key owner.\n\n`realm`::\nRealm name of the API key owner.\n\n`metadata`::\nMetadata field associated with the API key, such as `metadata.my_field`.\nMetadata is internally indexed as a <<flattened,flattened>> field type.\nThis means that all fields act like `keyword` fields when querying and sorting.\nIt's not possible to refer to a subset of metadata fields using wildcard\npatterns, e.g. `metadata.field*`, even for query types that support field\nname patterns. Lastly, all the metadata fields can be searched together when\nsimply mentioning `metadata` (not followed by any dot and sub-field name).\n\nNOTE: You cannot query the role descriptors of an API key.\n====\n\n`aggs` or `aggregations`::\n(Optional, object) Any <<search-aggregations,aggregations>> to run over the corpus of returned API keys.\nAggregations and queries work together. Aggregations are computed only on the API keys that match the query.\nThis supports only a subset of aggregation types, namely: <<search-aggregations-bucket-terms-aggregation,terms>>,\n<<search-aggregations-bucket-range-aggregation,range>>, <<search-aggregations-bucket-daterange-aggregation,date range>>,\n<<search-aggregations-bucket-missing-aggregation,missing>>, <<search-aggregations-metrics-cardinality-aggregation,cardinality>>,\n<<search-aggregations-metrics-valuecount-aggregation,value count>>, <<search-aggregations-bucket-composite-aggregation,composite>>,\n<<search-aggregations-bucket-filter-aggregation,filter>>, and <<search-aggregations-bucket-filters-aggregation,filters>>.\nAdditionally, aggregations only run over the same subset of fields that `query` works with.\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=from]\n+\nBy default, you cannot page through more than 10,000 hits using the `from` and\n`size` parameters. To page through more hits, use the\n<<search-after,`search_after`>> parameter.\n\n`size`::\n(Optional, integer) The number of hits to return. Must not be negative and defaults to `10`.\nThe `size` parameter can be set to `0`, in which case no API key matches are returned,\nonly the aggregation results.\n+\nBy default, you cannot page through more than 10,000 hits using the `from` and\n`size` parameters. To page through more hits, use the\n<<search-after,`search_after`>> parameter.\n\n`sort`::\n(Optional, object) <<sort-search-results,Sort definition>>. Other than `id`,\nall public fields of an API key are eligible for sorting. In addition, sort can\nalso be applied to the `_doc` field to sort by index order.\n\n`search_after`::\n(Optional, array) <<search-after,Search after>> definition.\n\n\n[[security-api-query-api-key-response-body]]\n==== {api-response-body-title}\n\nThis API returns the following top level fields:\n\n`total`::\nThe total number of API keys found.\n\n`count`::\nThe number of API keys returned in the response.\n\n`api_keys`::\nA list of API key information.\n\n[[security-api-query-api-key-example]]\n==== {api-examples-title}\n\nThe following request lists all API keys, assuming you have the\n`manage_api_key` privilege:\n\n[source,console]\n----\nGET /_security/_query/api_key\n----\n\nA successful call returns a JSON structure that contains the information\nretrieved from one or more API keys:\n\n[source,js]\n----\n{\n  \"total\": 3,\n  \"count\": 3,\n  \"api_keys\": [ <1>\n    {\n      \"id\": \"nkvrGXsB8w290t56q3Rg\",\n      \"name\": \"my-api-key-1\",\n      \"creation\": 1628227480421,\n      \"expiration\": 1629091480421,\n      \"invalidated\": false,\n      \"username\": \"elastic\",\n      \"realm\": \"reserved\",\n      \"realm_type\": \"reserved\",\n      \"metadata\": {\n        \"letter\": \"a\"\n      },\n      \"role_descriptors\": { <2>\n        \"role-a\": {\n          \"cluster\": [\n            \"monitor\"\n          ],\n          \"indices\": [\n            {\n              \"names\": [\n                \"index-a\"\n              ],\n              \"privileges\": [\n                \"read\"\n              ],\n              \"allow_restricted_indices\": false\n            }\n          ],\n          \"applications\": [ ],\n          \"run_as\": [ ],\n          \"metadata\": { },\n          \"transient_metadata\": {\n            \"enabled\": true\n          }\n        }\n      }\n    },\n    {\n      \"id\": \"oEvrGXsB8w290t5683TI\",\n      \"name\": \"my-api-key-2\",\n      \"creation\": 1628227498953,\n      \"expiration\": 1628313898953,\n      \"invalidated\": false,\n      \"username\": \"elastic\",\n      \"realm\": \"reserved\",\n      \"metadata\": {\n        \"letter\": \"b\"\n      },\n      \"role_descriptors\": { } <3>\n    }\n  ]\n}\n----\n// NOTCONSOLE\n\n<1> The list of API keys that were retrieved for this request\n<2> The role descriptors that are assigned to this API key when it was <<api-key-role-descriptors,created>>\nor last <<security-api-update-api-key-api-key-role-descriptors,updated>>. Note the API key's\neffective permissions are an intersection of its assigned privileges and the point-in-time snapshot of\nthe owner user's permissions.\n<3> An empty role descriptors means the API key inherits the owner user's permissions.\n\nIf you create an API key with the following details:\n\n[source,console]\n----\nPOST /_security/api_key\n{\n  \"name\": \"application-key-1\",\n  \"metadata\": { \"application\": \"my-application\"}\n}\n----\n\nA successful call returns a JSON structure that provides\nAPI key information. For example:\n\n[source,console-result]\n----\n{\n  \"id\": \"VuaCfGcBCdbkQm-e5aOx\",\n  \"name\": \"application-key-1\",\n  \"api_key\": \"ui2lp2axTNmsyakw9tvNnw\",\n  \"encoded\": \"VnVhQ2ZHY0JDZGJrUW0tZTVhT3g6dWkybHAyYXhUTm1zeWFrdzl0dk5udw==\"\n}\n----\n// TESTRESPONSE[s/VuaCfGcBCdbkQm-e5aOx/$body.id/]\n// TESTRESPONSE[s/ui2lp2axTNmsyakw9tvNnw/$body.api_key/]\n// TESTRESPONSE[s/VnVhQ2ZHY0JDZGJrUW0tZTVhT3g6dWkybHAyYXhUTm1zeWFrdzl0dk5udw==/$body.encoded/]\n\nUse the information from the response to retrieve the API key by ID:\n\n[source,console]\n----\nGET /_security/_query/api_key?with_limited_by=true\n{\n  \"query\": {\n    \"ids\": {\n      \"values\": [\n        \"VuaCfGcBCdbkQm-e5aOx\"\n      ]\n    }\n  }\n}\n----\n// TEST[s/VuaCfGcBCdbkQm-e5aOx/$body.id/]\n// TEST[continued]\n\nA successful call returns a JSON structure for API key information including its limited-by role descriptors:\n\n[source,js]\n--------------------------------------------------\n{\n  \"api_keys\": [\n    {\n      \"id\": \"VuaCfGcBCdbkQm-e5aOx\",\n      \"name\": \"application-key-1\",\n      \"creation\": 1548550550158,\n      \"expiration\": 1548551550158,\n      \"invalidated\": false,\n      \"username\": \"myuser\",\n      \"realm\": \"native1\",\n      \"realm_type\": \"native\",\n      \"metadata\": {\n        \"application\": \"my-application\"\n      },\n      \"role_descriptors\": { },\n      \"limited_by\": [ <1>\n        {\n          \"role-power-user\": {\n            \"cluster\": [\n              \"monitor\"\n            ],\n            \"indices\": [\n              {\n                \"names\": [\n                  \"*\"\n                ],\n                \"privileges\": [\n                  \"read\"\n                ],\n                \"allow_restricted_indices\": false\n              }\n            ],\n            \"applications\": [ ],\n            \"run_as\": [ ],\n            \"metadata\": { },\n            \"transient_metadata\": {\n              \"enabled\": true\n            }\n          }\n        }\n      ]\n    }\n  ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n<1> The owner user's permissions associated with the API key.\nIt is a point-in-time snapshot captured at <<security-api-create-api-key,creation>> and\nsubsequent <<security-api-update-api-key,updates>>. An API key's\neffective permissions are an intersection of its assigned privileges and\nthe owner user's permissions.\n\nYou can also retrieve the API key by name:\n\n[source,console]\n----\nGET /_security/_query/api_key\n{\n  \"query\": {\n    \"term\": {\n      \"name\": {\n        \"value\": \"application-key-1\"\n      }\n    }\n  }\n}\n----\n// TEST[continued]\n\nUse a `bool` query to issue complex logical conditions and use\n`from`, `size`, `sort` to help paginate the result:\n\n[source,js]\n----\nGET /_security/_query/api_key\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"prefix\": {\n            \"name\": \"app1-key-\" <1>\n          }\n        },\n        {\n          \"term\": {\n            \"invalidated\": \"false\" <2>\n          }\n        }\n      ],\n      \"must_not\": [\n        {\n          \"term\": {\n            \"name\": \"app1-key-01\" <3>\n          }\n        }\n      ],\n      \"filter\": [\n        {\n          \"wildcard\": {\n            \"username\": \"org-*-user\" <4>\n          }\n        },\n        {\n          \"term\": {\n            \"metadata.environment\": \"production\" <5>\n          }\n        }\n      ]\n    }\n  },\n  \"from\": 20, <6>\n  \"size\": 10, <7>\n  \"sort\": [ <8>\n    { \"creation\": { \"order\": \"desc\", \"format\": \"date_time\" } },\n    \"name\"\n  ]\n}\n----\n// NOTCONSOLE\n\n<1> The API key name must begin with `app1-key-`\n<2> The API key must still be valid\n<3> The API key name must not be `app1-key-01`\n<4> The API key must be owned by a username of the <<query-dsl-wildcard-query,wildcard>> pattern `org-*-user`\n<5> The API key must have the metadata field `environment` that has the value of `production`\n<6> The offset to begin the search result is the 20th (zero-based index) API key\n<7> The page size of the response is 10 API keys\n<8> The result is first sorted by `creation` date in descending order, then by name in ascending order\n\nThe response contains a list of matched API keys along with their sort values:\n\n[source,js]\n----\n{\n  \"total\": 100,\n  \"count\": 10,\n  \"api_keys\": [\n    {\n      \"id\": \"CLXgVnsBOGkf8IyjcXU7\",\n      \"name\": \"app1-key-79\",\n      \"creation\": 1629250154811,\n      \"invalidated\": false,\n      \"username\": \"org-admin-user\",\n      \"realm\": \"native1\",\n      \"metadata\": {\n        \"environment\": \"production\"\n      },\n      \"role_descriptors\": { },\n      \"_sort\": [\n        \"2021-08-18T01:29:14.811Z\",  <1>\n        \"app1-key-79\"  <2>\n      ]\n    },\n    {\n      \"id\": \"BrXgVnsBOGkf8IyjbXVB\",\n      \"name\": \"app1-key-78\",\n      \"creation\": 1629250153794,\n      \"invalidated\": false,\n      \"username\": \"org-admin-user\",\n      \"realm\": \"native1\",\n      \"metadata\": {\n        \"environment\": \"production\"\n      },\n      \"role_descriptors\": { },\n      \"_sort\": [\n        \"2021-08-18T01:29:13.794Z\",\n        \"app1-key-78\"\n      ]\n    },\n    ...\n  ]\n}\n----\n// NOTCONSOLE\n\n<1> The first sort value is creation time, which is displayed in `date_time` <<mapping-date-format,format>> as defined in the request\n<2> The second sort value is the API key name\n\n[[security-api-query-api-key-with-aggs-example]]\n==== Aggregations Example\n\nFor example, given 2 users \"june\" and \"king\", each owning 3 API keys:\n\n* one that never expires (invalidated for user \"king\")\n* one that expires in 10 days\n* and one that expires in 100 day (invalidated for user \"june\")\n\nthe following request returns the names of valid (not expired and not invalidated) API keys\nthat expire soon (in 30 days time), grouped by owner username.\n\n===== Request\n\n[source,console]\n----\nPOST /_security/_query/api_key\n{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"must\": {\n        \"term\": {\n          \"invalidated\": false  <1>\n        }\n      },\n      \"should\": [  <2>\n        {\n          \"range\": { \"expiration\": { \"gte\": \"now\" } }\n        },\n        {\n          \"bool\": { \"must_not\": { \"exists\": { \"field\": \"expiration\" } } }\n        }\n      ],\n      \"minimum_should_match\": 1\n    }\n  },\n  \"aggs\": {\n    \"keys_by_username\": {\n      \"composite\": {\n        \"sources\": [ { \"usernames\": { \"terms\": { \"field\": \"username\" } } } ]  <3>\n      },\n      \"aggs\": {\n        \"expires_soon\": {\n          \"filter\": {\n            \"range\": { \"expiration\": { \"lte\": \"now+30d/d\" } }  <4>\n          },\n          \"aggs\": {\n            \"key_names\": { \"terms\": { \"field\": \"name\" } }\n          }\n        }\n      }\n    }\n  }\n}\n----\n\n<1> Matching API keys must not be invalidated\n<2> Matching API keys must be either not expired or not have an expiration date\n<3> Aggregate all matching keys (i.e. all valid keys) by their owner username\n<4> Further aggregate the per-username valid keys into a soon-to-expire bucket\n\n===== Response\n\n[source,console-result]\n----\n{\n  \"total\" : 4,  <1>\n  \"count\" : 0,\n  \"api_keys\" : [ ],\n  \"aggregations\" : {\n    \"keys_by_username\" : {\n      \"after_key\" : {\n        \"usernames\" : \"king\"\n      },\n      \"buckets\" : [\n        {\n          \"key\" : {\n            \"usernames\" : \"june\"\n          },\n          \"doc_count\" : 2,  <2>\n          \"expires_soon\" : {\n            \"doc_count\" : 1,\n            \"key_names\" : {\n              \"doc_count_error_upper_bound\" : 0,\n              \"sum_other_doc_count\" : 0,\n              \"buckets\" : [\n                {\n                  \"key\" : \"june-key-10\",\n                  \"doc_count\" : 1\n                }\n              ]\n            }\n          }\n        },\n        {\n          \"key\" : {\n            \"usernames\" : \"king\"\n          },\n          \"doc_count\" : 2,\n          \"expires_soon\" : {\n            \"doc_count\" : 1,  <3>\n            \"key_names\" : {\n              \"doc_count_error_upper_bound\" : 0,\n              \"sum_other_doc_count\" : 0,\n              \"buckets\" : [  <4>\n                {\n                  \"key\" : \"king-key-10\",\n                  \"doc_count\" : 1\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n----\n\n<1> Total number of valid API keys (2 for each user)\n<2> Number of valid API keys for user \"june\"\n<3> Number of valid API keys expiring soon for user \"king\"\n<4> The names of soon-to-expire API keys for user \"king\"\n\nTo retrieve the invalidated (but not yet deleted) API keys,\ngrouped by owner username and API key name, issue the following request:\n\n===== Request\n\n[source,console]\n----\nPOST /_security/_query/api_key\n{\n  \"size\": 0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": {\n        \"term\": {\n          \"invalidated\": true\n        }\n      }\n    }\n  },\n  \"aggs\": {\n    \"invalidated_keys\": {\n      \"composite\": {\n        \"sources\": [\n          { \"username\": { \"terms\": { \"field\": \"username\" } } },\n          { \"key_name\": { \"terms\": { \"field\": \"name\" } } }\n        ]\n      }\n    }\n  }\n}\n----\n\n===== Response\n\n[source,console-result]\n----\n{\n  \"total\" : 2,\n  \"count\" : 0,\n  \"api_keys\" : [ ],\n  \"aggregations\" : {\n    \"invalidated_keys\" : {\n      \"after_key\" : {\n        \"username\" : \"king\",\n        \"key_name\" : \"king-key-no-expire\"\n      },\n      \"buckets\" : [\n        {\n          \"key\" : {\n            \"username\" : \"june\",\n            \"key_name\" : \"june-key-100\"\n          },\n          \"doc_count\" : 1\n        },\n        {\n          \"key\" : {\n            \"username\" : \"king\",\n            \"key_name\" : \"king-key-no-expire\"\n          },\n          \"doc_count\" : 1\n        }\n      ]\n    }\n  }\n}\n----\n"
}