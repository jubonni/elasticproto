{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.926580",
        "size": 8443,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/migrate-index-allocation-filters.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": false,
        "title": "migrate-index-allocation-filters",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[migrate-index-allocation-filters]]\n== Migrate index allocation filters to node roles\n\nIf you currently use custom node attributes and\n<<shard-allocation-filtering, attribute-based allocation filters>> to\nmove indices through <<data-tiers, data tiers>> in a\nhttps://www.elastic.co/blog/implementing-hot-warm-cold-in-elasticsearch-with-index-lifecycle-management[hot-warm-cold architecture],\nwe recommend that you switch to using the built-in node roles\nand automatic <<data-tier-allocation, data tier allocation>>.\nUsing node roles enables {ilm-init} to automatically\nmove indices between data tiers.\n\nNOTE: While we recommend relying on automatic data tier allocation to manage\nyour data in a hot-warm-cold architecture,\nyou can still use attribute-based allocation filters to\ncontrol shard allocation for other purposes.\n\n{ess} and {ece} can perform the migration automatically. For self-managed\ndeployments, you need to manually update your configuration, ILM policies, and\nindices to switch to node roles. \n\n[discrete]\n[[cloud-migrate-to-node-roles]]\n=== Automatically migrate to node roles on {ess} or {ece}\n\nIf you are using node attributes from the default deployment template in {ess} or {ece}, you will be\nprompted to switch to node roles when you:\n\n* Upgrade to {es} 7.10 or higher\n* Deploy a warm, cold, or frozen data tier\n* {cloud}/ec-autoscaling.html[Enable autoscaling]\n\nThese actions automatically update your cluster configuration\nand {ilm-init} policies to use node roles. Additionally, upgrading to\nversion 7.14 or higher automatically update {ilm-init} policies\nwhenever any configuration change is applied to your deployment.\n\n\nIf you use custom index templates, check them after the automatic migration\ncompletes and remove any <<shard-allocation-filtering, attribute-based\nallocation filters>>.\n\nNOTE: You do not need to take any further action after the automatic migration.\nThe following manual steps are only necessary if you do not allow the automatic\nmigration or have a self-managed deployment.\n\n[discrete]\n[[on-prem-migrate-to-node-roles]]\n=== Migrate to node roles on self-managed deployments\n\nTo switch to using node roles:\n\n. <<assign-data-tier, Assign data nodes>> to the appropriate data tier.\n. <<remove-custom-allocation-settings, Remove the attribute-based allocation\nsettings>> from your {ilm} policy.\n. <<stop-setting-custom-hot-attribute, Stop setting the custom hot attribute>>\non new indices.\n. Update existing indices to <<set-tier-preference, set a tier preference>>.\n\n\n[discrete]\n[[assign-data-tier]]\n==== Assign data nodes to a data tier\n\nConfigure the appropriate roles for each data node to assign it to one or more\ndata tiers: `data_hot`, `data_content`, `data_warm`, `data_cold`, or `data_frozen`.\nA node can also have other <<modules-node,roles>>. By default, new nodes are\nconfigured with all roles.\n\nWhen you add a data tier to an {ess} deployment,\none or more nodes are automatically configured with the corresponding role.\nTo explicitly change the role of a node in an {ess} deployment, use the\n{cloud}/ec-api-deployment-crud.html#ec_update_a_deployment[Update deployment API].\nReplace the node's `node_type` configuration with the appropriate `node_roles`.\nFor example, the following configuration adds the node to the hot and content\ntiers, and enables it to act as an ingest node, remote, and transform node.\n\n[source,yaml]\n----\n\"node_roles\": [\n  \"data_hot\",\n  \"data_content\",\n  \"ingest\",\n  \"remote_cluster_client\",\n  \"transform\"\n],\n----\n\nIf you are directly managing your own cluster,\nconfigure the appropriate roles for each node in `elasticsearch.yml`.\nFor example, the following setting configures a node to be a data-only\nnode in the hot and content tiers.\n\n[source,yaml]\n----\nnode.roles [ data_hot, data_content ]\n----\n\n[discrete]\n[[remove-custom-allocation-settings]]\n==== Remove custom allocation settings from existing {ilm-init} policies\n\nUpdate the allocate action for each lifecycle phase to remove the attribute-based\nallocation settings. {ilm-init} will inject a\n<<ilm-migrate,migrate>> action into each phase\nto automatically transition the indices through the data tiers.\n\nIf the allocate action does not set the number of replicas,\nremove the allocate action entirely. (An empty allocate action is invalid.)\n\nIMPORTANT: The policy must specify the corresponding phase for each data tier in\nyour architecture. Each phase must be present so {ilm-init} can inject the\nmigrate action to move indices through the data tiers.\nIf you don't need to perform any other actions, the phase can be empty.\nFor example, if you enable the warm and cold data tiers for a deployment,\nyour policy must include the hot, warm, and cold phases.\n\n[discrete]\n[[stop-setting-custom-hot-attribute]]\n==== Stop setting the custom hot attribute on new indices\n\nWhen you create a data stream, its first backing index\nis now automatically assigned to `data_hot` nodes.\nSimilarly, when you directly create an index, it\nis automatically assigned to `data_content` nodes.\n\nOn {ess} deployments, remove the `cloud-hot-warm-allocation-0` index template\nthat set the hot shard allocation attribute on all indices.\n\n[source,console]\n----\nDELETE _template/.cloud-hot-warm-allocation-0\n----\n// TEST[skip:no cloud template]\n\nIf you're using a custom index template, update it to remove the <<shard-allocation-filtering, attribute-based allocation filters>> you used to assign new indices to the hot tier.\n\nTo completely avoid the issues that raise when mixing the tier preference and\ncustom attribute routing setting we also recommend updating all the legacy,\ncomposable, and component templates to remove the <<shard-allocation-filtering, attribute-based allocation filters>>\nfrom the settings they configure.\n\n[discrete]\n[[set-tier-preference]]\n==== Set a tier preference for existing indices\n\n{ilm-init} automatically transitions managed indices through the available\ndata tiers by automatically injecting a <<ilm-migrate,migrate action>>\ninto each phase.\n\nTo enable {ilm-init} to move an _existing_ managed index\nthrough the data tiers, update the index settings to:\n\n. Remove the custom allocation filter by setting it to `null`.\n. Set the <<tier-preference-allocation-filter,tier preference>>.\n\nFor example, if your old template set the `data` attribute to `hot`\nto allocate shards to the hot tier, set the `data` attribute to `null`\nand set the `_tier_preference` to `data_hot`.\n\n////\n[source,console]\n----\nPUT /my-index\n\nPUT /my-index/_settings\n{\n  \"index.routing.allocation.require.data\": \"hot\"\n}\n----\n////\n\n[source,console]\n----\nPUT my-index/_settings\n{\n  \"index.routing.allocation.require.data\": null,\n  \"index.routing.allocation.include._tier_preference\": \"data_hot\"\n}\n----\n// TEST[continued]\n\nFor indices that have already transitioned out of the hot phase,\nthe tier preference should include the appropriate fallback tiers\nto ensure index shards can be allocated if the preferred tier\nis unavailable.\nFor example, specify the hot tier as the fallback for indices\nalready in the warm phase.\n\n[source,console]\n----\nPUT my-index/_settings\n{\n  \"index.routing.allocation.require.data\": null,\n  \"index.routing.allocation.include._tier_preference\": \"data_warm,data_hot\"\n}\n----\n// TEST[continued]\n\nIf an index is already in the cold phase, include the cold, warm, and hot tiers.\n\nFor indices that have both the `_tier_preference` and `require.data` configured\nbut the `_tier_preference` is outdated (ie. the node attribute configuration\nis \"colder\" than the configured `_tier_preference`), the migration needs to\nremove the `require.data` attribute and update the `_tier_preference` to reflect\nthe correct tiering.\n\neg. For an index with the following routing configuration:\n[source,JSON]\n----\n{\n  \"index.routing.allocation.require.data\": \"warm\",\n  \"index.routing.allocation.include._tier_preference\": \"data_hot\"\n}\n----\n\nThe routing configuration should be fixed like so:\n[source,console]\n----\nPUT my-index/_settings\n{\n  \"index.routing.allocation.require.data\": null,\n  \"index.routing.allocation.include._tier_preference\": \"data_warm,data_hot\"\n}\n----\n// TEST[continued]\n\nThis situation can occur in a system that defaults to data tiers when, e.g.,\nan ILM policy that uses node attributes is restored and transitions the managed\nindices from the hot phase into the warm phase. In this case the node attribute\nconfiguration indicates the correct tier where the index should be allocated.\n"
}