{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.142067",
        "size": 7552,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/foreach-processor.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "foreach-processor",
        "version": "8.15"
    },
    "doc": "[[foreach-processor]]\n=== Foreach processor\n++++\n<titleabbrev>Foreach</titleabbrev>\n++++\n\nRuns an ingest processor on each element of an array or object.\n\nAll ingest processors can run on array or object elements. However, if the\nnumber of elements is unknown, it can be cumbersome to process each one in the\nsame way.\n\nThe `foreach` processor lets you specify a `field` containing array or object\nvalues and a `processor` to run on each element in the field.\n\n[[foreach-options]]\n.Foreach Options\n[options=\"header\"]\n|======\n| Name             | Required  | Default  | Description\n| `field`          | yes       | -        | Field containing array or object\nvalues.\n| `processor`      | yes       | -        | Ingest processor to run on each\nelement.\n| `ignore_missing` | no        | false    | If `true`, the processor silently\nexits without changing the document if the `field` is `null` or missing.\ninclude::common-options.asciidoc[]\n|======\n\n[discrete]\n[[foreach-keys-values]]\n==== Access keys and values\n\nWhen iterating through an array or object, the `foreach` processor stores the\ncurrent element's value in the `_ingest._value` <<access-ingest-metadata,ingest\nmetadata>> field. `_ingest._value` contains the entire element value, including\nany child fields. You can access child field values using dot notation on the\n`_ingest._value` field.\n\nWhen iterating through an object, the `foreach` processor also stores the\ncurrent element's key as a string in `_ingest._key`.\n\nYou can access and change `_ingest._key` and `_ingest._value` in the\n`processor`. For an example, see the <<foreach-object-ex, object\nexample>>.\n\n[discrete]\n[[foreach-failure-handling]]\n==== Failure handling\n\nIf the `foreach` processor fails to process an element and no `on_failure`\nprocessor is specified, the `foreach` processor silently exits. This leaves the\nentire array or object value unchanged.\n\n[discrete]\n[[foreach-examples]]\n==== Examples\n\nThe following examples show how you can use the `foreach` processor with\ndifferent data types and options:\n\n* <<foreach-array-ex>>\n* <<foreach-array-objects-ex>>\n* <<foreach-object-ex>>\n* <<failure-handling-ex>>\n\n[discrete]\n[[foreach-array-ex]]\n===== Array\n\nAssume the following document:\n\n[source,js]\n--------------------------------------------------\n{\n  \"values\" : [\"foo\", \"bar\", \"baz\"]\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nWhen this `foreach` processor operates on this sample document:\n\n[source,js]\n--------------------------------------------------\n{\n  \"foreach\" : {\n    \"field\" : \"values\",\n    \"processor\" : {\n      \"uppercase\" : {\n        \"field\" : \"_ingest._value\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nThen the document will look like this after processing:\n\n[source,js]\n--------------------------------------------------\n{\n  \"values\" : [\"FOO\", \"BAR\", \"BAZ\"]\n}\n--------------------------------------------------\n// NOTCONSOLE\n\n[discrete]\n[[foreach-array-objects-ex]]\n===== Array of objects\n\nAssume the following document:\n\n[source,js]\n--------------------------------------------------\n{\n  \"persons\" : [\n    {\n      \"id\" : \"1\",\n      \"name\" : \"John Doe\"\n    },\n    {\n      \"id\" : \"2\",\n      \"name\" : \"Jane Doe\"\n    }\n  ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIn this case, the `id` field needs to be removed,\nso the following `foreach` processor is used:\n\n[source,js]\n--------------------------------------------------\n{\n  \"foreach\" : {\n    \"field\" : \"persons\",\n    \"processor\" : {\n      \"remove\" : {\n        \"field\" : \"_ingest._value.id\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nAfter processing the result is:\n\n[source,js]\n--------------------------------------------------\n{\n  \"persons\" : [\n    {\n      \"name\" : \"John Doe\"\n    },\n    {\n      \"name\" : \"Jane Doe\"\n    }\n  ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nFor another array of objects example, refer to the \n<<attachment-with-arrays,attachment processor documentation>>.\n\n[discrete]\n[[foreach-object-ex]]\n===== Object\n\nYou can also use the `foreach` processor on object fields. For example,\nthe following document contains a `products` field with object values.\n\n[source,js]\n--------------------------------------------------\n{\n  \"products\" : {\n    \"widgets\" : {\n      \"total_sales\" : 50,\n      \"unit_price\": 1.99,\n      \"display_name\": \"\"\n    },\n    \"sprockets\" : {\n      \"total_sales\" : 100,\n      \"unit_price\": 9.99,\n      \"display_name\": \"Super Sprockets\"\n    },\n    \"whizbangs\" : {\n      \"total_sales\" : 200,\n      \"unit_price\": 19.99,\n      \"display_name\": \"Wonderful Whizbangs\"\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nThe following `foreach` processor changes the value of `products.display_name`\nto uppercase.\n\n[source,js]\n--------------------------------------------------\n{\n  \"foreach\": {\n    \"field\": \"products\",\n    \"processor\": {\n      \"uppercase\": {\n        \"field\": \"_ingest._value.display_name\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nWhen run on the document, the `foreach` processor returns:\n\n[source,js]\n--------------------------------------------------\n{\n  \"products\" : {\n    \"widgets\" : {\n      \"total_sales\" : 50,\n      \"unit_price\" : 1.99,\n      \"display_name\" : \"\"\n    },\n    \"sprockets\" : {\n      \"total_sales\" : 100,\n      \"unit_price\" : 9.99,\n      \"display_name\" : \"SUPER SPROCKETS\"\n    },\n    \"whizbangs\" : {\n      \"total_sales\" : 200,\n      \"unit_price\" : 19.99,\n      \"display_name\" : \"WONDERFUL WHIZBANGS\"\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nThe following `foreach` processor sets each element's key to the\nvalue of `products.display_name`. If `products.display_name` contains an empty string,\nthe processor deletes the element.\n\n[source,js]\n--------------------------------------------------\n{\n  \"foreach\": {\n    \"field\": \"products\",\n    \"processor\": {\n      \"set\": {\n        \"field\": \"_ingest._key\",\n        \"value\": \"{{_ingest._value.display_name}}\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nWhen run on the previous document, the `foreach` processor returns:\n\n[source,js]\n--------------------------------------------------\n{\n  \"products\" : {\n    \"Wonderful Whizbangs\" : {\n      \"total_sales\" : 200,\n      \"unit_price\" : 19.99,\n      \"display_name\" : \"Wonderful Whizbangs\"\n    },\n    \"Super Sprockets\" : {\n      \"total_sales\" : 100,\n      \"unit_price\" : 9.99,\n      \"display_name\" : \"Super Sprockets\"\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\n[discrete]\n[[failure-handling-ex]]\n===== Failure handling\n\nThe wrapped processor can have a `on_failure` definition.\nFor example, the `id` field may not exist on all person objects.\nInstead of failing the index request, you can use an `on_failure`\nblock to send the document to the 'failure_index' index for later inspection:\n\n[source,js]\n--------------------------------------------------\n{\n  \"foreach\" : {\n    \"field\" : \"persons\",\n    \"processor\" : {\n      \"remove\" : {\n        \"field\" : \"_value.id\",\n        \"on_failure\" : [\n          {\n            \"set\" : {\n              \"field\": \"_index\",\n              \"value\": \"failure_index\"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIn this example, if the `remove` processor does fail, then\nthe array elements that have been processed thus far will\nbe updated.\n"
}