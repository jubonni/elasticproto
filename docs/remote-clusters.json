{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.317580",
        "size": 5258,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/remote-clusters.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "remote-clusters",
        "version": "8.15"
    },
    "doc": "[[remote-clusters]]\n== Remote clusters\nYou can connect a local cluster to other {es} clusters, known as _remote\nclusters_. Remote clusters can be located in different datacenters or\ngeographic regions, and contain indices or data streams that can be replicated\nwith {ccr} or searched by a local cluster using {ccs}.\n\n[[remote-clusters-ccr]]\n[discrete]\n=== {ccr-cap}\n\nWith <<xpack-ccr,{ccr}>>, you ingest data to an index on a remote cluster. This\n_leader_ index is replicated to one or more read-only _follower_ indices on your\nlocal cluster. Creating a multi-cluster architecture with {ccr} enables you to\nconfigure disaster recovery, bring data closer to your users, or establish a\ncentralized reporting cluster to process reports locally.\n\n[[remote-clusters-ccs]]\n[discrete]\n=== {ccs-cap}\n\n<<modules-cross-cluster-search,{ccs-cap}>> enables you to run a search request\nagainst one or more remote clusters. This capability provides each region with a\nglobal view of all clusters, allowing you to send a search request from a local\ncluster and return results from all connected remote clusters. For full {ccs}\ncapabilities, the local and remote cluster must be on the same\n{subscriptions}[subscription level].\n\n[[add-remote-clusters]]\n[discrete]\n=== Add remote clusters\n\nNOTE: The instructions that follow describe how to create a remote connection from a\nself-managed cluster. You can also set up {ccs} and {ccr} from an\nlink:https://www.elastic.co/guide/en/cloud/current/ec-enable-ccs.html[{ess} deployment]\nor from an link:https://www.elastic.co/guide/en/cloud-enterprise/current/ece-enable-ccs.html[{ece} deployment].\n\nTo add remote clusters, you can choose between\n<<remote-clusters-security-models,two security models>> and\n<<sniff-proxy-modes,two connection modes>>. Both security models are compatible\nwith either of the connection modes.\n\n[[remote-clusters-security-models]]\n[discrete]\n==== Security models\n\nAPI key based security model::\nFor clusters on version 8.14 or later, you can use an API key to authenticate\nand authorize cross-cluster operations to a remote cluster. This model offers\nadministrators of both the local and the remote cluster fine-grained access\ncontrols. <<remote-clusters-api-key>>.\n\nCertificate based security model::\nUses mutual TLS authentication for cross-cluster operations. User authentication\nis performed on the local cluster and a user's role names are passed to the\nremote cluster. In this model, a superuser on the local cluster gains total read\naccess to the remote cluster, so it is only suitable for clusters that are in\nthe same security domain. <<remote-clusters-cert>>.\n\n[[sniff-proxy-modes]]\n[discrete]\n==== Connection modes\n\n[[sniff-mode]]\nSniff mode::\nIn sniff mode, a cluster alias is registered with a name of your choosing and a\nlist of addresses of _seed_ nodes specified with the\n`cluster.remote.<cluster_alias>.seeds` setting. When you register a remote\ncluster using sniff mode, {es} retrieves from one of the seed nodes the\naddresses of up to three _gateway nodes_. Each `remote_cluster_client` node in\nthe local {es} cluster then opens several TCP connections to the publish\naddresses of the gateway nodes. This mode therefore requires that the gateway\nnodes' publish addresses are accessible to nodes in the local cluster.\n+\nSniff mode is the default connection mode. See <<remote-cluster-sniff-settings>>\nfor more information about configuring sniff mode.\n+\n[[gateway-nodes-selection]]\nThe _gateway nodes_ selection depends on the following criteria:\n+\n* *version*: Remote nodes must be compatible with the cluster they are\nregistered to.\n* *role*: By default, any non-<<master-node,master-eligible>> node can act as a\ngateway node. Dedicated master nodes are never selected as gateway nodes.\n* *attributes*: You can define the gateway nodes for a cluster by setting\n<<cluster-remote-node-attr,`cluster.remote.node.attr.gateway`>> to `true`.\nHowever, such nodes still have to satisfy the two above requirements.\n\n[[proxy-mode]]\nProxy mode::\nIn proxy mode, a cluster alias is registered with a name of your choosing and\nthe address of a TCP (layer 4) reverse proxy specified with the\n`cluster.remote.<cluster_alias>.proxy_address` setting. You must configure this\nproxy to route connections to one or more nodes of the remote cluster. When you\nregister a remote cluster using proxy mode, {es} opens several TCP connections\nto the proxy address and uses these connections to communicate with the remote\ncluster. In proxy mode {es} disregards the publish addresses of the remote\ncluster nodes which means that the publish addresses of the remote cluster\nnodes need not be accessible to the local cluster.\n+\nProxy mode is not the default connection mode, so you must set\n`cluster.remote.<cluster_alias>.mode: proxy` to use it. See\n<<remote-cluster-proxy-settings>> for more information about configuring proxy\nmode.\n+\nProxy mode has the same <<gateway-nodes-selection, version compatibility\nrequirements>> as sniff mode.\n\ninclude::cluster/remote-clusters-api-key.asciidoc[]\n\ninclude::cluster/remote-clusters-cert.asciidoc[]\n\ninclude::cluster/remote-clusters-migration.asciidoc[]\n\ninclude::cluster/remote-clusters-settings.asciidoc[]\n\ninclude::cluster/remote-clusters-troubleshooting.asciidoc[]\n"
}