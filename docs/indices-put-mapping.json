{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.973274",
        "size": 9321,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "indices-put-mapping",
        "version": "8.15"
    },
    "doc": "[[indices-put-mapping]]\n=== Update mapping API\n++++\n<titleabbrev>Update mapping</titleabbrev>\n++++\n\nAdds new fields to an existing data stream or index. You can also use this\nAPI to change the search settings of existing fields.\n\nFor data streams, these changes are applied to all backing indices by default.\n\n[source,console]\n----\nPUT /my-index-000001/_mapping\n{\n  \"properties\": {\n    \"email\": {\n      \"type\": \"keyword\"\n    }\n  }\n}\n----\n// TEST[setup:my_index]\n\n[[put-mapping-api-request]]\n==== {api-request-title}\n\n`PUT /<target>/_mapping`\n\n[[put-mapping-api-prereqs]]\n==== {api-prereq-title}\n\n* If the {es} {security-features} are enabled, you must have the `manage`\n<<privileges-list-indices,index privilege>> for the target data stream, index,\nor alias.\n+\ndeprecated:[7.9] If the request targets an index or index alias, you can also\nupdate its mapping with the `create`, `create_doc`, `index`, or `write` index\nprivilege.\n\n\n[[put-mapping-api-path-params]]\n==== {api-path-parms-title}\n\n`<target>`::\n(Required, string) Comma-separated list of data streams, indices, and aliases\nused to limit the request. Supports wildcards (`*`). To target all data streams\nand indices, omit this parameter or use `*` or `_all`.\n\n[[put-mapping-api-query-params]]\n==== {api-query-parms-title}\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=allow-no-indices]\n+\nDefaults to `false`.\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=expand-wildcards]\n+\nDefaults to `open`.\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=index-ignore-unavailable]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=timeoutparms]\n\n`write_index_only`::\n(Optional, Boolean)\nIf `true`,\nthe mappings are applied only to the current write index for the target.\nDefaults to `false`.\n\n\n[[put-mapping-api-request-body]]\n==== {api-request-body-title}\n\n`properties`::\n+\n--\n(Required, <<mapping,mapping object>>) Mapping for a field. For new\nfields, this mapping can include:\n\n* Field name\n* <<mapping-types,Field data type>>\n* <<mapping-params,Mapping parameters>>\n\nFor existing fields, see <<updating-field-mappings>>.\n--\n\n\n[[put-mapping-api-example]]\n==== {api-examples-title}\n\n[[put-field-mapping-api-basic-ex]]\n===== Example with single target\n\nThe update mapping API requires an existing data stream or index. The following\n<<indices-create-index, create index>> API request creates the `publications`\nindex with no mapping.\n\n[source,console]\n----\nPUT /publications\n----\n\nThe following update mapping API request adds `title`, a new <<text,`text`>> field,\nto the `publications` index.\n\n[source,console]\n----\nPUT /publications/_mapping\n{\n  \"properties\": {\n    \"title\":  { \"type\": \"text\"}\n  }\n}\n----\n// TEST[continued]\n\n[[put-mapping-api-multi-ex]]\n===== Multiple targets\n\nThe update mapping API can be applied to multiple data streams or indices with a single request.\nFor example, you can update mappings for the `my-index-000001` and `my-index-000002` indices at the same time:\n\n[source,console]\n--------------------------------------------------\n# Create the two indices\nPUT /my-index-000001\nPUT /my-index-000002\n\n# Update both mappings\nPUT /my-index-000001,my-index-000002/_mapping\n{\n  \"properties\": {\n    \"user\": {\n      \"properties\": {\n        \"name\": {\n          \"type\": \"keyword\"\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n\n[[add-new-field-to-object]]\n===== Add new properties to an existing object field\n\nYou can use the update mapping API to add new properties to an existing\n<<object,`object`>> field. To see how this works, try the following example.\n\nUse the <<indices-create-index,create index>> API to create an index with the\n`name` object field and an inner `first` text field.\n\n[source,console]\n----\nPUT /my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"name\": {\n        \"properties\": {\n          \"first\": {\n            \"type\": \"text\"\n          }\n        }\n      }\n    }\n  }\n}\n----\n\nUse the update mapping API to add a new inner `last` text field to the `name`\nfield.\n\n[source,console]\n----\nPUT /my-index-000001/_mapping\n{\n  \"properties\": {\n    \"name\": {\n      \"properties\": {\n        \"last\": {\n          \"type\": \"text\"\n        }\n      }\n    }\n  }\n}\n----\n// TEST[continued]\n\n\n[[add-multi-fields-existing-field-ex]]\n===== Add multi-fields to an existing field\n\n<<multi-fields,Multi-fields>> let you index the same field in different ways.\nYou can use the update mapping API to update the `fields` mapping parameter and\nenable multi-fields for an existing field.\n\nWARNING: If an index (or data stream) contains documents when you add a\nmulti-field, those documents will not have values for the new multi-field. You\ncan populate the new multi-field with the <<picking-up-a-new-property,update by\nquery API>>.\n\nTo see how this works, try the following example.\n\nUse the <<indices-create-index,create index>> API to create an index with the\n`city` <<text,text>> field.\n\n[source,console]\n----\nPUT /my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"city\": {\n        \"type\": \"text\"\n      }\n    }\n  }\n}\n----\n\nWhile text fields work well for full-text search, <<keyword,keyword>> fields are\nnot analyzed and may work better for sorting or aggregations.\n\nUse the update mapping API to enable a multi-field for the `city` field. This\nrequest adds the `city.raw` keyword multi-field, which can be used for sorting.\n\n[source,console]\n----\nPUT /my-index-000001/_mapping\n{\n  \"properties\": {\n    \"city\": {\n      \"type\": \"text\",\n      \"fields\": {\n        \"raw\": {\n          \"type\": \"keyword\"\n        }\n      }\n    }\n  }\n}\n----\n// TEST[continued]\n\n\n[[change-existing-mapping-parms]]\n===== Change supported mapping parameters for an existing field\n\nThe documentation for each <<mapping-params,mapping parameter>> indicates\nwhether you can update it for an existing field using the update mapping API. For\nexample, you can use the update mapping API to update the\n<<ignore-above,`ignore_above`>> parameter.\n\nTo see how this works, try the following example.\n\nUse the <<indices-create-index,create index>> API to create an index containing\na `user_id` keyword field. The `user_id` field has an `ignore_above` parameter\nvalue of `20`.\n\n[source,console]\n----\nPUT /my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"user_id\": {\n        \"type\": \"keyword\",\n        \"ignore_above\": 20\n      }\n    }\n  }\n}\n----\n\nUse the update mapping API to change the `ignore_above` parameter value to `100`.\n\n[source,console]\n----\nPUT /my-index-000001/_mapping\n{\n  \"properties\": {\n    \"user_id\": {\n      \"type\": \"keyword\",\n      \"ignore_above\": 100\n    }\n  }\n}\n----\n// TEST[continued]\n\n\n[[updating-field-mappings]]\n===== Change the mapping of an existing field\n\n// tag::change-field-mapping[]\nExcept for supported <<mapping-params,mapping parameters>>,\nyou can't change the mapping or field type of an existing field.\nChanging an existing field could invalidate data that's already indexed.\n\nIf you need to change the mapping of a field in a data stream's backing indices,\nsee <<data-streams-change-mappings-and-settings>>.\n\nIf you need to change the mapping of a field in other indices,\ncreate a new index with the correct mapping\nand <<docs-reindex,reindex>> your data into that index.\n// end::change-field-mapping[]\n\nTo see how you can change the mapping of an existing field in an index,\ntry the following example.\n\nUse the <<indices-create-index,create index>> API\nto create an index\nwith the `user_id` field\nwith the <<number,`long`>> field type.\n\n[source,console]\n----\nPUT /my-index-000001\n{\n  \"mappings\" : {\n    \"properties\": {\n      \"user_id\": {\n        \"type\": \"long\"\n      }\n    }\n  }\n}\n----\n\nUse the <<docs-index_,index>> API\nto index several documents\nwith `user_id` field values.\n\n[source,console]\n----\nPOST /my-index-000001/_doc?refresh=wait_for\n{\n  \"user_id\" : 12345\n}\n\nPOST /my-index-000001/_doc?refresh=wait_for\n{\n  \"user_id\" : 12346\n}\n----\n// TEST[continued]\n\nTo change the `user_id` field\nto the <<keyword,`keyword`>> field type,\nuse the create index API\nto create a new index with the correct mapping.\n\n[source,console]\n----\nPUT /my-new-index-000001\n{\n  \"mappings\" : {\n    \"properties\": {\n      \"user_id\": {\n        \"type\": \"keyword\"\n      }\n    }\n  }\n}\n----\n// TEST[continued]\n\nUse the <<docs-reindex,reindex>> API\nto copy documents from the old index\nto the new one.\n\n[source,console]\n----\nPOST /_reindex\n{\n  \"source\": {\n    \"index\": \"my-index-000001\"\n  },\n  \"dest\": {\n    \"index\": \"my-new-index-000001\"\n  }\n}\n----\n// TEST[continued]\n\n\n[[rename-existing-field]]\n===== Rename a field\n\n// tag::rename-field[]\nRenaming a field would invalidate data already indexed under the old field name.\nInstead, add an <<field-alias, `alias`>> field to create an alternate field name.\n// end::rename-field[]\n\nFor example,\nuse the <<indices-create-index,create index>> API\nto create an index\nwith the `user_identifier` field.\n\n[source,console]\n----\nPUT /my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"user_identifier\": {\n        \"type\": \"keyword\"\n      }\n    }\n  }\n}\n----\n\nUse the update mapping API to add the `user_id` field alias\nfor the existing `user_identifier` field.\n\n[source,console]\n----\nPUT /my-index-000001/_mapping\n{\n  \"properties\": {\n    \"user_id\": {\n      \"type\": \"alias\",\n      \"path\": \"user_identifier\"\n    }\n  }\n}\n----\n// TEST[continued]\n"
}