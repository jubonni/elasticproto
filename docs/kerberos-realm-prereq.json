{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.221578",
        "size": 7571,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/kerberos-realm-prereq.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "kerberos-realm-prereq",
        "version": "8.15"
    },
    "doc": "Kerberos is used to protect services and uses a ticket-based authentication\nprotocol to authenticate users.\nYou can configure {es} to use the Kerberos V5 authentication protocol, which is\nan industry standard protocol, to authenticate users.\nIn this scenario, clients must present Kerberos tickets for authentication.\n\nIn Kerberos, users authenticate with an authentication service and later\nwith a ticket granting service to generate a TGT (ticket-granting ticket).\nThis ticket is then presented to the service for authentication.\nRefer to your Kerberos installation documentation for more information about\nobtaining TGT. {es} clients must first obtain a TGT then initiate the process of\nauthenticating with {es}.\n\n[[kerberos-realm-prereq]]\n===== Before you begin\n\n. Deploy Kerberos.\n+\n--\nYou must have the Kerberos infrastructure set up in your environment.\n\nNOTE: Kerberos requires a lot of external services to function properly, such as\ntime synchronization between all machines and working forward and reverse DNS\nmappings in your domain. Refer to your Kerberos documentation for more details.\n\nThese instructions do not cover setting up and configuring your Kerberos\ndeployment. Where examples are provided, they pertain to an MIT Kerberos V5\ndeployment. For more information, see\nhttp://web.mit.edu/kerberos/www/index.html[MIT Kerberos documentation]\n--\n\n. Configure Java GSS.\n+\n--\n\n{es} uses Java GSS framework support for Kerberos authentication.\nTo support Kerberos authentication, {es} needs the following files:\n\n* `krb5.conf`, a Kerberos configuration file\n*  A `keytab` file that contains credentials for the {es} service principal\n\nThe configuration requirements depend on your Kerberos setup. Refer to your\nKerberos documentation to configure the `krb5.conf` file.\n\nFor more information on Java GSS, see\nhttps://docs.oracle.com/javase/10/security/kerberos-requirements1.htm[Java GSS Kerberos requirements]\n--\n\n. Enable TLS for HTTP.\n+\n--\nIf your {es} cluster is operating in production mode, you must configure the\nHTTP interface to use SSL/TLS before you can enable Kerberos authentication. For\nmore information, see <<encrypt-http-communication>>.\n\nThis step is necessary to support Kerberos authentication via {kib}.\nIt is not required for Kerberos authentication directly against the {es} Rest API.\n--\n\n. Enable the token service\n+\n--\nThe {es} Kerberos implementation makes use of the {es} token service. If you\nconfigure TLS on the HTTP interface, this service is automatically enabled. It\ncan be explicitly configured by adding the following setting in your\n`elasticsearch.yml` file:\n\n[source, yaml]\n------------------------------------------------------------\nxpack.security.authc.token.enabled: true\n------------------------------------------------------------\n\nThis step is necessary to support Kerberos authentication via {kib}.\nIt is not required for Kerberos authentication directly against the {es} Rest API.\n--\n\n[[kerberos-realm-create]]\n===== Create a Kerberos realm\n\nTo configure a Kerberos realm in {es}:\n\n. Configure the JVM to find the Kerberos configuration file.\n+\n--\n{es} uses Java GSS and JAAS Krb5LoginModule to support Kerberos authentication\nusing a Simple and Protected GSSAPI Negotiation Mechanism (SPNEGO) mechanism.\nThe Kerberos configuration file (`krb5.conf`) provides information such as the\ndefault realm, the Key Distribution Center (KDC), and other configuration details\nrequired for Kerberos authentication. When the JVM needs some configuration\nproperties, it tries to find those values by locating and loading this file. The\nJVM system property to configure the file path is `java.security.krb5.conf`. To\nconfigure JVM system properties see <<set-jvm-options>>.\nIf this system property is not specified, Java tries to locate the file based on\nthe conventions.\n\nTIP: It is recommended that this system property be configured for {es}.\nThe method for setting this property depends on your Kerberos infrastructure.\nRefer to your Kerberos documentation for more details.\n\nFor more information, see http://web.mit.edu/kerberos/krb5-latest/doc/admin/conf_files/krb5_conf.html[krb5.conf]\n\n--\n\n. Create a keytab for the {es} node.\n+\n--\nA keytab is a file that stores pairs of principals and encryption keys. {es}\nuses the keys from the keytab to decrypt the tickets presented by the user. You\nmust create a keytab for {es} by using the tools provided by your Kerberos\nimplementation. For example, some tools that create keytabs are `ktpass.exe` on\nWindows and `kadmin` for MIT Kerberos.\n--\n\n. Put the keytab file in the {es} configuration directory.\n+\n--\nMake sure that this keytab file has read permissions. This file contains\ncredentials, therefore you must take appropriate measures to protect it.\n\nIMPORTANT: {es} uses Kerberos on the HTTP network layer, therefore there must be\na keytab file for the HTTP service principal on every {es} node. The service\nprincipal name must have the format `HTTP/es.domain.local@ES.DOMAIN.LOCAL`.\nThe keytab files are unique for each node since they include the hostname.\nAn {es} node can act as any principal a client requests as long as that\nprincipal and its credentials are found in the configured keytab.\n\n--\n\n. Create a Kerberos realm.\n+\n--\n\nTo enable Kerberos authentication in {es}, you must add a Kerberos realm in the\nrealm chain.\n\nNOTE: You can configure only one Kerberos realm on {es} nodes.\n\nTo configure a Kerberos realm, there are a few mandatory realm settings and\nother optional settings that you need to configure in the `elasticsearch.yml`\nconfiguration file. Add a realm configuration under the\n`xpack.security.authc.realms.kerberos` namespace.\n\nThe most common configuration for a Kerberos realm is as follows:\n\n[source, yaml]\n------------------------------------------------------------\nxpack.security.authc.realms.kerberos.kerb1:\n  order: 3\n  keytab.path: es.keytab\n  remove_realm_name: false\n------------------------------------------------------------\n\nThe `username` is extracted from the ticket presented by user and usually has\nthe format `username@REALM`. This `username` is used for mapping\nroles to the user. If realm setting `remove_realm_name` is\nset to `true`, the realm part (`@REALM`) is removed. The resulting `username`\nis used for role mapping.\n\nFor detailed information of available realm settings,\nsee <<ref-kerberos-settings>>.\n\n--\n\n. Restart {es}\n\n. Map Kerberos users to roles.\n+\n--\n\nThe `kerberos` realm enables you to map Kerberos users to roles. You can\nconfigure these role mappings by using the\n<<security-api-put-role-mapping,create or update role mappings API>>. You\nidentify users by their `username` field.\n\nThe following example uses the role mapping API to map `user@REALM` to the roles\n`monitoring` and `user`:\n\n[source,console]\n--------------------------------------------------\nPOST /_security/role_mapping/kerbrolemapping\n{\n  \"roles\" : [ \"monitoring_user\" ],\n  \"enabled\": true,\n  \"rules\" : {\n    \"field\" : { \"username\" : \"user@REALM\" }\n  }\n}\n--------------------------------------------------\n\nIn case you want to support Kerberos cross realm authentication you may\nneed to map roles based on the Kerberos realm name. For such scenarios\nfollowing are the additional user metadata available for role mapping:\n- `kerberos_realm` will be set to Kerberos realm name.\n- `kerberos_user_principal_name` will be set to user principal name from the Kerberos ticket.\n\nFor more information, see <<mapping-roles>>.\n\nNOTE: The Kerberos realm supports\n<<authorization_realms,authorization realms>> as an\nalternative to role mapping.\n\n--\n"
}