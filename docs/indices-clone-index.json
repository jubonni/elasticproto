{
    "meta": {
        "timestamp": "2024-11-01T03:07:08.883274",
        "size": 6432,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-clone-index.html",
        "type": "documentation",
        "role": [
            "child_attributes"
        ],
        "has_code": true,
        "title": "indices-clone-index",
        "version": "8.15"
    },
    "doc": "[[indices-clone-index]]\n=== Clone index API\n++++\n<titleabbrev>Clone index</titleabbrev>\n++++\n\nClones an existing index.\n\n[source,console]\n--------------------------------------------------\nPOST /my-index-000001/_clone/cloned-my-index-000001\n--------------------------------------------------\n// TEST[s/^/PUT my-index-000001\\n{\"settings\":{\"index.number_of_shards\" : 5,\"blocks.write\":true}}\\n/]\n\n\n[[clone-index-api-request]]\n==== {api-request-title}\n\n`POST /<index>/_clone/<target-index>`\n\n`PUT /<index>/_clone/<target-index>`\n\n[[clone-index-api-prereqs]]\n==== {api-prereq-title}\n\n* If the {es} {security-features} are enabled, you must have the `manage`\n<<privileges-list-indices,index privilege>> for the index you want to clone.\n\n* To clone an index, the index must be marked as read-only and have a\n<<cluster-health,cluster health>> status of `green`.\n\nFor example,\nthe following request prevents write operations on `my_source_index`\nso it can be cloned using the\n<<add-index-block,add index block>> API.\nMetadata changes like deleting the index are still allowed.\n\n[source,console]\n--------------------------------------------------\nPUT /my_source_index/_block/write\n--------------------------------------------------\n// TEST[s/^/PUT my_source_index\\n/]\n\nThe current write index on a data stream cannot be cloned. In order to clone\nthe current write index, the data stream must first be\n<<data-streams-rollover,rolled over>> so that a new write index is created\nand then the previous write index can be cloned.\n\n[[clone-index-api-desc]]\n==== {api-description-title}\n\nUse the clone index API to clone an existing index into a new index, where each\noriginal primary shard is cloned into a new primary shard in the new index.\n\n[IMPORTANT]\n====\n{es} doesn't apply index templates to the resulting index. The API\nalso doesn't copy index metadata from the original index. Index metadata\nincludes aliases, {ilm-init} phase definitions, and {ccr-init} follower\ninformation. For example, if you clone a {ccr-init} follower index, the\nresulting clone won't be a follower index.\n\nThe clone API copies most index settings from the source index to the resulting\nindex, with the exception of `index.number_of_replicas` and\n`index.auto_expand_replicas`. To set the number of replicas in the resulting\nindex, configure these settings in the clone request.\n====\n\n[[cloning-works]]\n===== How cloning works\n\nCloning works as follows:\n\n* First, it creates a new target index with the same definition as the source\n  index.\n\n* Then it hard-links segments from the source index into the target index. (If\n  the file system doesn't support hard-linking, then all segments are copied\n  into the new index, which is a much more time consuming process.)\n\n* Finally, it recovers the target index as though it were a closed index which\n  had just been re-opened.\n\n[[clone-index]]\n===== Clone an index\n\nTo clone `my_source_index` into a new index called `my_target_index`, issue\nthe following request:\n\n[source,console]\n--------------------------------------------------\nPOST /my_source_index/_clone/my_target_index\n--------------------------------------------------\n// TEST[continued]\n\nThe above request returns immediately once the target index has been added to\nthe cluster state -- it doesn't wait for the clone operation to start.\n\n[IMPORTANT]\n=====================================\n\nIndices can only be cloned if they meet the following requirements:\n\n* The target index must not exist.\n\n* The source index must have the same number of primary shards as the target index.\n\n* The node handling the clone process must have sufficient free disk space to\n  accommodate a second copy of the existing index.\n\n=====================================\n\nThe `_clone` API is similar to the <<indices-create-index, `create index` API>>\nand accepts `settings` and `aliases` parameters for the target index:\n\n[source,console]\n--------------------------------------------------\nPOST /my_source_index/_clone/my_target_index\n{\n  \"settings\": {\n    \"index.number_of_shards\": 5 <1>\n  },\n  \"aliases\": {\n    \"my_search_indices\": {}\n  }\n}\n--------------------------------------------------\n// TEST[s/^/PUT my_source_index\\n{\"settings\": {\"index.blocks.write\": true, \"index.number_of_shards\": \"5\"}}\\n/]\n\n<1> The number of shards in the target index. This must be equal to the\n    number of shards in the source index.\n\n\nNOTE: Mappings may not be specified in the `_clone` request. The mappings of\nthe source index will be used for the target index.\n\n[[monitor-cloning]]\n===== Monitor the cloning process\n\nThe cloning process can be monitored with the <<cat-recovery,`_cat recovery`\nAPI>>, or the <<cluster-health, `cluster health` API>> can be used to wait\nuntil all primary shards have been allocated by setting the  `wait_for_status`\nparameter to `yellow`.\n\nThe `_clone` API returns as soon as the target index has been added to the\ncluster state, before any shards have been allocated. At this point, all\nshards are in the state `unassigned`. If, for any reason, the target index\ncan't be allocated, its primary shard will remain `unassigned` until it\ncan be allocated on that node.\n\nOnce the primary shard is allocated, it moves to state `initializing`, and the\nclone process begins. When the clone operation completes, the shard will\nbecome `active`. At that point, {es} will try to allocate any\nreplicas and may decide to relocate the primary shard to another node.\n\n[[clone-wait-active-shards]]\n===== Wait for active shards\n\nBecause the clone operation creates a new index to clone the shards to,\nthe <<create-index-wait-for-active-shards,wait for active shards>> setting\non index creation applies to the clone index action as well.\n\n\n[[clone-index-api-path-params]]\n==== {api-path-parms-title}\n\n`<index>`::\n(Required, string)\nName of the source index to clone.\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=target-index]\n\n\n[[clone-index-api-query-params]]\n==== {api-query-parms-title}\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=wait_for_active_shards]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=timeoutparms]\n\n[role=\"child_attributes\"]\n[[clone-index-api-request-body]]\n==== {api-request-body-title}\n\n`aliases`::\n(Optional, object of objects) Aliases for the resulting index.\n+\ninclude::{es-ref-dir}/indices/create-index.asciidoc[tag=aliases-props]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=target-index-settings]\n"
}