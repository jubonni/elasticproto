{
    "meta": {
        "timestamp": "2024-11-01T03:07:08.812272",
        "size": 9629,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/built-in-users.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "built-in-users",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[built-in-users]]\n=== Built-in users\n\nThe {stack-security-features} provide built-in user credentials to help you get\nup and running. These users have a fixed set of privileges and cannot be\nauthenticated until their passwords have been set. The `elastic` user can be\nused to <<set-built-in-user-passwords,set all of the built-in user passwords>>.\n\n.Create users with minimum privileges\n****\nThe built-in users serve specific purposes and are not intended for general\nuse. In particular, do not use the `elastic` superuser unless full access to\nthe cluster is absolutely required. On self-managed deployments, use the\n`elastic` user to create users that have the minimum necessary roles or \nprivileges for their activities.\n****\n\n[NOTE]\n====\nOn {ecloud}, {ref}/operator-privileges.html[operator privileges] are enabled.\nThese privileges restrict some infrastructure functionality, even if a role\nwould otherwise permit a user to complete an administrative task.\n====\n\n`elastic`:: A built-in <<built-in-roles,superuser>>.\n+\nIMPORTANT: Anyone who can log in as the `elastic` user has direct read-only\naccess to restricted indices, such as `.security`. This user also has the ability\nto manage security and create roles with unlimited privileges.\n\n`kibana_system`:: The user Kibana uses to connect and communicate with {es}.\n`logstash_system`:: The user Logstash uses when storing monitoring information in {es}.\n`beats_system`:: The user the Beats use when storing monitoring information in {es}.\n`apm_system`:: The user the APM server uses when storing monitoring information in {es}.\n`remote_monitoring_user`:: The user {metricbeat} uses when collecting and\nstoring monitoring information in {es}. It has the `remote_monitoring_agent` and\n`remote_monitoring_collector` built-in roles.\n\n[discrete]\n[[built-in-user-explanation]]\n==== How the built-in users work\nThese built-in users are stored in a special `.security` index, which is managed\nby {es}. If a built-in user is disabled or its password\nchanges, the change is automatically reflected on each node in the cluster. If\nyour `.security` index is deleted or restored from a snapshot, however, any\nchanges you have applied are lost.\n\nAlthough they share the same API, the built-in users are separate and distinct\nfrom users managed by the <<native-realm, native realm>>. Disabling the native\nrealm will not have any effect on the built-in users. The built-in users can\nbe disabled individually, using the\n<<security-api-disable-user,disable users API>>.\n\n[discrete]\n[[bootstrap-elastic-passwords]]\n==== The Elastic bootstrap password\n\nWhen you install {es}, if the `elastic` user does not already have a password,\nit uses a default bootstrap password. The bootstrap password is a transient\npassword that enables you to run the tools that set all the built-in user passwords.\n\nBy default, the bootstrap password is derived from a randomized `keystore.seed`\nsetting, which is added to the keystore during installation. You do not need\nto know or change this bootstrap password. If you have defined a\n`bootstrap.password` setting in the keystore, however, that value is used instead.\nFor more information about interacting with the keystore, see\n<<secure-settings>>.\n\nNOTE: After you <<set-built-in-user-passwords,set passwords for the built-in users>>,\nin particular for the `elastic` user, there is no further use for the bootstrap\npassword.\n\n[discrete]\n[[set-built-in-user-passwords]]\n==== Setting built-in user passwords\n\nYou must set the passwords for all built-in users.\n\nThe +elasticsearch-setup-passwords+ tool is the simplest method to set the\nbuilt-in users' passwords for the first time. It uses the `elastic` user's\nbootstrap password to run user management API requests. For example, you can run\nthe command in an \"interactive\" mode, which prompts you to enter new passwords\nfor the `elastic`, `kibana_system`, `logstash_system`, `beats_system`, `apm_system`,\nand `remote_monitoring_user` users:\n\n[source,shell]\n--------------------------------------------------\nbin/elasticsearch-setup-passwords interactive\n--------------------------------------------------\n\nFor more information about the command options, see\n<<setup-passwords,elasticsearch-setup-passwords>>.\n\nIMPORTANT: After you set a password for the `elastic` user, the bootstrap\npassword is no longer valid; you cannot run the `elasticsearch-setup-passwords`\ncommand a second time.\n\nAlternatively, you can set the initial passwords for the built-in users by using\nthe *Management > Users* page in {kib} or the\n<<security-api-change-password,change password API>>. These methods are\nmore complex. You must supply the `elastic` user and its bootstrap password to\nlog in to {kib} or run the API. This requirement means that you cannot use the\ndefault bootstrap password that is derived from the `keystore.seed` setting.\nInstead, you must explicitly set a `bootstrap.password` setting in the keystore\nbefore you start {es}. For example, the following command prompts you to enter a\nnew bootstrap password:\n\n[source,shell]\n----------------------------------------------------\nbin/elasticsearch-keystore add \"bootstrap.password\"\n----------------------------------------------------\n\nYou can then start {es} and {kib} and use the `elastic` user and bootstrap\npassword to log in to {kib} and change the passwords. Alternatively, you can\nsubmit Change Password API requests for each built-in user. These methods are\nbetter suited for changing your passwords after the initial setup is complete,\nsince at that point the bootstrap password is no longer required.\n\n[[add-built-in-user-passwords]]\n\n[discrete]\n[[add-built-in-user-kibana]]\n==== Adding built-in user passwords to {kib}\n\nAfter the `kibana_system` user password is set, you need to update the {kib} server\nwith the new password by setting `elasticsearch.password` in the `kibana.yml`\nconfiguration file:\n\n[source,yaml]\n-----------------------------------------------\nelasticsearch.password: kibanapassword\n-----------------------------------------------\n\nSee {kibana-ref}/using-kibana-with-security.html[Configuring security in {kib}].\n\n[discrete]\n[[add-built-in-user-logstash]]\n==== Adding built-in user passwords to {ls}\n\nThe `logstash_system` user is used internally within Logstash when\nmonitoring is enabled for Logstash.\n\nTo enable this feature in Logstash, you need to update the Logstash\nconfiguration with the new password by setting `xpack.monitoring.elasticsearch.password` in\nthe `logstash.yml` configuration file:\n\n[source,yaml]\n----------------------------------------------------------\nxpack.monitoring.elasticsearch.password: logstashpassword\n----------------------------------------------------------\n\nIf you have upgraded from an older version of {es}, the `logstash_system` user\nmay have defaulted to _disabled_ for security reasons. Once the password has\nbeen changed, you can enable the user via the following API call:\n\n[source,console]\n---------------------------------------------------------------------\nPUT _security/user/logstash_system/_enable\n---------------------------------------------------------------------\n\nSee {logstash-ref}/ls-security.html#ls-monitoring-user[Configuring credentials for {ls} monitoring].\n\n[discrete]\n[[add-built-in-user-beats]]\n==== Adding built-in user passwords to Beats\n\nThe `beats_system` user is used internally within Beats when monitoring is\nenabled for Beats.\n\nTo enable this feature in Beats, you need to update the configuration for each\nof your beats to reference the correct username and password. For example:\n\n[source,yaml]\n----------------------------------------------------------\nxpack.monitoring.elasticsearch.username: beats_system\nxpack.monitoring.elasticsearch.password: beatspassword\n----------------------------------------------------------\n\nFor example, see {metricbeat-ref}/monitoring.html[Monitoring {metricbeat}].\n\nThe `remote_monitoring_user` is used when {metricbeat} collects and stores\nmonitoring data for the {stack}. See <<monitoring-production>>.\n\nIf you have upgraded from an older version of {es}, then you may not have set a\npassword for the `beats_system` or `remote_monitoring_user` users. If this is\nthe case, then you should use the *Management > Users* page in {kib} or the\n<<security-api-change-password,change password API>> to set a password\nfor these users.\n\n[discrete]\n[[add-built-in-user-apm]]\n==== Adding built-in user passwords to APM\n\nThe `apm_system` user is used internally within APM when monitoring is enabled.\n\nTo enable this feature in APM, you need to update the\n`apm-server.yml` configuration file to\nreference the correct username and password. For example:\n\n[source,yaml]\n----------------------------------------------------------\nxpack.monitoring.elasticsearch.username: apm_system\nxpack.monitoring.elasticsearch.password: apmserverpassword\n----------------------------------------------------------\n\n\nIf you have upgraded from an older version of {es}, then you may not have set a\npassword for the `apm_system` user. If this is the case,\nthen you should use the *Management > Users* page in {kib} or the\n<<security-api-change-password,change password API>> to set a password\nfor these users.\n\n[discrete]\n[[disabling-default-password]]\n==== Disabling default password functionality\n[IMPORTANT]\n=============================================================================\nThis setting is deprecated. The elastic user no longer has a default password.\nThe password must be set before the user can be used.\nSee <<bootstrap-elastic-passwords>>.\n=============================================================================\n"
}