{
    "meta": {
        "timestamp": "2024-11-01T02:49:24.789085",
        "size": 11595,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-role-mapping.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "security-api-put-role-mapping",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[security-api-put-role-mapping]]\n=== Create or update role mappings API\n++++\n<titleabbrev>Create or update role mappings</titleabbrev>\n++++\n\nCreates and updates role mappings.\n\n[[security-api-put-role-mapping-request]]\n==== {api-request-title}\n\n`POST /_security/role_mapping/<name>` +\n\n`PUT /_security/role_mapping/<name>`\n\n\n[[security-api-put-role-mapping-prereqs]]\n==== {api-prereq-title}\n\n* To use this API, you must have at least the `manage_security` cluster privilege.\n\n[[security-api-put-role-mapping-desc]]\n==== {api-description-title}\n\nRole mappings define which roles are assigned to each user. Each mapping has\n_rules_ that identify users and a list of _roles_ that are granted to those users.\n\nThe role mapping APIs are generally the preferred way to manage role mappings\nrather than using <<mapping-roles-file,role mapping files>>.\nThe create or update role mappings API cannot update role mappings that are defined\nin role mapping files.\n\nNOTE: This API does not create roles. Rather, it maps users to existing roles.\nRoles can be created by using the <<security-api-put-role,create or update\nroles API>> or <<roles-management-file,roles files>>.\n\nFor more information, see <<mapping-roles>>.\n\n[[_role_templates]]\n===== Role templates\n\nThe most common use for role mappings is to create a mapping from a known value\non the user to a fixed role name. For example, all users in the\n`cn=admin,dc=example,dc=com` LDAP group should be given the `superuser` role in\n{es}. The `roles` field is used for this purpose.\n\nFor more complex needs, it is possible to use Mustache templates to dynamically\ndetermine the names of the roles that should be granted to the user. The\n`role_templates` field is used for this purpose.\n\nNOTE: To use role templates successfully, the relevant scripting feature must be\nenabled. Otherwise, all attempts to create a role mapping with role templates\nfail. See <<allowed-script-types-setting>>.\n\nAll of the <<role-mapping-resources,user fields>> that are available in the\nrole mapping `rules` are also available in the role templates. Thus it is possible\nto assign a user to a role that reflects their `username`, their `groups`, or the\nname of the `realm` to which they authenticated.\n\nBy default a template is evaluated to produce a single string that is the name\nof the role which should be assigned to the user. If the `format` of the template\nis set to `\"json\"` then the template is expected to produce a JSON string or an\narray of JSON strings for the role names.\n\n[[security-api-put-role-mapping-path-params]]\n==== {api-path-parms-title}\n\n`name`::\n (string) The distinct name that identifies the role mapping. The name is\n  used solely as an identifier to facilitate interaction via the API; it does\n  not affect the behavior of the mapping in any way.\n\n\n[[security-api-put-role-mapping-request-body]]\n==== {api-request-body-title}\n\nThe following parameters can be specified in the body of a PUT or POST request\nand pertain to adding a role mapping:\n\n`enabled`::\n(Required, Boolean) Mappings that have `enabled` set to `false` are ignored when\nrole mapping is performed.\n\n`metadata`::\n(object) Additional metadata that helps define which roles are assigned to each\nuser. Within the `metadata` object, keys beginning with `_` are reserved for\nsystem usage.\n\n`roles`::\n(list of strings) A list of role names that are granted to the users that match\nthe role mapping rules.\n_Exactly one of `roles` or `role_templates` must be specified_.\n\n`role_templates`::\n(list of objects) A list of mustache templates that will be evaluated to\ndetermine the roles names that should granted to the users that match the role\nmapping rules.\nThe format of these objects is defined below.\n_Exactly one of `roles` or `role_templates` must be specified_.\n\n`rules`::\n(Required, object) The rules that determine which users should be matched by the\nmapping. A rule is a logical condition that is expressed by using a JSON DSL.\nSee  <<role-mapping-resources>>.\n\n[[security-api-put-role-mapping-example]]\n==== {api-examples-title}\n\nThe following example assigns the \"user\" role to all users:\n\n[source,console]\n------------------------------------------------------------\nPOST /_security/role_mapping/mapping1\n{\n  \"roles\": [ \"user\"],\n  \"enabled\": true, <1>\n  \"rules\": {\n    \"field\" : { \"username\" : \"*\" }\n  },\n  \"metadata\" : { <2>\n    \"version\" : 1\n  }\n}\n------------------------------------------------------------\n<1> Mappings that have `enabled` set to `false` are ignored when role mapping\n    is performed.\n<2> Metadata is optional.\n\nA successful call returns a JSON structure that shows whether the mapping has\nbeen created or updated.\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"role_mapping\" : {\n    \"created\" : true <1>\n  }\n}\n--------------------------------------------------\n\n<1> When an existing mapping is updated, `created` is set to false.\n\nThe following example assigns the \"user\" and \"admin\" roles to specific users:\n\n[source,console]\n--------------------------------------------------\nPOST /_security/role_mapping/mapping2\n{\n  \"roles\": [ \"user\", \"admin\" ],\n  \"enabled\": true,\n  \"rules\": {\n     \"field\" : { \"username\" : [ \"esadmin01\", \"esadmin02\" ] }\n  }\n}\n--------------------------------------------------\n\nThe following example matches users who authenticated against a specific realm:\n[source,console]\n------------------------------------------------------------\nPOST /_security/role_mapping/mapping3\n{\n  \"roles\": [ \"ldap-user\" ],\n  \"enabled\": true,\n  \"rules\": {\n    \"field\" : { \"realm.name\" : \"ldap1\" }\n  }\n}\n------------------------------------------------------------\n\nThe following example matches any user where either the username is `esadmin`\nor the user is in the `cn=admin,dc=example,dc=com` group:\n\n[source,console]\n------------------------------------------------------------\nPOST /_security/role_mapping/mapping4\n{\n  \"roles\": [ \"superuser\" ],\n  \"enabled\": true,\n  \"rules\": {\n    \"any\": [\n      {\n        \"field\": {\n          \"username\": \"esadmin\"\n        }\n      },\n      {\n        \"field\": {\n          \"groups\": \"cn=admins,dc=example,dc=com\"\n        }\n      }\n    ]\n  }\n}\n------------------------------------------------------------\n\nThe example above is useful when the group names in your identity management\nsystem (such as Active Directory, or a SAML Identity Provider) do not have a\n1-to-1 correspondence with the names of roles in {es}. The role mapping is the\nmeans by which you link a _group name_ with a _role name_.\n\nIf there are multiple groups, you can use array syntax for the groups field.\nThis matches any of the groups (rather than all of the groups):\n\n[source,console]\n------------------------------------------------------------\nPOST /_security/role_mapping/mapping4\n{\n  \"roles\": [ \"superuser\" ],\n  \"enabled\": true,\n  \"rules\": {\n    \"any\": [\n      {\n        \"field\": {\n          \"username\": \"esadmin\"\n        }\n      },\n      {\n        \"field\": {\n          \"groups\": [\n               \"cn=admins,dc=example,dc=com\",\n               \"cn=other,dc=example,dc=com\"\n            ]\n        }\n      }\n    ]\n  }\n}\n------------------------------------------------------------\n\nHowever, in rare cases the names of your groups may be an exact match for the\nnames of your {es} roles. This can be the case when your SAML Identity Provider\nincludes its own \"group mapping\" feature and can be configured to release {es}\nrole names in the user's SAML attributes.\n\nIn these cases it is possible to use a template that treats the group names as\nrole names.\n\n*Note*: This should only be done if you intend to define roles for all of the\nprovided groups. Mapping a user to a large number of unnecessary or undefined\nroles is inefficient and can have a negative effect on system performance.\nIf you only need to map a subset of the groups, then you should do this\nusing explicit mappings.\n\n[source,console]\n------------------------------------------------------------\nPOST /_security/role_mapping/mapping5\n{\n  \"role_templates\": [\n    {\n      \"template\": { \"source\": \"{{#tojson}}groups{{/tojson}}\" }, <1>\n      \"format\" : \"json\" <2>\n    }\n  ],\n  \"rules\": {\n    \"field\" : { \"realm.name\" : \"saml1\" }\n  },\n  \"enabled\": true\n}\n------------------------------------------------------------\n<1> The `tojson` mustache function is used to convert the list of\n    group names into a valid JSON array.\n<2> Because the template produces a JSON array, the format must be\n    set to `json`.\n\nThe following example matches users within a specific LDAP sub-tree:\n\n[source,console]\n------------------------------------------------------------\nPOST /_security/role_mapping/mapping6\n{\n  \"roles\": [ \"example-user\" ],\n  \"enabled\": true,\n  \"rules\": {\n    \"field\" : { \"dn\" : \"*,ou=subtree,dc=example,dc=com\" }\n  }\n}\n------------------------------------------------------------\n\nThe following example matches users within a particular LDAP sub-tree in a\nspecific realm:\n\n[source,console]\n------------------------------------------------------------\nPOST /_security/role_mapping/mapping7\n{\n  \"roles\": [ \"ldap-example-user\" ],\n  \"enabled\": true,\n  \"rules\": {\n    \"all\": [\n      { \"field\" : { \"dn\" : \"*,ou=subtree,dc=example,dc=com\" } },\n      { \"field\" : { \"realm.name\" : \"ldap1\" } }\n    ]\n  }\n}\n------------------------------------------------------------\n\nThe rules can be more complex and include wildcard matching. For example, the\nfollowing mapping matches any user where *all* of these conditions are met:\n\n- the _Distinguished Name_ matches the pattern `*,ou=admin,dc=example,dc=com`,\n  or the username is `es-admin`, or the username is `es-system`\n- the user in the `cn=people,dc=example,dc=com` group\n- the user does not have a `terminated_date`\n\n\n[source,console]\n------------------------------------------------------------\nPOST /_security/role_mapping/mapping8\n{\n  \"roles\": [ \"superuser\" ],\n  \"enabled\": true,\n  \"rules\": {\n    \"all\": [\n      {\n        \"any\": [\n          {\n            \"field\": {\n              \"dn\": \"*,ou=admin,dc=example,dc=com\"\n            }\n          },\n          {\n            \"field\": {\n              \"username\": [ \"es-admin\", \"es-system\" ]\n            }\n          }\n        ]\n      },\n      {\n        \"field\": {\n          \"groups\": \"cn=people,dc=example,dc=com\"\n        }\n      },\n      {\n        \"except\": {\n          \"field\": {\n            \"metadata.terminated_date\": null\n          }\n        }\n      }\n    ]\n  }\n}\n------------------------------------------------------------\n\nA templated role can be used to automatically map every user to their own\ncustom role. The role itself can be defined through the\n<<security-api-put-role, Roles API>> or using a\n<<implementing-custom-roles-provider,custom roles provider>>.\n\nIn this example every user who authenticates using the \"cloud-saml\" realm\nwill be automatically mapped to two roles - the `\"saml_user\"` role and a\nrole that is their username prefixed with `_user_`.\nAs an example, the user `nwong` would be assigned the `saml_user` and\n`_user_nwong` roles.\n\n[source,console]\n------------------------------------------------------------\nPOST /_security/role_mapping/mapping9\n{\n  \"rules\": { \"field\": { \"realm.name\": \"cloud-saml\" } },\n  \"role_templates\": [\n    { \"template\": { \"source\" : \"saml_user\" } }, <1>\n    { \"template\": { \"source\" : \"_user_{{username}}\" } }\n  ],\n  \"enabled\": true\n}\n------------------------------------------------------------\n<1> Because it is not possible to specify both `roles` and `role_templates` in\n    the same role mapping, we can apply a \"fixed name\" role by using a template\n    that has no substitutions.\n"
}