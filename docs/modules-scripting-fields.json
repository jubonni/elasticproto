{
    "meta": {
        "size": 10283,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-fields.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "modules-scripting-fields",
        "version": "8.15"
    },
    "doc": "[[modules-scripting-fields]]\n== Accessing document fields and special variables\n\nDepending on where a script is used, it will have access to certain special\nvariables and document fields.\n\n[discrete]\n== Update scripts\n\nA script used in the <<docs-update,update>>,\n<<docs-update-by-query,update-by-query>>, or <<docs-reindex,reindex>>\nAPI will have access to the `ctx` variable which exposes:\n\n[horizontal]\n`ctx._source`::     Access to the document <<mapping-source-field,`_source` field>>.\n`ctx.op`::          The operation that should be applied to the document: `index` or `delete`.\n`ctx._index` etc::  Access to <<mapping-fields,document metadata fields>>, some of which may be read-only.\n\nThese scripts do not have access to the `doc` variable and have to use `ctx` to access the documents they operate on.\n\n[discrete]\n== Search and aggregation scripts\n\nWith the exception of <<script-fields,script fields>> which are\nexecuted once per search hit, scripts used in search and aggregations will be\nexecuted once for every document which might match a query or an aggregation.\nDepending on how many documents you have, this could mean millions or billions\nof executions: these scripts need to be fast!\n\nField values can be accessed from a script using\n<<modules-scripting-doc-vals,doc-values>>,\n<<modules-scripting-source, the `_source` field>>, or\n<<modules-scripting-stored, stored fields>>,\neach of which is explained below.\n\n[[scripting-score]]\n[discrete]\n=== Accessing the score of a document within a script\n\nScripts used in the <<query-dsl-function-score-query,`function_score` query>>,\nin <<sort-search-results,script-based sorting>>, or in\n<<search-aggregations,aggregations>> have access to the `_score` variable which\nrepresents the current relevance score of a document.\n\nHere's an example of using a script in a\n<<query-dsl-function-score-query,`function_score` query>> to alter the\nrelevance `_score` of each document:\n\n[source,console]\n-------------------------------------\nPUT my-index-000001/_doc/1?refresh\n{\n  \"text\": \"quick brown fox\",\n  \"popularity\": 1\n}\n\nPUT my-index-000001/_doc/2?refresh\n{\n  \"text\": \"quick fox\",\n  \"popularity\": 5\n}\n\nGET my-index-000001/_search\n{\n  \"query\": {\n    \"function_score\": {\n      \"query\": {\n        \"match\": {\n          \"text\": \"quick brown fox\"\n        }\n      },\n      \"script_score\": {\n        \"script\": {\n          \"lang\": \"expression\",\n          \"source\": \"_score * doc['popularity']\"\n        }\n      }\n    }\n  }\n}\n-------------------------------------\n\n[discrete]\n[[scripting-term-statistics]]\n=== Accessing term statistics of a document within a script\n\nScripts used in a <<query-dsl-script-score-query,`script_score`>> query have access to the `_termStats` variable which provides statistical information about the terms in the child query.\n\nIn the following example, `_termStats` is used within a <<query-dsl-script-score-query,`script_score`>> query to retrieve the average term frequency for the terms `quick`, `brown`, and `fox` in the `text` field:\n\n[source,console]\n-------------------------------------\nPUT my-index-000001/_doc/1?refresh\n{\n  \"text\": \"quick brown fox\"\n}\n\nPUT my-index-000001/_doc/2?refresh\n{\n  \"text\": \"quick fox\"\n}\n\nGET my-index-000001/_search\n{\n  \"query\": {\n    \"script_score\": {\n      \"query\": { <1>\n        \"match\": {\n          \"text\": \"quick brown fox\"\n        }\n      },\n      \"script\": {\n        \"source\": \"_termStats.termFreq().getAverage()\" <2>\n      }\n    }\n  }\n}\n-------------------------------------\n\n<1> Child query used to infer the field and the terms considered in term statistics.\n\n<2> The script calculates the average document frequency for the terms in the query using `_termStats`.\n\n`_termStats` provides access to the following functions for working with term statistics:\n\n- `uniqueTermsCount`: Returns the total number of unique terms in the query. This value is the same across all documents.\n- `matchedTermsCount`: Returns the count of query terms that matched within the current document.\n- `docFreq`: Provides document frequency statistics for the terms in the query, indicating how many documents contain each term. This value is consistent across all documents.\n- `totalTermFreq`: Provides the total frequency of terms across all documents, representing how often each term appears in the entire corpus. This value is consistent across all documents.\n- `termFreq`: Returns the frequency of query terms within the current document, showing how often each term appears in that document.\n\n[NOTE]\n.Functions returning aggregated statistics\n===================================================\n\nThe `docFreq`, `termFreq` and `totalTermFreq` functions return objects that represent statistics across all terms of the child query.\n\nStatistics provides support for the following methods:\n\n`getAverage()`: Returns the average value of the metric.\n`getMin()`: Returns the minimum value of the metric.\n`getMax()`: Returns the maximum value of the metric.\n`getSum()`: Returns the sum of the metric values.\n`getCount()`: Returns the count of terms included in the metric calculation.\n\n===================================================\n\n\n[NOTE]\n.Painless language required\n===================================================\n\nThe `_termStats` variable is only available when using the <<modules-scripting-painless, Painless>> scripting language.\n\n===================================================\n\n[discrete]\n[[modules-scripting-doc-vals]]\n=== Doc values\n\nBy far the fastest most efficient way to access a field value from a\nscript is to use the `doc['field_name']` syntax, which retrieves the field\nvalue from <<doc-values,doc values>>. Doc values are a columnar field value\nstore, enabled by default on all fields except for <<text,analyzed `text` fields>>.\n\n[source,console]\n-------------------------------\nPUT my-index-000001/_doc/1?refresh\n{\n  \"cost_price\": 100\n}\n\nGET my-index-000001/_search\n{\n  \"script_fields\": {\n    \"sales_price\": {\n      \"script\": {\n        \"lang\":   \"expression\",\n        \"source\": \"doc['cost_price'] * markup\",\n        \"params\": {\n          \"markup\": 0.2\n        }\n      }\n    }\n  }\n}\n-------------------------------\n\nDoc-values can only return \"simple\" field values like numbers, dates, geo-\npoints, terms, etc, or arrays of these values if the field is multi-valued.\nIt cannot return JSON objects.\n\n[NOTE]\n.Missing fields\n===================================================\n\nThe `doc['field']` will throw an error if `field` is missing from the mappings.\nIn `painless`, a check can first be done with `doc.containsKey('field')` to guard\naccessing the `doc` map. Unfortunately, there is no way to check for the\nexistence of the field in mappings in an `expression` script.\n\n===================================================\n\n[NOTE]\n.Doc values and `text` fields\n===================================================\n\nThe `doc['field']` syntax can also be used for <<text,analyzed `text` fields>>\nif <<fielddata-mapping-param,`fielddata`>> is enabled, but *BEWARE*: enabling fielddata on a\n`text` field requires loading all of the terms into the JVM heap, which can be\nvery expensive both in terms of memory and CPU. It seldom makes sense to\naccess `text` fields from scripts.\n\n===================================================\n\n[discrete]\n[[modules-scripting-source]]\n=== The document `_source`\n\nThe document <<mapping-source-field,`_source`>> can be accessed using the\n`_source.field_name` syntax. The `_source` is loaded as a map-of-maps, so\nproperties within object fields can be accessed as, for example,\n`_source.name.first`.\n\n[IMPORTANT]\n.Prefer doc-values to _source\n=========================================================\n\nAccessing the `_source` field is much slower than using doc-values. The\n_source field is optimised for returning several fields per result, while doc\nvalues are optimised for accessing the value of a specific field in many\ndocuments.\n\nIt makes sense to use `_source` when generating a\n<<script-fields,script field>> for the top ten hits from a\nsearch result but, for other search and aggregation use cases, always prefer\nusing doc values.\n=========================================================\n\n\nFor instance:\n\n[source,console]\n-------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"first_name\": {\n        \"type\": \"text\"\n      },\n      \"last_name\": {\n        \"type\": \"text\"\n      }\n    }\n  }\n}\n\nPUT my-index-000001/_doc/1?refresh\n{\n  \"first_name\": \"Barry\",\n  \"last_name\": \"White\"\n}\n\nGET my-index-000001/_search\n{\n  \"script_fields\": {\n    \"full_name\": {\n      \"script\": {\n        \"lang\": \"painless\",\n        \"source\": \"params._source.first_name + ' ' + params._source.last_name\"\n      }\n    }\n  }\n}\n-------------------------------\n\n[discrete]\n[[modules-scripting-stored]]\n=== Stored fields\n\n_Stored fields_ -- fields explicitly marked as\n<<mapping-store,`\"store\": true`>> in the mapping -- can be accessed using the\n`_fields['field_name'].value` or `_fields['field_name']` syntax:\n\n[source,console]\n-------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"full_name\": {\n        \"type\": \"text\",\n        \"store\": true\n      },\n      \"title\": {\n        \"type\": \"text\",\n        \"store\": true\n      }\n    }\n  }\n}\n\nPUT my-index-000001/_doc/1?refresh\n{\n  \"full_name\": \"Alice Ball\",\n  \"title\": \"Professor\"\n}\n\nGET my-index-000001/_search\n{\n  \"script_fields\": {\n    \"name_with_title\": {\n      \"script\": {\n        \"lang\": \"painless\",\n        \"source\": \"params._fields['title'].value + ' ' + params._fields['full_name'].value\"\n      }\n    }\n  }\n}\n-------------------------------\n\n[TIP]\n.Stored vs `_source`\n=======================================================\n\nThe `_source` field is just a special stored field, so the performance is\nsimilar to that of other stored fields. The `_source` provides access to the\noriginal document body that was indexed (including the ability to distinguish\n`null` values from empty fields, single-value arrays from plain scalars, etc).\n\nThe only time it really makes sense to use stored fields instead of the\n`_source` field is when the `_source` is very large and it is less costly to\naccess a few small stored fields instead of the entire `_source`.\n\n=======================================================\n"
}