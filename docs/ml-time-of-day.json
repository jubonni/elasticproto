{
    "meta": {
        "size": 4329,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-time-of-day.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "ml-time-of-day",
        "version": "8.15"
    },
    "doc": "[\"appendix\",role=\"exclude\",id=\"ml-time-functions\"]\n= Time functions\n\nThe time functions detect events that happen at unusual times, either of the day\nor of the week. These functions can be used to find unusual patterns of \nbehavior, typically associated with suspicious user activity.\n\nThe {ml-features} include the following time functions:\n\n* <<ml-time-of-day,`time_of_day`>>\n* <<ml-time-of-week,`time_of_week`>>\n\n\n[NOTE]\n====\n* You cannot create forecasts for {anomaly-jobs} that contain time\nfunctions. \n* The `time_of_day` function is not aware of the difference between days, for\ninstance work days and weekends. When modeling different days, use the\n`time_of_week` function. In general, the `time_of_week` function is more suited\nto modeling the behavior of people rather than machines, as people vary their\nbehavior according to the day of the week.\n* Shorter bucket spans (for example, 10 minutes) are recommended when performing\na `time_of_day` or `time_of_week` analysis. The time of the events being modeled\nare not affected by the bucket span, but a shorter bucket span enables quicker\nalerting on unusual events.\n* Unusual events are flagged based on the previous pattern of the data, not on\nwhat we might think of as unusual based on human experience. So, if events\ntypically occur between 3 a.m. and 5 a.m., an event occurring at 3 p.m. is \nflagged as unusual.\n* When Daylight Saving Time starts or stops, regular events can be flagged as\nanomalous. This situation occurs because the actual time of the event (as\nmeasured against a UTC baseline) has changed. This situation is treated as a\nstep change in behavior and the new times will be learned quickly.\n====\n\n[discrete]\n[[ml-time-of-day]]\n== Time_of_day\n\nThe `time_of_day` function detects when events occur that are outside normal\nusage patterns. For example, it detects unusual activity in the middle of the\nnight.\n\nThe function expects daily behavior to be similar. If you expect the behavior of\nyour data to differ on Saturdays compared to Wednesdays, the `time_of_week`\nfunction is more appropriate.\n\nThis function supports the following properties:\n\n* `by_field_name` (optional)\n* `over_field_name` (optional)\n* `partition_field_name` (optional)\n\nFor more information about those properties, see the\n{ref}/ml-put-job.html#ml-put-job-request-body[create {anomaly-jobs} API].\n\n.Example 1: Analyzing events with the time_of_day function\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"time_of_day\",\n  \"by_field_name\" : \"process\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf you use this `time_of_day` function in a detector in your {anomaly-job}, it\nmodels when events occur throughout a day for each process. It detects when an\nevent occurs for a process that is at an unusual time in the day compared to\nits past behavior.\n\n[discrete]\n[[ml-time-of-week]]\n== Time_of_week\n\nThe `time_of_week` function detects when events occur that are outside normal\nusage patterns. For example, it detects login events on the weekend.\n\nIMPORTANT: The `time_of_week` function models time in epoch seconds modulo the \n  duration of a week in seconds. It means that the `typical` and `actual` values \n  are seconds after a whole number of weeks since 1/1/1970 in UTC which is a \n  Thursday. For example, a value of `475` is 475 seconds after midnight on \n  Thursday in UTC. \n\nThis function supports the following properties:\n\n* `by_field_name` (optional)\n* `over_field_name` (optional)\n* `partition_field_name` (optional)\n\nFor more information about those properties, see the\n{ref}/ml-put-job.html#ml-put-job-request-body[create {anomaly-jobs} API].\n\n.Example 2: Analyzing events with the time_of_week function\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"time_of_week\",\n  \"by_field_name\" : \"eventcode\",\n  \"over_field_name\" : \"workstation\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf you use this `time_of_week` function in a detector in your {anomaly-job}, it\nmodels when events occur throughout the week for each `eventcode`. It detects\nwhen a workstation event occurs at an unusual time during the week for that\n`eventcode` compared to other workstations. It detects events for a\nparticular workstation that are outside the normal usage pattern.\n\n\n"
}