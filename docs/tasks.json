{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.700587",
        "size": 11691,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "tasks",
        "version": "8.15"
    },
    "doc": "[[tasks]]\n=== Task management API\n++++\n<titleabbrev>Task management</titleabbrev>\n++++\n\nbeta::[\"The task management API is new and should still be considered a beta feature. The API may change in ways that are not backwards compatible.\",{es-issue}51628]\n\nReturns information about the tasks currently executing in the cluster.\n\n[[tasks-api-request]]\n==== {api-request-title}\n\n`GET /_tasks/<task_id>`\n\n`GET /_tasks`\n\n[[tasks-api-prereqs]]\n==== {api-prereq-title}\n\n* If the {es} {security-features} are enabled, you must have the `monitor` or\n`manage` <<privileges-list-cluster,cluster privilege>> to use this API.\n\n[[tasks-api-desc]]\n==== {api-description-title}\n\nThe task management API returns information\nabout tasks currently executing\non one or more nodes in the cluster.\n\n\n[[tasks-api-path-params]]\n==== {api-path-parms-title}\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=task-id]\n\n\n[[tasks-api-query-params]]\n==== {api-query-parms-title}\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=actions]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=detailed]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=group-by]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=nodes]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=parent-task-id]\n\n`timeout`::\n(Optional, <<time-units, time units>>)\nPeriod to wait for each node to respond. If a node does not respond before its\ntimeout expires, the response does not include its information. However, timed out\nnodes are included in the response's `node_failures` property. Defaults to `30s`.\n\n`wait_for_completion`::\n(Optional, Boolean) If `true`, the request blocks until all found tasks are complete.\nDefaults to `false`.\n\n[[tasks-api-response-codes]]\n==== {api-response-codes-title}\n\n// tag::tasks-api-404[]\n`404` (Missing resources)::\nIf `<task_id>` is specified but not found, this code indicates that there\nare no resources that match the request.\n// end::tasks-api-404[]\n\n[[tasks-api-examples]]\n==== {api-examples-title}\n\n[source,console]\n--------------------------------------------------\nGET _tasks <1>\nGET _tasks?nodes=nodeId1,nodeId2 <2>\nGET _tasks?nodes=nodeId1,nodeId2&actions=cluster:* <3>\n--------------------------------------------------\n// TEST[skip:No tasks to retrieve]\n\n<1> Retrieves all tasks currently running on all nodes in the cluster.\n<2> Retrieves all tasks running on nodes `nodeId1` and `nodeId2`. See <<cluster-nodes>> for more info about how to select individual nodes.\n<3> Retrieves all cluster-related tasks running on nodes `nodeId1` and `nodeId2`.\n\nThe API returns the following result:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"nodes\" : {\n    \"oTUltX4IQMOUUVeiohTt8A\" : {\n      \"name\" : \"H5dfFeA\",\n      \"transport_address\" : \"127.0.0.1:9300\",\n      \"host\" : \"127.0.0.1\",\n      \"ip\" : \"127.0.0.1:9300\",\n      \"tasks\" : {\n        \"oTUltX4IQMOUUVeiohTt8A:124\" : {\n          \"node\" : \"oTUltX4IQMOUUVeiohTt8A\",\n          \"id\" : 124,\n          \"type\" : \"direct\",\n          \"action\" : \"cluster:monitor/tasks/lists[n]\",\n          \"start_time_in_millis\" : 1458585884904,\n          \"running_time_in_nanos\" : 47402,\n          \"cancellable\" : false,\n          \"parent_task_id\" : \"oTUltX4IQMOUUVeiohTt8A:123\"\n        },\n        \"oTUltX4IQMOUUVeiohTt8A:123\" : {\n          \"node\" : \"oTUltX4IQMOUUVeiohTt8A\",\n          \"id\" : 123,\n          \"type\" : \"transport\",\n          \"action\" : \"cluster:monitor/tasks/lists\",\n          \"start_time_in_millis\" : 1458585884904,\n          \"running_time_in_nanos\" : 236042,\n          \"cancellable\" : false\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n===== Retrieve information from a particular task\n\nIt is also possible to retrieve information for a particular task. The following\nexample retrieves information about task `oTUltX4IQMOUUVeiohTt8A:124`:\n\n[source,console]\n--------------------------------------------------\nGET _tasks/oTUltX4IQMOUUVeiohTt8A:124\n--------------------------------------------------\n// TEST[catch:missing]\n\nIf the task isn't found, the API returns a 404.\n\nTo retrieve all children of a particular task:\n\n[source,console]\n--------------------------------------------------\nGET _tasks?parent_task_id=oTUltX4IQMOUUVeiohTt8A:123\n--------------------------------------------------\n\nIf the parent isn't found, the API does not return a 404.\n\n\n===== Get more information about tasks\n\nYou can also use the `detailed` request parameter to get more information about\nthe running tasks. This is useful to distinguish tasks from each other but\nis more costly to execute. For example, fetching all searches using the `detailed`\nrequest parameter:\n\n[source,console]\n--------------------------------------------------\nGET _tasks?actions=*search&detailed\n--------------------------------------------------\n// TEST[skip:No tasks to retrieve]\n\nThe API returns the following result:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"nodes\" : {\n    \"oTUltX4IQMOUUVeiohTt8A\" : {\n      \"name\" : \"H5dfFeA\",\n      \"transport_address\" : \"127.0.0.1:9300\",\n      \"host\" : \"127.0.0.1\",\n      \"ip\" : \"127.0.0.1:9300\",\n      \"tasks\" : {\n        \"oTUltX4IQMOUUVeiohTt8A:464\" : {\n          \"node\" : \"oTUltX4IQMOUUVeiohTt8A\",\n          \"id\" : 464,\n          \"type\" : \"transport\",\n          \"action\" : \"indices:data/read/search\",\n          \"description\" : \"indices[test], types[test], search_type[QUERY_THEN_FETCH], source[{\\\"query\\\":...}]\",\n          \"start_time_in_millis\" : 1483478610008,\n          \"running_time_in_nanos\" : 13991383,\n          \"cancellable\" : true,\n          \"cancelled\" : false\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\nThe new `description` field contains human readable text that identifies the\nparticular request that the task is performing such as identifying the search\nrequest being performed by a search task like the example above. Other kinds of\ntasks have different descriptions, like <<docs-reindex,`_reindex`>> which\nhas the source and the destination, or <<docs-bulk,`_bulk`>> which just has the\nnumber of requests and the destination indices. Many requests will only have an\nempty description because more detailed information about the request is not\neasily available or particularly helpful in identifying the request.\n\n[IMPORTANT]\n==============================\n\n`_tasks` requests with `detailed` may also return a `status`. This is a report\nof the internal status of the task. As such its format varies from task to task.\nWhile we try to keep the `status` for a particular task consistent from version\nto version this isn't always possible because we sometimes change the\nimplementation. In that case we might remove fields from the `status` for a\nparticular request so any parsing you do of the status might break in minor\nreleases.\n\n==============================\n\n\n===== Wait for completion\n\nThe task API can also be used to wait for completion of a particular task. The\nfollowing call will block for 10 seconds or until the task with id\n`oTUltX4IQMOUUVeiohTt8A:12345` is completed.\n\n[source,console]\n--------------------------------------------------\nGET _tasks/oTUltX4IQMOUUVeiohTt8A:12345?wait_for_completion=true&timeout=10s\n--------------------------------------------------\n// TEST[catch:missing]\n\nYou can also wait for all tasks for certain action types to finish. This command\nwill wait for all `reindex` tasks to finish:\n\n[source,console]\n--------------------------------------------------\nGET _tasks?actions=*reindex&wait_for_completion=true&timeout=10s\n--------------------------------------------------\n\n[[task-cancellation]]\n===== Task Cancellation\n\nIf a long-running task supports cancellation, it can be cancelled with the cancel\ntasks API. The following example cancels task `oTUltX4IQMOUUVeiohTt8A:12345`:\n\n[source,console]\n--------------------------------------------------\nPOST _tasks/oTUltX4IQMOUUVeiohTt8A:12345/_cancel\n--------------------------------------------------\n\nThe task cancellation command supports the same task selection parameters as the\nlist tasks command, so multiple tasks can be cancelled at the same time. For\nexample, the following command will cancel all reindex tasks running on the\nnodes `nodeId1` and `nodeId2`.\n\n[source,console]\n--------------------------------------------------\nPOST _tasks/_cancel?nodes=nodeId1,nodeId2&actions=*reindex\n--------------------------------------------------\n\nA task may continue to run for some time after it has been cancelled because it\nmay not be able to safely stop its current activity straight away, or because\n{es} must complete its work on other tasks before it can process the\ncancellation. The list tasks API will continue to list these cancelled tasks\nuntil they complete. The `cancelled` flag in the response to the list tasks API\nindicates that the cancellation command has been processed and the task will\nstop as soon as possible. To troubleshoot why a cancelled task does not\ncomplete promptly, use the list tasks API with the `?detailed` parameter to\nidentify the other tasks the system is running and also use the\n<<cluster-nodes-hot-threads>> API to obtain detailed information about the work\nthe system is doing instead of completing the cancelled task.\n\n===== Task Grouping\n\nThe task lists returned by task API commands can be grouped either by nodes\n(default) or by parent tasks using the `group_by` parameter. The following\ncommand will change the grouping to parent tasks:\n\n[source,console]\n--------------------------------------------------\nGET _tasks?group_by=parents\n--------------------------------------------------\n\nThe grouping can be disabled by specifying `none` as a `group_by` parameter:\n\n[source,console]\n--------------------------------------------------\nGET _tasks?group_by=none\n--------------------------------------------------\n\n\n===== Identifying running tasks\n\nThe `X-Opaque-Id` header, when provided on the HTTP request header, is going to\nbe returned as a header in the response as well as in the `headers` field for in\nthe task information. This allows to track certain calls, or associate certain\ntasks with the client that started them:\n\n[source,sh]\n--------------------------------------------------\ncurl -i -H \"X-Opaque-Id: 123456\" \"http://localhost:9200/_tasks?group_by=parents\"\n--------------------------------------------------\n//NOTCONSOLE\n\nThe API returns the following result:\n\n[source,js]\n--------------------------------------------------\nHTTP/1.1 200 OK\nX-Opaque-Id: 123456 <1>\ncontent-type: application/json; charset=UTF-8\ncontent-length: 831\n\n{\n  \"tasks\" : {\n    \"u5lcZHqcQhu-rUoFaqDphA:45\" : {\n      \"node\" : \"u5lcZHqcQhu-rUoFaqDphA\",\n      \"id\" : 45,\n      \"type\" : \"transport\",\n      \"action\" : \"cluster:monitor/tasks/lists\",\n      \"start_time_in_millis\" : 1513823752749,\n      \"running_time_in_nanos\" : 293139,\n      \"cancellable\" : false,\n      \"headers\" : {\n        \"X-Opaque-Id\" : \"123456\" <2>\n      },\n      \"children\" : [\n        {\n          \"node\" : \"u5lcZHqcQhu-rUoFaqDphA\",\n          \"id\" : 46,\n          \"type\" : \"direct\",\n          \"action\" : \"cluster:monitor/tasks/lists[n]\",\n          \"start_time_in_millis\" : 1513823752750,\n          \"running_time_in_nanos\" : 92133,\n          \"cancellable\" : false,\n          \"parent_task_id\" : \"u5lcZHqcQhu-rUoFaqDphA:45\",\n          \"headers\" : {\n            \"X-Opaque-Id\" : \"123456\" <3>\n          }\n        }\n      ]\n    }\n  }\n}\n--------------------------------------------------\n//NOTCONSOLE\n<1> id as a part of the response header\n<2> id for the tasks that was initiated by the REST request\n<3> the child task of the task initiated by the REST request\n"
}