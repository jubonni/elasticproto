{
    "meta": {
        "size": 3344,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/painless-ingest.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "painless-ingest",
        "version": "8.15"
    },
    "doc": "[[painless-ingest]]\n=== Using ingest processors in Painless\n\nSome {ref}/processors.html[ingest processors] expose behavior through Painless\nmethods that can be called in Painless scripts that execute in ingest pipelines.\n\n==== Method usage\n\nAll ingest methods available in Painless are scoped to the `Processors`\nnamespace. For example:\n\n[source,console]\n----\nPOST /_ingest/pipeline/_simulate?verbose\n{\n  \"pipeline\": {\n    \"processors\": [\n      {\n        \"script\": {\n          \"lang\": \"painless\",\n          \"source\": \"\"\"\n            long bytes = Processors.bytes(ctx.size);\n            ctx.size_in_bytes = bytes;\n          \"\"\"\n        }\n      }\n    ]\n  },\n  \"docs\": [\n    {\n      \"_source\": {\n        \"size\": \"1kb\"\n      }\n    }\n  ]\n}\n----\n\n==== Ingest methods reference\n\n===== Byte conversion\nUse the {ref}/bytes-processor.html[bytes processor] to return the number of\nbytes in the human-readable byte value supplied in the `value` parameter.\n\n[source,Painless]\n----\nlong bytes(String value);\n----\n\n===== Lowercase conversion\nUse the {ref}/lowercase-processor.html[lowercase processor] to convert the\nsupplied string in the `value` parameter to its lowercase equivalent.\n\n[source,Painless]\n----\nString lowercase(String value);\n----\n\n===== Uppercase conversion\nUse the {ref}/uppercase-processor.html[uppercase processor] to convert the\nsupplied string in the `value` parameter to its uppercase equivalent.\n\n[source,Painless]\n----\nString uppercase(String value);\n----\n\n===== JSON parsing\nUse the {ref}/json-processor.html[JSON processor] to convert JSON strings to structured\nJSON objects. The first `json` method accepts a map and a key. The processor converts\nthe JSON string in the map as specified by the `key` parameter to structured JSON content.\nThat content is added directly to the `map` object.\n\nThe second `json` method accepts a JSON string in the `value` parameter and\nreturns a structured JSON object.\n\n[source,Painless]\n----\nvoid json(Map<String, Object> map, String key);\nObject json(Object value);\n----\n\nYou can then add this object to the document through the context object:\n\n[source,Painless]\n----\nObject json = Processors.json(ctx.inputJsonString);\nctx.structuredJson = json;\n----\n\n===== URL decoding\nUse the {ref}/urldecode-processor.html[URL decode processor] to URL-decode the string\nsupplied in the `value` parameter.\n\n[source,Painless]\n----\nString urlDecode(String value);\n----\n\n===== URI decomposition\nUse the {ref}/uri-parts-processor.html[URI parts processor] to decompose the URI string\nsupplied in the `value` parameter. Returns a map of key-value pairs in which the key is\nthe name of the URI component such as `domain` or `path` and the value is the\ncorresponding value for that component.\n\n[source,Painless]\n----\nString uriParts(String value);\n----\n\n===== Network community ID\nUse the {ref}/community-id-processor.html[community ID processor] to compute the network\ncommunity ID for network flow data.\n\n[source,Painless]\n----\nString communityId(String sourceIpAddrString, String destIpAddrString, Object ianaNumber, Object transport, Object sourcePort, Object destinationPort, Object icmpType, Object icmpCode, int seed)\nString communityId(String sourceIpAddrString, String destIpAddrString, Object ianaNumber, Object transport, Object sourcePort, Object destinationPort, Object icmpType, Object icmpCode)\n----\n"
}