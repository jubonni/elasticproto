{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.482579",
        "size": 3968,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/esql-examples.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "esql-examples",
        "version": "8.15"
    },
    "doc": "[[esql-examples]]\n== {esql} examples\n\n++++\n<titleabbrev>Examples</titleabbrev>\n++++\n\n\n[discrete]\n=== Aggregating and enriching windows event logs\n\n[source,esql]\n----\nFROM logs-*\n| WHERE event.code IS NOT NULL\n| STATS event_code_count = COUNT(event.code) BY event.code,host.name\n| ENRICH win_events ON event.code WITH event_description\n| WHERE event_description IS NOT NULL and host.name IS NOT NULL\n| RENAME event_description AS event.description\n| SORT event_code_count DESC\n| KEEP event_code_count,event.code,host.name,event.description\n----\n\n* It starts by querying logs from indices that match the pattern \"logs-*\".\n* Filters events where the \"event.code\" field is not null.\n* Aggregates the count of events by \"event.code\" and \"host.name.\"\n* Enriches the events with additional information using the \"EVENT_DESCRIPTION\" field.\n* Filters out events where \"EVENT_DESCRIPTION\" or \"host.name\" is null.\n* Renames \"EVENT_DESCRIPTION\" as \"event.description.\"\n* Sorts the result by \"event_code_count\" in descending order.\n* Keeps only selected fields: \"event_code_count,\" \"event.code,\" \"host.name,\" and \"event.description.\"\n\n\n[discrete]\n=== Summing outbound traffic from a process `curl.exe`\n\n[source,esql]\n----\nFROM logs-endpoint\n| WHERE process.name == \"curl.exe\"\n| STATS bytes = SUM(destination.bytes) BY destination.address\n| EVAL kb =  bytes/1024\n| SORT kb DESC\n| LIMIT 10\n| KEEP kb,destination.address\n----\n\n* Queries logs from the \"logs-endpoint\" source.\n* Filters events where the \"process.name\" field is \"curl.exe.\"\n* Calculates the sum of bytes sent to destination addresses and converts it to kilobytes (KB).\n* Sorts the results by \"kb\" (kilobytes) in descending order.\n* Limits the output to the top 10 results.\n* Keeps only the \"kb\" and \"destination.address\" fields.\n\n\n[discrete]\n=== Manipulating DNS logs to find a high number of unique dns queries per registered domain\n\n[source,esql]\n----\nFROM logs-*\n| GROK dns.question.name \"%{DATA}\\\\.%{GREEDYDATA:dns.question.registered_domain:string}\"\n| STATS unique_queries = COUNT_DISTINCT(dns.question.name) BY dns.question.registered_domain, process.name\n| WHERE unique_queries > 10\n| SORT unique_queries DESC\n| RENAME unique_queries AS `Unique Queries`, dns.question.registered_domain AS `Registered Domain`, process.name AS `Process`\n----\n\n* Queries logs from indices matching \"logs-*.\"\n* Uses the \"grok\" pattern to extract the registered domain from the \"dns.question.name\" field.\n* Calculates the count of unique DNS queries per registered domain and process name.\n* Filters results where \"unique_queries\" are greater than 10.\n* Sorts the results by \"unique_queries\" in descending order.\n* Renames fields for clarity: \"unique_queries\" to \"Unique Queries,\" \"dns.question.registered_domain\" to \"Registered Domain,\" and \"process.name\" to \"Process.\"\n\n\n[discrete]\n=== Identifying high-numbers of outbound user connections\n\n[source,esql]\n----\nFROM logs-*\n| WHERE NOT CIDR_MATCH(destination.ip, \"10.0.0.0/8\", \"172.16.0.0/12\", \"192.168.0.0/16\")\n| STATS destcount = COUNT(destination.ip) BY user.name, host.name\n| ENRICH ldap_lookup_new ON user.name\n| WHERE group.name IS NOT NULL\n| EVAL follow_up = CASE(destcount >= 100, \"true\",\"false\")\n| SORT destcount DESC\n| KEEP destcount, host.name, user.name, group.name, follow_up\n----\n\n* Queries logs from indices matching \"logs-*.\"\n* Filters out events where the destination IP address falls within private IP address ranges (e.g., 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16).\n* Calculates the count of unique destination IPs by \"user.name\" and \"host.name.\"\n* Enriches the \"user.name\" field with LDAP group information.\n* Filters out results where \"group.name\" is not null.\n* Uses a \"CASE\" statement to create a \"follow_up\" field, setting it to \"true\" when \"destcount\" is greater than or equal to 100 and \"false\" otherwise.\n* Sorts the results by \"destcount\" in descending order.\n* Keeps selected fields: \"destcount,\" \"host.name,\" \"user.name,\" \"group.name,\" and \"follow_up.\"\n"
}