{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.196279",
        "size": 6684,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/example-text-analysis-plugin.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "example-text-analysis-plugin",
        "version": "8.15"
    },
    "doc": "[[example-text-analysis-plugin]]\n==== Example text analysis plugin\n\nThis example shows how to create a simple \"Hello world\" text analysis plugin\nusing the stable plugin API. The plugin provides a custom Lucene token filter\nthat strips all tokens except for \"hello\" and \"world\". \n\nElastic provides a Grade plugin, `elasticsearch.stable-esplugin`, that makes it\neasier to develop and package stable plugins. The steps in this guide assume you\nuse this plugin. However, you don't need Gradle to create plugins.\n\n. Create a new directory for your project.\n. In this example, the source code is organized under the `main` and \n`test` directories. In your project's home directory, create `src/` `src/main/`,\nand `src/test/` directories.\n. Create the following `build.gradle` build script in your project's home \ndirectory:\n+\n[source,gradle]\n----\next.pluginApiVersion = '8.7.0'\next.luceneVersion = '9.5.0'\n\nbuildscript {\n  ext.pluginApiVersion = '8.7.0'\n  repositories {\n    mavenCentral()\n  }\n  dependencies {\n    classpath \"org.elasticsearch.gradle:build-tools:${pluginApiVersion}\"\n  }\n}\n\napply plugin: 'elasticsearch.stable-esplugin'\napply plugin: 'elasticsearch.yaml-rest-test'\n\nesplugin {\n  name 'my-plugin'\n  description 'My analysis plugin'\n}\n\ngroup 'org.example'\nversion '1.0-SNAPSHOT'\n\nrepositories {\n  mavenLocal()\n  mavenCentral()\n}\n\ndependencies {\n\n  //TODO transitive dependency off and plugin-api dependency?\n  compileOnly \"org.elasticsearch.plugin:elasticsearch-plugin-api:${pluginApiVersion}\"\n  compileOnly \"org.elasticsearch.plugin:elasticsearch-plugin-analysis-api:${pluginApiVersion}\"\n  compileOnly \"org.apache.lucene:lucene-analysis-common:${luceneVersion}\"\n\n  //TODO for testing this also have to be declared\n  testImplementation \"org.elasticsearch.plugin:elasticsearch-plugin-api:${pluginApiVersion}\"\n  testImplementation \"org.elasticsearch.plugin:elasticsearch-plugin-analysis-api:${pluginApiVersion}\"\n  testImplementation \"org.apache.lucene:lucene-analysis-common:${luceneVersion}\"\n\n  testImplementation ('junit:junit:4.13.2'){\n    exclude group: 'org.hamcrest'\n  }\n  testImplementation 'org.mockito:mockito-core:4.4.0'\n  testImplementation 'org.hamcrest:hamcrest:2.2'\n\n}\n----\n. In `src/main/java/org/example/`, create `HelloWorldTokenFilter.java`. This\nfile provides the code for a token filter that strips all tokens except for \n\"hello\" and \"world\":\n+\n[source,java]\n----\npackage org.example;\n\nimport org.apache.lucene.analysis.FilteringTokenFilter;\nimport org.apache.lucene.analysis.TokenStream;\nimport org.apache.lucene.analysis.tokenattributes.CharTermAttribute;\n\nimport java.util.Arrays;\n\npublic class HelloWorldTokenFilter extends FilteringTokenFilter {\n    private final CharTermAttribute term = addAttribute(CharTermAttribute.class);\n\n    public HelloWorldTokenFilter(TokenStream input) {\n        super(input);\n    }\n\n    @Override\n    public boolean accept() {\n        if (term.length() != 5) return false;\n        return Arrays.equals(term.buffer(), 0, 4, \"hello\".toCharArray(), 0, 4)\n                || Arrays.equals(term.buffer(), 0, 4, \"world\".toCharArray(), 0, 4);\n    }\n}\n----\n. This filter can be provided to Elasticsearch using the following\n`HelloWorldTokenFilterFactory.java` factory class. The `@NamedComponent`\nannotation is used to give the filter the `hello_world` name. This is the name\nyou can use to refer to the filter, once the plugin has been deployed.\n+\n[source,java]\n----\npackage org.example;\n\nimport org.apache.lucene.analysis.TokenStream;\nimport org.elasticsearch.plugin.analysis.TokenFilterFactory;\nimport org.elasticsearch.plugin.NamedComponent;\n\n@NamedComponent(value = \"hello_world\")\npublic class HelloWorldTokenFilterFactory implements TokenFilterFactory {\n\n    @Override\n    public TokenStream create(TokenStream tokenStream) {\n        return new HelloWorldTokenFilter(tokenStream);\n    }\n\n}\n----\n. Unit tests may go under the `src/test` directory. You will have to add\ndependencies for your preferred testing framework.\n\n. Run:\n+\n[source,sh]\n----\ngradle bundlePlugin\n----\nThis builds the JAR file, generates the metadata files, and bundles them into a \nplugin ZIP file. The resulting ZIP file will be written to the \n`build/distributions` directory.\n. <<plugin-management,Install the plugin>>.\n. You can use the `_analyze` API to verify that the `hello_world` token filter \nworks as expected:\n+\n[source,console]\n----\nGET /_analyze\n{\n  \"text\": \"hello to everyone except the world\",\n  \"tokenizer\": \"standard\",\n  \"filter\":  [\"hello_world\"]\n}\n----\n// TEST[skip:would require this plugin to be installed]\n\n[discrete]\n=== YAML REST tests\n\nIf you are using the `elasticsearch.stable-esplugin` plugin for Gradle, you can\nuse {es}'s YAML Rest Test framework. This framework allows you to load your\nplugin in a running test cluster and issue real REST API queries against it. The\nfull syntax for this framework is beyond the scope of this tutorial, but there\nare many examples in the Elasticsearch repository. Refer to the\n{es-repo}tree/main/plugins/examples/stable-analysis[example analysis plugin] in\nthe {es} Github repository for an example.\n\n. Create a `yamlRestTest` directory in the `src` directory.\n. Under the `yamlRestTest` directory, create a `java` folder for Java sources\nand a `resources` folder.\n. In `src/yamlRestTest/java/org/example/`, create \n`HelloWorldPluginClientYamlTestSuiteIT.java`. This class implements \n`ESClientYamlSuiteTestCase`.\n+\n[source,java]\n----\nimport com.carrotsearch.randomizedtesting.annotations.Name;\nimport com.carrotsearch.randomizedtesting.annotations.ParametersFactory;\nimport org.elasticsearch.test.rest.yaml.ClientYamlTestCandidate;\nimport org.elasticsearch.test.rest.yaml.ESClientYamlSuiteTestCase;\n\npublic class HelloWorldPluginClientYamlTestSuiteIT extends ESClientYamlSuiteTestCase {\n\n    public HelloWorldPluginClientYamlTestSuiteIT(\n            @Name(\"yaml\") ClientYamlTestCandidate testCandidate\n    ) {\n        super(testCandidate);\n    }\n\n    @ParametersFactory\n    public static Iterable<Object[]> parameters() throws Exception {\n        return ESClientYamlSuiteTestCase.createParameters();\n    }\n}\n----\n. In `src/yamlRestTest/resources/rest-api-spec/test/plugin`, create the \n`10_token_filter.yml` YAML file:\n+\n[source,yaml]\n----\n## Sample rest test\n---\n\"Hello world plugin test - removes all tokens except hello and world\":\n  - do:\n      indices.analyze:\n        body:\n          text: hello to everyone except the world\n          tokenizer: standard\n          filter:\n            - type: \"hello_world\"\n  - length: { tokens: 2 }\n  - match:  { tokens.0.token: \"hello\" }\n  - match:  { tokens.1.token: \"world\" }\n\n----\n. Run the test with:\n+\n[source,sh]\n----\ngradle yamlRestTest\n----"
}