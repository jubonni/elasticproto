{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.817580",
        "size": 5408,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ip.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "ip",
        "version": "8.15"
    },
    "doc": "[[ip]]\n=== IP field type\n++++\n<titleabbrev>IP</titleabbrev>\n++++\n\nAn `ip` field can index/store either {wikipedia}/IPv4[IPv4] or\n{wikipedia}/IPv6[IPv6] addresses.\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"ip_addr\": {\n        \"type\": \"ip\"\n      }\n    }\n  }\n}\n\nPUT my-index-000001/_doc/1\n{\n  \"ip_addr\": \"192.168.1.1\"\n}\n\nGET my-index-000001/_search\n{\n  \"query\": {\n    \"term\": {\n      \"ip_addr\": \"192.168.0.0/16\"\n    }\n  }\n}\n--------------------------------------------------\n// TESTSETUP\n\nNOTE: You can also store ip ranges in a single field using an <<range,ip_range data type>>.\n\n[[ip-params]]\n==== Parameters for `ip` fields\n\nThe following parameters are accepted by `ip` fields:\n\n<<doc-values,`doc_values`>>::\n\n    Should the field be stored on disk in a column-stride fashion, so that it\n    can later be used for sorting, aggregations, or scripting? Accepts `true`\n    (default) or `false`.\n\n<<ignore-malformed,`ignore_malformed`>>::\n\n    If `true`, malformed IP addresses are ignored. If `false` (default), malformed\n    IP addresses throw an exception and reject the whole document. Note that this\n    cannot be set if the `script` parameter is used.\n\n<<mapping-index,`index`>>::\n\n    Should the field be quickly searchable? Accepts `true` (default) and\n    `false`. Fields that only have <<doc-values,`doc_values`>>\n    enabled can still be queried using term or range-based queries,\n    albeit slower.\n\n<<null-value,`null_value`>>::\n\n    Accepts an IPv4 or IPv6 value which is substituted for any explicit `null` values.\n    Defaults to `null`, which means the field is treated as missing. Note that\n    this cannot be set if the `script` parameter is used.\n\n`on_script_error`::\n\n    Defines what to do if the script defined by the `script` parameter\n    throws an error at indexing time. Accepts `reject` (default), which\n    will cause the entire document to be rejected, and `ignore`, which\n    will register the field in the document's\n    <<mapping-ignored-field,`_ignored`>> metadata field and continue\n    indexing. This parameter can only be set if the `script` field is\n    also set.\n\n`script`::\n\n    If this parameter is set, then the field will index values generated\n    by this script, rather than reading the values directly from the\n    source. If a value is set for this field on the input document, then\n    the document will be rejected with an error.\n    Scripts are in the same format as their\n    <<runtime-mapping-fields,runtime equivalent>>, and should emit strings\n    containing IPv4 or IPv6 formatted addresses.\n\n<<mapping-store,`store`>>::\n\n    Whether the field value should be stored and retrievable separately from\n    the <<mapping-source-field,`_source`>> field. Accepts `true` or `false`\n    (default).\n\n`time_series_dimension`::\n    (Optional, Boolean)\n+\n--\ninclude::keyword.asciidoc[tag=dimension]\n--\n\n[[query-ip-fields]]\n==== Querying `ip` fields\n\nThe most common way to query ip addresses is to use the\n{wikipedia}/Classless_Inter-Domain_Routing#CIDR_notation[CIDR]\nnotation: `[ip_address]/[prefix_length]`. For instance:\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_search\n{\n  \"query\": {\n    \"term\": {\n      \"ip_addr\": \"192.168.0.0/16\"\n    }\n  }\n}\n--------------------------------------------------\n\nor\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_search\n{\n  \"query\": {\n    \"term\": {\n      \"ip_addr\": \"2001:db8::/48\"\n    }\n  }\n}\n--------------------------------------------------\n\nAlso beware that colons are special characters to the\n<<query-dsl-query-string-query,`query_string`>> query, so ipv6 addresses will\nneed to be escaped. The easiest way to do so is to put quotes around the\nsearched value:\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_search\n{\n  \"query\": {\n    \"query_string\" : {\n      \"query\": \"ip_addr:\\\"2001:db8::/48\\\"\"\n    }\n  }\n}\n--------------------------------------------------\n\n[[ip-synthetic-source]]\n==== Synthetic `_source`\n\nIMPORTANT: Synthetic `_source` is Generally Available only for TSDB indices\n(indices that have `index.mode` set to `time_series`). For other indices\nsynthetic `_source` is in technical preview. Features in technical preview may\nbe changed or removed in a future release. Elastic will work to fix\nany issues, but features in technical preview are not subject to the support SLA\nof official GA features.\n\nSynthetic source may sort `ip` field values and remove duplicates. For example:\n[source,console,id=synthetic-source-ip-example]\n----\nPUT idx\n{\n  \"settings\": {\n    \"index\": {\n      \"mapping\": {\n        \"source\": {\n          \"mode\": \"synthetic\"\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"ip\": { \"type\": \"ip\" }\n    }\n  }\n}\nPUT idx/_doc/1\n{\n  \"ip\": [\"192.168.0.1\", \"192.168.0.1\", \"10.10.12.123\",\n         \"2001:db8::1:0:0:1\", \"::afff:4567:890a\"]\n}\n----\n// TEST[s/$/\\nGET idx\\/_doc\\/1?filter_path=_source\\n/]\n\nWill become:\n\n[source,console-result]\n----\n{\n  \"ip\": [\"::afff:4567:890a\", \"10.10.12.123\", \"192.168.0.1\", \"2001:db8::1:0:0:1\"]\n}\n----\n// TEST[s/^/{\"_source\":/ s/\\n$/}/]\n\nNOTE: IPv4 addresses are sorted as though they were IPv6 addresses prefixed by\n      `::ffff:0:0:0/96` as specified by\n      https://datatracker.ietf.org/doc/html/rfc6144[rfc6144].\n"
}