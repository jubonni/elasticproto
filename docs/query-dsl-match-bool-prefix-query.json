{
    "meta": {
        "size": 2756,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-bool-prefix-query.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "query-dsl-match-bool-prefix-query",
        "version": "8.15"
    },
    "doc": "[[query-dsl-match-bool-prefix-query]]\n=== Match boolean prefix query\n++++\n<titleabbrev>Match boolean prefix</titleabbrev>\n++++\n\nA `match_bool_prefix` query analyzes its input and constructs a\n<<query-dsl-bool-query,`bool` query>> from the terms. Each term except the last\nis used in a `term` query. The last term is used in a `prefix` query. A\n`match_bool_prefix` query such as\n\n[source,console]\n--------------------------------------------------\nGET /_search\n{\n  \"query\": {\n    \"match_bool_prefix\" : {\n      \"message\" : \"quick brown f\"\n    }\n  }\n}\n--------------------------------------------------\n\nwhere analysis produces the terms `quick`, `brown`, and `f` is similar to the\nfollowing `bool` query\n\n[source,console]\n--------------------------------------------------\nGET /_search\n{\n  \"query\": {\n    \"bool\" : {\n      \"should\": [\n        { \"term\": { \"message\": \"quick\" }},\n        { \"term\": { \"message\": \"brown\" }},\n        { \"prefix\": { \"message\": \"f\"}}\n      ]\n    }\n  }\n}\n--------------------------------------------------\n\nAn important difference between the `match_bool_prefix` query and\n<<query-dsl-match-query-phrase-prefix,`match_phrase_prefix`>> is that the\n`match_phrase_prefix` query matches its terms as a phrase, but the\n`match_bool_prefix` query can match its terms in any position. The example\n`match_bool_prefix` query above could match a field containing\n`quick brown fox`, but it could also match `brown fox quick`. It could also\nmatch a field containing the term `quick`, the term `brown` and a term\nstarting with `f`, appearing in any position.\n\n==== Parameters\n\nBy default, `match_bool_prefix` queries' input text will be analyzed using the\nanalyzer from the queried field's mapping. A different search analyzer can be\nconfigured with the `analyzer` parameter\n\n[source,console]\n--------------------------------------------------\nGET /_search\n{\n  \"query\": {\n    \"match_bool_prefix\": {\n      \"message\": {\n        \"query\": \"quick brown f\",\n        \"analyzer\": \"keyword\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n`match_bool_prefix` queries support the\n<<query-dsl-minimum-should-match,`minimum_should_match`>> and `operator`\nparameters as described for the\n<<query-dsl-match-query-boolean,`match` query>>, applying the setting to the\nconstructed `bool` query. The number of clauses in the constructed `bool`\nquery will in most cases be the number of terms produced by analysis of the\nquery text.\n\nThe <<query-dsl-match-query-fuzziness,`fuzziness`>>, `prefix_length`,\n`max_expansions`, `fuzzy_transpositions`, and `fuzzy_rewrite` parameters can\nbe applied to the `term` subqueries constructed for all terms but the final\nterm. They do not have any effect on the prefix query constructed for the\nfinal term.\n"
}