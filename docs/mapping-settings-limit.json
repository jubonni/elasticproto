{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.901582",
        "size": 3390,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-settings-limit.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "mapping-settings-limit",
        "version": "8.15"
    },
    "doc": "[[mapping-settings-limit]]\n== Mapping limit settings\nUse the following settings to limit the number of field mappings (created manually or dynamically) and prevent documents from causing a mapping explosion:\n\n`index.mapping.total_fields.limit`::\n    The maximum number of fields in an index. Field and object mappings, as well as\n    field aliases count towards this limit. Mapped runtime fields count towards this\n    limit as well. The default value is `1000`.\n+\n[IMPORTANT]\n====\nThe limit is in place to prevent mappings and searches from becoming too\nlarge. Higher values can lead to performance degradations and memory issues,\nespecially in clusters with a high load or few resources.\n\nIf you increase this setting, we recommend you also increase the\n<<search-settings,`indices.query.bool.max_clause_count`>> setting, which\nlimits the maximum number of clauses in a query.\n====\n+\n[TIP]\n====\nIf your field mappings contain a large, arbitrary set of keys, consider using the <<flattened,flattened>> data type,\nor setting the index setting `index.mapping.total_fields.ignore_dynamic_beyond_limit` to `true`.\n====\n\n`index.mapping.total_fields.ignore_dynamic_beyond_limit`::\n    This setting determines what happens when a dynamically mapped field would exceed the total fields limit.\n    When set to `false` (the default), the index request of the document that tries to add a dynamic field to the mapping will fail with the message `Limit of total fields [X] has been exceeded`.\n    When set to `true`, the index request will not fail.\n    Instead, fields that would exceed the limit are not added to the mapping, similar to <<dynamic, `dynamic: false`>>.\n    The fields that were not added to the mapping will be added to the <<mapping-ignored-field, `_ignored` field>>.\n    The default value is `false`.\n\n`index.mapping.depth.limit`::\n    The maximum depth for a field, which is measured as the number of inner\n    objects. For instance, if all fields are defined at the root object level,\n    then the depth is `1`. If there is one object mapping, then the depth is\n    `2`, etc. Default is `20`.\n\n// tag::nested-fields-limit[]\n`index.mapping.nested_fields.limit`::\n    The maximum number of distinct `nested` mappings in an index. The `nested` type should only be used in special cases, when arrays of objects need to be queried independently of each other. To safeguard against poorly designed mappings, this setting\n    limits the number of unique `nested` types per index. Default is `50`.\n// end::nested-fields-limit[]\n\n// tag::nested-objects-limit[]\n`index.mapping.nested_objects.limit`::\n    The maximum number of nested JSON objects that a single document can contain across all\n    `nested` types. This limit helps to prevent out of memory errors when a document contains too many nested\n    objects. Default is `10000`.\n// end::nested-objects-limit[]\n\n`index.mapping.field_name_length.limit`::\n    Setting for the maximum length of a field name. This setting isn't really something that addresses\n    mappings explosion but might still be useful if you want to limit the field length.\n    It usually shouldn't be necessary to set this setting. The default is okay\n    unless a user starts to add a huge number of fields with really long names. Default is\n    `Long.MAX_VALUE` (no limit).\n\ninclude::{es-ref-dir}/data-streams/tsds-index-settings.asciidoc[tag=dimensions-limit]\n"
}