{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.899067",
        "size": 6154,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/passthrough.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "passthrough",
        "version": "8.15"
    },
    "doc": "[[passthrough]]\n=== Pass-through object field type\n++++\n<titleabbrev>Pass-through object</titleabbrev>\n++++\n\nPass-through objects extend the functionality of <<object, objects>> by allowing to access\ntheir subfields without including the name of the pass-through object as prefix. For instance:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"attributes\": {\n        \"type\": \"passthrough\", <1>\n        \"priority\": 10,\n        \"properties\": {\n          \"id\": {\n            \"type\": \"keyword\"\n          }\n        }\n      }\n    }\n  }\n}\n\nPUT my-index-000001/_doc/1\n{\n  \"attributes\" : {  <2>\n    \"id\": \"foo\",\n    \"zone\": 10\n  }\n}\n\nGET my-index-000001/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        { \"match\": { \"id\": \"foo\" }},  <3>\n        { \"match\": { \"zone\": 10 }}\n      ]\n    }\n  }\n}\n\nGET my-index-000001/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        { \"match\": { \"attributes.id\": \"foo\" }}, <4>\n        { \"match\": { \"attributes.zone\": 10 }}\n      ]\n    }\n  }\n}\n\n--------------------------------------------------\n\n<1> An object is defined as pass-through. Its priority (required) is used for conflict resolution.\n<2> Object contents get indexed as usual, including dynamic mappings.\n<3> Sub-fields can be referenced in queries as if they're defined at the root level.\n<4> Sub-fields can also be referenced including the object name as prefix.\n\n[[passthrough-conflicts]]\n==== Conflict resolution\n\nIt's possible for conflicting names to arise, for fields that are defined within different scopes:\n\n  a. A pass-through object is defined next to a field that has the same name as one of the pass-through object\nsub-fields, e.g.\n+\n[source,console]\n--------------------------------------------------\nPUT my-index-000001/_doc/1\n{\n  \"attributes\" : {\n    \"id\": \"foo\"\n  },\n  \"id\": \"bar\"\n}\n--------------------------------------------------\n+\nIn this case, references to `id` point to the field at the root level, while field `attributes.id`\ncan only be accessed using the full path.\n\n  b. Two (or more) pass-through objects are defined within the same object and contain fields with the same name, e.g.\n+\n[source,console]\n--------------------------------------------------\nPUT my-index-000002\n{\n  \"mappings\": {\n    \"properties\": {\n      \"attributes\": {\n        \"type\": \"passthrough\",\n        \"priority\": 10,\n        \"properties\": {\n          \"id\": {\n            \"type\": \"keyword\"\n          }\n        }\n      },\n      \"resource.attributes\": {\n        \"type\": \"passthrough\",\n        \"priority\": 20,\n        \"properties\": {\n          \"id\": {\n            \"type\": \"keyword\"\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n+\nIn this case, param `priority` is used for conflict resolution, with the higher values taking precedence. In the\nexample above, `resource.attributes` has higher priority than `attributes`, so references to `id` point to the field\nwithin `resource.attributes`. `attributes.id` can still be accessed using its full path.\n\n[[passthrough-dimensions]]\n==== Defining sub-fields as time-series dimensions\n\nIt is possible to configure a pass-through field as a container for  <<time-series-dimension,time-series dimensions>>.\nIn this case, all sub-fields get annotated with the same parameter under the covers, and they're also\nincluded in <<dimension-based-routing, routing path>> and <<tsid, tsid>> calculations, thus simplifying\nthe <<tsds,TSDS>> setup:\n\n[source,console]\n--------------------------------------------------\nPUT _index_template/my-metrics\n{\n  \"index_patterns\": [\"metrics-mymetrics-*\"],\n  \"priority\": 200,\n  \"data_stream\": { },\n  \"template\": {\n    \"settings\": {\n      \"index.mode\": \"time_series\"\n    },\n    \"mappings\": {\n      \"properties\": {\n        \"attributes\": {\n          \"type\": \"passthrough\",\n          \"priority\": 10,\n          \"time_series_dimension\": true,\n          \"properties\": {\n            \"host.name\": {\n              \"type\": \"keyword\"\n            }\n          }\n        },\n        \"cpu\": {\n          \"type\": \"integer\",\n          \"time_series_metric\": \"counter\"\n        }\n      }\n    }\n  }\n}\n\nPOST metrics-mymetrics-test/_doc\n{\n  \"@timestamp\": \"2020-01-01T00:00:00.000Z\",\n  \"attributes\" : {\n    \"host.name\": \"foo\",\n    \"zone\": \"bar\"\n  },\n  \"cpu\": 10\n}\n--------------------------------------------------\n// TEST[skip: The @timestamp value won't match an accepted range in the TSDS]\n\nIn the example above, `attributes` is defined as a dimension container. Its sub-fields `host.name` (static) and `zone`\n(dynamic) get included in the routing path and tsid, and can be referenced in queries without the `attributes.` prefix.\n\n[[passthrough-flattening]]\n==== Sub-field auto-flattening\n\nPass-through fields apply <<subobjects-auto-flattening, auto-flattening>> to sub-fields by default, to reduce dynamic\nmapping conflicts. As a consequence, no sub-object definitions are allowed within pass-through fields.\n\n[[passthrough-params]]\n==== Parameters for `passthrough` fields\n\nThe following parameters are accepted by `passthrough` fields:\n\n[horizontal]\n\n<<passthrough-conflicts,`priority`>>::\n\n    (Required) used for naming conflict resolution between pass-through fields. The field with the highest value wins.\n    Accepts non-negative integer values.\n\n<<passthrough-dimensions,`time_series_dimension`>>::\n\n    Whether or not to treat sub-fields as <<time-series-dimension,time-series dimensions>>.\n    Accepts `false` (default) or `true`.\n\n<<dynamic,`dynamic`>>::\n\n    Whether or not new `properties` should be added dynamically to an existing object.\n    Accepts `true` (default), `runtime`, `false` and `strict`.\n\n<<enabled,`enabled`>>::\n\n    Whether the JSON value given for the object field should be parsed and indexed (`true`, default)\n    or completely ignored (`false`).\n\n<<properties,`properties`>>::\n\n    The fields within the object, which can be of any <<mapping-types,data type>>, including `object`.\n    New properties may be added to an existing object.\n\nIMPORTANT: If you need to index arrays of objects instead of single objects, read <<nested>> first.\n"
}