{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.096069",
        "size": 10673,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-field-caps.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "search-field-caps",
        "version": "8.15"
    },
    "doc": "[[search-field-caps]]\n=== Field capabilities API\n++++\n<titleabbrev>Field capabilities</titleabbrev>\n++++\n\n\nAllows you to retrieve the capabilities of fields among multiple indices.\nFor data streams, the API returns field capabilities among the stream's backing\nindices.\n\n[source,console]\n--------------------------------------------------\nGET /_field_caps?fields=rating\n--------------------------------------------------\n\n\n[[search-field-caps-api-request]]\n==== {api-request-title}\n\n`GET /_field_caps?fields=<fields>`\n\n`POST /_field_caps?fields=<fields>`\n\n`GET /<target>/_field_caps?fields=<fields>`\n\n`POST /<target>/_field_caps?fields=<fields>`\n\n[[search-field-caps-api-prereqs]]\n==== {api-prereq-title}\n\n* If the {es} {security-features} are enabled, you must have the\n`view_index_metadata`, `read`, or `manage` <<privileges-list-indices,index\nprivilege>> for the target data stream, index, or alias.\n\n[[search-field-caps-api-desc]]\n==== {api-description-title}\n\n\nThe field capabilities API returns the information about the capabilities of\nfields among multiple indices.\n\nThe field capabilities API returns <<runtime,runtime fields>> like any\nother field. For example, a runtime field with a type of\n`keyword` is returned as any other field that belongs to the `keyword` family.\n\n\n[[search-field-caps-api-path-params]]\n==== {api-path-parms-title}\n\n`<target>`::\n(Optional, string) Comma-separated list of data streams, indices, and aliases\nused to limit the request. Supports wildcards (`*`). To target all data streams\nand indices, omit this parameter or use `*` or `_all`.\n\n[[search-field-caps-api-query-params]]\n==== {api-query-parms-title}\n\n`fields`::\n(Required, string)\nComma-separated list of fields to retrieve capabilities for. Wildcard (`*`)\nexpressions are supported.\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=allow-no-indices]\n+\nDefaults to `true`.\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=expand-wildcards]\n+\n--\nDefaults to `open`.\n--\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=index-ignore-unavailable]\n\n`include_unmapped`::\n  (Optional, Boolean) If `true`, unmapped fields that are mapped in one index but not in another are included in the response. Fields that don't have any mapping are never included.\n  Defaults to `false`.\n\n`include_empty_fields`::\n  (Optional, Boolean) If `false`, fields that never had a value in any shards are not included in the response. Fields that are not empty are always included. This flag does not consider deletions and updates.  If a field was non-empty and all the documents containing that field were deleted or the field was removed by updates,  it will still be returned even if the flag is `false`.\n  Defaults to `true`.\n\n`filters`::\n(Optional, string) Comma-separated list of filters to apply to the response.\n+\n.Valid values for `filters`\n[%collapsible%open]\n====\n`+metadata`::\nOnly include metadata fields\n`-metadata`::\nExclude metadata fields\n`-parent`::\nExclude parent fields\n`-nested`::\nExclude nested fields\n`-multifield`::\nExclude multifields\n====\n\n`types`::\n(Optional, string) Comma-separated list of field types to include. Any fields that\ndo not match one of these types will be excluded from the results.  Defaults to empty,\nmeaning that all field types are returned.  See <<field-caps-field-types,here>> for\nmore information about field types in field capabilities requests and responses.\n\n[[search-field-caps-api-request-body]]\n==== {api-request-body-title}\n\n`index_filter`::\n(Optional,  <<query-dsl,query object>> Allows to filter indices if the provided\nquery rewrites to `match_none` on every shard.\n\n`runtime_mappings`::\n(Optional, object)\nDefines ad-hoc <<runtime-search-request,runtime fields>> in the request similar\nto the way it is done in <<search-api-body-runtime, search requests>>. These fields\nexist only as part of the query and take precedence over fields defined with the\nsame name in the index mappings.\n\n[[search-field-caps-api-response-body]]\n==== {api-response-body-title}\n\n[[field-caps-field-types]]\nThe types used in the response describe _families_ of field types.\nNormally a type family is the same as the field type declared in the mapping,\nbut to simplify matters certain field types that behave identically are\ndescribed using a type family. For example, `keyword`, `constant_keyword` and `wildcard`\nfield types are all described as the `keyword` type family.\n\n\n`metadata_field`::\n  Whether this field is registered as a <<mapping-fields,metadata field>>.\n\n`searchable`::\n  Whether this field is indexed for search on all indices.\n\n`aggregatable`::\n  Whether this field can be aggregated on all indices.\n\n`time_series_dimension`::\n  Whether this field is used as a time series dimension on all indices.\n  For non-time-series indices this field is not present.\n\n`time_series_metric`::\n  Contains the metric type if the field is used as a time series metric on all indices, absent if the field is\n  not used as a metric. For non-time-series indices this field is not included.\n\n`indices`::\n  The list of indices where this field has the same type family, or null if all indices\n  have the same type family for the field.\n\n`non_searchable_indices`::\n  The list of indices where this field is not searchable, or null if all indices\n  have the same definition for the field.\n\n`non_aggregatable_indices`::\n  The list of indices where this field is not aggregatable, or null if all\n  indices have the same definition for the field.\n\n`non_dimension_indices`::\n  experimental:[]\n  If this list is present in the response, some indices have the field marked as a dimension and other indices, the\n  ones in this list, do not.\n\n`metric_conflicts_indices`::\n  experimental:[]\n  The list of indices where this field is present, if these indices don't have the same `time_series_metric` value for\n  this field.\n\n`meta`::\n  Merged metadata across all indices as a map of string keys to arrays of values.\n  A value length of 1 indicates that all indices had the same value for this key,\n  while a length of 2 or more indicates that not all indices had the same value\n  for this key.\n\n\n[[search-field-caps-api-example]]\n==== {api-examples-title}\n\n\nThe request can be restricted to specific data streams and indices:\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_field_caps?fields=rating\n--------------------------------------------------\n// TEST[setup:my_index]\n\n\nThe next example API call requests information about the `rating` and the\n`title` fields:\n\n[source,console]\n--------------------------------------------------\nGET _field_caps?fields=rating,title\n--------------------------------------------------\n\nThe API returns the following response:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"indices\": [ \"index1\", \"index2\", \"index3\", \"index4\", \"index5\" ],\n  \"fields\": {\n    \"rating\": {                                   <1>\n      \"long\": {\n        \"metadata_field\": false,\n        \"searchable\": true,\n        \"aggregatable\": false,\n        \"indices\": [ \"index1\", \"index2\" ],\n        \"non_aggregatable_indices\": [ \"index1\" ]  <2>\n      },\n      \"keyword\": {\n        \"metadata_field\": false,\n        \"searchable\": false,\n        \"aggregatable\": true,\n        \"indices\": [ \"index3\", \"index4\" ],\n        \"non_searchable_indices\": [ \"index4\" ]    <3>\n      }\n    },\n    \"title\": {                                    <4>\n      \"text\": {\n        \"metadata_field\": false,\n        \"searchable\": true,\n        \"aggregatable\": false\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[skip:historically skipped]\n\n<1> The field `rating` is defined as a long in `index1` and `index2`\nand as a `keyword` in `index3` and `index4`.\n<2> The field `rating` is not aggregatable in `index1`.\n<3> The field `rating` is not searchable in `index4`.\n<4> The field `title` is defined as `text` in all indices.\n\n\nBy default unmapped fields are ignored. You can include them in the response by\nadding a parameter called `include_unmapped` in the request:\n\n[source,console]\n--------------------------------------------------\nGET _field_caps?fields=rating,title&include_unmapped\n--------------------------------------------------\n\nIn which case the response will contain an entry for each field that is present\nin some indices but not all:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"indices\": [ \"index1\", \"index2\", \"index3\" ],\n  \"fields\": {\n    \"rating\": {\n      \"long\": {\n        \"metadata_field\": false,\n        \"searchable\": true,\n        \"aggregatable\": false,\n        \"indices\": [ \"index1\", \"index2\" ],\n        \"non_aggregatable_indices\": [ \"index1\" ]\n      },\n      \"keyword\": {\n        \"metadata_field\": false,\n        \"searchable\": false,\n        \"aggregatable\": true,\n        \"indices\": [ \"index3\", \"index4\" ],\n        \"non_searchable_indices\": [ \"index4\" ]\n      },\n      \"unmapped\": {                               <1>\n        \"metadata_field\": false,\n        \"indices\": [ \"index5\" ],\n        \"searchable\": false,\n        \"aggregatable\": false\n      }\n    },\n    \"title\": {\n      \"text\": {\n        \"metadata_field\": false,\n        \"indices\": [ \"index1\", \"index2\", \"index3\", \"index4\" ],\n        \"searchable\": true,\n        \"aggregatable\": false\n      },\n      \"unmapped\": {                               <2>\n        \"metadata_field\": false,\n        \"indices\": [ \"index5\" ],\n        \"searchable\": false,\n        \"aggregatable\": false\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[skip:historically skipped]\n\n<1> The `rating` field is unmapped` in `index5`.\n<2> The `title` field is unmapped` in `index5`.\n\nIt is also possible to filter indices with a query:\n\n[source,console]\n--------------------------------------------------\nPOST my-index-*/_field_caps?fields=rating\n{\n  \"index_filter\": {\n    \"range\": {\n      \"@timestamp\": {\n        \"gte\": \"2018\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[setup:my_index]\n\n\nIn which case indices that rewrite the provided filter to `match_none` on every shard\nwill be filtered from the response.\n\n--\n[IMPORTANT]\n====\nThe filtering is done on a best-effort basis, it uses index statistics and mappings\nto rewrite queries to `match_none` instead of fully executing the request.\nFor instance a `range` query over a `date` field can rewrite to `match_none`\nif all documents within a shard (including deleted documents) are outside\nof the provided range.\nHowever, not all queries can rewrite to `match_none` so this API may return\nan index even if the provided filter matches no document.\n====\n--\n"
}