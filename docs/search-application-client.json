{
    "meta": {
        "timestamp": "2024-11-01T03:07:10.154288",
        "size": 24085,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-application-client.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "search-application-client",
        "version": "8.15"
    },
    "doc": "[[search-application-client]]\n=== Build a search experience with the Search Application client\n++++\n<titleabbrev>Search Application client guide</titleabbrev>\n++++\n\nThis document is a how-to guide to building a search experience with a <<search-application-overview, search application>>, using the https://github.com/elastic/search-application-client[Search Application client^].\nThe client is a JavaScript library designed to be used in the browser.\nYou'll integrate this library into your web app to simplify querying your search application.\n\n[TIP]\n====\nA https://github.com/elastic/search-application-client/blob/main/examples/sandbox/README.md[sandbox environment] is available for testing and experimenting with the `search-application-client` library.\nJump there if you'd like to try out the client without setting up your own web app.\n\n\nClone the https://github.com/elastic/search-application-client[repository] and follow the instructions in the README to get started.\n====\n\n[discrete]\n[[search-application-client-client-goal]]\n=== Goal\n\nThis guide assumes you want to build a web app with the following search features:\n\n* Search bar and results with custom relevance\n* Control over the presentation of results, such as inclusion/exclusion of fields and highlighting of matching terms\n* UI controls such as facets, filters, sorts, pagination\n\nYou can think of the search application as the \"server side\" that persists changes to {es}.\nYour web app acts as the \"client side\" that queries the search application.\nYou'll be making edits to both your search application and your web app to complete the implementation.\n\n[discrete]\n[[search-application-client-client-prerequisites]]\n=== Prerequisites\n\nTo follow this guide, you'll need:\n\n* An *Elastic deployment*, that satisfies the <<search-application-overview-prerequisites, prerequisites>> for running a search application.\n** If you don't have an Elastic deployment, start a free trial on https://cloud.elastic.co[Elastic Cloud^].\n* A *search application*.\n** Create and manage search applications in the <<search-application-overview-get-started-ui, {kib} UI>> or using the <<put-search-application, API>>.\n* A *web app* to query your search application, using https://github.com/elastic/search-application-client#installation[Search Application client].\n\n[discrete]\n[[search-application-client-client-configuration]]\n=== Install and configure the client\n\n[discrete]\n[[search-application-client-client-configuration-install]]\n==== Install the client\n\nhttps://github.com/elastic/search-application-client/blob/main/README.md#installation[Install^] the client using npm, yarn, or a CDN.\n\n*Option 1: Using package manager*\n\nTo install the client using *npm*, run the following command:\n\n[source, bash]\n----\nnpm install @elastic/search-application-client\n----\n\nTo install the client using *yarn*, run the following command:\n\n[source, bash]\n----\nyarn add @elastic/search-application-client\n----\n\n*Option 2: Using CDN with HTML `<script>` tag*\n\nAlternatively, you can install the client using a CDN.\nAdd the following `<script>` tag to your web app's HTML:\n\n[source, html]\n----\n<script src=\"https://cdn.jsdelivr.net/npm/@elastic/search-application-client@latest\"></script>\n----\n\n[discrete]\n[[search-application-client-client-configuration-import]]\n==== Import and initialize the client\n\nOnce installed, you can import the client into your web app.\nYou'll need the following information to initialize the client:\n\n* The *name* of your search application\n* The *URL endpoint* for your search application\n* The *API key* for your search application\n\nFind this information on the *Connect* page in the {kib} UI.\n\n[discrete]\n[[search-application-client-client-configuration-import-js]]\n===== Option 1: Using JavaScript modules\n\nUse the following import statement:\n\n[source, js]\n----\nimport SearchApplicationClient from '@elastic/search-application-client';\n----\n// NOTCONSOLE\n\nConfigure the client with your deployment details to start making search requests.\nYou can generate an API key on the *Connect* page in the {kib} UI.\nGo to *Search > Search Applications >* <MY_SEARCH_APPLICATION> *> Connect*.\nYou'll find the following information prepopulated to initialize the client:\n\n[source, js]\n----\nimport Client from '@elastic/search-application-client'\n\nconst request = Client(\n  'my-search-application', // search application name\n  'url-from-connect-page', // url-host\n  'api-key-from-connect-page',  // api-key\n  {\n    // optional configuration\n  }\n)\n----\n// NOTCONSOLE\n\nOnce configured you'll be able to make search requests to your search application using the https://github.com/elastic/search-application-client#api-reference[client API], like this:\n\n[source, js]\n----\nconst results = await request()\n  .query('star wars')\n  .search()\n----\n// NOTCONSOLE\n\n[discrete]\n[[search-application-client-client-configuration-import-cdn]]\n===== Option 2: Using CDN\n\nAlternatively, if you're using a CDN, you can import the client using the following statement:\n\n[source, html]\n----\n<script>\n  const Client = window['SearchApplicationClient'];\n</script>\n----\n\nConfigure the client with your deployment details to start making search requests.\nYou can generate an API key on the *Connect* page in the {kib} UI.\nGo to *Search > Search Applications >* <MY_SEARCH_APPLICATION> *> Connect*.\nYou'll find the following information prepopulated to initialize the client:\n\n[source, html]\n----\n<script>\n  const request = Client(\n    'my-example-app', // search application name\n    'url-from-connect-page', // url-host\n    'api-key-from-connect-page',  // api-key\n    {\n    // optional configuration\n    }\n)\n</script>\n----\n\nOnce configured you'll be able to make search requests to your search application using the https://github.com/elastic/search-application-client#api-reference[client API], like this:\n\n[source, html]\n----\n<script>\n  const results = await request()\n    .query('star wars')\n    .search()\n</script>\n----\n\n[discrete]\n[[search-application-client-client-template]]\n=== Working with your search template\n\nThe Search Application client is designed to work with any \n<<search-application-api, search template>> you create.\nYou'll use the Search Application APIs to create and manage your search templates.\n\n[TIP]\n====\nWhen working with the Search Application APIs to manage templates, we provide the API examples using {kibana-ref}/console-kibana.html[{kib} Console^] syntax.\n====\n\nHere's an example template:\n\n[source, console]\n----\nPUT _application/search_application/my-example-app\n{\n  \"indices\": [\"my-example-app\"],\n  \"template\": {\n    \"script\": {\n      \"lang\": \"mustache\",\n      \"source\": \"\"\"\n        {\n          \"query\": {\n            \"bool\": {\n              \"must\": [\n              {{#query}}\n              {\n                \"query_string\": {\n                  \"query\": \"{{query}}\",\n                  \"search_fields\": {{#toJson}}search_fields{{/toJson}}\n                }\n              }\n              {{/query}}\n            ]\n            }\n          }\n        }\n      \"\"\",\n      \"params\": {\n        \"query\": \"\",\n        \"search_fields\": \"\"\n      }\n    }\n  }\n}\n----\n// TEST[skip:TODO]\n\nThis will allow you to add any template parameters you need to your template and then provide the values in your client request.\nUse `addParameter` to inject actual values into your template parameters.\n\nFor example, pass in values for `search_fields` like this:\n\n[source, js]\n----\nconst results = await request()\n  .query('star wars') // requires the template to use query parameter\n  .addParameter('search_fields', ['title', 'description'])\n  .search()\n----\n// NOTCONSOLE\n\n[discrete]\n[[search-application-client-client-template-example]]\n==== Example template\n\nWe recommend getting started with the https://github.com/elastic/search-application-client#boilerplate-template[boilerplate template^] provided in the client repository.\nhttps://github.com/elastic/search-application-client/blob/main/bin/boilerplate_template.js[View this script^] to see how this is used.\nThe `dictionary` parameter is used to pass in a JSON schema definition that describes structure and validation rules for the request object.\nThis schema is important, because it restricts the use of certain features in the {es} query.\nhttps://github.com/elastic/search-application-client/blob/main/bin/request_schema.json[View the schema^].\n\nEach search functionality in this guide requires a feature included in this template.\nThese features require specific parameters to be present in the template:\n\n* Query: `query`\n* Filters: `_es_filters`\n* Faceting: `_es_filters` and  `_es_aggs`\n* Sorting: `_es_sort_fields`\n* Pagination: `from` and `size`\n\n[discrete]\n[[search-application-client-client-features]]\n=== Search features\n\nWe will explore all the essential basics you'll need for a search experience.\nYou'll learn how to implement them using your search application and query them using the client.\n\n[TIP]\n====\nRefer to the https://github.com/elastic/search-application-client#api-reference[client repo^] for information on the available methods and their parameters.\n====\n\n[discrete]\n[[search-application-client-client-features-relevance]]\n==== Customizing relevance\n\nOur simple template uses `query_string` searching across all fields, but this may not suit your use case.\nYou can update the template to provide better relevance recall.\n\nIn the below example, we\u2019re using a `multi-match` query against our template, with `best_fields` and `phrase_prefix` queries targeting different search fields.\n\n[source, console]\n----\nPUT _application/search_application/my-example-app\n{\n  \"indices\": [\"example-index\"],\n  \"template\": {\n    \"script\": {\n      \"lang\": \"mustache\",\n      \"source\": \"\"\"\n        {\n          \"query\": {\n            \"bool\": {\n              \"must\": [\n              {{#query}}\n              {\n                \"multi_match\" : {\n                  \"query\":    \"{{query}}\",\n                  \"fields\": [ \"title^4\", \"plot\", \"actors\", \"directors\" ]\n                }\n              },\n              {\n                \"multi_match\" : {\n                  \"query\":    \"{{query}}\",\n                  \"type\": \"phrase_prefix\",\n                  \"fields\": [ \"title^4\", \"plot\"]\n                }\n              },\n              {{/query}}\n            ],\n            \"filter\": {{#toJson}}_es_filters{{/toJson}}\n            }\n          },\n          \"aggs\": {{#toJson}}_es_aggs{{/toJson}},\n          \"from\": {{from}},\n          \"size\": {{size}},\n          \"sort\": {{#toJson}}_es_sort_fields{{/toJson}}\n        }\n      \"\"\",\n      \"params\": {\n        \"query\": \"\",\n        \"_es_filters\": {},\n        \"_es_aggs\": {},\n        \"_es_sort_fields\": {},\n        \"size\": 10,\n        \"from\": 0\n      },\n      \"dictionary\": {\n          //  add dictionary restricting\n          // _es_filters, _es_sort_fields & _es_aggs params\n          // Use example provided in repo: https://github.com/elastic/search-application-client/blob/main/bin/request_schema.json\n      }\n    }\n  }\n}\n----\n// TEST[skip:TODO]\n\nRefer to \n//<<search-application-api-examples>> \nfor examples of different types of queries, including combinations of text search, kNN search, ELSER search, hybrid search with RRF, and more.\n\n*Use case: I want to dynamically adjust the search fields*\n\nIf you need to adjust `search_fields` at query request time, you can add a new parameter to the template (for example: `search_fields`) and use the `addParameter` method to provide the fields to the template.\n\n*Use case: I want to boost results given a certain proximity to the user*\n\nYou can add additional template parameters to send the geo-coordinates of the user.\nThen use <<query-dsl-function-score-query,`function_score`>> to boost documents which match a certain <<query-dsl-geo-distance-query,`geo_distance`>> from the user.\n\n[discrete]\n[[search-application-client-client-features-result-fields]]\n=== Result fields\n\nBy default, all fields are returned in the `_source` field.\nTo restrict the fields returned, specify the fields in the template.\n\n[source, console]\n----\nPUT _application/search_application/my-example-app\n{\n  \"indices\": [\"example-index\"],\n  \"template\": {\n    \"script\": {\n      \"lang\": \"mustache\",\n      \"source\": \"\"\"\n        {\n          \"query\": {\n            \"bool\": {\n              \"must\": [\n              {{#query}}\n                // ...\n              {{/query}}\n            ],\n            \"filter\": {{#toJson}}_es_filters{{/toJson}}\n            }\n          },\n          \"_source\": {\n            \"includes\": [\"title\", \"plot\"]\n          },\n          \"aggs\": {{#toJson}}_es_aggs{{/toJson}},\n          \"from\": {{from}},\n          \"size\": {{size}},\n          \"sort\": {{#toJson}}_es_sort_fields{{/toJson}}\n        }\n      \"\"\",\n      \"params\": {\n        \"query\": \"\",\n        \"_es_filters\": {},\n        \"_es_aggs\": {},\n        \"_es_sort_fields\": {},\n        \"size\": 10,\n        \"from\": 0\n      },\n      \"dictionary\": {\n          //  add dictionary restricting _es_filters and _es_aggs params\n          // Use the dictionary example provided in repo: https://github.com/elastic/search-application-client/blob/main/bin/request_schema.json\n      }\n    }\n  }\n}\n----\n// TEST[skip:TODO]\n\n*Use case: I want to dynamically adjust the result fields*\n\nIf you need to adjust the fields returned at query request time, you can add a new parameter to the template (for example: `result_fields`) and use the `addParameter` method to provide the fields to the template.\n\n[discrete]\n[[search-application-client-client-features-highlight-snippets]]\n==== Highlighting and snippets\n\nHighlighting support is straightforward to add to the template.\nWith the <<highlighting,highlighting API>>, you can specify which fields you want to highlight for matches.\n\nIn the following example, we specify `title` and `plot` as the highlighted fields.\n`title` typically has a short value length, compared to `plot` which is variable and tends to be longer.\n\nWe specify the title to be `fragment_size` of `0` to return all of the text when there is a highlight.\nWe specify the plot to be `fragment_size` of `200`, where each highlighted fragment will be up to 200 characters long.\n\n[source, console]\n----\nPUT _application/search_application/my-example-app\n{\n  \"indices\": [\"example-index\"],\n  \"template\": {\n    \"script\": {\n      \"lang\": \"mustache\",\n      \"source\": \"\"\"\n        {\n          \"query\": {\n            \"bool\": {\n              \"must\": [\n              {{#query}}\n                // ...\n              {{/query}}\n            ],\n            \"filter\": {{#toJson}}_es_filters{{/toJson}}\n            }\n          },\n          \"_source\": {\n            \"includes\": [\"title\", \"plot\"]\n            },\n            \"highlight\": {\n              \"fields\": {\n                \"title\": { \"fragment_size\": 0 },\n                \"plot\": { \"fragment_size\": 200 }\n                }\n                },\n                \"aggs\": {{#toJson}}_es_aggs{{/toJson}},\n                \"from\": {{from}},\n                \"size\": {{size}},\n                \"sort\": {{#toJson}}_es_sort_fields{{/toJson}}\n                }\n                \"\"\",\n                \"params\": {\n                  \"query\": \"\",\n                  \"_es_filters\": {},\n                  \"_es_aggs\": {},\n                  \"_es_sort_fields\": {},\n                  \"size\": 10,\n                  \"from\": 0\n                  },\n                  \"dictionary\": {\n                    //  add dictionary restricting _es_filters and _es_aggs params\n                    // Use the dictionary example provided in repo: https://github.com/elastic/search-application-client/blob/main/bin/request_schema.json\n                    }\n                }\n           }\n}\n----\n// TEST[skip:TODO]\n\nIf a match was found, this will return the results with a highlight field.\nFor example:\n\n[source, js]\n----\n{\n  \"hits\": [\n    {\n      \"_index\": \"movies\",\n      \"_type\": \"_doc\",\n      \"_id\": \"1\",\n      \"_score\": 0.2876821,\n      \"_source\": {\n        \"title\": \"The Great Gatsby\",\n        \"plot\": \"The Great Gatsby is a novel by F. Scott Fitzgerald that follows the story of Jay Gatsby, a wealthy and mysterious man, as he tries to win back the love of his life, Daisy Buchanan.\"\n      },\n      \"highlight\": {\n        \"title\": [\"The Great <em>Gatsby</em>\"],\n        \"plot\": [\n          \"The Great <em>Gatsby</em> is a novel by F. Scott Fitzgerald that follows the story of <em>Jay</em> <em>Gatsby</em>, a wealthy and mysterious man, as he tries to win back the love of his life, Daisy Buchanan.\"\n        ]\n      }\n    }\n  ]\n}\n----\n// NOTCONSOLE\n\n[discrete]\n[[search-application-client-client-features-highlight-helpers]]\n===== Highlighting helper\n\nWhen displaying the fields in the frontend, you will need to first determine if the field has a highlight.\nTo simplify this, we provide a helper.\n\n[source, js]\n----\nimport Client, { Highlight } from '@elastic/search-application-client'\n\n// example React component\nconst ResultsList = ({ hits } ) => {\n  return hits.map((hit) => (\n    <div className=\"result\">\n       <div className=\"title\">{Highlight(hit, \"title\")}</div>\n       <div className=\"description\">{Highlight(hit, \"plot\")}</div>\n    </div>\n  ))\n}\n----\n// NOTCONSOLE\n\n[discrete]\n[[search-application-client-client-features-pagination]]\n==== Pagination\n\nTo use pagination, set the page number and the page size.\nBy default, the page size is 10.\nThe `size` and `from` parameters allow you to control the page and number of hits returned in the response.\n\nWe can do this using the client with the `setSize` and `setFrom` methods.\n\n[source, js]\n----\n// page 1\nconst results = await request()\n .setSize(20)\n .setFrom(0)\n .search()\n\n// page 2\nconst results = await request()\n .setSize(20)\n .setFrom(20)\n .search()\n----\n// NOTCONSOLE\n\n[discrete]\n[[search-application-client-client-features-sorting]]\n=== Sorting\n\nTo use sorting, specify the field name and the sort order or `pass _score` to sort by relevance.\nRequires the `_es_sort_fields_fields` param in the search template.\nRefer to our <<search-application-client-client-template-example,example template>> to see where this is used.\n\nBy default, the results will be sorted in order of score.\nIf you need to sort on a field other than the score, use the `setSort` method with an array of objects.\n\n[source, js]\n----\nconst results = await request()\n .setSort([{ year: 'asc' }, '_score'])\n .search()\n----\n// NOTCONSOLE\n\n[discrete]\n[[search-application-client-client-features-filter]]\n==== Filtering\n\nThe Search application client also supports filters and facets.\nTo use these, you need to add two parameters:\n\n* `_es_filters`\n* `_es_aggs`\n\nRefer to our <<search-application-client-client-template-example,example template>> to see where these are used.\n\n[discrete]\n[[search-application-client-client-features-filter-base]]\n===== Base Filtering\n\nWith a template that\u2019s configured to use filters, use the `setFilter` method to add filters to your query.\n\nThe boilerplate template schema only supports term, range, match, nested, geo_bounding_box and geo_distance filters.\nIf you need to use a particular clause, you can update the template schema.\n\nBelow is an example of using `setFilter`.\n\n[source, js]\n----\n// return only \"star wars\" movies that are rated PG\nconst results = await request()\n  .query('star wars')\n  .setFilter({\n    term: {\n      'rated.enum': 'PG',\n    },\n  })\n  .search()\n----\n// NOTCONSOLE\n\n[discrete]\n[[search-application-client-client-features-facets]]\n==== Facets\n\nThe client supports the ability to configure facets with your results.\nSpecify facets in the client initialization call.\nFor example, say we want to add facets for actors, directors and IMDB rating.\n\n[source, js]\n----\nconst request = Client(\n  'my-example-app', // search application name\n  'https://d1bd36862ce54c7b903e2aacd4cd7f0a.us-east4.gcp.elastic-cloud.com:443', // api-host\n  'api-key-from-connect-page', // api-key\n  {\n    facets: {\n      actors: {\n        type: 'terms',\n        field: 'actors.keyword',\n        disjunctive: true,\n      },\n      directors: {\n        type: 'terms',\n        field: 'director.keyword',\n        size: 20,\n        disjunctive: true,\n      },\n      imdbrating: {\n        type: 'stats',\n        field: 'imdbrating',\n      },\n    },\n  }\n)\n----\n// NOTCONSOLE\n\n[NOTE]\n====\nIn {es}, the `keyword` type is used for fields that need to be searchable in their exact, unmodified form.\nThis means these queries are case-sensitive.\nWe use this type for facets because facets require aggregating and filtering data based on exact values or terms.\n====\n\nUse the `addFacetFilter` method to add facets to your query.\n\nIn the following example, we only want to return movies:\n\n* Featuring Harrison Ford as actor\n* Directed by George Lucas _or_ Ridley Scott\n* With an IMBD rating greater than 7.5\n\n[source, js]\n----\nconst results = await request()\n  .addFacetFilter('actors', 'Harrison Ford')\n  .addFacetFilter('directors', 'George Lucas')\n  .addFacetFilter('directors', 'Ridley Scott')\n  .addFacetFilter('imdbrating', {\n    gte: 7.5,\n  })\n  .search()\n----\n// NOTCONSOLE\n\nYou can access the facets in the results:\n\n[source, js]\n----\n{\n  \"took\": 1,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\": 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\": {\n      \"value\": 2,\n      \"relation\": \"eq\"\n    },\n    \"max_score\": 0,\n    \"hits\": [\n      {\n        \"_index\": \"imdb_movies\",\n        \"_id\": \"tt0076759\",\n        \"_score\": 0,\n        \"_source\": {\n          \"title\": \"Star Wars: Episode IV - A New Hope\",\n          \"actors\": [\n            \"Mark Hamill\",\n            \"Harrison Ford\",\n            \"Carrie Fisher\",\n            \"Peter Cushing\"\n          ],\n          \"plot\": \"Luke Skywalker joins forces with a Jedi Knight, a cocky pilot, a wookiee and two droids to save the universe from the Empire's world-destroying battle-station, while also attempting to rescue Princess Leia from the evil Darth Vader.\",\n          \"poster\": \"https://s3-eu-west-1.amazonaws.com/imdbimages/images/MV5BMTU4NTczODkwM15BMl5BanBnXkFtZTcwMzEyMTIyMw@@._V1_SX300.jpg\"\n        }\n      },\n      {\n        \"_index\": \"imdb_movies\",\n        \"_id\": \"tt0083658\",\n        \"_score\": 0,\n        \"_source\": {\n          \"title\": \"Blade Runner\",\n          \"actors\": [\n            \"Harrison Ford\",\n            \"Rutger Hauer\",\n            \"Sean Young\",\n            \"Edward James Olmos\"\n          ],\n          \"plot\": \"Deckard, a blade runner, has to track down and terminate 4 replicants who hijacked a ship in space and have returned to Earth seeking their maker.\",\n          \"poster\": \"https://s3-eu-west-1.amazonaws.com/imdbimages/images/MV5BMTA4MDQxNTk2NDheQTJeQWpwZ15BbWU3MDE2NjIyODk@._V1_SX300.jpg\"\n        }\n      }\n    ]\n  },\n  \"aggregations\": {},\n  \"facets\": [\n    {\n      \"name\": \"imdbrating_facet\",\n      \"stats\": {\n        \"min\": 8.300000190734863,\n        \"max\": 8.800000190734863,\n        \"avg\": 8.550000190734863,\n        \"sum\": 17.100000381469727,\n        \"count\": 2\n      }\n    },\n    {\n      \"name\": \"actors_facet\",\n      \"entries\": [\n        {\n          \"value\": \"Harrison Ford\",\n          \"count\": 2\n        },\n        {\n          \"value\": \"Carrie Fisher\",\n          \"count\": 1\n        },\n        {\n          \"value\": \"Edward James Olmos\",\n          \"count\": 1\n        },\n        {\n          \"value\": \"Mark Hamill\",\n          \"count\": 1\n        },\n        {\n          \"value\": \"Peter Cushing\",\n          \"count\": 1\n        },\n        {\n          \"value\": \"Rutger Hauer\",\n          \"count\": 1\n        },\n        {\n          \"value\": \"Sean Young\",\n          \"count\": 1\n        }\n      ]\n    },\n    {\n      \"name\": \"directors_facet\",\n      \"entries\": [\n        {\n          \"value\": \"Steven Spielberg\",\n          \"count\": 3\n        },\n        {\n          \"value\": \"Andrew Davis\",\n          \"count\": 1\n        },\n        {\n          \"value\": \"George Lucas\",\n          \"count\": 1\n        },\n        {\n          \"value\": \"Irvin Kershner\",\n          \"count\": 1\n        },\n        {\n          \"value\": \"Richard Marquand\",\n          \"count\": 1\n        },\n        {\n          \"value\": \"Ridley Scott\",\n          \"count\": 1\n        }\n      ]\n    }\n  ]\n}\n----\n// NOTCONSOLE\n"
}