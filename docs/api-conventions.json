{
    "meta": {
        "size": 16149,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/api-conventions.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "api-conventions",
        "version": "8.15"
    },
    "doc": "[[api-conventions]]\n== API conventions\n\nThe {es} REST APIs are exposed over HTTP.\nExcept where noted, the following conventions apply across all APIs.\n\n[discrete]\n=== Content-type requirements\n\nThe type of the content sent in a request body must be specified using\nthe `Content-Type` header. The value of this header must map to one of\nthe supported formats that the API supports. Most APIs support JSON,\nYAML, CBOR, and SMILE. The bulk and multi-search APIs support NDJSON,\nJSON, and SMILE; other types will result in an error response.\n\nWhen using the `source` query string parameter, the content type must be\nspecified using the `source_content_type` query string parameter.\n\n{es} only supports UTF-8-encoded JSON. {es} ignores any other encoding headings\nsent with a request. Responses are also UTF-8 encoded.\n\n[discrete]\n[[x-opaque-id]]\n=== `X-Opaque-Id` HTTP header\n\nYou can pass an `X-Opaque-Id` HTTP header to track the origin of a request in\n{es} logs and tasks. If provided, {es} surfaces the `X-Opaque-Id` value in the:\n\n* Response of any request that includes the header\n* <<_identifying_running_tasks,Task management API>> response\n* <<_identifying_search_slow_log_origin,Slow logs>>\n* <<deprecation-logging,Deprecation logs>>\n\nFor the deprecation logs, {es} also uses the `X-Opaque-Id` value to throttle\nand deduplicate deprecation warnings. See <<_deprecation_logs_throttling>>.\n\nThe `X-Opaque-Id` header accepts any arbitrary value. However, we recommend you\nlimit these values to a finite set, such as an ID per client. Don't generate a\nunique `X-Opaque-Id` header for every request. Too many unique `X-Opaque-Id`\nvalues can prevent {es} from deduplicating warnings in the deprecation logs.\n\n[discrete]\n[[traceparent]]\n=== `traceparent` HTTP header\n\n{es} also supports a `traceparent` HTTP header using the\nhttps://www.w3.org/TR/trace-context/#traceparent-header[official W3C trace\ncontext spec]. You can use the `traceparent` header to trace requests across\nElastic products and other services. Because it's only used for traces, you can\nsafely generate a unique `traceparent` header for each request.\n\nIf provided, {es} surfaces the header's `trace-id` value as `trace.id` in the:\n\n* <<logging,JSON {es} server logs>>\n* <<_identifying_search_slow_log_origin,Slow logs>>\n* <<deprecation-logging,Deprecation logs>>\n\nFor example, the following `traceparent` value would produce the following\n`trace.id` value in the above logs.\n\n[source,txt]\n----\n`traceparent`: 00-0af7651916cd43dd8448eb211c80319c-b7ad6b7169203331-01\n`trace.id`: 0af7651916cd43dd8448eb211c80319c\n----\n\n[discrete]\n[[get-requests]]\n=== GET and POST requests\n\nA number of {es} GET APIs--most notably the search API--support a request body.\nWhile the GET action makes sense in the context of retrieving information,\nGET requests with a body are not supported by all HTTP libraries.\nAll {es} GET APIs that require a body can also be submitted as POST requests.\nAlternatively, you can pass the request body as the\n<<api-request-body-query-string, `source` query string parameter>>\nwhen using GET.\n\ninclude::rest-api/cron-expressions.asciidoc[]\n\n[discrete]\n[[api-date-math-index-names]]\n=== Date math support in index and index alias names\n\nDate math name resolution lets you to search a range of time series indices or\nindex aliases rather than searching all of your indices and filtering the\nresults. Limiting the number of searched indices reduces cluster load and\nimproves search performance. For example, if you are searching for errors in\nyour daily logs, you can use a date math name template to restrict the search to\nthe past two days.\n\nMost APIs that accept an index or index alias argument support date math. A date\nmath name takes the following form:\n\n[source,txt]\n----------------------------------------------------------------------\n<static_name{date_math_expr{date_format|time_zone}}>\n----------------------------------------------------------------------\n\nWhere:\n\n[horizontal]\n`static_name`:: Static text\n`date_math_expr`:: Dynamic date math expression that computes the date dynamically\n`date_format`:: Optional format in which the computed date should be rendered. Defaults to `yyyy.MM.dd`. Format should be compatible with java-time https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html\n`time_zone`:: Optional time zone. Defaults to `UTC`.\n\nNOTE: Pay attention to the usage of small vs capital letters used in the `date_format`. For example:\n`mm` denotes minute of hour, while `MM` denotes month of year. Similarly `hh` denotes the hour in the\n`1-12` range in combination with `AM/PM`, while `HH` denotes the hour in the `0-23` 24-hour range.\n\nDate math expressions are resolved locale-independent. Consequently, it is not possible to use any other\ncalendars than the Gregorian calendar.\n\nYou must enclose date math names in angle brackets. If you use the name in a\nrequest path, special characters must be URI encoded. For example:\n\n[source,console]\n----\n# PUT /<my-index-{now/d}>\nPUT /%3Cmy-index-%7Bnow%2Fd%7D%3E\n----\n\n[NOTE]\n.Percent encoding of date math characters\n======================================================\nThe special characters used for date rounding must be URI encoded as follows:\n\n[horizontal]\n`<`:: `%3C`\n`>`:: `%3E`\n`/`:: `%2F`\n`{`:: `%7B`\n`}`:: `%7D`\n`|`:: `%7C`\n`+`:: `%2B`\n`:`:: `%3A`\n`,`:: `%2C`\n======================================================\n\nThe following example shows different forms of date math names and the final names\nthey resolve to given the current time is 22nd March 2024 noon UTC.\n\n[options=\"header\"]\n|======\n| Expression                                |Resolves to\n| `<logstash-{now/d}>`                      | `logstash-2024.03.22`\n| `<logstash-{now/M}>`                      | `logstash-2024.03.01`\n| `<logstash-{now/M{yyyy.MM}}>`             | `logstash-2024.03`\n| `<logstash-{now/M-1M{yyyy.MM}}>`          | `logstash-2024.02`\n| `<logstash-{now/d{yyyy.MM.dd\\|+12:00}}>`  | `logstash-2024.03.23`\n|======\n\nTo use the characters `{` and `}` in the static part of a name template, escape them\nwith a backslash `\\`, for example:\n\n * `<elastic\\\\{ON\\\\}-{now/M}>` resolves to `elastic{ON}-2024.03.01`\n\nThe following example shows a search request that searches the Logstash indices for the past\nthree days, assuming the indices use the default Logstash index name format,\n`logstash-YYYY.MM.dd`.\n\n[source,console]\n----------------------------------------------------------------------\n# GET /<logstash-{now/d-2d}>,<logstash-{now/d-1d}>,<logstash-{now/d}>/_search\nGET /%3Clogstash-%7Bnow%2Fd-2d%7D%3E%2C%3Clogstash-%7Bnow%2Fd-1d%7D%3E%2C%3Clogstash-%7Bnow%2Fd%7D%3E/_search\n{\n  \"query\" : {\n    \"match\": {\n      \"test\": \"data\"\n    }\n  }\n}\n----------------------------------------------------------------------\n// TEST[s/^/PUT logstash-2016.09.20\\nPUT logstash-2016.09.19\\nPUT logstash-2016.09.18\\n/]\n// TEST[s/now/2016.09.20%7C%7C/]\n\n[discrete]\n[[api-multi-index]]\n=== Multi-target syntax\n\nMost APIs that accept a `<data-stream>`, `<index>`, or `<target>` request path\nparameter also support _multi-target syntax_.\n\nIn multi-target syntax, you can use a comma-separated list to run a request on\nmultiple resources, such as data streams, indices, or aliases:\n`test1,test2,test3`. You can also use {wikipedia}/Glob_(programming)[glob-like]\nwildcard (`*`) expressions to target resources that match a pattern: `test*` or\n`*test` or `te*t` or `*test*`.\n\nYou can exclude targets using the `-` character: `test*,-test3`.\n\nIMPORTANT: Aliases are resolved after wildcard expressions. This can result in a\nrequest that targets an excluded alias. For example, if `test3` is an index\nalias, the pattern `test*,-test3` still targets the indices for `test3`. To\navoid this, exclude the concrete indices for the alias instead.\n\nYou can also exclude clusters from a list of clusters to search using the `-` character:\n`remote*:*,-remote1:*,-remote4:*` will search all clusters with an alias that starts\nwith \"remote\" except for \"remote1\" and \"remote4\". Note that to exclude a cluster\nwith this notation you must exclude all of its indexes. Excluding a subset of indexes\non a remote cluster is currently not supported. For example, this will throw an exception:\n`remote*:*,-remote1:logs*`.\n\nMulti-target APIs that can target indices support the following query\nstring parameters:\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=index-ignore-unavailable]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=allow-no-indices]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=expand-wildcards]\n\nThe defaults settings for the above parameters depend on the API being used.\n\nSome multi-target APIs that can target indices also support the following query\nstring parameter:\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=ignore_throttled]\n\nNOTE: APIs with a single target, such as the <<docs-get,get document API>>, do\nnot support multi-target syntax.\n\n[discrete]\n[[multi-hidden]]\n==== Hidden data streams and indices\n\nFor most APIs, wildcard expressions do not match hidden data streams and indices\nby default. To match hidden data streams and indices using a wildcard\nexpression, you must specify the `expand_wildcards` query parameter.\n\nAlternatively, querying an index pattern starting with a dot, such as\n`.watcher_hist*`, will match hidden indices by default. This is intended to\nmirror Unix file-globbing behavior and provide a smoother transition path to\nhidden indices.\n\nYou can create hidden data streams by setting `data_stream.hidden` to `true` in\nthe stream's matching <<indices-put-template,index template>>. You can hide\nindices using the <<index-hidden,`index.hidden`>> index setting.\n\nThe backing indices for data streams are hidden automatically. Some features,\nsuch as {ml}, store information in hidden indices.\n\nGlobal index templates that match all indices are not applied to hidden indices.\n\n[discrete]\n[[system-indices]]\n==== System indices\n\n{es} modules and plugins can store configuration and state information in internal _system indices_.\nYou should not directly access or modify system indices\nas they contain data essential to the operation of the system.\n\nIMPORTANT: Direct access to system indices is deprecated and\nwill no longer be allowed in a future major version.\n\n[discrete]\n[[api-conventions-parameters]]\n=== Parameters\n\nRest parameters (when using HTTP, map to HTTP URL parameters) follow the\nconvention of using underscore casing.\n\n[discrete]\n[[api-request-body-query-string]]\n=== Request body in query string\n\nFor libraries that don't accept a request body for non-POST requests,\nyou can pass the request body as the `source` query string parameter\ninstead. When using this method, the `source_content_type` parameter\nshould also be passed with a media type value that indicates the format\nof the source, such as `application/json`.\n\n[discrete]\n[[api-compatibility]]\n=== REST API version compatibility\n\nMajor version upgrades often include a number of breaking changes\nthat impact how you interact with {es}.\nWhile we recommend that you monitor the deprecation logs and\nupdate applications before upgrading {es},\nhaving to coordinate the necessary changes can be an impediment to upgrading.\n\nYou can enable an existing application to function without modification after\nan upgrade by including API compatibility headers, which tell {es} you are still\nusing the previous version of the REST API. Using these headers allows the\nstructure of requests and responses to remain the same; it does not guarantee\nthe same behavior.\n\n\nYou set version compatibility on a per-request basis in the `Content-Type` and `Accept` headers.\nSetting `compatible-with` to the same major version as\nthe version you're running has no impact,\nbut ensures that the request will still work after {es} is upgraded.\n\nTo tell {es} 8.0 you are using the 7.x request and response format,\nset `compatible-with=7`:\n\n[source,sh]\n----------------------------------------------------------------------\nContent-Type: application/vnd.elasticsearch+json; compatible-with=7\nAccept: application/vnd.elasticsearch+json; compatible-with=7\n----------------------------------------------------------------------\n\n[discrete]\n[[api-push-back]]\n=== HTTP `429 Too Many Requests` status code push back\n\n{es} APIs may respond with the HTTP `429 Too Many Requests` status code, indicating that the cluster is too busy\nto handle the request. When this happens, consider retrying after a short delay. If the retry also receives\na `429 Too Many Requests` response, extend the delay by backing off exponentially before each subsequent retry.\n\n[discrete]\n[[api-url-access-control]]\n=== URL-based access control\n\nMany users use a proxy with URL-based access control to secure access to\n{es} data streams and indices. For <<search-multi-search,multi-search>>,\n<<docs-multi-get,multi-get>>, and <<docs-bulk,bulk>> requests, the user has\nthe choice of specifying a data stream or  index in the URL and on each individual request\nwithin the request body. This can make URL-based access control challenging.\n\nTo prevent the user from overriding the data stream or index specified in the\nURL, set `rest.action.multi.allow_explicit_index` to `false` in `elasticsearch.yml`.\n\n\nThis causes  {es} to\nreject requests that explicitly specify a data stream or index in the request body.\n\n[discrete]\n=== Boolean Values\n\nAll REST API parameters (both request parameters and JSON body) support\nproviding boolean \"false\" as the value `false` and boolean \"true\" as the\nvalue `true`. All other values will raise an error.\n\n[[api-conventions-number-values]]\n[discrete]\n=== Number Values\n\nWhen passing a numeric parameter in a request body, you may use a `string`\ncontaining the number instead of the native numeric type. For example:\n\n[source,console]\n--------------------------------------------------\nPOST /_search\n{\n  \"size\": \"1000\"\n}\n--------------------------------------------------\n\nInteger-valued fields in a response body are described as `integer` (or\noccasionally `long`) in this manual, but there are generally no explicit bounds\non such values. JSON, SMILE, CBOR and YAML all permit arbitrarily large integer\nvalues. Do not assume that `integer` fields in a response body will always fit\ninto a 32-bit signed integer.\n\n[[byte-units]]\n[discrete]\n=== Byte size units\n\nWhenever the byte size of data needs to be specified, e.g. when setting a buffer size\nparameter, the value must specify the unit, like `10kb` for 10 kilobytes. Note that\nthese units use powers of 1024, so `1kb` means 1024 bytes. The supported units are:\n\n[horizontal]\n`b`::   Bytes\n`kb`::  Kilobytes\n`mb`::  Megabytes\n`gb`::  Gigabytes\n`tb`::  Terabytes\n`pb`::  Petabytes\n\n[[distance-units]]\n[discrete]\n=== Distance Units\n\nWherever distances need to be specified, such as the `distance` parameter in\nthe <<query-dsl-geo-distance-query>>), the default unit is meters if none is specified.\nDistances can be specified in other units, such as `\"1km\"` or\n`\"2mi\"` (2 miles).\n\nThe full list of units is listed below:\n\n[horizontal]\nMile::          `mi` or `miles`\nYard::          `yd` or `yards`\nFeet::          `ft` or `feet`\nInch::          `in` or `inch`\nKilometer::     `km` or `kilometers`\nMeter::         `m` or `meters`\nCentimeter::    `cm` or `centimeters`\nMillimeter::    `mm` or `millimeters`\nNautical mile:: `NM`, `nmi`, or `nauticalmiles`\n\n[discrete]\n[[time-units]]\n=== Time units\n\nWhenever durations need to be specified, e.g. for a `timeout` parameter, the duration must specify\nthe unit, like `2d` for 2 days. The supported units are:\n\n[horizontal]\n`d`::       Days\n`h`::       Hours\n`m`::       Minutes\n`s`::       Seconds\n`ms`::      Milliseconds\n`micros`::  Microseconds\n`nanos`::   Nanoseconds\n\n[[size-units]]\n[discrete]\n=== Unit-less quantities\n\nUnit-less quantities means that they don't have a \"unit\" like \"bytes\" or \"Hertz\" or \"meter\" or \"long tonne\".\n\nIf one of these quantities is large we'll print it out like 10m for 10,000,000 or 7k for 7,000. We'll still print 87\nwhen we mean 87 though. These are the supported multipliers:\n\n[horizontal]\n`k`::  Kilo\n`m`::  Mega\n`g`::  Giga\n`t`::  Tera\n`p`::  Peta\n\n\n\n"
}