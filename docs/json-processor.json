{
    "meta": {
        "size": 3474,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/json-processor.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "json-processor",
        "version": "8.15"
    },
    "doc": "[[json-processor]]\n=== JSON processor\n++++\n<titleabbrev>JSON</titleabbrev>\n++++\n\nConverts a JSON string into a structured JSON object.\n\n[[json-options]]\n.Json Options\n[options=\"header\"]\n|======\n| Name                            | Required  | Default   | Description\n| `field`                         | yes       | -         | The field to be parsed.\n| `target_field`                  | no        | `field`   | The field that the converted structured object will be written into. Any existing content in this field will be overwritten.\n| `add_to_root`                   | no        | false     | Flag that forces the parsed JSON to be added at the top level of the document. `target_field` must not be set when this option is chosen.\n| `add_to_root_conflict_strategy` | no        | `replace` | When set to `replace`, root fields that conflict with fields from the parsed JSON will be overridden. When set to `merge`, conflicting fields will be merged. Only applicable if `add_to_root` is set to `true`.\n| `allow_duplicate_keys`          | no        | false     | When set to `true`, the JSON parser will not fail if the JSON contains duplicate keys. Instead, the last encountered value for any duplicate key wins.\n| `strict_json_parsing`           | no        | true      | When set to `true`, the JSON parser will strictly parse the field value. When set to `false`, the JSON parser will be more lenient but also more likely to drop parts of the field value. For example if `strict_json_parsing` is set to `true` and the field value is `123 \"foo\"` then the processor will throw an IllegalArgumentException. But if `strict_json_parsing` is set to `false` then the field value will be parsed as `123`.\ninclude::common-options.asciidoc[]\n|======\n\nAll JSON-supported types will be parsed (null, boolean, number, array, object, string).\n\nSuppose you provide this configuration of the `json` processor:\n\n[source,js]\n--------------------------------------------------\n{\n  \"json\" : {\n    \"field\" : \"string_source\",\n    \"target_field\" : \"json_target\"\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf the following document is processed:\n\n[source,js]\n--------------------------------------------------\n{\n  \"string_source\": \"{\\\"foo\\\": 2000}\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nafter the `json` processor operates on it, it will look like:\n\n[source,js]\n--------------------------------------------------\n{\n  \"string_source\": \"{\\\"foo\\\": 2000}\",\n  \"json_target\": {\n    \"foo\": 2000\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf the following configuration is provided, omitting the optional `target_field` setting:\n[source,js]\n--------------------------------------------------\n{\n  \"json\" : {\n    \"field\" : \"source_and_target\"\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nthen after the `json` processor operates on this document:\n\n[source,js]\n--------------------------------------------------\n{\n  \"source_and_target\": \"{\\\"foo\\\": 2000}\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nit will look like:\n\n[source,js]\n--------------------------------------------------\n{\n  \"source_and_target\": {\n    \"foo\": 2000\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nThis illustrates that, unless it is explicitly named in the processor configuration, the `target_field`\nis the same field provided in the required `field` configuration.\n"
}