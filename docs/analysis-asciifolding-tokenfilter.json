{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.065606",
        "size": 3395,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-asciifolding-tokenfilter.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "analysis-asciifolding-tokenfilter",
        "version": "8.15"
    },
    "doc": "[[analysis-asciifolding-tokenfilter]]\n=== ASCII folding token filter\n++++\n<titleabbrev>ASCII folding</titleabbrev>\n++++\n\nConverts alphabetic, numeric, and symbolic characters that are not in the Basic\nLatin Unicode block (first 127 ASCII characters) to their ASCII equivalent, if\none exists. For example, the filter changes `\u00e0` to `a`.\n\nThis filter uses Lucene's\n{lucene-analysis-docs}/miscellaneous/ASCIIFoldingFilter.html[ASCIIFoldingFilter].\n\n[[analysis-asciifolding-tokenfilter-analyze-ex]]\n==== Example\n\nThe following <<indices-analyze,analyze API>> request uses the `asciifolding`\nfilter to drop the diacritical marks in `a\u00e7a\u00ed \u00e0 la carte`:\n\n[source,console]\n--------------------------------------------------\nGET /_analyze\n{\n  \"tokenizer\" : \"standard\",\n  \"filter\" : [\"asciifolding\"],\n  \"text\" : \"a\u00e7a\u00ed \u00e0 la carte\"\n}\n--------------------------------------------------\n\nThe filter produces the following tokens:\n\n[source,text]\n--------------------------------------------------\n[ acai, a, la, carte ]\n--------------------------------------------------\n\n/////////////////////\n[source,console-result]\n--------------------------------------------------\n{\n  \"tokens\" : [\n    {\n      \"token\" : \"acai\",\n      \"start_offset\" : 0,\n      \"end_offset\" : 4,\n      \"type\" : \"<ALPHANUM>\",\n      \"position\" : 0\n    },\n    {\n      \"token\" : \"a\",\n      \"start_offset\" : 5,\n      \"end_offset\" : 6,\n      \"type\" : \"<ALPHANUM>\",\n      \"position\" : 1\n    },\n    {\n      \"token\" : \"la\",\n      \"start_offset\" : 7,\n      \"end_offset\" : 9,\n      \"type\" : \"<ALPHANUM>\",\n      \"position\" : 2\n    },\n    {\n      \"token\" : \"carte\",\n      \"start_offset\" : 10,\n      \"end_offset\" : 15,\n      \"type\" : \"<ALPHANUM>\",\n      \"position\" : 3\n    }\n  ]\n}\n--------------------------------------------------\n/////////////////////\n\n[[analysis-asciifolding-tokenfilter-analyzer-ex]]\n==== Add to an analyzer\n\nThe following <<indices-create-index,create index API>> request uses the\n`asciifolding` filter to configure a new \n<<analysis-custom-analyzer,custom analyzer>>.\n\n[source,console]\n--------------------------------------------------\nPUT /asciifold_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"standard_asciifolding\": {\n          \"tokenizer\": \"standard\",\n          \"filter\": [ \"asciifolding\" ]\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n[[analysis-asciifolding-tokenfilter-configure-parms]]\n==== Configurable parameters\n\n`preserve_original`::\n(Optional, Boolean)\nIf `true`, emit both original tokens and folded tokens.\nDefaults to `false`.\n\n[[analysis-asciifolding-tokenfilter-customize]]\n==== Customize\n\nTo customize the `asciifolding` filter, duplicate it to create the basis\nfor a new custom token filter. You can modify the filter using its configurable\nparameters.\n\nFor example, the following request creates a custom `asciifolding` filter with\n`preserve_original` set to true:\n\n[source,console]\n--------------------------------------------------\nPUT /asciifold_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"standard_asciifolding\": {\n          \"tokenizer\": \"standard\",\n          \"filter\": [ \"my_ascii_folding\" ]\n        }\n      },\n      \"filter\": {\n        \"my_ascii_folding\": {\n          \"type\": \"asciifolding\",\n          \"preserve_original\": true\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n"
}