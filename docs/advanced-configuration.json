{
    "meta": {
        "timestamp": "2024-11-01T03:02:51.998587",
        "size": 6301,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/advanced-configuration.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "advanced-configuration",
        "version": "8.15"
    },
    "doc": "[[advanced-configuration]]\n=== Advanced configuration\n\nModifying advanced settings is generally not recommended and could negatively\nimpact performance and stability. Using the {es}-provided defaults\nis recommended in most circumstances.\n\n[[set-jvm-options]]\n==== Set JVM options\n\nIf needed, you can override the default JVM options by adding custom options\nfiles (preferred) or setting the `ES_JAVA_OPTS` environment variable.\n\nJVM options files must have the suffix '.options' and contain a line-delimited\nlist of JVM arguments. JVM processes options files in lexicographic order.\n\nWhere you put the JVM options files depends on the type of installation:\n\n* tar.gz or .zip: Add custom JVM options files to `config/jvm.options.d/`.\n* Debian or RPM: Add custom JVM options files to `/etc/elasticsearch/jvm.options.d/`.\n* Docker: Bind mount custom JVM options files into\n`/usr/share/elasticsearch/config/jvm.options.d/`.\n\nNOTE: Do not modify the root `jvm.options` file. Use files in `jvm.options.d/` instead.\n\n[[jvm-options-syntax]]\n===== JVM options syntax\n\nA JVM options file contains a line-delimited list of JVM arguments.\nArguments are preceded by a dash (`-`).\nTo apply the setting to specific versions, prepend the version\nor a range of versions followed by a colon.\n\n* Apply a setting to all versions:\n+\n[source,text]\n-------------------------------------\n-Xmx2g\n-------------------------------------\n\n* Apply a setting to a specific version:\n+\n[source,text]\n-------------------------------------\n17:-Xmx2g\n-------------------------------------\n\n* Apply a setting to a range of versions:\n+\n[source,text]\n-------------------------------------\n17-18:-Xmx2g\n-------------------------------------\n+\nTo apply a setting to a specific version and any later versions,\nomit the upper bound of the range.\nFor example, this setting applies to Java 8 and later:\n+\n[source,text]\n-------------------------------------\n17-:-Xmx2g\n-------------------------------------\n\nBlank lines are ignored. Lines beginning with `#` are treated as comments\nand ignored. Lines that aren't commented out and aren't recognized\nas valid JVM arguments are rejected and {es} will fail to start.\n\n[[jvm-options-env]]\n===== Use environment variables to set JVM options\n\nIn production, use JVM options files to override the\ndefault settings. In testing and development environments,\nyou can also set JVM options through the `ES_JAVA_OPTS` environment variable.\n\n[source,sh]\n---------------------------------\nexport ES_JAVA_OPTS=\"$ES_JAVA_OPTS -Djava.io.tmpdir=/path/to/temp/dir\"\n./bin/elasticsearch\n---------------------------------\n\nIf you're using the RPM or Debian packages, you can specify\n`ES_JAVA_OPTS` in the <<sysconfig,system configuration file>>.\n\nNOTE: {es} ignores the `JAVA_TOOL_OPTIONS` and `JAVA_OPTS` environment variables.\n\n[[set-jvm-heap-size]]\n==== Set the JVM heap size\n\nBy default, {es} automatically sets the JVM heap size based on a node's\n<<node-roles,roles>> and total memory.\nUsing the default sizing is recommended for most production environments.\n\n\nTo override the default heap size, set the minimum and maximum heap size\nsettings, `Xms` and `Xmx`. The minimum and maximum values must be the same.\n\nThe heap size should be based on the available RAM:\n\n* Set `Xms` and `Xmx` to no more than 50% of your total memory. {es} requires\nmemory for purposes other than the JVM heap. For example, {es} uses\noff-heap buffers for efficient network communication and relies\non the operating system's filesystem cache for\nefficient access to files. The JVM itself also requires some memory. It's\nnormal for {es} to use more memory than the limit\nconfigured with the `Xmx` setting.\n+\nNOTE: When running in a container, such as <<docker,Docker>>, total memory is\ndefined as the amount of memory visible to the container, not the total system\nmemory on the host.\n\n* Set `Xms` and `Xmx` to no more than the threshold for compressed ordinary\nobject pointers (oops). The exact threshold varies but 26GB is safe on most\nsystems and can be as large as 30GB on some systems. To verify you are under the\nthreshold, check the {es} log for an entry like this:\n+\n[source,txt]\n----\nheap size [1.9gb], compressed ordinary object pointers [true]\n----\n+\nOr check the `jvm.using_compressed_ordinary_object_pointers` value for the nodes using the <<cluster-nodes-info,nodes info API>>:\n+\n[source,console]\n----\nGET _nodes/_all/jvm\n----\n\nThe more heap available to {es}, the more memory it can use for its internal\ncaches. This leaves less memory for the operating system to use\nfor the filesystem cache. Larger heaps can also cause longer garbage\ncollection pauses.\n\nTo configure the heap size, add the `Xms` and `Xmx` JVM arguments to a\ncustom JVM options file with the extension `.options` and\nstore it in the `jvm.options.d/` directory.\nFor example, to set the maximum heap size to 2GB, set both `Xms` and `Xmx` to `2g`:\n\n[source,txt]\n------------------\n-Xms2g\n-Xmx2g\n------------------\n\nFor testing, you can also set the heap sizes using the `ES_JAVA_OPTS`\nenvironment variable:\n\n[source,sh]\n------------------\nES_JAVA_OPTS=\"-Xms2g -Xmx2g\" ./bin/elasticsearch\n------------------\n\nThe `ES_JAVA_OPTS` variable overrides all other JVM\noptions. We do not recommend using `ES_JAVA_OPTS` in production.\n\nNOTE: If you are running {es} as a Windows service, you can change the heap size\nusing the service manager. See <<windows-service>>.\n\n[[readiness-tcp-port]]\n===== Enable the Elasticsearch TCP readiness port\n\npreview::[]\n\nIf configured, a node can open a TCP port when the node is in a ready state. A node is deemed\nready when it has successfully joined a cluster. In a single node configuration, the node is\nsaid to be ready, when it's able to accept requests.\n\nTo enable the readiness TCP port, use the `readiness.port` setting. The readiness service will bind to\nall host addresses.\n\nIf the node leaves the cluster, or the <<put-shutdown,Shutdown API>> is used to mark the node\nfor shutdown, the readiness port is immediately closed.\n\nA successful connection to the readiness TCP port signals that the {es} node is ready. When a client\nconnects to the readiness port, the server simply terminates the socket connection. No data is sent back\nto the client. If a client cannot connect to the readiness port, the node is not ready.\n\n\n"
}