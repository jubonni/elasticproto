{
    "meta": {
        "timestamp": "2024-11-01T02:49:24.808076",
        "size": 4310,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/custom-realms.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "custom-realms",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[custom-realms]]\n=== Integrating with other authentication systems\n\nIf you are using an authentication system that is not supported out-of-the-box\nby the {es} {security-features}, you can create a custom realm to interact with\nit to authenticate users. You implement a custom realm as an SPI loaded security\nextension as part of an ordinary elasticsearch plugin.\n\n[[implementing-custom-realm]]\n==== Implementing a custom realm\n\nSample code that illustrates the structure and implementation of a custom realm\nis provided in https://github.com/elastic/elasticsearch/tree/{branch}/x-pack/qa/security-example-spi-extension. You can use this code as a starting point for creating your\nown realm.\n\nTo create a custom realm, you need to:\n\n. Extend `org.elasticsearch.xpack.security.authc.Realm` to communicate with your\n  authentication system to authenticate users.\n. Implement the `org.elasticsearch.xpack.security.authc.Realm.Factory` interface in\n  a class that will be used to create the custom realm.\n. Extend `org.elasticsearch.xpack.security.authc.DefaultAuthenticationFailureHandler` to\n  handle authentication failures when using your custom realm.\n\nTo package your custom realm as a plugin:\n\n. Implement an extension class for your realm that extends\n  `org.elasticsearch.xpack.core.security.SecurityExtension`. There you need to\n  override one or more of the following methods:\n+\n[source,java]\n----------------------------------------------------\n@Override\npublic Map<String, Factory> getRealms() {\n    ...\n}\n----------------------------------------------------\n+\nThe `getRealms` method is used to provide a map of type names to the `Factory` that\nwill be used to create the realm.\n+\n[source,java]\n----------------------------------------------------\n@Override\npublic AuthenticationFailureHandler getAuthenticationFailureHandler() {\n    ...\n}\n----------------------------------------------------\n+\nThe `getAuthenticationFailureHandler` method is used to optionally provide a\ncustom `AuthenticationFailureHandler`, which will control how the\n{es} {security-features} respond in certain authentication failure events.\n+\n[source,java]\n----------------------------------------------------\n@Override\npublic List<String> getSettingsFilter() {\n    ...\n}\n----------------------------------------------------\n+\nThe `Plugin#getSettingsFilter` method returns a list of setting names that should be\nfiltered from the settings APIs as they may contain sensitive credentials. Note this method is not\npart of the `SecurityExtension` interface, it's available as part of the elasticsearch plugin main class.\n\n. Create a build configuration file for the plugin; Gradle is our recommendation.\n. Create a `META-INF/services/org.elasticsearch.xpack.core.security.SecurityExtension` descriptor file for the\n  extension that contains the fully qualified class name of your `org.elasticsearch.xpack.core.security.SecurityExtension` implementation\n. Bundle all in a single zip file.\n\n[[using-custom-realm]]\n==== Using a custom realm to authenticate users\n\nTo use a custom realm:\n\n. Install the realm extension on each node in the cluster. You run\n  `bin/elasticsearch-plugin` with the `install` sub-command and specify the URL\n  pointing to the zip file that contains the extension. For example:\n+\n[source,shell]\n----------------------------------------\nbin/elasticsearch-plugin install file:///<path>/my-realm-1.0.zip\n----------------------------------------\n\n. Add a realm configuration of the appropriate realm type to `elasticsearch.yml`\nunder the `xpack.security.authc.realms` namespace.\nYou must define your realm within the namespace that matches the type defined\nby the extension.\nThe options you can set depend on the settings exposed by the custom realm.\nAt a minimum, you must explicitly set the `order` attribute to control the\norder in which the realms are consulted during authentication. You must also\nmake sure each configured realm has a distinct `order` setting. In the event\nthat two or more realms have the same `order`, the node will fail to start.\n+\nIMPORTANT: When you configure realms in `elasticsearch.yml`, only the\nrealms you specify are used for authentication. If you also want to use the\n`native` or `file` realms, you must include them in the realm chain.\n\n. Restart Elasticsearch.\n"
}