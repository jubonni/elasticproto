{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.606595",
        "size": 6445,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis-standard-analyzer.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "analysis-standard-analyzer",
        "version": "8.15"
    },
    "doc": "[[analysis-standard-analyzer]]\n=== Standard analyzer\n++++\n<titleabbrev>Standard</titleabbrev>\n++++\n\nThe `standard` analyzer is the default analyzer which is used if none is\nspecified. It provides grammar based tokenization (based on the Unicode Text\nSegmentation algorithm, as specified in\nhttps://unicode.org/reports/tr29/[Unicode Standard Annex #29]) and works well\nfor most languages.\n\n[discrete]\n=== Example output\n\n[source,console]\n---------------------------\nPOST _analyze\n{\n  \"analyzer\": \"standard\",\n  \"text\": \"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone.\"\n}\n---------------------------\n\n/////////////////////\n\n[source,console-result]\n----------------------------\n{\n  \"tokens\": [\n    {\n      \"token\": \"the\",\n      \"start_offset\": 0,\n      \"end_offset\": 3,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 0\n    },\n    {\n      \"token\": \"2\",\n      \"start_offset\": 4,\n      \"end_offset\": 5,\n      \"type\": \"<NUM>\",\n      \"position\": 1\n    },\n    {\n      \"token\": \"quick\",\n      \"start_offset\": 6,\n      \"end_offset\": 11,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 2\n    },\n    {\n      \"token\": \"brown\",\n      \"start_offset\": 12,\n      \"end_offset\": 17,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 3\n    },\n    {\n      \"token\": \"foxes\",\n      \"start_offset\": 18,\n      \"end_offset\": 23,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 4\n    },\n    {\n      \"token\": \"jumped\",\n      \"start_offset\": 24,\n      \"end_offset\": 30,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 5\n    },\n    {\n      \"token\": \"over\",\n      \"start_offset\": 31,\n      \"end_offset\": 35,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 6\n    },\n    {\n      \"token\": \"the\",\n      \"start_offset\": 36,\n      \"end_offset\": 39,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 7\n    },\n    {\n      \"token\": \"lazy\",\n      \"start_offset\": 40,\n      \"end_offset\": 44,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 8\n    },\n    {\n      \"token\": \"dog's\",\n      \"start_offset\": 45,\n      \"end_offset\": 50,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 9\n    },\n    {\n      \"token\": \"bone\",\n      \"start_offset\": 51,\n      \"end_offset\": 55,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 10\n    }\n  ]\n}\n----------------------------\n\n/////////////////////\n\n\nThe above sentence would produce the following terms:\n\n[source,text]\n---------------------------\n[ the, 2, quick, brown, foxes, jumped, over, the, lazy, dog's, bone ]\n---------------------------\n\n[discrete]\n=== Configuration\n\nThe `standard` analyzer accepts the following parameters:\n\n[horizontal]\n`max_token_length`::\n\n    The maximum token length. If a token is seen that exceeds this length then\n    it is split at `max_token_length` intervals. Defaults to `255`.\n\n`stopwords`::\n\n    A pre-defined stop words list like `_english_` or an array containing a\n    list of stop words. Defaults to `_none_`.\n\n`stopwords_path`::\n\n    The path to a file containing stop words.\n\nSee the <<analysis-stop-tokenfilter,Stop Token Filter>> for more information\nabout stop word configuration.\n\n\n[discrete]\n=== Example configuration\n\nIn this example, we configure the `standard` analyzer to have a\n`max_token_length` of 5 (for demonstration purposes), and to use the\npre-defined list of English stop words:\n\n[source,console]\n----------------------------\nPUT my-index-000001\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_english_analyzer\": {\n          \"type\": \"standard\",\n          \"max_token_length\": 5,\n          \"stopwords\": \"_english_\"\n        }\n      }\n    }\n  }\n}\n\nPOST my-index-000001/_analyze\n{\n  \"analyzer\": \"my_english_analyzer\",\n  \"text\": \"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone.\"\n}\n----------------------------\n\n/////////////////////\n\n[source,console-result]\n----------------------------\n{\n  \"tokens\": [\n    {\n      \"token\": \"2\",\n      \"start_offset\": 4,\n      \"end_offset\": 5,\n      \"type\": \"<NUM>\",\n      \"position\": 1\n    },\n    {\n      \"token\": \"quick\",\n      \"start_offset\": 6,\n      \"end_offset\": 11,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 2\n    },\n    {\n      \"token\": \"brown\",\n      \"start_offset\": 12,\n      \"end_offset\": 17,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 3\n    },\n    {\n      \"token\": \"foxes\",\n      \"start_offset\": 18,\n      \"end_offset\": 23,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 4\n    },\n    {\n      \"token\": \"jumpe\",\n      \"start_offset\": 24,\n      \"end_offset\": 29,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 5\n    },\n    {\n      \"token\": \"d\",\n      \"start_offset\": 29,\n      \"end_offset\": 30,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 6\n    },\n    {\n      \"token\": \"over\",\n      \"start_offset\": 31,\n      \"end_offset\": 35,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 7\n    },\n    {\n      \"token\": \"lazy\",\n      \"start_offset\": 40,\n      \"end_offset\": 44,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 9\n    },\n    {\n      \"token\": \"dog's\",\n      \"start_offset\": 45,\n      \"end_offset\": 50,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 10\n    },\n    {\n      \"token\": \"bone\",\n      \"start_offset\": 51,\n      \"end_offset\": 55,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 11\n    }\n  ]\n}\n----------------------------\n\n/////////////////////\n\nThe above example produces the following terms:\n\n[source,text]\n---------------------------\n[ 2, quick, brown, foxes, jumpe, d, over, lazy, dog's, bone ]\n---------------------------\n\n[discrete]\n=== Definition\n\nThe `standard` analyzer consists of:\n\nTokenizer::\n* <<analysis-standard-tokenizer,Standard Tokenizer>>\n\nToken Filters::\n* <<analysis-lowercase-tokenfilter,Lower Case Token Filter>>\n* <<analysis-stop-tokenfilter,Stop Token Filter>> (disabled by default)\n\nIf you need to customize the `standard` analyzer beyond the configuration\nparameters then you need to recreate it as a `custom` analyzer and modify\nit, usually by adding token filters. This would recreate the built-in\n`standard` analyzer and you can use it as a starting point:\n\n[source,console]\n----------------------------------------------------\nPUT /standard_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"rebuilt_standard\": {\n          \"tokenizer\": \"standard\",\n          \"filter\": [\n            \"lowercase\"       <1>\n          ]\n        }\n      }\n    }\n  }\n}\n----------------------------------------------------\n// TEST[s/\\n$/\\nstartyaml\\n  - compare_analyzers: {index: standard_example, first: standard, second: rebuilt_standard}\\nendyaml\\n/]\n<1> You'd add any token filters after `lowercase`.\n"
}