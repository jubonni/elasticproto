{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.462070",
        "size": 27276,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest.html",
        "type": "documentation",
        "role": [
            "screenshot",
            "screenshot",
            "screenshot",
            "screenshot"
        ],
        "has_code": false,
        "title": "ingest",
        "version": "8.15"
    },
    "doc": "[[ingest]]\n= Ingest pipelines\n\nIngest pipelines let you perform common transformations on your data before\nindexing. For example, you can use pipelines to remove fields, extract values\nfrom text, and enrich your data.\n\nA pipeline consists of a series of configurable tasks called\n<<processors,processors>>. Each processor runs sequentially, making specific\nchanges to incoming documents. After the processors have run, {es} adds the\ntransformed documents to your data stream or index.\n\nimage::images/ingest/ingest-process.svg[Ingest pipeline diagram,align=\"center\"]\n\nYou can create and manage ingest pipelines using {kib}'s **Ingest Pipelines**\nfeature or the <<ingest-apis,ingest APIs>>. {es} stores pipelines in the\n<<cluster-state,cluster state>>.\n\n[discrete]\n[[ingest-prerequisites]]\n=== Prerequisites\n\n* Nodes with the <<node-ingest-node,`ingest`>> node role handle pipeline\nprocessing. To use ingest pipelines, your cluster must have at least one node\nwith the `ingest` role. For heavy ingest loads, we recommend creating\n<<node-ingest-node,dedicated ingest nodes>>.\n\n* If the {es} security features are enabled, you must have the `manage_pipeline`\n<<privileges-list-cluster,cluster privilege>> to manage ingest pipelines. To use\n{kib}'s **Ingest Pipelines** feature, you also need the\n`cluster:monitor/nodes/info` cluster privileges.\n\n* Pipelines including the `enrich` processor require additional setup. See\n<<ingest-enriching-data>>.\n\n[discrete]\n[[create-manage-ingest-pipelines]]\n=== Create and manage pipelines\n\nIn {kib}, open the main menu and click **Stack Management > Ingest\nPipelines**. From the list view, you can:\n\n* View a list of your pipelines and drill down into details\n* Edit or clone existing pipelines\n* Delete pipelines\n\n[role=\"screenshot\"]\nimage::images/ingest/ingest-pipeline-list.png[Kibana's Ingest Pipelines list view,align=\"center\"]\n\nTo create a pipeline, click **Create pipeline > New pipeline**. For an example\ntutorial, see <<common-log-format-example>>.\n\nTIP: The **New pipeline from CSV** option lets you use a CSV to create an ingest\npipeline that maps custom data to the {ecs-ref}[Elastic Common Schema (ECS)].\nMapping your custom data to ECS makes the data easier to search and lets you\nreuse visualizations from other datasets. To get started, check\n{ecs-ref}/ecs-converting.html[Map custom data to ECS].\n\nYou can also use the <<ingest-apis,ingest APIs>> to create and manage pipelines.\nThe following <<put-pipeline-api,create pipeline API>> request creates\na pipeline containing two <<set-processor,`set`>> processors followed by a\n<<lowercase-processor,`lowercase`>> processor. The processors run sequentially\nin the order specified.\n\n[source,console]\n----\nPUT _ingest/pipeline/my-pipeline\n{\n  \"description\": \"My optional pipeline description\",\n  \"processors\": [\n    {\n      \"set\": {\n        \"description\": \"My optional processor description\",\n        \"field\": \"my-long-field\",\n        \"value\": 10\n      }\n    },\n    {\n      \"set\": {\n        \"description\": \"Set 'my-boolean-field' to true\",\n        \"field\": \"my-boolean-field\",\n        \"value\": true\n      }\n    },\n    {\n      \"lowercase\": {\n        \"field\": \"my-keyword-field\"\n      }\n    }\n  ]\n}\n----\n// TESTSETUP\n\n[discrete]\n[[manage-pipeline-versions]]\n=== Manage pipeline versions\n\nWhen you create or update a pipeline, you can specify an optional `version`\ninteger. You can use this version number with the\n<<put-pipeline-api-query-params,`if_version`>> parameter to conditionally\nupdate the pipeline. When the `if_version` parameter is specified, a successful\nupdate increments the pipeline's version.\n\n[source,console]\n----\nPUT _ingest/pipeline/my-pipeline-id\n{\n  \"version\": 1,\n  \"processors\": [ ... ]\n}\n----\n// TEST[s/\\.\\.\\./{\"lowercase\": {\"field\":\"my-keyword-field\"}}/]\n\nTo unset the `version` number using the API, replace or update the pipeline\nwithout specifying the `version` parameter.\n\n[discrete]\n[[test-pipeline]]\n=== Test a pipeline\n\nBefore using a pipeline in production, we recommend you test it using sample\ndocuments. When creating or editing a pipeline in {kib}, click **Add\ndocuments**. In the **Documents** tab, provide sample documents and click **Run\nthe pipeline**.\n\n[role=\"screenshot\"]\nimage::images/ingest/test-a-pipeline.png[Test a pipeline in Kibana,align=\"center\"]\n\nYou can also test pipelines using the <<simulate-pipeline-api,simulate pipeline\nAPI>>. You can specify a configured pipeline in the request path. For example,\nthe following request tests `my-pipeline`.\n\n[source,console]\n----\nPOST _ingest/pipeline/my-pipeline/_simulate\n{\n  \"docs\": [\n    {\n      \"_source\": {\n        \"my-keyword-field\": \"FOO\"\n      }\n    },\n    {\n      \"_source\": {\n        \"my-keyword-field\": \"BAR\"\n      }\n    }\n  ]\n}\n----\n\nAlternatively, you can specify a pipeline and its processors in the request\nbody.\n\n[source,console]\n----\nPOST _ingest/pipeline/_simulate\n{\n  \"pipeline\": {\n    \"processors\": [\n      {\n        \"lowercase\": {\n          \"field\": \"my-keyword-field\"\n        }\n      }\n    ]\n  },\n  \"docs\": [\n    {\n      \"_source\": {\n        \"my-keyword-field\": \"FOO\"\n      }\n    },\n    {\n      \"_source\": {\n        \"my-keyword-field\": \"BAR\"\n      }\n    }\n  ]\n}\n----\n\nThe API returns transformed documents:\n\n[source,console-result]\n----\n{\n  \"docs\": [\n    {\n      \"doc\": {\n        \"_index\": \"_index\",\n        \"_id\": \"_id\",\n        \"_version\": \"-3\",\n        \"_source\": {\n          \"my-keyword-field\": \"foo\"\n        },\n        \"_ingest\": {\n          \"timestamp\": \"2099-03-07T11:04:03.000Z\"\n        }\n      }\n    },\n    {\n      \"doc\": {\n        \"_index\": \"_index\",\n        \"_id\": \"_id\",\n        \"_version\": \"-3\",\n        \"_source\": {\n          \"my-keyword-field\": \"bar\"\n        },\n        \"_ingest\": {\n          \"timestamp\": \"2099-03-07T11:04:04.000Z\"\n        }\n      }\n    }\n  ]\n}\n----\n// TESTRESPONSE[s/\"2099-03-07T11:04:03.000Z\"/$body.docs.0.doc._ingest.timestamp/]\n// TESTRESPONSE[s/\"2099-03-07T11:04:04.000Z\"/$body.docs.1.doc._ingest.timestamp/]\n\n[discrete]\n[[add-pipeline-to-indexing-request]]\n=== Add a pipeline to an indexing request\n\nUse the `pipeline` query parameter to apply a pipeline to documents in\n<<docs-index_,individual>> or <<docs-bulk,bulk>> indexing requests.\n\n[source,console]\n----\nPOST my-data-stream/_doc?pipeline=my-pipeline\n{\n  \"@timestamp\": \"2099-03-07T11:04:05.000Z\",\n  \"my-keyword-field\": \"foo\"\n}\n\nPUT my-data-stream/_bulk?pipeline=my-pipeline\n{ \"create\":{ } }\n{ \"@timestamp\": \"2099-03-07T11:04:06.000Z\", \"my-keyword-field\": \"foo\" }\n{ \"create\":{ } }\n{ \"@timestamp\": \"2099-03-07T11:04:07.000Z\", \"my-keyword-field\": \"bar\" }\n----\n// TEST[setup:my_data_stream]\n// TEST[teardown:data_stream_cleanup]\n\nYou can also use the `pipeline` parameter with the <<docs-update-by-query,update\nby query>> or <<docs-reindex,reindex>> APIs.\n\n[source,console]\n----\nPOST my-data-stream/_update_by_query?pipeline=my-pipeline\n\nPOST _reindex\n{\n  \"source\": {\n    \"index\": \"my-data-stream\"\n  },\n  \"dest\": {\n    \"index\": \"my-new-data-stream\",\n    \"op_type\": \"create\",\n    \"pipeline\": \"my-pipeline\"\n  }\n}\n----\n// TEST[setup:my_data_stream]\n// TEST[teardown:data_stream_cleanup]\n\n[discrete]\n[[set-default-pipeline]]\n=== Set a default pipeline\n\nUse the <<index-default-pipeline,`index.default_pipeline`>> index setting to set\na default pipeline. {es} applies this pipeline to indexing requests if no\n`pipeline` parameter is specified.\n\n[discrete]\n[[set-final-pipeline]]\n=== Set a final pipeline\n\nUse the <<index-final-pipeline,`index.final_pipeline`>> index setting to set a\nfinal pipeline. {es} applies this pipeline after the request or default\npipeline, even if neither is specified.\n\n[discrete]\n[[pipelines-for-beats]]\n=== Pipelines for {beats}\n\nTo add an ingest pipeline to an Elastic Beat, specify the `pipeline`\nparameter under `output.elasticsearch` in `<BEAT_NAME>.yml`. For example,\nfor {filebeat}, you'd specify `pipeline` in `filebeat.yml`.\n\n[source,yaml]\n----\noutput.elasticsearch:\n  hosts: [\"localhost:9200\"]\n  pipeline: my-pipeline\n----\n\n[discrete]\n[[pipelines-for-fleet-elastic-agent]]\n=== Pipelines for {fleet} and {agent}\n\n{agent} integrations ship with default ingest pipelines that preprocess and enrich data before indexing.\n{fleet-guide}/index.html[{fleet}] applies these pipelines using <<index-templates,index\ntemplates>> that include <<set-default-pipeline,pipeline index settings>>. {es}\nmatches these templates to your {fleet} data streams based on the\n{fleet-guide}/data-streams.html#data-streams-naming-scheme[stream's naming\nscheme].\n\nEach default integration pipeline calls a nonexistent, unversioned `*@custom` ingest pipeline.\nIf unaltered, this pipeline call has no effect on your data. However, you can modify this call to\ncreate custom pipelines for integrations that persist across upgrades.\nRefer to {fleet-guide}/data-streams-pipeline-tutorial.html[Tutorial: Transform data with custom ingest pipelines] to learn more.\n\n{fleet} doesn't provide a default ingest pipeline for the **Custom logs** integration,\nbut you can specify a pipeline for this integration using an\n<<pipeline-custom-logs-index-template,index template>> or a\n<<pipeline-custom-logs-configuration,custom configuration>>.\n\n[[pipeline-custom-logs-index-template]]\n**Option 1: Index template**\n\n// tag::create-name-custom-logs-pipeline[]\n. <<create-manage-ingest-pipelines,Create>> and <<test-pipeline,test>> your\ningest pipeline. Name your pipeline `logs-<dataset-name>-default`. This makes\ntracking the pipeline for your integration easier.\n+\n--\nFor example, the following request creates a pipeline for the `my-app` dataset.\nThe pipeline's name is `logs-my_app-default`.\n\n[source,console]\n----\nPUT _ingest/pipeline/logs-my_app-default\n{\n  \"description\": \"Pipeline for `my_app` dataset\",\n  \"processors\": [ ... ]\n}\n----\n// TEST[s/\\.\\.\\./{\"lowercase\": {\"field\":\"my-keyword-field\"}}/]\n--\n// end::create-name-custom-logs-pipeline[]\n\n. Create an <<index-templates,index template>> that includes your pipeline in\nthe <<index-default-pipeline,`index.default_pipeline`>> or\n<<index-final-pipeline,`index.final_pipeline`>> index setting. Ensure the\ntemplate is <<create-index-template,data stream enabled>>. The\ntemplate's index pattern should match `logs-<dataset-name>-*`.\n+\n--\nYou can create this template using {kib}'s <<manage-index-templates,**Index\nManagement**>> feature or the <<indices-put-template,create index template\nAPI>>.\n\nFor example, the following request creates a template matching `logs-my_app-*`.\nThe template uses a component template that contains the\n`index.default_pipeline` index setting.\n\n[source,console]\n----\n# Creates a component template for index settings\nPUT _component_template/logs-my_app-settings\n{\n  \"template\": {\n    \"settings\": {\n      \"index.default_pipeline\": \"logs-my_app-default\",\n      \"index.lifecycle.name\": \"logs\"\n    }\n  }\n}\n\n# Creates an index template matching `logs-my_app-*`\nPUT _index_template/logs-my_app-template\n{\n  \"index_patterns\": [\"logs-my_app-*\"],\n  \"data_stream\": { },\n  \"priority\": 500,\n  \"composed_of\": [\"logs-my_app-settings\", \"logs-my_app-mappings\"]\n}\n----\n// TEST[continued]\n// TEST[s/, \"logs-my_app-mappings\"//]\n--\n// tag::name-custom-logs-dataset[]\n. When adding or editing your **Custom logs** integration in {fleet},\nclick **Configure integration > Custom log file > Advanced options**.\n\n. In **Dataset name**, specify your dataset's name. {fleet} will add new data\nfor the integration to the resulting `logs-<dataset-name>-default` data stream.\n+\nFor example, if your dataset's name was `my_app`, {fleet} adds new data to the\n`logs-my_app-default` data stream.\n// end::name-custom-logs-dataset[]\n+\n[role=\"screenshot\"]\nimage::images/ingest/custom-logs.png[Set up custom log integration in Fleet,align=\"center\"]\n\n. Use the <<indices-rollover-index,rollover API>> to roll over your data stream.\nThis ensures {es} applies the index template and its pipeline settings to any\nnew data for the integration.\n+\n--\n////\n[source,console]\n----\nPUT _data_stream/logs-my_app-default\n----\n// TEST[continued]\n////\n\n[source,console]\n----\nPOST logs-my_app-default/_rollover/\n----\n// TEST[continued]\n\n////\n[source,console]\n----\nDELETE _data_stream/*\nDELETE _index_template/*\n----\n// TEST[continued]\n////\n--\n\n[[pipeline-custom-logs-configuration]]\n**Option 2: Custom configuration**\n\ninclude::ingest.asciidoc[tag=create-name-custom-logs-pipeline]\n\ninclude::ingest.asciidoc[tag=name-custom-logs-dataset]\n\n. In **Custom Configurations**, specify your pipeline in the `pipeline` policy\nsetting.\n+\n[role=\"screenshot\"]\nimage::images/ingest/custom-logs-pipeline.png[Custom pipeline configuration for custom log integration,align=\"center\"]\n\n**{agent} standalone**\n\nIf you run {agent} standalone, you can apply pipelines using an\n<<index-templates,index template>> that includes the\n<<index-default-pipeline,`index.default_pipeline`>> or\n<<index-final-pipeline,`index.final_pipeline`>> index setting. Alternatively,\nyou can specify the `pipeline` policy setting in your `elastic-agent.yml`\nconfiguration. See {fleet-guide}/install-standalone-elastic-agent.html[Install standalone {agent}s].\n\n[discrete]\n[[pipelines-in-enterprise-search]]\n=== Pipelines for search indices\n\nWhen you create Elasticsearch indices for search use cases, for example, using the {enterprise-search-ref}/crawler.html[web crawler^] or <<es-connectors,connectors>>, these indices are automatically set up with specific ingest pipelines.\nThese processors help optimize your content for search.\nSee <<ingest-pipeline-search>> for more information.\n\n[discrete]\n[[access-source-fields]]\n=== Access source fields in a processor\n\nProcessors have read and write access to an incoming document's source fields.\nTo access a field key in a processor, use its field name. The following `set`\nprocessor accesses `my-long-field`.\n\n[source,console]\n----\nPUT _ingest/pipeline/my-pipeline\n{\n  \"processors\": [\n    {\n      \"set\": {\n        \"field\": \"my-long-field\",\n        \"value\": 10\n      }\n    }\n  ]\n}\n----\n\nYou can also prepend the `_source` prefix.\n\n[source,console]\n----\nPUT _ingest/pipeline/my-pipeline\n{\n  \"processors\": [\n    {\n      \"set\": {\n        \"field\": \"_source.my-long-field\",\n        \"value\": 10\n      }\n    }\n  ]\n}\n----\n\nUse dot notation to access object fields.\n\nIMPORTANT: If your document contains flattened objects, use the\n<<dot-expand-processor,`dot_expander`>> processor to expand them first. Other\ningest processors cannot access flattened objects.\n\n[source,console]\n----\nPUT _ingest/pipeline/my-pipeline\n{\n  \"processors\": [\n    {\n      \"dot_expander\": {\n        \"description\": \"Expand 'my-object-field.my-property'\",\n        \"field\": \"my-object-field.my-property\"\n      }\n    },\n    {\n      \"set\": {\n        \"description\": \"Set 'my-object-field.my-property' to 10\",\n        \"field\": \"my-object-field.my-property\",\n        \"value\": 10\n      }\n    }\n  ]\n}\n----\n\n[[template-snippets]]\nSeveral processor parameters support https://mustache.github.io[Mustache]\ntemplate snippets. To access field values in a template snippet, enclose the\nfield name in triple curly brackets:`{{{field-name}}}`. You can use template\nsnippets to dynamically set field names.\n\n[source,console]\n----\nPUT _ingest/pipeline/my-pipeline\n{\n  \"processors\": [\n    {\n      \"set\": {\n        \"description\": \"Set dynamic '<service>' field to 'code' value\",\n        \"field\": \"{{{service}}}\",\n        \"value\": \"{{{code}}}\"\n      }\n    }\n  ]\n}\n----\n\n[discrete]\n[[access-metadata-fields]]\n=== Access metadata fields in a processor\n\nProcessors can access the following metadata fields by name:\n\n* `_index`\n* `_id`\n* `_routing`\n* `_dynamic_templates`\n\n[source,console]\n----\nPUT _ingest/pipeline/my-pipeline\n{\n  \"processors\": [\n    {\n      \"set\": {\n        \"description\": \"Set '_routing' to 'geoip.country_iso_code' value\",\n        \"field\": \"_routing\",\n        \"value\": \"{{{geoip.country_iso_code}}}\"\n      }\n    }\n  ]\n}\n----\n\nUse a Mustache template snippet to access metadata field values. For example,\n`{{{_routing}}}` retrieves a document's routing value.\n\n[source,console]\n----\nPUT _ingest/pipeline/my-pipeline\n{\n  \"processors\": [\n    {\n      \"set\": {\n        \"description\": \"Use geo_point dynamic template for address field\",\n        \"field\": \"_dynamic_templates\",\n        \"value\": {\n          \"address\": \"geo_point\"\n        }\n      }\n    }\n  ]\n}\n----\n\nThe set processor above tells ES to use the dynamic template named `geo_point`\nfor the field `address` if this field is not defined in the mapping of the index\nyet. This processor overrides the dynamic template for the field `address` if\nalready defined in the bulk request, but has no effect on other dynamic\ntemplates defined in the bulk request.\n\nWARNING: If you <<create-document-ids-automatically,automatically generate>>\ndocument IDs, you cannot use `{{{_id}}}` in a processor. {es} assigns\nauto-generated `_id` values after ingest.\n\n[discrete]\n[[access-ingest-metadata]]\n=== Access ingest metadata in a processor\n\nIngest processors can add and access ingest metadata using the `_ingest` key.\n\nUnlike source and metadata fields, {es} does not index ingest metadata fields by\ndefault. {es} also allows source fields that start with an `_ingest` key. If\nyour data includes such source fields, use `_source._ingest` to access them.\n\nPipelines only create the `_ingest.timestamp` ingest metadata field by default.\nThis field contains a timestamp of when {es} received the document's indexing\nrequest. To index `_ingest.timestamp` or other ingest metadata fields, use the\n`set` processor.\n\n[source,console]\n----\nPUT _ingest/pipeline/my-pipeline\n{\n  \"processors\": [\n    {\n      \"set\": {\n        \"description\": \"Index the ingest timestamp as 'event.ingested'\",\n        \"field\": \"event.ingested\",\n        \"value\": \"{{{_ingest.timestamp}}}\"\n      }\n    }\n  ]\n}\n----\n\n[discrete]\n[[handling-pipeline-failures]]\n=== Handling pipeline failures\n\nA pipeline's processors run sequentially. By default, pipeline processing stops\nwhen one of these processors fails or encounters an error.\n\nTo ignore a processor failure and run the pipeline's remaining processors, set\n`ignore_failure` to `true`.\n\n[source,console]\n----\nPUT _ingest/pipeline/my-pipeline\n{\n  \"processors\": [\n    {\n      \"rename\": {\n        \"description\": \"Rename 'provider' to 'cloud.provider'\",\n        \"field\": \"provider\",\n        \"target_field\": \"cloud.provider\",\n        \"ignore_failure\": true\n      }\n    }\n  ]\n}\n----\n\nUse the `on_failure` parameter to specify a list of processors to run\nimmediately after a processor failure. If `on_failure` is specified, {es}\nafterward runs the pipeline's remaining processors, even if the `on_failure`\nconfiguration is empty.\n\n[source,console]\n----\nPUT _ingest/pipeline/my-pipeline\n{\n  \"processors\": [\n    {\n      \"rename\": {\n        \"description\": \"Rename 'provider' to 'cloud.provider'\",\n        \"field\": \"provider\",\n        \"target_field\": \"cloud.provider\",\n        \"on_failure\": [\n          {\n            \"set\": {\n              \"description\": \"Set 'error.message'\",\n              \"field\": \"error.message\",\n              \"value\": \"Field 'provider' does not exist. Cannot rename to 'cloud.provider'\",\n              \"override\": false\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n----\n\nNest a list of `on_failure` processors for nested error handling.\n\n[source,console]\n----\nPUT _ingest/pipeline/my-pipeline\n{\n  \"processors\": [\n    {\n      \"rename\": {\n        \"description\": \"Rename 'provider' to 'cloud.provider'\",\n        \"field\": \"provider\",\n        \"target_field\": \"cloud.provider\",\n        \"on_failure\": [\n          {\n            \"set\": {\n              \"description\": \"Set 'error.message'\",\n              \"field\": \"error.message\",\n              \"value\": \"Field 'provider' does not exist. Cannot rename to 'cloud.provider'\",\n              \"override\": false,\n              \"on_failure\": [\n                {\n                  \"set\": {\n                    \"description\": \"Set 'error.message.multi'\",\n                    \"field\": \"error.message.multi\",\n                    \"value\": \"Document encountered multiple ingest errors\",\n                    \"override\": true\n                  }\n                }\n              ]\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n----\n\nYou can also specify `on_failure` for a pipeline. If a processor without an\n`on_failure` value fails, {es} uses this pipeline-level parameter as a fallback.\n{es} will not attempt to run the pipeline's remaining processors.\n\n[source,console]\n----\nPUT _ingest/pipeline/my-pipeline\n{\n  \"processors\": [ ... ],\n  \"on_failure\": [\n    {\n      \"set\": {\n        \"description\": \"Index document to 'failed-<index>'\",\n        \"field\": \"_index\",\n        \"value\": \"failed-{{{ _index }}}\"\n      }\n    }\n  ]\n}\n----\n// TEST[s/\\.\\.\\./{\"lowercase\": {\"field\":\"my-keyword-field\"}}/]\n\nAdditional information about the pipeline failure may be available in the\ndocument metadata fields `on_failure_message`, `on_failure_processor_type`,\n`on_failure_processor_tag`, and `on_failure_pipeline`. These fields are\naccessible only from within an `on_failure` block.\n\nThe following example uses the metadata fields to include information about\npipeline failures in documents.\n\n[source,console]\n----\nPUT _ingest/pipeline/my-pipeline\n{\n  \"processors\": [ ... ],\n  \"on_failure\": [\n    {\n      \"set\": {\n        \"description\": \"Record error information\",\n        \"field\": \"error_information\",\n        \"value\": \"Processor {{ _ingest.on_failure_processor_type }} with tag {{ _ingest.on_failure_processor_tag }} in pipeline {{ _ingest.on_failure_pipeline }} failed with message {{ _ingest.on_failure_message }}\"\n      }\n    }\n  ]\n}\n----\n// TEST[s/\\.\\.\\./{\"lowercase\": {\"field\":\"my-keyword-field\"}}/]\n\n[discrete]\n[[conditionally-run-processor]]\n=== Conditionally run a processor\n\nEach processor supports an optional `if` condition, written as a\n{painless}/painless-guide.html[Painless script]. If provided, the processor only\nruns when the `if` condition is `true`.\n\nIMPORTANT: `if` condition scripts run in Painless's\n{painless}/painless-ingest-processor-context.html[ingest processor context]. In\n`if` conditions, `ctx` values are read-only.\n\n[source,console]\n----\nPUT _ingest/pipeline/my-pipeline\n{\n  \"processors\": [\n    {\n      \"drop\": {\n        \"description\": \"Drop documents with 'network.name' of 'Guest'\",\n        \"if\": \"ctx?.network?.name == 'Guest'\"\n      }\n    }\n  ]\n}\n----\n\nIf the <<script-painless-regex-enabled,`script.painless.regex.enabled`>> cluster\nsetting is enabled, you can use regular expressions in your `if` condition\nscripts. For supported syntax, see {painless}/painless-regexes.html[Painless\nregular expressions].\n\nTIP: If possible, avoid using regular expressions. Expensive regular expressions\ncan slow indexing speeds.\n\n[source,console]\n----\nPUT _ingest/pipeline/my-pipeline\n{\n  \"processors\": [\n    {\n      \"set\": {\n        \"description\": \"If 'url.scheme' is 'http', set 'url.insecure' to true\",\n        \"if\": \"ctx.url?.scheme =~ /^http[^s]/\",\n        \"field\": \"url.insecure\",\n        \"value\": true\n      }\n    }\n  ]\n}\n----\n\nYou must specify `if` conditions as valid JSON on a single line. However, you\ncan use the {kibana-ref}/console-kibana.html#configuring-console[{kib}\nconsole]'s triple quote syntax to write and debug larger scripts.\n\nTIP: If possible, avoid using complex or expensive `if` condition scripts.\nExpensive condition scripts can slow indexing speeds.\n\n[source,console]\n----\nPUT _ingest/pipeline/my-pipeline\n{\n  \"processors\": [\n    {\n      \"drop\": {\n        \"description\": \"Drop documents that don't contain 'prod' tag\",\n        \"if\": \"\"\"\n            Collection tags = ctx.tags;\n            if(tags != null){\n              for (String tag : tags) {\n                if (tag.toLowerCase().contains('prod')) {\n                  return false;\n                }\n              }\n            }\n            return true;\n        \"\"\"\n      }\n    }\n  ]\n}\n----\n\nYou can also specify a <<script-stored-scripts,stored script>> as the\n`if` condition.\n\n[source,console]\n----\nPUT _scripts/my-prod-tag-script\n{\n  \"script\": {\n    \"lang\": \"painless\",\n    \"source\": \"\"\"\n      Collection tags = ctx.tags;\n      if(tags != null){\n        for (String tag : tags) {\n          if (tag.toLowerCase().contains('prod')) {\n            return false;\n          }\n        }\n      }\n      return true;\n    \"\"\"\n  }\n}\n\nPUT _ingest/pipeline/my-pipeline\n{\n  \"processors\": [\n    {\n      \"drop\": {\n        \"description\": \"Drop documents that don't contain 'prod' tag\",\n        \"if\": { \"id\": \"my-prod-tag-script\" }\n      }\n    }\n  ]\n}\n----\n\n////\n[source,console]\n----\nDELETE _scripts/my-prod-tag-script\nDELETE _ingest/pipeline/my-pipeline\n----\n// TEST[continued]\n////\n\nIncoming documents often contain object fields. If a processor script attempts\nto access a field whose parent object does not exist, {es} returns a\n`NullPointerException`. To avoid these exceptions, use\n{painless}/painless-operators-reference.html#null-safe-operator[null safe\noperators], such as `?.`, and write your scripts to be null safe.\n\nFor example, `ctx.network?.name.equalsIgnoreCase('Guest')` is not null safe.\n`ctx.network?.name` can return null. Rewrite the script as\n`'Guest'.equalsIgnoreCase(ctx.network?.name)`, which is null safe because\n`Guest` is always non-null.\n\nIf you can't rewrite a script to be null safe, include an explicit null check.\n\n[source,console]\n----\nPUT _ingest/pipeline/my-pipeline\n{\n  \"processors\": [\n    {\n      \"drop\": {\n        \"description\": \"Drop documents that contain 'network.name' of 'Guest'\",\n        \"if\": \"ctx.network?.name != null && ctx.network.name.contains('Guest')\"\n      }\n    }\n  ]\n}\n----\n\n[discrete]\n[[conditionally-apply-pipelines]]\n=== Conditionally apply pipelines\n\nCombine an `if` condition with the <<pipeline-processor,`pipeline`>> processor\nto apply other pipelines to documents based on your criteria. You can use this\npipeline as the <<set-default-pipeline,default pipeline>> in an\n<<index-templates,index template>> used to configure multiple data streams or\nindices.\n\n[source,console]\n----\nPUT _ingest/pipeline/one-pipeline-to-rule-them-all\n{\n  \"processors\": [\n    {\n      \"pipeline\": {\n        \"description\": \"If 'service.name' is 'apache_httpd', use 'httpd_pipeline'\",\n        \"if\": \"ctx.service?.name == 'apache_httpd'\",\n        \"name\": \"httpd_pipeline\"\n      }\n    },\n    {\n      \"pipeline\": {\n        \"description\": \"If 'service.name' is 'syslog', use 'syslog_pipeline'\",\n        \"if\": \"ctx.service?.name == 'syslog'\",\n        \"name\": \"syslog_pipeline\"\n      }\n    },\n    {\n      \"fail\": {\n        \"description\": \"If 'service.name' is not 'apache_httpd' or 'syslog', return a failure message\",\n        \"if\": \"ctx.service?.name != 'apache_httpd' && ctx.service?.name != 'syslog'\",\n        \"message\": \"This pipeline requires service.name to be either `syslog` or `apache_httpd`\"\n      }\n    }\n  ]\n}\n----\n\n[discrete]\n[[get-pipeline-usage-stats]]\n=== Get pipeline usage statistics\n\nUse the <<cluster-nodes-stats,node stats>> API to get global and per-pipeline\ningest statistics. Use these stats to determine which pipelines run most\nfrequently or spend the most time processing.\n\n[source,console]\n----\nGET _nodes/stats/ingest?filter_path=nodes.*.ingest\n----\n\ninclude::ingest/common-log-format-example.asciidoc[]\ninclude::ingest/enrich.asciidoc[]\ninclude::ingest/processors.asciidoc[]\ninclude::ingest/search-ingest-pipelines.asciidoc[]\n"
}