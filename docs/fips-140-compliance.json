{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.235280",
        "size": 15451,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/fips-140-compliance.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "fips-140-compliance",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[fips-140-compliance]]\n=== FIPS 140-2\n\nThe Federal Information Processing Standard (FIPS) Publication 140-2, (FIPS PUB\n140-2), titled \"Security Requirements for Cryptographic Modules\" is a U.S.\ngovernment computer security standard used to approve cryptographic modules.\n{es} offers a FIPS 140-2 compliant mode and as such can run in a FIPS 140-2\nconfigured JVM.\n\nIMPORTANT: The JVM bundled with {es} is not configured for FIPS 140-2. You must\nconfigure an external JDK with a FIPS 140-2 certified Java Security Provider.\nRefer to the {es}\nhttps://www.elastic.co/support/matrix#matrix_jvm[JVM support matrix] for\nsupported JVM configurations. See https://www.elastic.co/subscriptions[subscriptions] for required licensing.\n\nCompliance with FIPS 140-2 requires using only FIPS approved / NIST recommended cryptographic algorithms. Generally this can be done by the following:\n\n- Installation and configuration of a FIPS certified Java security provider.\n- Ensuring the configuration of {es} is FIPS 140-2 compliant as documented below.\n- Setting `xpack.security.fips_mode.enabled` to `true` in `elasticsearch.yml`. Note - this setting alone is not sufficient to be compliant\nwith FIPS 140-2.\n\n[discrete]\n=== Configuring {es} for FIPS 140-2\n\nDetailed instructions for the configuration required for FIPS 140-2 compliance is beyond the scope of this document.  It is the responsibility\nof the user to ensure compliance with FIPS 140-2. {es} has been tested with a specific configuration described below. However, there are\nother configurations possible to achieve compliance.\n\nThe following is a high-level overview of the required configuration:\n\n* Use an externally installed Java installation. The JVM bundled with {es} is not configured for FIPS 140-2.\n* Install a FIPS certified security provider .jar file(s) in {es}'s `lib` directory.\n* Configure Java to use a FIPS certified security provider (xref:java-security-provider[see below]).\n* Configure {es}'s security manager to allow use of the FIPS certified provider (xref:java-security-manager[see below]).\n* Ensure the keystore and truststore are configured correctly (xref:keystore-fips-password[see below]).\n* Ensure the TLS settings are configured correctly (xref:fips-tls[see below]).\n* Ensure the password hashing settings are configured correctly (xref:fips-stored-password-hashing[see below]).\n* Ensure the cached password hashing settings are configured correctly (xref:fips-cached-password-hashing[see below]).\n* Configure `elasticsearch.yml` to use FIPS 140-2 mode, see (xref:configuring-es-yml[below]).\n* Verify the security provider is installed and configured correctly (xref:verify-security-provider[see below]).\n* Review the upgrade considerations (xref:fips-upgrade-considerations[see below]) and limitations (xref:fips-limitations[see below]).\n\n\n[discrete]\n[[java-security-provider]]\n==== Java security provider\n\nDetailed instructions for installation and configuration of a FIPS certified Java security provider is beyond the scope of this document.\nSpecifically, a FIPS certified\nhttps://docs.oracle.com/en/java/javase/17/security/java-cryptography-architecture-jca-reference-guide.html[JCA] and\nhttps://docs.oracle.com/en/java/javase/17/security/java-secure-socket-extension-jsse-reference-guide.html[JSSE] implementation is required\nso that the JVM uses FIPS validated implementations of NIST recommended cryptographic algorithms.\n\nElasticsearch has been tested with Bouncy Castle's https://repo1.maven.org/maven2/org/bouncycastle/bc-fips/1.0.2.4/bc-fips-1.0.2.4.jar[bc-fips 1.0.2.4]\nand https://repo1.maven.org/maven2/org/bouncycastle/bctls-fips/1.0.17/bctls-fips-1.0.17.jar[bctls-fips 1.0.17].\nPlease refer to the {es}\nhttps://www.elastic.co/support/matrix#matrix_jvm[JVM support matrix] for details on which combinations of JVM and security provider are supported in FIPS mode. Elasticsearch does not ship with a FIPS certified provider. It is the responsibility of the user\nto install and configure the security provider to ensure compliance with FIPS 140-2. Using a FIPS certified provider will ensure that only\napproved cryptographic algorithms are used.\n\nTo configure {es} to use additional security provider(s) configure {es}'s <<set-jvm-options, JVM property>> `java.security.properties` to point to a file\n(https://raw.githubusercontent.com/elastic/elasticsearch/main/build-tools-internal/src/main/resources/fips_java.security[example]) in {es}'s\n`config` directory. Ensure the FIPS certified security provider is configured with the lowest order. This file should contain the necessary\nconfiguration to instruct Java to use the FIPS certified security provider.\n\n[discrete]\n[[java-security-manager]]\n==== Java security manager\n\nAll code running in {es} is subject to the security restrictions enforced by the Java security manager.\nThe security provider you have installed and configured may require additional permissions in order to function correctly. You can grant these permissions by providing your own\nhttps://docs.oracle.com/javase/8/docs/technotes/guides/security/PolicyFiles.html#FileSyntax[Java security policy]\n\nTo configure {es}'s security manager configure the JVM property `java.security.policy` to point a file\n(https://raw.githubusercontent.com/elastic/elasticsearch/main/build-tools-internal/src/main/resources/fips_java.policy[example])in {es}'s\n`config` directory with the desired permissions. This file should contain the necessary configuration for the Java security manager\nto grant the required permissions needed by the security provider.\n\n\n[discrete]\n[[keystore-fips-password]]\n==== {es} Keystore\n\nFIPS 140-2 (via NIST Special Publication 800-132) dictates that encryption keys should at\nleast have an effective strength of 112 bits.\nAs such, the {es} keystore that stores the node's <<secure-settings,secure settings>>\nneeds to be password protected with a password that satisfies this requirement.\nThis means that the password needs to be 14 bytes long which is equivalent\nto a 14 character ASCII encoded password, or a 7 character UTF-8 encoded password.\nYou can use the <<elasticsearch-keystore, elasticsearch-keystore passwd>> subcommand to change or set the\npassword of an existing keystore.\nNote that when the keystore is password-protected, you must supply the password each time\nElasticsearch starts.\n\n[discrete]\n[[fips-tls]]\n==== TLS\n\nSSLv2 and SSLv3 are not allowed by FIPS 140-2, so `SSLv2Hello` and `SSLv3` cannot\nbe used for <<ssl-tls-settings,`ssl.supported_protocols`>>.\n\nNOTE: The use of TLS ciphers is mainly governed by the relevant crypto module\n(the FIPS Approved Security Provider that your JVM uses). All the ciphers that\nare configured by default in {es} are FIPS 140-2 compliant and as such can be\nused in a FIPS 140-2 JVM. See <<ssl-tls-settings,`ssl.cipher_suites`>>.\n\n[discrete]\n==== TLS keystores and keys\n\nKeystores can be used in a number of <<ssl-tls-settings>> in order to\nconveniently store key and trust material. Neither `JKS`, nor `PKCS#12` keystores\ncan be used in a FIPS 140-2 configured JVM. Avoid using\nthese types of keystores. Your FIPS 140-2 provider may provide a compliant keystore\nimplementation that can be used, or you can use PEM encoded files. To use PEM encoded\nkey material, you can use the relevant `\\*.key` and `*.certificate` configuration\noptions, and for trust material you can use `*.certificate_authorities`.\n\n\nFIPS 140-2 compliance dictates that the length of the public keys used for TLS\nmust correspond to the strength of the symmetric key algorithm in use in TLS.\nDepending on the value of `ssl.cipher_suites` that you select to use, the TLS\nkeys must have corresponding length according to the following table:\n\n[[comparable-key-strength]]\n.Comparable key strengths\n|=======================\n| Symmetric Key Algorithm | RSA key Length | ECC key length\n| `3DES`                  | 2048           | 224-255\n| `AES-128`               | 3072           | 256-383\n| `AES-256`               | 15630          | 512+\n|=======================\n\n[discrete]\n==== Stored password hashing\n[[fips-stored-password-hashing]]\n\nWhile {es} offers a number of algorithms for securely hashing credentials\non disk, only the `PBKDF2` based family of algorithms is compliant with FIPS\n140-2 for stored password hashing. However, since `PBKDF2` is essentially a key derivation\nfunction, your JVM security provider may enforce a\n<<keystore-fips-password,112-bit key strength requirement>>. Although FIPS 140-2\ndoes not mandate user password standards, this requirement may affect password\nhashing in {es}. To comply with this requirement,\nwhile allowing you to use passwords that satisfy your security policy, {es} offers\n<<hashing-settings, pbkdf2_stretch>> which is the suggested hashing algorithm when running\n{es} in FIPS 140-2 environments. `pbkdf2_stretch` performs a single round of SHA-512\non the user password before passing it to the `PBKDF2` implementation.\n\nNOTE: You can still use one of the plain `pbkdf2` options instead of `pbkdf2_stretch` if\nyou have external policies and tools that can ensure all user passwords for the reserved,\nnative, and file realms are longer than 14 bytes.\n\nYou must set the `xpack.security.authc.password_hashing.algorithm` setting to one of the\navailable `pbkdf_stretch_*` values.\nWhen FIPS-140 mode is enabled, the default value for\n`xpack.security.authc.password_hashing.algorithm` is `pbkdf2_stretch`.\nSee <<hashing-settings>>.\n\nPassword hashing configuration changes are not retroactive so the stored hashed\ncredentials of existing users of the reserved, native, and file realms are not\nupdated on disk.\nTo ensure FIPS 140-2 compliance, recreate users or\nchange their password using the <<users-command, elasticsearch-user>> CLI tool\nfor the file realm and the <<security-api-put-user,create users>> and\n<<security-api-change-password,change password>> APIs for the native and reserved realms.\nOther types of realms are not affected and do not require any changes.\n\n[discrete]\n==== Cached password hashing\n[[fips-cached-password-hashing]]\n\n`ssha256` (salted `sha256`) is recommended for cache hashing. Though\n`PBKDF2` is compliant with FIPS-140-2, it is -- by design -- slow, and\nthus not generally suitable as a cache hashing algorithm. Cached\ncredentials are never stored on disk, and salted `sha256` provides an\nadequate level of security for in-memory credential hashing, without\nimposing prohibitive performance overhead. You _may_ use `PBKDF2`,\nhowever you should carefully assess performance impact first. Depending\non your deployment, the overhead of `PBKDF2` could undo most of the\nperformance gain of using a cache.\n\nEither set all `cache.hash_algo` settings to `ssha256` or leave\nthem undefined, since `ssha256` is the default value for all\n`cache.hash_algo` settings. See <<hashing-settings>>.\n\nThe user cache will be emptied upon node restart, so any existing\nhashes using non-compliant algorithms will be discarded and the new\nones will be created using the algorithm you have selected.\n\n[discrete]\n[[configuring-es-yml]]\n==== Configure {es} elasticsearch.yml\n\n* Set `xpack.security.fips_mode.enabled` to `true` in `elasticsearch.yml`. This setting is used to ensure to configure some internal\nconfiguration to be FIPS 140-2 compliant and provides some additional verification.\n\n* Set `xpack.security.autoconfiguration.enabled` to `false`. This will disable the automatic configuration of the security settings.\nUsers must ensure that the security settings are configured correctly for FIPS-140-2 compliance. This is only applicable for new installations.\n\n* Set `xpack.security.authc.password_hashing.algorithm` appropriately see xref:fips-stored-password-hashing[above].\n\n* Other relevant security settings. For example, TLS for the transport and HTTP interfaces. (not explicitly covered here or in the example below)\n\n* Optional: Set `xpack.security.fips_mode.required_providers` in `elasticsearch.yml` to ensure the required security providers (8.13+).\nsee xref:verify-security-provider[below].\n\n[source,yaml]\n--------------------------------------------------\nxpack.security.fips_mode.enabled: true\nxpack.security.autoconfiguration.enabled: false\nxpack.security.fips_mode.required_providers: [\"BCFIPS\", \"BCJSSE\"]\nxpack.security.authc.password_hashing.algorithm: \"pbkdf2_stretch\"\n--------------------------------------------------\n\n[discrete]\n[[verify-security-provider]]\n==== Verify the security provider is installed\n\nTo verify that the security provider is installed and in use, you can use any of the following steps:\n\n* Verify the required security providers are configured with the lowest order in the file pointed to by `java.security.properties`.\nFor example, `security.provider.1` is a lower order than `security.provider.2`\n\n* Set `xpack.security.fips_mode.required_providers` in `elasticsearch.yml` to the list of required security providers.\nThis setting is used to ensure that the correct security provider is installed and configured. (8.13+)\nIf the security provider is not installed correctly, {es} will fail to start. `[\"BCFIPS\", \"BCJSSE\"]` are the values to\nuse for Bouncy Castle's FIPS JCE and JSSE certified provider.\n\n[discrete]\n[[fips-upgrade-considerations]]\n=== Upgrade considerations\ninclude::fips-java17.asciidoc[]\n\n[IMPORTANT]\n====\nSome encryption algorithms may no longer be available by default in updated FIPS 140-2 security providers.\nNotably, Triple DES and PKCS1.5 RSA are now discouraged and https://www.bouncycastle.org/fips-java[Bouncy Castle] now\nrequires explicit configuration to continue using these algorithms.\n====\n\nIf you plan to upgrade your existing cluster to a version that can be run in\na FIPS 140-2 configured JVM, we recommend to first perform a rolling\nupgrade to the new version in your existing JVM and perform all necessary\nconfiguration changes in preparation for running in FIPS 140-2 mode. You can then\nperform a rolling restart of the nodes, starting each node in a FIPS 140-2 JVM.\nDuring the restart, {es}:\n\n- Upgrades <<secure-settings,secure settings>> to the latest, compliant format.\nA FIPS 140-2 JVM cannot load previous format versions. If your keystore is\nnot password-protected, you must manually set a password. See\n<<keystore-fips-password>>.\n- Upgrades self-generated trial licenses to the latest FIPS 140-2 compliant format.\n\nIf your {subscriptions}[subscription] already supports FIPS 140-2 mode, you\ncan elect to perform a rolling upgrade while at the same time running each\nupgraded node in a FIPS 140-2 JVM. In this case, you would need to also manually\nregenerate your `elasticsearch.keystore` and migrate all secure settings to it,\nin addition to the necessary configuration changes outlined below, before\nstarting each node.\n\n[discrete]\n[[fips-limitations]]\n=== Limitations\n\nDue to the limitations that FIPS 140-2 compliance enforces, a small number of\nfeatures are not available while running in FIPS 140-2 mode. The list is as follows:\n\n* Azure Classic Discovery Plugin\n* The <<certutil,`elasticsearch-certutil`>> tool. However,\n `elasticsearch-certutil` can very well be used in a non FIPS 140-2\n  configured JVM (pointing `ES_JAVA_HOME` environment variable to a different\n  java installation) in order to generate the keys and certificates that\n  can be later used in the FIPS 140-2 configured JVM.\n* The SQL CLI client cannot run in a FIPS 140-2 configured JVM while using\n  TLS for transport security or PKI for client authentication.\n"
}