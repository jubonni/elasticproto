{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.503582",
        "size": 10110,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/set-up-lifecycle-policy.html",
        "type": "documentation",
        "role": [
            "xpack",
            "screenshot",
            "screenshot"
        ],
        "has_code": true,
        "title": "set-up-lifecycle-policy",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[set-up-lifecycle-policy]]\n== Configure a lifecycle policy\n\nFor {ilm-init} to manage an index, a valid policy \nmust be specified in the `index.lifecycle.name` index setting. \n\nTo configure a lifecycle policy for <<index-rollover, rolling indices>>, \nyou create the policy and add it to the <<index-templates, index template>>.\n\nTo use a policy to manage an index that doesn't roll over,\nyou can specify a lifecycle policy when you create the index,\nor apply a policy directly to an existing index.\n\n{ilm-init} policies are stored in the global cluster state and can be included in snapshots\nby setting `include_global_state` to `true` when you <<snapshots-take-snapshot, take the snapshot>>. \nWhen the snapshot is restored, all of the policies in the global state are restored and \nany local policies with the same names are overwritten.\n\nIMPORTANT: When you enable {ilm} for {beats} or the {ls} {es} output plugin, \nthe necessary policies and configuration changes are applied automatically. \nYou can modify the default policies, but you do not need to explicitly configure a policy or\nbootstrap an initial index.\n\n[discrete]\n[[ilm-create-policy]]\n=== Create lifecycle policy\n\nTo create a lifecycle policy from {kib}, open the menu and go to *Stack\nManagement > Index Lifecycle Policies*. Click *Create policy*.\n\n[role=\"screenshot\"]\nimage:images/ilm/create-policy.png[Create policy page]\n\nYou specify the lifecycle phases for the policy and the actions to perform in each phase.\n\nThe <<ilm-put-lifecycle,create or update policy>> API is invoked to add the\npolicy to the {es} cluster.\n\n.API example\n[%collapsible]\n====\n[source,console]\n------------------------\nPUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\": {\n            \"max_primary_shard_size\": \"25GB\" <1>\n          }\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"30d\",\n        \"actions\": {\n          \"delete\": {} <2>\n        }\n      }\n    }\n  }\n}\n------------------------\n\n<1> Roll over the index when it reaches 25GB in size\n<2> Delete the index 30 days after rollover\n====\n\nIMPORTANT: The rollover action implicitly always rolls over a data stream or alias if one or more shards contain\n200000000 or more documents. Normally a shard will reach 25GB long before it reaches 200M documents,\nbut this isn't the case for space efficient data sets. Search performance will very likely suffer\nif a shard contains more than 200M documents. This is the reason of the builtin limit.\n\n[discrete]\n[[apply-policy-template]]\n=== Apply lifecycle policy with an index template\n\nTo use a policy that triggers the rollover action, \nyou need to configure the policy in the index template used to create each new index.\nYou specify the name of the policy and the alias used to reference the rolling indices.\n\nTIP: An `index.lifecycle.rollover_alias` setting is only required if using {ilm} with an alias. It is unnecessary when using <<data-streams,Data Streams>>.\n\nYou can use the {kib} Create template wizard to create a template. To access the\nwizard, open the menu and go to *Stack Management > Index Management*. In the\n*Index Templates* tab, click *Create template*.\n\n[role=\"screenshot\"]\nimage:images/ilm/create-template-wizard-my_template.png[Create template page]\n\nThe wizard invokes the <<indices-put-template,create or update index template\nAPI>> to add templates to a cluster.\n\n.API example\n[%collapsible]\n====\n[source,console]\n-----------------------\nPUT _index_template/my_template\n{\n  \"index_patterns\": [\"test-*\"], <1>\n  \"template\": {\n    \"settings\": {\n      \"number_of_shards\": 1,\n      \"number_of_replicas\": 1,\n      \"index.lifecycle.name\": \"my_policy\", <2>\n      \"index.lifecycle.rollover_alias\": \"test-alias\" <3>\n    }\n  }\n}\n-----------------------\n\n<1> Use this template for all new indices whose names begin with `test-`\n<2> Apply `my_policy` to new indices created with this template\n<3> Define an index alias for referencing indices managed by `my_policy`\n====\n//////////////////////////\n\n[source,console]\n--------------------------------------------------\nDELETE _index_template/my_template\n--------------------------------------------------\n// TEST[continued]\n\n//////////////////////////\n\n[discrete]\n[[create-initial-index]]\n==== Create an initial managed index\n\nWhen you set up policies for your own rolling indices, if you are not using the recommended\n<<data-streams,data streams>>, you need to manually create the first index managed by a policy and\ndesignate it as the write index.\n\nIMPORTANT: When you enable {ilm} for {beats} or the {ls} {es} output plugin, \nthe necessary policies and configuration changes are applied automatically. \nYou can modify the default policies, but you do not need to explicitly configure a policy or\nbootstrap an initial index.\n\nThe name of the index must match the pattern defined in the index template and end with a number.\nThis number is incremented to generate the name of indices created by the rollover action.\n\nFor example, the following request creates the `test-00001` index. \nBecause it matches the index pattern specified in `my_template`, \n{es} automatically applies the settings from that template.\n\n[source,console]\n-----------------------\nPUT test-000001\n{\n  \"aliases\": {\n    \"test-alias\":{\n      \"is_write_index\": true <1>\n    }\n  }\n}\n-----------------------\n\n<1> Set this initial index to be the write index for this alias.\n\nNow you can start indexing data to the rollover alias specified in the lifecycle policy. \nWith the sample `my_policy` policy, the rollover action is triggered once the initial\nindex exceeds 25GB. \n{ilm-init} then creates a new index that becomes the write index for the `test-alias`.\n\n[discrete]\n[[apply-policy-manually]]\n=== Apply lifecycle policy manually\n\nYou can specify a policy when you create an index or\napply a policy to an existing index through {kib} Management or\nthe <<indices-update-settings, update settings API>>. \nWhen you apply a policy, {ilm-init} immediately starts managing the index.\n\nIMPORTANT: Do not manually apply a policy that uses the rollover action.\nPolicies that use rollover must be applied by the <<apply-policy-template, index template>>. \nOtherwise, the policy is not carried forward when the rollover action creates a new index.\n\nThe `index.lifecycle.name` setting specifies an index's policy.\n\n.API example\n[%collapsible]\n====\n[source,console]\n-----------------------\nPUT test-index\n{\n  \"settings\": {\n    \"number_of_shards\": 1,\n    \"number_of_replicas\": 1,\n    \"index.lifecycle.name\": \"my_policy\" <1>\n  }\n}\n-----------------------\n<1> Sets the lifecycle policy for the index.\n====\n\n[discrete]\n[[apply-policy-multiple]]\n==== Apply a policy to multiple indices\n\nYou can apply the same policy to multiple indices by using wildcards in the index name \nwhen you call the <<indices-update-settings,update settings>> API.\n\nWARNING: Be careful that you don't inadvertently match indices that you don't want to modify.\n\n//////////////////////////\n[source,console]\n-----------------------\nPUT _index_template/mylogs_template\n{\n  \"index_patterns\": [\n    \"mylogs-*\"\n  ],\n  \"template\": {\n    \"settings\": {\n      \"number_of_shards\": 1,\n      \"number_of_replicas\": 1\n    },\n    \"mappings\": {\n      \"properties\": {\n        \"message\": {\n          \"type\": \"text\"\n        },\n        \"@timestamp\": {\n          \"type\": \"date\"\n        }\n      }\n    }\n  }\n}\n-----------------------\n\n[source,console]\n-----------------------\nPOST mylogs-pre-ilm-2019.06.24/_doc\n{\n  \"@timestamp\": \"2019-06-24T10:34:00\",\n  \"message\": \"this is one log message\"\n}\n-----------------------\n// TEST[continued]\n\n[source,console]\n-----------------------\nPOST mylogs-pre-ilm-2019.06.25/_doc\n{\n  \"@timestamp\": \"2019-06-25T17:42:00\",\n  \"message\": \"this is another log message\"\n}\n-----------------------\n// TEST[continued]\n\n[source,console]\n--------------------------------------------------\nDELETE _index_template/mylogs_template\n--------------------------------------------------\n// TEST[continued]\n\n//////////////////////////\n\n[source,console]\n-----------------------\nPUT mylogs-pre-ilm*/_settings <1>\n{\n  \"index\": {\n    \"lifecycle\": {\n      \"name\": \"mylogs_policy_existing\"\n    }\n  }\n}\n-----------------------\n// TEST[continued]\n\n<1> Updates all indices with names that start with `mylogs-pre-ilm`\n\n[discrete]\n[[switch-lifecycle-policies]]\n==== Switch lifecycle policies\n\nTo switch an index's lifecycle policy, follow these steps:\n\n. Remove the existing policy using the <<ilm-remove-policy,remove policy API>>.\nTarget a data stream or alias to remove the policies of all its indices.\n+\n[source,console]\n----\nPOST logs-my_app-default/_ilm/remove\n----\n// TEST[continued]\n// TEST[s/^/PUT _data_stream\\/logs-my_app-default\\n/]\n\n. The remove policy API removes all {ilm-init} metadata from the index and\ndoesn't consider the index's lifecycle status. This can leave indices in an\nundesired state.\n+\n--\nFor example, the <<ilm-forcemerge,`forcemerge`>> action temporarily closes an\nindex before reopening it. Removing an index's {ilm-init} policy during a\n`forcemerge` can leave the index closed indefinitely.\n\nAfter policy removal, use the <<indices-get-index,get index API>> to check an\nindex's state . Target a data stream or alias to get the state of all its\nindices.\n\n[source,console]\n----\nGET logs-my_app-default\n----\n// TEST[continued]\n\nYou can then change the index as needed. For example, you can re-open any\nclosed indices using the <<indices-open-close,open index API>>.\n\n[source,console]\n----\nPOST logs-my_app-default/_open\n----\n// TEST[continued]\n--\n\n. Assign a new policy using the <<indices-update-settings,update settings API>>.\nTarget a data stream or alias to assign a policy to all its indices.\n+\n--\nWARNING: Don't assign a new policy without first removing the existing policy.\nThis can cause <<ilm-phase-execution,phase execution>> to silently fail.\n\n[source,console]\n----\nPUT logs-my_app-default/_settings\n{\n  \"index\": {\n    \"lifecycle\": {\n      \"name\": \"new-lifecycle-policy\"\n    }\n  }\n}\n----\n// TEST[continued]\n// TEST[s/new-lifecycle-policy/mylogs_policy_existing/]\n--\n"
}