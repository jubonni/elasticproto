{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.603275",
        "size": 8412,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "query-dsl-match-query",
        "version": "8.15"
    },
    "doc": "[[query-dsl-match-query]]\n=== Match query\n++++\n<titleabbrev>Match</titleabbrev>\n++++\n\nReturns documents that match a provided text, number, date or boolean value. The\nprovided text is analyzed before matching.\n\nThe `match` query is the standard query for performing a full-text search,\nincluding options for fuzzy matching.\n\n\n[[match-query-ex-request]]\n==== Example request\n\n[source,console]\n--------------------------------------------------\nGET /_search\n{\n  \"query\": {\n    \"match\": {\n      \"message\": {\n        \"query\": \"this is a test\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n\n[[match-top-level-params]]\n==== Top-level parameters for `match`\n\n`<field>`::\n(Required, object) Field you wish to search.\n\n\n[[match-field-params]]\n==== Parameters for `<field>`\n`query`::\n+\n--\n(Required) Text, number, boolean value or date you wish to find in the provided\n`<field>`.\n\nThe `match` query <<analysis,analyzes>> any provided text before performing a\nsearch. This means the `match` query can search <<text,`text`>> fields for\nanalyzed tokens rather than an exact term.\n--\n\n`analyzer`::\n(Optional, string) <<analysis,Analyzer>> used to convert the text in the `query`\nvalue into tokens. Defaults to the <<specify-index-time-analyzer,index-time\nanalyzer>> mapped for the `<field>`. If no analyzer is mapped, the index's\ndefault analyzer is used.\n\n`auto_generate_synonyms_phrase_query`::\n+\n--\n(Optional, Boolean) If `true`, <<query-dsl-match-query-phrase,match phrase>>\nqueries are automatically created for multi-term synonyms. Defaults to `true`.\n\nSee <<query-dsl-match-query-synonyms,Use synonyms with match query>> for an\nexample.\n--\n\n`boost`::\n+\n--\n(Optional, float) Floating point number used to decrease or increase the\n<<relevance-scores,relevance scores>> of the query. Defaults to `1.0`.\n\nBoost values are relative to the default value of `1.0`. A boost value between\n`0` and `1.0` decreases the relevance score. A value greater than `1.0`\nincreases the relevance score.\n--\n\n`fuzziness`::\n(Optional, string) Maximum edit distance allowed for matching. See <<fuzziness>>\nfor valid values and more information. See <<query-dsl-match-query-fuzziness>>\nfor an example.\n\n`max_expansions`::\n(Optional, integer) Maximum number of terms to which the query will\nexpand. Defaults to `50`.\n\n`prefix_length`::\n(Optional, integer) Number of beginning characters left unchanged for fuzzy\nmatching. Defaults to `0`.\n\n`fuzzy_transpositions`::\n(Optional, Boolean) If `true`, edits for fuzzy matching include\ntranspositions of two adjacent characters (ab \u2192 ba). Defaults to `true`.\n\n`fuzzy_rewrite`::\n+\n--\n(Optional, string) Method used to rewrite the query. See the\n<<query-dsl-multi-term-rewrite, `rewrite` parameter>> for valid values and more\ninformation.\n\nIf the `fuzziness` parameter is not `0`, the `match` query uses a `fuzzy_rewrite`\nmethod of `top_terms_blended_freqs_${max_expansions}` by default.\n--\n\n`lenient`::\n(Optional, Boolean) If `true`, format-based errors, such as providing a text\n`query` value for a <<number,numeric>> field, are ignored. Defaults to `false`.\n\n`operator`::\n+\n--\n(Optional, string) Boolean logic used to interpret text in the `query` value.\nValid values are:\n\n`OR` (Default)::\nFor example, a `query` value of `capital of Hungary` is interpreted as `capital\nOR of OR Hungary`.\n\n`AND`::\nFor example, a `query` value of `capital of Hungary` is interpreted as `capital\nAND of AND Hungary`.\n--\n\n`minimum_should_match`::\n+\n--\n(Optional, string) Minimum number of clauses that must match for a document to\nbe returned. See the <<query-dsl-minimum-should-match, `minimum_should_match`\nparameter>> for valid values and more information.\n--\n\n`zero_terms_query`::\n+\n--\n(Optional, string) Indicates whether no documents are returned if the `analyzer`\nremoves all tokens, such as when using a `stop` filter. Valid values are:\n\n`none` (Default)::\nNo documents are returned if the `analyzer` removes all tokens.\n\n`all`::\nReturns all documents, similar to a <<query-dsl-match-all-query,`match_all`>>\nquery.\n\nSee <<query-dsl-match-query-zero>> for an example.\n--\n\n\n[[match-query-notes]]\n==== Notes\n\n[[query-dsl-match-query-short-ex]]\n===== Short request example\n\nYou can simplify the match query syntax by combining the `<field>` and `query`\nparameters. For example:\n\n[source,console]\n----\nGET /_search\n{\n  \"query\": {\n    \"match\": {\n      \"message\": \"this is a test\"\n    }\n  }\n}\n----\n\n[[query-dsl-match-query-boolean]]\n===== How the match query works\n\nThe `match` query is of type `boolean`. It means that the text\nprovided is analyzed and the analysis process constructs a boolean query\nfrom the provided text. The `operator` parameter can be set to `or` or `and`\nto control the boolean clauses (defaults to `or`). The minimum number of\noptional `should` clauses to match can be set using the\n<<query-dsl-minimum-should-match,`minimum_should_match`>>\nparameter.\n\nHere is an example with the `operator` parameter:\n\n[source,console]\n--------------------------------------------------\nGET /_search\n{\n  \"query\": {\n    \"match\": {\n      \"message\": {\n        \"query\": \"this is a test\",\n        \"operator\": \"and\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n\nThe `analyzer` can be set to control which analyzer will perform the\nanalysis process on the text. It defaults to the field explicit mapping\ndefinition, or the default search analyzer.\n\nThe `lenient` parameter can be set to `true` to ignore exceptions caused by\ndata-type mismatches,  such as trying to query a numeric field with a text\nquery string. Defaults to `false`.\n\n[[query-dsl-match-query-fuzziness]]\n===== Fuzziness in the match query\n\n`fuzziness` allows _fuzzy matching_ based on the type of field being queried.\nSee <<fuzziness>> for allowed settings.\n\nThe `prefix_length` and\n`max_expansions` can be set in this case to control the fuzzy process.\nIf the fuzzy option is set the query will use `top_terms_blended_freqs_${max_expansions}`\nas its <<query-dsl-multi-term-rewrite,rewrite\nmethod>> the `fuzzy_rewrite` parameter allows to control how the query will get\nrewritten.\n\nFuzzy transpositions (`ab` -> `ba`) are allowed by default but can be disabled\nby setting `fuzzy_transpositions` to `false`.\n\nNOTE: Fuzzy matching is not applied to terms with synonyms or in cases where the\nanalysis process produces multiple tokens at the same position. Under the hood\nthese terms are expanded to a special synonym query that blends term frequencies,\nwhich does not support fuzzy expansion.\n\n[source,console]\n--------------------------------------------------\nGET /_search\n{\n  \"query\": {\n    \"match\": {\n      \"message\": {\n        \"query\": \"this is a testt\",\n        \"fuzziness\": \"AUTO\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n[[query-dsl-match-query-zero]]\n===== Zero terms query\nIf the analyzer used removes all tokens in a query like a `stop` filter\ndoes, the default behavior is to match no documents at all. In order to\nchange that the `zero_terms_query` option can be used, which accepts\n`none` (default) and `all` which corresponds to a `match_all` query.\n\n[source,console]\n--------------------------------------------------\nGET /_search\n{\n  \"query\": {\n    \"match\": {\n      \"message\": {\n        \"query\": \"to be or not to be\",\n        \"operator\": \"and\",\n        \"zero_terms_query\": \"all\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n[[query-dsl-match-query-synonyms]]\n===== Synonyms\n\nThe `match` query supports multi-terms synonym expansion with the <<analysis-synonym-graph-tokenfilter,\nsynonym_graph>> token filter. When this filter is used, the parser creates a phrase query for each multi-terms synonyms.\nFor example, the following synonym: `\"ny, new york\"` would produce:\n\n`(ny OR (\"new york\"))`\n\nIt is also possible to match multi terms synonyms with conjunctions instead:\n\n[source,console]\n--------------------------------------------------\nGET /_search\n{\n   \"query\": {\n       \"match\" : {\n           \"message\": {\n               \"query\" : \"ny city\",\n               \"auto_generate_synonyms_phrase_query\" : false\n           }\n       }\n   }\n}\n--------------------------------------------------\n\nThe example above creates a boolean query:\n\n`(ny OR (new AND york)) city`\n\nthat matches documents with the term `ny` or the conjunction `new AND york`.\nBy default the parameter `auto_generate_synonyms_phrase_query` is set to `true`.\n\n"
}