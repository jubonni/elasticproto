{
    "meta": {
        "timestamp": "2024-11-01T03:07:10.364271",
        "size": 4391,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-sum-aggregation.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "search-aggregations-metrics-sum-aggregation",
        "version": "8.15"
    },
    "doc": "[[search-aggregations-metrics-sum-aggregation]]\n=== Sum aggregation\n++++\n<titleabbrev>Sum</titleabbrev>\n++++\n\nA `single-value` metrics aggregation that sums up numeric values that are extracted from the aggregated documents.\nThese values can be extracted either from specific numeric or <<histogram,histogram>> fields.\n\nAssuming the data consists of documents representing sales records we can sum\nthe sale price of all hats with:\n\n[source,console]\n--------------------------------------------------\nPOST /sales/_search?size=0\n{\n  \"query\": {\n    \"constant_score\": {\n      \"filter\": {\n        \"match\": { \"type\": \"hat\" }\n      }\n    }\n  },\n  \"aggs\": {\n    \"hat_prices\": { \"sum\": { \"field\": \"price\" } }\n  }\n}\n--------------------------------------------------\n// TEST[setup:sales]\n\nResulting in:\n\n[source,console-result]\n--------------------------------------------------\n{\n  ...\n  \"aggregations\": {\n    \"hat_prices\": {\n      \"value\": 450.0\n    }\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\\.\\.\\./\"took\": $body.took,\"timed_out\": false,\"_shards\": $body._shards,\"hits\": $body.hits,/]\n\nThe name of the aggregation (`hat_prices` above) also serves as the key by which the aggregation result can be retrieved from the returned response.\n\n==== Script\n\nIf you need to get the `sum` for something more complex than a single\nfield, run the aggregation on a <<runtime,runtime field>>.\n\n[source,console]\n----\nPOST /sales/_search?size=0\n{\n  \"runtime_mappings\": {\n    \"price.weighted\": {\n      \"type\": \"double\",\n      \"script\": \"\"\"\n        double price = doc['price'].value;\n        if (doc['promoted'].value) {\n          price *= 0.8;\n        }\n        emit(price);\n      \"\"\"\n    }\n  },\n  \"query\": {\n    \"constant_score\": {\n      \"filter\": {\n        \"match\": { \"type\": \"hat\" }\n      }\n    }\n  },\n  \"aggs\": {\n    \"hat_prices\": {\n      \"sum\": {\n        \"field\": \"price.weighted\"\n      }\n    }\n  }\n}\n----\n// TEST[setup:sales]\n// TEST[s/size=0/size=0&filter_path=aggregations/]\n\n////\n[source,console-result]\n----\n{\n  \"aggregations\": {\n    \"hat_prices\": {\n      \"value\": 370.0\n    }\n  }\n}\n----\n////\n\n==== Missing value\n\nThe `missing` parameter defines how documents that are missing a value should\nbe treated. By default documents missing the value will be ignored but it is\nalso possible to treat them as if they had a value. For example, this treats\nall hat sales without a price as being `100`.\n\n[source,console]\n--------------------------------------------------\nPOST /sales/_search?size=0\n{\n  \"query\": {\n    \"constant_score\": {\n      \"filter\": {\n        \"match\": { \"type\": \"hat\" }\n      }\n    }\n  },\n  \"aggs\": {\n    \"hat_prices\": {\n      \"sum\": {\n        \"field\": \"price\",\n        \"missing\": 100 <1>\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[setup:sales]\n\n[[search-aggregations-metrics-sum-aggregation-histogram-fields]]\n==== Histogram fields\n\nWhen sum is computed on <<histogram,histogram fields>>, the result of the aggregation is the sum of all elements in the `values`\narray multiplied by the number in the same position in the `counts` array.\n\nFor example, for the following index that stores pre-aggregated histograms with latency metrics for different networks:\n\n[source,console]\n--------------------------------------------------\nPUT metrics_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"latency_histo\": { \"type\": \"histogram\" }\n    }\n  }\n}\n\nPUT metrics_index/_doc/1?refresh\n{\n  \"network.name\" : \"net-1\",\n  \"latency_histo\" : {\n      \"values\" : [0.1, 0.2, 0.3, 0.4, 0.5],\n      \"counts\" : [3, 7, 23, 12, 6]\n   }\n}\n\nPUT metrics_index/_doc/2?refresh\n{\n  \"network.name\" : \"net-2\",\n  \"latency_histo\" : {\n      \"values\" :  [0.1, 0.2, 0.3, 0.4, 0.5],\n      \"counts\" : [8, 17, 8, 7, 6]\n   }\n}\n\nPOST /metrics_index/_search?size=0&filter_path=aggregations\n{\n  \"aggs\" : {\n    \"total_latency\" : { \"sum\" : { \"field\" : \"latency_histo\" } }\n  }\n}\n--------------------------------------------------\n\nFor each histogram field, the `sum` aggregation will add each number in the\n`values` array, multiplied by its associated count in the `counts` array.\n\nEventually, it will add all values for all histograms and return the following\nresult:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"aggregations\": {\n    \"total_latency\": {\n      \"value\": 28.8\n    }\n  }\n}\n--------------------------------------------------\n"
}