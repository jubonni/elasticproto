{
    "meta": {
        "size": 9826,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/restore-snapshot-api.html",
        "type": "documentation",
        "role": [
            "child_attributes"
        ],
        "has_code": false,
        "title": "restore-snapshot-api",
        "version": "8.15"
    },
    "doc": "[[restore-snapshot-api]]\n=== Restore snapshot API\n++++\n<titleabbrev>Restore snapshot</titleabbrev>\n++++\n\nRestores a <<snapshot-restore,snapshot>> of a cluster or specified data streams and indices.\n\n////\n[source,console]\n----\nPUT /_snapshot/my_repository\n{\n  \"type\": \"fs\",\n  \"settings\": {\n    \"location\": \"my_backup_location\"\n  }\n}\n\nPUT /_snapshot/my_repository/my_snapshot?wait_for_completion=true\n\nPUT /index_1\n\nPUT /index_2\n\nPUT /index_3\n\nPUT /index_4\n\nPUT _snapshot/my_repository/snapshot_2?wait_for_completion=true\n{\n  \"indices\": \"index_1,index_2\",\n  \"ignore_unavailable\": true,\n  \"include_global_state\": false,\n  \"metadata\": {\n    \"taken_by\": \"Elastic Machine\",\n    \"taken_because\": \"backup testing\"\n  }\n}\n\nPOST /index_1/_close\n\nPOST /index_2/_close\n\nPOST /index_3/_close\n\nPOST /index_4/_close\n\n----\n// TESTSETUP\n////\n\n[source,console]\n----\nPOST /_snapshot/my_repository/my_snapshot/_restore\n----\n// TEST[s/_restore/_restore?wait_for_completion=true/]\n\n[[restore-snapshot-api-request]]\n==== {api-request-title}\n\n`POST /_snapshot/<repository>/<snapshot>/_restore`\n\n[[restore-snapshot-api-prereqs]]\n==== {api-prereq-title}\n\n* If you use {es} security features, you must have the `manage` or\n`cluster:admin/snapshot/*` cluster privilege to use this API.\n\n// tag::restore-prereqs[]\n* You can only restore a snapshot to a running cluster with an elected\n<<master-node,master node>>. The snapshot's repository must be\n<<snapshots-register-repository,registered>> and available to the cluster.\n\n* The snapshot and cluster versions must be compatible. See\n<<snapshot-restore-version-compatibility>>.\n\n* To restore a snapshot, the cluster's global metadata must be writable. Ensure\nthere aren't any <<cluster-read-only,cluster blocks>> that prevent writes. The\nrestore operation ignores <<index-modules-blocks,index blocks>>.\n\n* Before you restore a data stream, ensure the cluster contains a\n<<create-index-template,matching index template>> with data stream enabled. To\ncheck, use {kib}'s <<manage-index-templates,**Index Management**>> feature or\nthe <<indices-get-template,get index template API>>:\n+\n[source,console]\n----\nGET _index_template/*?filter_path=index_templates.name,index_templates.index_template.index_patterns,index_templates.index_template.data_stream\n----\n+\nIf no such template exists, you can <<create-index-template,create one>> or\n<<restore-entire-cluster,restore a cluster state>> that\ncontains one. Without a matching index template, a data stream can't roll over\nor create backing indices.\n\n* If your snapshot contains data from App Search or Workplace Search, ensure\nyou've restored the {enterprise-search-ref}/encryption-keys.html[Enterprise\nSearch encryption key] before restoring the snapshot.\n// end::restore-prereqs[]\n\n[[restore-snapshot-api-path-params]]\n==== {api-path-parms-title}\n\n`<repository>`::\n(Required, string)\nName of the repository to restore a snapshot from.\n\n`<snapshot>`::\n(Required, string)\nName of the snapshot to restore.\n\n[[restore-snapshot-api-query-params]]\n==== {api-query-parms-title}\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=master-timeout]\n\n`wait_for_completion`::\n(Optional, Boolean) If `true`, the request returns a response when the restore\noperation completes. The operation is complete when it finishes all attempts to\n<<monitor-restore,recover primary shards>> for restored indices.\nThis applies even if one or more of the recovery attempts fail.\n+\nIf `false`, the request returns a response when the restore\noperation initializes. Defaults to `false`.\n\n[role=\"child_attributes\"]\n[[restore-snapshot-api-request-body]]\n==== {api-request-body-title}\n\n`ignore_unavailable`::\n(Optional, Boolean) If `true`, the request ignores any index or data stream in\n`indices` that's missing from the snapshot. If `false`, the request returns an\nerror for any missing index or data stream. Defaults to `false`.\n\n`ignore_index_settings`::\n(Optional, string or array of strings) Index settings to not restore from the snapshot. You can't use this option to ignore <<index-number-of-shards,`index.number_of_shards`>>.\n+\nFor data streams, this option only applies to restored backing indices. New\nbacking indices are configured using the data stream's matching index template.\n\n`include_aliases`::\n(Optional, Boolean)\nIf `true`, the request restores aliases for any restored data streams and\nindices. If `false`, the request doesn't restore aliases. Defaults to `true`.\n\n[[restore-snapshot-api-include-global-state]]\n`include_global_state`::\n+\n--\n(Optional, Boolean)\nIf `true`, restore the cluster state. Defaults to `false`.\n\nThe cluster state includes:\n\n// tag::cluster-state-contents[]\n* <<cluster-setting-types,Persistent cluster settings>>\n* <<index-templates,Index templates>>\n* <<indices-templates-v1,Legacy index templates>>\n* <<ingest,Ingest pipelines>>\n* <<index-lifecycle-management,{ilm-init} policies>>\n* <<script-stored-scripts,Stored scripts>>\n* For snapshots taken after 7.12.0, <<feature-state,feature states>>\n// end::cluster-state-contents[]\n\nIf `include_global_state` is `true` then the restore operation merges the\nlegacy index templates in your cluster with the templates contained in the\nsnapshot, replacing any existing ones whose name matches one in the snapshot.\nIt completely removes all persistent settings, non-legacy index templates,\ningest pipelines and {ilm-init} lifecycle policies that exist in your cluster\nand replaces them with the corresponding items from the snapshot.\n\nUse the `feature_states` parameter to configure how feature states are restored.\n\nIf `include_global_state` is `true` and a snapshot was created without a global\nstate then the restore request will fail.\n--\n\n[[restore-snapshot-api-feature-states]]\n`feature_states`::\n(Optional, array of strings)\n<<feature-state,Feature states>> to restore.\n+\nIf `include_global_state` is `true`, the request restores all feature states\nin the snapshot by default. If `include_global_state` is `false`, the request\nrestores no feature states by default. Note that specifying an empty array\nwill result in the default behavior. To restore no feature states, regardless\nof the `include_global_state` value, specify an array containing only the value\n`none` (`[\"none\"]`).\n\n[[restore-snapshot-api-index-settings]]\n`index_settings`::\n(Optional, object) Index settings to add or change in restored indices,\nincluding backing indices. You can't use this option to change\n<<index-number-of-shards,`index.number_of_shards`>>.\n+\nFor data streams, this option only applies to restored backing indices. New\nbacking indices are configured using the data stream's matching index template.\n\n`indices`::\n(Optional, string or array of strings) Comma-separated list of indices and data\nstreams to restore. Supports <<api-multi-index,multi-target syntax>>. Defaults\nto all regular indices and regular data streams in the snapshot.\n+\nYou can't use this parameter to restore <<system-indices,system indices or\nsystem data streams>>. Use\n<<restore-snapshot-api-feature-states,`feature_states`>> instead.\n\n[[restore-snapshot-api-partial]]\n`partial`::\n(Optional, Boolean)\nIf `false`, the entire restore operation will fail if one or more indices included in the snapshot do not have all primary shards available. Defaults to `false`.\n+\nIf `true`, allows restoring a partial snapshot of indices with unavailable shards. Only shards that were successfully included in the snapshot\nwill be restored. All missing shards will be recreated as empty.\n\n[[restore-snapshot-api-rename-pattern]]\n`rename_pattern`::\n(Optional, string)\nDefines a rename pattern to apply to restored data streams and indices. Data streams and indices matching the rename pattern will be renamed according to\n<<restore-snapshot-api-rename-replacement,`rename_replacement`>>.\n+\nThe rename pattern is applied as defined by the regular expression that\nsupports referencing the original text, according to the https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#appendReplacement-java.lang.StringBuffer-java.lang.String-[`appendReplacement`] logic.\n\n[[restore-snapshot-api-rename-replacement]]\n`rename_replacement`::\n(Optional, string)\nDefines the rename replacement string. See <<restore-snapshot-api-rename-pattern,`rename_pattern`>> for more information.\n\n[[restore-snapshot-api-example]]\n==== {api-examples-title}\n\n[[restore-snapshot-api-example-rename]]\n===== Restore renamed\n\nThe following request restores `index_1` and `index_2` from `snapshot_2`. The `rename_pattern` and `rename_replacement` parameters indicate any index matching the regular expression `index_(.+)` will be renamed using the pattern `restored_index_$1` when restored.\n\nFor example, `index_1` will be renamed to `restored_index_1`. `index_2` will be renamed to `restored_index_2`.\n\n[source,console]\n----\nPOST /_snapshot/my_repository/snapshot_2/_restore?wait_for_completion=true\n{\n  \"indices\": \"index_1,index_2\",\n  \"ignore_unavailable\": true,\n  \"include_global_state\": false,\n  \"rename_pattern\": \"index_(.+)\",\n  \"rename_replacement\": \"restored_index_$1\",\n  \"include_aliases\": false\n}\n----\n\nThe API returns an acknowledgement if the request succeeds. If the request encounters errors, the response indicates any issues found, such as\nopen indices that are blocking the restore operation from completing.\n\n[[restore-snapshot-api-example-inplace]]\n===== Restore in-place\n\nYou may want to restore an index in-place, for example when no alternative\noptions surface after the <<cluster-allocation-explain>> API reports\n`no_valid_shard_copy`.\n\nThe following request <<indices-close,closes>> `index_1` and then restores it\nin-place from the `snapshot_2` snapshot in the `my_repository` repository.\n\n[source,console]\n----\nPOST index_1/_close\n\nPOST /_snapshot/my_repository/snapshot_2/_restore?wait_for_completion=true\n{\n  \"indices\": \"index_1\"\n}\n----\n"
}