{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.651579",
        "size": 8568,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/get-ml-memory.html",
        "type": "documentation",
        "role": [
            "xpack",
            "child_attributes"
        ],
        "has_code": true,
        "title": "get-ml-memory",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[get-ml-memory]]\n= Get machine learning memory stats API\n\n[subs=\"attributes\"]\n++++\n<titleabbrev>Get {ml} memory stats</titleabbrev>\n++++\n\nReturns information on how {ml} is using memory.\n\n[[get-ml-memory-request]]\n== {api-request-title}\n\n`GET _ml/memory/_stats` +\n`GET _ml/memory/<node_id>/_stats`\n\n[[get-ml-memory-prereqs]]\n== {api-prereq-title}\n\nRequires the `monitor_ml` cluster privilege. This privilege is included in the\n`machine_learning_user` built-in role.\n\n[[get-ml-memory-desc]]\n== {api-description-title}\n\nGet information about how {ml} jobs and trained models are using memory, on each\nnode, both within the JVM heap, and natively, outside of the JVM.\n\n[[get-ml-memory-path-params]]\n== {api-path-parms-title}\n\n`<node_id>`::\n    (Optional, string) The names of particular nodes in the cluster to target.\n    For example, `nodeId1,nodeId2` or `ml:true`. For node selection options,\n    see <<cluster-nodes>>.\n\n[[get-ml-memory-query-parms]]\n== {api-query-parms-title}\n\n`human`::\n    Specify this query parameter to include the fields with units in the response.\n    Otherwise only the `_in_bytes` sizes are returned in the response.\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=timeoutparms]\n\n[role=\"child_attributes\"]\n[[get-ml-memory-response-body]]\n== {api-response-body-title}\n\n`_nodes`::\n(object)\nContains statistics about the number of nodes selected by the request.\n+\n.Properties of `_nodes`\n[%collapsible%open]\n====\n`failed`::\n(integer)\nNumber of nodes that rejected the request or failed to respond. If this value\nis not `0`, a reason for the rejection or failure is included in the response.\n\n`successful`::\n(integer)\nNumber of nodes that responded successfully to the request.\n\n`total`::\n(integer)\nTotal number of nodes selected by the request.\n====\n\n`cluster_name`::\n(string)\nName of the cluster. Based on the <<cluster-name,cluster.name>> setting.\n\n`nodes`::\n(object)\nContains statistics for the nodes selected by the request.\n+\n.Properties of `nodes`\n[%collapsible%open]\n====\n`<node_id>`::\n(object)\nContains statistics for the node.\n+\n.Properties of `<node_id>`\n[%collapsible%open]\n=====\n`attributes`::\n(object)\ninclude::{es-ref-dir}/ml/ml-shared.asciidoc[tag=node-attributes]\n\n`ephemeral_id`::\n(string)\ninclude::{es-ref-dir}/ml/ml-shared.asciidoc[tag=node-ephemeral-id]\n\n`jvm`::\n(object)\nContains Java Virtual Machine (JVM) statistics for the node.\n+\n.Properties of `jvm`\n[%collapsible%open]\n======\n`heap_max`::\n(<<byte-units,byte value>>)\nMaximum amount of memory available for use by the heap.\n\n`heap_max_in_bytes`::\n(integer)\nMaximum amount of memory, in bytes, available for use by the heap.\n\n`java_inference`::\n(<<byte-units,byte value>>)\nAmount of Java heap currently being used for caching inference models.\n\n`java_inference_in_bytes`::\n(integer)\nAmount of Java heap, in bytes, currently being used for caching inference models.\n\n`java_inference_max`::\n(<<byte-units,byte value>>)\nMaximum amount of Java heap to be used for caching inference models.\n\n`java_inference_max_in_bytes`::\n(integer)\nMaximum amount of Java heap, in bytes, to be used for caching inference models.\n======\n\n`mem`::\n(object)\nContains statistics about memory usage for the node.\n+\n.Properties of `mem`\n[%collapsible%open]\n======\n`adjusted_total`::\n(<<byte-units,byte value>>)\nIf the amount of physical memory has been overridden using the `es.total_memory_bytes`\nsystem property then this reports the overridden value. Otherwise it reports the same\nvalue as `total`.\n\n`adjusted_total_in_bytes`::\n(integer)\nIf the amount of physical memory has been overridden using the `es.total_memory_bytes`\nsystem property then this reports the overridden value in bytes. Otherwise it reports\nthe same value as `total_in_bytes`.\n\n`ml`::\n(object)\nContains statistics about {ml} use of native memory on the node.\n+\n.Properties of `ml`\n[%collapsible%open]\n=======\n`anomaly_detectors`::\n(<<byte-units,byte value>>)\nAmount of native memory set aside for {anomaly-jobs}.\n\n`anomaly_detectors_in_bytes`::\n(integer)\nAmount of native memory, in bytes, set aside for {anomaly-jobs}.\n\n`data_frame_analytics`::\n(<<byte-units,byte value>>)\nAmount of native memory set aside for {dfanalytics-jobs}.\n\n`data_frame_analytics_in_bytes`::\n(integer)\nAmount of native memory, in bytes, set aside for {dfanalytics-jobs}.\n\n`max`::\n(<<byte-units,byte value>>)\nMaximum amount of native memory (separate to the JVM heap) that may be used by {ml}\nnative processes.\n\n`max_in_bytes`::\n(integer)\nMaximum amount of native memory (separate to the JVM heap), in bytes, that may be\nused by {ml} native processes.\n\n`native_code_overhead`::\n(<<byte-units,byte value>>)\nAmount of native memory set aside for loading {ml} native code shared libraries.\n\n`native_code_overhead_in_bytes`::\n(integer)\nAmount of native memory, in bytes, set aside for loading {ml} native code shared libraries.\n\n`native_inference`::\n(<<byte-units,byte value>>)\nAmount of native memory set aside for trained models that have a PyTorch `model_type`.\n\n`native_inference_in_bytes`::\n(integer)\nAmount of native memory, in bytes, set aside for trained models that have a PyTorch `model_type`.\n=======\n\n`total`::\n(<<byte-units,byte value>>)\nTotal amount of physical memory.\n\n`total_in_bytes`::\n(integer)\nTotal amount of physical memory in bytes.\n\n======\n\n`name`::\n(string)\nHuman-readable identifier for the node. Based on the <<node-name>> setting.\n\n`roles`::\n(array of strings)\nRoles assigned to the node. See <<modules-node>>.\n\n`transport_address`::\n(string)\ninclude::{es-ref-dir}/ml/ml-shared.asciidoc[tag=node-transport-address]\n\n=====\n====\n\n[[get-ml-memory-example]]\n== {api-examples-title}\n\n[source,console]\n--------------------------------------------------\nGET _ml/memory/_stats?human\n--------------------------------------------------\n// TEST[setup:node]\n\nThis is a possible response:\n\n[source,console-result]\n----\n{\n  \"_nodes\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"failed\": 0\n  },\n  \"cluster_name\": \"my_cluster\",\n  \"nodes\": {\n    \"pQHNt5rXTTWNvUgOrdynKg\": {\n      \"name\": \"node-0\",\n      \"ephemeral_id\": \"ITZ6WGZnSqqeT_unfit2SQ\",\n      \"transport_address\": \"127.0.0.1:9300\",\n      \"attributes\": {\n        \"ml.machine_memory\": \"68719476736\",\n        \"ml.max_jvm_size\": \"536870912\"\n      },\n      \"roles\": [\n        \"data\",\n        \"data_cold\",\n        \"data_content\",\n        \"data_frozen\",\n        \"data_hot\",\n        \"data_warm\",\n        \"ingest\",\n        \"master\",\n        \"ml\",\n        \"remote_cluster_client\",\n        \"transform\"\n      ],\n      \"mem\": {\n        \"total\": \"64gb\",\n        \"total_in_bytes\": 68719476736,\n        \"adjusted_total\": \"64gb\",\n        \"adjusted_total_in_bytes\": 68719476736,\n        \"ml\": {\n          \"max\": \"19.1gb\",\n          \"max_in_bytes\": 20615843020,\n          \"native_code_overhead\": \"0b\",\n          \"native_code_overhead_in_bytes\": 0,\n          \"anomaly_detectors\": \"0b\",\n          \"anomaly_detectors_in_bytes\": 0,\n          \"data_frame_analytics\": \"0b\",\n          \"data_frame_analytics_in_bytes\": 0,\n          \"native_inference\": \"0b\",\n          \"native_inference_in_bytes\": 0\n        }\n      },\n      \"jvm\": {\n        \"heap_max\": \"512mb\",\n        \"heap_max_in_bytes\": 536870912,\n        \"java_inference_max\": \"204.7mb\",\n        \"java_inference_max_in_bytes\": 214748364,\n        \"java_inference\": \"0b\",\n        \"java_inference_in_bytes\": 0\n      }\n    }\n  }\n}\n----\n// TESTRESPONSE[s/\"cluster_name\": \"my_cluster\"/\"cluster_name\": $body.cluster_name/]\n// TESTRESPONSE[s/\"pQHNt5rXTTWNvUgOrdynKg\"/\\$node_name/]\n// TESTRESPONSE[s/\"ephemeral_id\": \"ITZ6WGZnSqqeT_unfit2SQ\"/\"ephemeral_id\": \"$body.$_path\"/]\n// TESTRESPONSE[s/\"transport_address\": \"127.0.0.1:9300\"/\"transport_address\": \"$body.$_path\"/]\n// TESTRESPONSE[s/\"attributes\": \\{[^\\}]*\\}/\"attributes\": $body.$_path/]\n// TESTRESPONSE[s/\"total\": \"64gb\"/\"total\": \"$body.$_path\"/]\n// TESTRESPONSE[s/\"total_in_bytes\": 68719476736/\"total_in_bytes\": $body.$_path/]\n// TESTRESPONSE[s/\"adjusted_total\": \"64gb\"/\"adjusted_total\": \"$body.$_path\"/]\n// TESTRESPONSE[s/\"adjusted_total_in_bytes\": 68719476736/\"adjusted_total_in_bytes\": $body.$_path/]\n// TESTRESPONSE[s/\"max\": \"19.1gb\"/\"max\": \"$body.$_path\"/]\n// TESTRESPONSE[s/\"max_in_bytes\": 20615843020/\"max_in_bytes\": $body.$_path/]\n// TESTRESPONSE[s/\"heap_max\": \"512mb\"/\"heap_max\": \"$body.$_path\"/]\n// TESTRESPONSE[s/\"heap_max_in_bytes\": 536870912/\"heap_max_in_bytes\": $body.$_path/]\n// TESTRESPONSE[s/\"java_inference_max\": \"204.7mb\"/\"java_inference_max\": \"$body.$_path\"/]\n// TESTRESPONSE[s/\"java_inference_max_in_bytes\": 214748364/\"java_inference_max_in_bytes\": $body.$_path/]\n"
}