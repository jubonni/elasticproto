{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.683579",
        "size": 6341,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-grant-api-key.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "security-api-grant-api-key",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[security-api-grant-api-key]]\n=== Grant API key API\n++++\n<titleabbrev>Grant API keys</titleabbrev>\n++++\n\nCreates an API key on behalf of another user.\n\n[[security-api-grant-api-key-request]]\n==== {api-request-title}\n\n`POST /_security/api_key/grant`\n\n[[security-api-grant-api-key-prereqs]]\n==== {api-prereq-title}\n\n* To use this API, you must have the `grant_api_key` or the `manage_api_key` cluster privilege.\n\n[[security-api-grant-api-key-desc]]\n==== {api-description-title}\n\nThis API is similar to <<security-api-create-api-key>>, however it creates the\nAPI key for a user that is different than the user that runs the API.\n\nThe caller must have authentication credentials for the user on whose behalf\nthe API key will be created. It is not possible to use this API to create an\nAPI key without that user's credentials.\nThe supported user authentication credentials types are:\n * username and password\n * <<security-api-get-token, {es} access tokens>>\n * <<jwt-auth-realm, JWTs>>\n\nThe user, for whom the authentication credentials is provided,\ncan optionally <<run-as-privilege,\"run as\">> (impersonate) another user.\nIn this case, the API key will be created on behalf of the impersonated user.\n\nThis API is intended be used by applications that need to create and manage\nAPI keys for end users, but cannot guarantee that those users have permission\nto create API keys on their own behalf (see <<security-api-create-api-key-prereqs>>).\nThe API keys are created by the {es} API key service, which is automatically\nenabled.\n\nA successful grant API key API call returns a JSON structure that contains the\nAPI key, its unique id, and its name. If applicable, it also returns expiration\ninformation for the API key in milliseconds.\n\nNOTE: By default, API keys never expire. You can specify expiration information\nwhen you create the API keys.\n\nSee <<api-key-service-settings>> for configuration settings related to API key\nservice.\n\n[[security-api-grant-api-key-request-body]]\n==== {api-request-body-title}\n\nThe following parameters can be specified in the body of a POST request:\n\n`access_token`::\n(Required*, string)\nThe user's <<security-api-get-token, {es} access token>>, or JWT. Both <<jwt-realm-oauth2, access>> and\n<<jwt-realm-oidc, id>> JWT token types are supported, and they depend on the underlying JWT realm configuration.\nThe created API key will have a point in time snapshot of permissions of the user authenticated with this token\n(or even more restricted permissions, see the `role_descriptors` parameter).\nIf you specify the `access_token` grant type, this parameter is required. It is not valid with other grant types.\n\n`api_key`::\n(Required, object)\nDefines the API key.\n\n`expiration`:::\n(Optional, string) Expiration time for the API key. By default, API keys never\nexpire.\n\n`name`:::\n(Required, string) Specifies the name for this API key.\n\n`role_descriptors`:::\n(Optional, object) The role descriptors for this API\nkey. This parameter is optional. When it is not specified or is an empty array,\nthe API key has a point in time snapshot of permissions of the specified user or\naccess token. If you supply role descriptors, the resultant permissions are an\nintersection of API keys permissions and the permissions of the user or access\ntoken. The structure of a role descriptor is the same as the request for <<api-key-role-descriptors, create API keys API>>.\n\n`metadata`:::\n(Optional, object) Arbitrary metadata that you want to associate with the API key.\nIt supports nested data structure.\nWithin the `metadata` object, keys beginning with `_` are reserved for\nsystem usage.\n\ninclude::client-authentication.asciidoc[]\n\n`grant_type`::\n(Required, string)\nThe type of grant. Supported grant types are: `access_token`,`password`.\n\n`access_token`:::\nIn this type of grant, you must supply either an access token, that was created by the\n{es} token service (see <<security-api-get-token>> and <<encrypt-http-communication>>),\nor a <<jwt-auth-realm, JWT>> (either a JWT `access_token` or a JWT `id_token`).\n\n`password`:::\nIn this type of grant, you must supply the user ID and password for which you\nwant to create the API key.\n\n`password`::\n(Required*, string)\nThe user's password. If you specify the `password` grant type, this parameter is\nrequired. It is not valid with other grant types.\n\n`username`::\n(Required*, string)\nThe user name that identifies the user. If you specify the `password` grant type,\nthis parameter is required. It is not valid with other grant types.\n\n`run_as`::\n(Optional, string)\nThe name of the user to be <<run-as-privilege,impersonated>>.\n\n*Indicates that the setting is required in some, but not all situations.\n\n[[security-api-grant-api-key-example]]\n==== {api-examples-title}\n\n[source,console]\n------------------------------------------------------------\nPOST /_security/api_key/grant\n{\n  \"grant_type\": \"password\",\n  \"username\" : \"test_admin\",\n  \"password\" : \"x-pack-test-password\",\n  \"api_key\" : {\n    \"name\": \"my-api-key\",\n    \"expiration\": \"1d\",\n    \"role_descriptors\": {\n      \"role-a\": {\n        \"cluster\": [\"all\"],\n        \"indices\": [\n          {\n          \"names\": [\"index-a*\"],\n          \"privileges\": [\"read\"]\n          }\n        ]\n      },\n      \"role-b\": {\n        \"cluster\": [\"all\"],\n        \"indices\": [\n          {\n          \"names\": [\"index-b*\"],\n          \"privileges\": [\"all\"]\n          }\n        ]\n      }\n    },\n    \"metadata\": {\n      \"application\": \"my-application\",\n      \"environment\": {\n         \"level\": 1,\n         \"trusted\": true,\n         \"tags\": [\"dev\", \"staging\"]\n      }\n    }\n  }\n}\n------------------------------------------------------------\n\nThe user (`test_admin`) whose credentials are provided can \"run as\" another user (`test_user`).\nThe API key will be granted to the impersonated user (`test_user`).\n\n[source,console]\n------------------------------------------------------------\nPOST /_security/api_key/grant\n{\n  \"grant_type\": \"password\",\n  \"username\" : \"test_admin\",  <1>\n  \"password\" : \"x-pack-test-password\",  <2>\n  \"run_as\": \"test_user\",  <3>\n  \"api_key\" : {\n    \"name\": \"another-api-key\"\n  }\n}\n------------------------------------------------------------\n<1> The user for which the credential is provided and performs \"run as\".\n<2> Credential for the above user\n<3> The impersonated user for whom the API key will be created for.\n"
}