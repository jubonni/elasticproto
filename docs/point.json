{
    "meta": {
        "size": 3340,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/point.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "point",
        "version": "8.15"
    },
    "doc": "[[point]]\n[role=\"xpack\"]\n=== Point field type\n++++\n<titleabbrev>Point</titleabbrev>\n++++\n\nThe `point` data type facilitates the indexing of and searching\narbitrary `x, y` pairs that fall in a 2-dimensional planar\ncoordinate system.\n\nYou can query documents using this type using\n<<query-dsl-shape-query,shape Query>>.\n\nAs with <<geo-shape, geo_shape>> and <<geo-point, geo_point>>, `point` can be specified in http://geojson.org[GeoJSON]\nand https://docs.opengeospatial.org/is/12-063r5/12-063r5.html[Well-Known Text] formats.\nHowever, there are a number of additional formats that are supported for convenience and historical reasons.\nIn total there are five ways that a cartesian point may be specified, as demonstrated below:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"location\": {\n        \"type\": \"point\"\n      }\n    }\n  }\n}\n\nPUT my-index-000001/_doc/1\n{\n  \"text\": \"Point as an object using GeoJSON format\",\n  \"location\": { <1>\n    \"type\": \"Point\",\n    \"coordinates\": [-71.34, 41.12]\n  }\n}\n\nPUT my-index-000001/_doc/2\n{\n  \"text\": \"Point as a WKT POINT primitive\",\n  \"location\" : \"POINT (-71.34 41.12)\" <2>\n}\n\nPUT my-index-000001/_doc/3\n{\n  \"text\": \"Point as an object with 'x' and 'y' keys\",\n  \"location\": { <3>\n    \"x\": -71.34,\n    \"y\": 41.12\n  }\n}\n\nPUT my-index-000001/_doc/4\n{\n  \"text\": \"Point as an array\",\n  \"location\": [ -71.34, 41.12 ] <4>\n}\n\nPUT my-index-000001/_doc/5\n{\n  \"text\": \"Point as a string\",\n  \"location\": \"-71.34,41.12\" <5>\n}\n\n--------------------------------------------------\n\n<1> Point expressed as an object, in https://geojson.org/[GeoJSON] format, with `type` and `coordinates` keys.\n<2> Point expressed as a https://docs.opengeospatial.org/is/12-063r5/12-063r5.html[Well-Known Text]\nPOINT with the format: `\"POINT(x y)\"`\n<3> Point expressed as an object, with `x` and `y` keys.\n<4> Point expressed as an array with the format: [ `x`, `y`]\n<5> Point expressed as a string with the format: `\"x,y\"`.\n\n[NOTE]\nUnlike the case with the {ref}/geo-point.html[geo-point] field type,\nthe order of the coordinates `x` and `y` is the same for all formats above.\n\nThe coordinates provided to the indexer are single precision floating point values so\nthe field guarantees the same accuracy provided by the java virtual machine (typically\n`1E-38`).\n\n[[point-params]]\n==== Parameters for `point` fields\n\nThe following parameters are accepted by `point` fields:\n\n[horizontal]\n\n<<ignore-malformed,`ignore_malformed`>>::\n\n    If `true`, malformed points are ignored. If `false` (default),\n    malformed points throw an exception and reject the whole document.\n\n`ignore_z_value`::\n\n    If `true` (default) three dimension points will be accepted (stored in source)\n    but only x and y values will be indexed; the third dimension is\n    ignored. If `false`, points containing any more than x and y\n    (two dimensions) values throw an exception and reject the whole document.\n\n<<null-value,`null_value`>>::\n\n    Accepts an point value which is substituted for any explicit `null` values.\n    Defaults to `null`, which means the field is treated as missing.\n\n==== Sorting and retrieving points\n\nIt is currently not possible to sort points or retrieve their fields\ndirectly. The `point` value is only retrievable through the `_source`\nfield.\n"
}