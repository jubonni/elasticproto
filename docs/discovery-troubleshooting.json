{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.117271",
        "size": 5934,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/discovery-troubleshooting.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "discovery-troubleshooting",
        "version": "8.15"
    },
    "doc": "[[discovery-troubleshooting]]\n== Troubleshooting discovery\n\nIn most cases, the discovery and election process completes quickly, and the\nmaster node remains elected for a long period of time.\n\nIf your cluster doesn't have a stable master, many of its features won't work\ncorrectly and {es} will report errors to clients and in its logs. You must fix\nthe master node's instability before addressing these other issues. It will not\nbe possible to solve any other issues while there is no elected master node or\nthe elected master node is unstable.\n\nIf your cluster has a stable master but some nodes can't discover or join it,\nthese nodes will report errors to clients and in their logs. You must address\nthe obstacles preventing these nodes from joining the cluster before addressing\nother issues. It will not be possible to solve any other issues reported by\nthese nodes while they are unable to join the cluster.\n\nIf the cluster has no elected master node for more than a few seconds, the\nmaster is unstable, or some nodes are unable to discover or join a stable\nmaster, then {es} will record information in its logs explaining why. If the\nproblems persist for more than a few minutes, {es} will record additional\ninformation in its logs. To properly troubleshoot discovery and election\nproblems, collect and analyse logs covering at least five minutes from all\nnodes.\n\nThe following sections describe some common discovery and election problems.\n\n[discrete]\n[[discovery-no-master]]\n=== No master is elected\n\nWhen a node wins the master election, it logs a message containing\n`elected-as-master` and all nodes log a message containing\n`master node changed` identifying the new elected master node.\n\nIf there is no elected master node and no node can win an election, all\nnodes will repeatedly log messages about the problem using a logger called\n`org.elasticsearch.cluster.coordination.ClusterFormationFailureHelper`. By\ndefault, this happens every 10 seconds.\n\nMaster elections only involve master-eligible nodes, so focus your attention on\nthe master-eligible nodes in this situation. These nodes' logs will indicate\nthe requirements for a master election, such as the discovery of a certain set\nof nodes. The <<health-api>> API on these nodes will also provide useful\ninformation about the situation.\n\nIf the logs or the health report indicate that {es} can't discover enough nodes\nto form a quorum, you must address the reasons preventing {es} from discovering\nthe missing nodes. The missing nodes are needed to reconstruct the cluster\nmetadata. Without the cluster metadata, the data in your cluster is\nmeaningless. The cluster metadata is stored on a subset of the master-eligible\nnodes in the cluster. If a quorum can't be discovered, the missing nodes were\nthe ones holding the cluster metadata.\n\nEnsure there are enough nodes running to form a quorum and that every node can\ncommunicate with every other node over the network. {es} will report additional\ndetails about network connectivity if the election problems persist for more\nthan a few minutes. If you can't start enough nodes to form a quorum, start a\nnew cluster and restore data from a recent snapshot. Refer to\n<<modules-discovery-quorums>> for more information.\n\nIf the logs or the health report indicate that {es} _has_ discovered a possible\nquorum of nodes, the typical reason that the cluster can't elect a master is\nthat one of the other nodes can't discover a quorum. Inspect the logs on the\nother master-eligible nodes and ensure that they have all discovered enough\nnodes to form a quorum.\n\nIf the logs suggest that discovery or master elections are failing due to\ntimeouts or network-related issues then narrow down the problem as follows.\n\ninclude::network-timeouts.asciidoc[tag=troubleshooting-network-timeouts-gc-vm]\n\ninclude::network-timeouts.asciidoc[tag=troubleshooting-network-timeouts-packet-capture-elections]\n\ninclude::network-timeouts.asciidoc[tag=troubleshooting-network-timeouts-threads]\n\n[discrete]\n[[discovery-master-unstable]]\n=== Master is elected but unstable\n\nWhen a node wins the master election, it logs a message containing\n`elected-as-master`. If this happens repeatedly, the elected master node is\nunstable. In this situation, focus on the logs from the master-eligible nodes\nto understand why the election winner stops being the master and triggers\nanother election. If the logs suggest that the master is unstable due to\ntimeouts or network-related issues then narrow down the problem as follows.\n\ninclude::network-timeouts.asciidoc[tag=troubleshooting-network-timeouts-gc-vm]\n\ninclude::network-timeouts.asciidoc[tag=troubleshooting-network-timeouts-packet-capture-elections]\n\ninclude::network-timeouts.asciidoc[tag=troubleshooting-network-timeouts-threads]\n\n[discrete]\n[[discovery-cannot-join-master]]\n=== Node cannot discover or join stable master\n\nIf there is a stable elected master but a node can't discover or join its\ncluster, it will repeatedly log messages about the problem using the\n`ClusterFormationFailureHelper` logger. The <<health-api>> API on the affected\nnode will also provide useful information about the situation. Other log\nmessages on the affected node and the elected master may provide additional\ninformation about the problem. If the logs suggest that the node cannot\ndiscover or join the cluster due to timeouts or network-related issues then\nnarrow down the problem as follows.\n\ninclude::network-timeouts.asciidoc[tag=troubleshooting-network-timeouts-gc-vm]\n\ninclude::network-timeouts.asciidoc[tag=troubleshooting-network-timeouts-packet-capture-elections]\n\ninclude::network-timeouts.asciidoc[tag=troubleshooting-network-timeouts-threads]\n\n[discrete]\n[[discovery-node-leaves]]\n=== Node joins cluster and leaves again\n\nIf a node joins the cluster but {es} determines it to be faulty then it will be\nremoved from the cluster again. See <<cluster-fault-detection-troubleshooting>>\nfor more information.\n"
}