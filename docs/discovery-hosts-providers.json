{
    "meta": {
        "timestamp": "2024-11-01T02:49:24.950072",
        "size": 7628,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/discovery-hosts-providers.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "discovery-hosts-providers",
        "version": "8.15"
    },
    "doc": "[[discovery-hosts-providers]]\n=== Discovery\n\nDiscovery is the process by which the cluster formation module finds other\nnodes with which to form a cluster. This process runs when you start an\nElasticsearch node or when a node believes the master node failed and continues\nuntil the master node is found or a new master node is elected.\n\nThis process starts with a list of _seed_ addresses from one or more\n<<built-in-hosts-providers,seed hosts providers>>, together with the addresses\nof any master-eligible nodes that were in the last-known cluster. The process\noperates in two phases: First, each node probes the seed addresses by\nconnecting to each address and attempting to identify the node to which it is\nconnected and to verify that it is master-eligible. Secondly, if successful, it\nshares with the remote node a list of all of its known master-eligible peers\nand the remote node responds with _its_ peers in turn. The node then probes all\nthe new nodes that it just discovered, requests their peers, and so on.\n\nIf the node is not master-eligible then it continues this discovery process\nuntil it has discovered an elected master node. If no elected master is\ndiscovered then the node will retry after `discovery.find_peers_interval` which\ndefaults to `1s`.\n\nIf the node is master-eligible then it continues this discovery process until\nit has either discovered an elected master node or else it has discovered\nenough masterless master-eligible nodes to complete an election. If neither of\nthese occur quickly enough then the node will retry after\n`discovery.find_peers_interval` which defaults to `1s`.\n\nOnce a master is elected, it will normally remain as the elected master until\nit is deliberately stopped. It may also stop acting as the master if\n<<cluster-fault-detection,fault detection>> determines the cluster to be\nfaulty. When a node stops being the elected master, it begins the discovery\nprocess again.\n\nRefer to <<discovery-troubleshooting,Troubleshooting discovery>> for \ntroubleshooting issues with discovery.\n\n[[built-in-hosts-providers]]\n==== Seed hosts providers\n\nBy default the cluster formation module offers two seed hosts providers to\nconfigure the list of seed nodes: a _settings_-based and a _file_-based seed\nhosts provider. It can be extended to support cloud environments and other\nforms of seed hosts providers via {plugins}/discovery.html[discovery plugins].\nSeed hosts providers are configured using the `discovery.seed_providers`\nsetting, which defaults to the _settings_-based hosts provider. This setting\naccepts a list of different providers, allowing you to make use of multiple\nways to find the seed hosts for your cluster.\n\nEach seed hosts provider yields the IP addresses or hostnames of the seed\nnodes. If it returns any hostnames then these are resolved to IP addresses\nusing a DNS lookup. If a hostname resolves to multiple IP addresses then {es}\ntries to find a seed node at all of these addresses. If the hosts provider does\nnot explicitly give the TCP port of the node by then, it will implicitly use the\nfirst port in the port range given by `transport.profiles.default.port`, or by\n`transport.port` if `transport.profiles.default.port` is not set. The number of\nconcurrent lookups is controlled by\n`discovery.seed_resolver.max_concurrent_resolvers` which defaults to `10`, and\nthe timeout for each lookup is controlled by `discovery.seed_resolver.timeout`\nwhich defaults to `5s`. Note that DNS lookups are subject to\n<<networkaddress-cache-ttl,JVM DNS caching>>.\n\n[discrete]\n[[settings-based-hosts-provider]]\n===== Settings-based seed hosts provider\n\nThe settings-based seed hosts provider uses a node setting to configure a\nstatic list of the addresses of the seed nodes. These addresses can be given as\nhostnames or IP addresses; hosts specified as hostnames are resolved to IP\naddresses during each round of discovery.\n\nThe list of hosts is set using the <<unicast.hosts,`discovery.seed_hosts`>>\nstatic setting. For example:\n\n[source,yaml]\n--------------------------------------------------\ndiscovery.seed_hosts:\n   - 192.168.1.10:9300\n   - 192.168.1.11 <1>\n   - seeds.mydomain.com <2>\n--------------------------------------------------\n<1> The port will default to `transport.profiles.default.port` and fallback to\n    `transport.port` if not specified.\n<2> If a hostname resolves to multiple IP addresses, {es} will attempt to\n    connect to every resolved address.\n\n[discrete]\n[[file-based-hosts-provider]]\n===== File-based seed hosts provider\n\nThe file-based seed hosts provider configures a list of hosts via an external\nfile.  {es} reloads this file when it changes, so that the list of seed nodes\ncan change dynamically without needing to restart each node. For example, this\ngives a convenient mechanism for an {es} instance that is run in a Docker\ncontainer to be dynamically supplied with a list of IP addresses to connect to\nwhen those IP addresses may not be known at node startup.\n\nTo enable file-based discovery, configure the `file` hosts provider as follows\nin the `elasticsearch.yml` file:\n\n[source,yml]\n----------------------------------------------------------------\ndiscovery.seed_providers: file\n----------------------------------------------------------------\n\nThen create a file at `$ES_PATH_CONF/unicast_hosts.txt` in the format described\nbelow. Any time a change is made to the `unicast_hosts.txt` file the new\nchanges will be picked up by {es} and the new hosts list will be used.\n\nNote that the file-based discovery plugin augments the unicast hosts list in\n`elasticsearch.yml`: if there are valid seed addresses in\n`discovery.seed_hosts` then {es} uses those addresses in addition to those\nsupplied in `unicast_hosts.txt`.\n\nThe `unicast_hosts.txt` file contains one node entry per line. Each node entry\nconsists of the host (host name or IP address) and an optional transport port\nnumber. If the port number is specified, it must come immediately after the\nhost (on the same line) separated by a `:`. If the port number is not\nspecified, {es} will implicitly use the first port in the port range given by\n`transport.profiles.default.port`, or by `transport.port` if\n`transport.profiles.default.port` is not set.\n\nFor example, this is an example of `unicast_hosts.txt` for a cluster with four\nnodes that participate in discovery, some of which are not running on the\ndefault port:\n\n[source,txt]\n----------------------------------------------------------------\n10.10.10.5\n10.10.10.6:9305\n10.10.10.5:10005\n# an IPv6 address\n[2001:0db8:85a3:0000:0000:8a2e:0370:7334]:9301\n----------------------------------------------------------------\n\nHost names are allowed instead of IP addresses and are resolved by DNS as\ndescribed above. IPv6 addresses must be given in brackets with the port, if\nneeded, coming after the brackets.\n\nYou can also add comments to this file. All comments must appear on their lines\nstarting with `#` (i.e. comments cannot start in the middle of a line).\n\n[discrete]\n[[ec2-hosts-provider]]\n===== EC2 hosts provider\n\nThe {plugins}/discovery-ec2.html[EC2 discovery plugin] adds a hosts provider\nthat uses the https://github.com/aws/aws-sdk-java[AWS API] to find a list of\nseed nodes.\n\n[discrete]\n[[azure-classic-hosts-provider]]\n===== Azure Classic hosts provider\n\nThe {plugins}/discovery-azure-classic.html[Azure Classic discovery plugin] adds\na hosts provider that uses the Azure Classic API find a list of seed nodes.\n\n[discrete]\n[[gce-hosts-provider]]\n===== Google Compute Engine hosts provider\n\nThe {plugins}/discovery-gce.html[GCE discovery plugin] adds a hosts provider\nthat uses the GCE API find a list of seed nodes.\n"
}