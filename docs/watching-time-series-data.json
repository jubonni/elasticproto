{
    "meta": {
        "size": 6933,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/watching-time-series-data.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "watching-time-series-data",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[watching-time-series-data]]\n=== Watching time series data\n\nIf you are indexing time series data such as logs, RSS feeds, or network traffic,\nyou can use {watcher} to send notifications when certain events occur.\n\nFor example, you could index an RSS feed of posts on Stack Overflow that are\ntagged with Elasticsearch, Logstash, Beats, or Kibana, set up a watch to check\ndaily for new posts about a problem or failure, and send an email if any are\nfound.\n\nThe simplest way to index an RSS feed is to use https://www.elastic.co/products/logstash[Logstash].\n\nTo install Logstash and set up the RSS input plugin:\n\n. https://www.elastic.co/downloads/logstash[Download Logstash] and unpack the\n  archive file.\n. Go to the `logstash-{version}` directory and install the\n  {logstash-ref}/plugins-inputs-rss.html[RSS input] plugin:\n+\n[source,sh]\n----------------------------------------------------------\ncd logstash-<logstash_version>\nbin/logstash-plugin install logstash-input-rss\n----------------------------------------------------------\n\n. Create a Logstash configuration file that uses the RSS input plugin to get\n  data from an RSS/atom feed and outputs the data to Elasticsearch. For example,\n  the following `rss.conf` file gets events from the Stack Overflow feed that\n  are tagged with `elasticsearch`, `logstash`, `beats` or `kibana`.\n+\n[source,ruby]\n----------------------------------------------------------\ninput {\n  rss {\n    url => \"http://stackoverflow.com/feeds/tag/elasticsearch+or+logstash+or+beats+or+kibana\"\n    interval => 3600 <1>\n  }\n}\n\noutput {\n  elasticsearch { }\n  stdout { }\n}\n----------------------------------------------------------\n<1> Checks the feed every hour.\n+\nFor more information see {logstash-ref}/plugins-outputs-elasticsearch.html[Elasticsearch output]\nin the Logstash Reference.\n\n. Run Logstash with the `rss.conf` config file to start indexing the feed:\n+\n[source,she]\n----------------------------------------------------------\nbin/logstash -f rss.conf\n----------------------------------------------------------\n\nOnce you have Logstash set up to input data from the RSS feed into Elasticsearch,\nyou can set up a daily watch that runs at noon to check for new posts that\ncontain the words \"error\" or \"problem\".\n\nTo set up the watch:\n\n. Define the watch trigger--a daily schedule that runs at 12:00 UTC:\n+\n[source,js]\n--------------------------------------------------\n\"trigger\" : {\n  \"schedule\" : {\n    \"daily\" : { \"at\" : \"12:00\" }\n  }\n}\n--------------------------------------------------\n+\nNOTE: In {watcher}, you specify times in UTC time. Don't forget to do the\n      conversion from your local time so the schedule triggers at the time\n      you intend.\n\n. Define the watch input--a search that uses a filter to constrain the results\n  to the past day.\n+\n[source,js]\n--------------------------------------------------\n\"input\" : {\n  \"search\" : {\n    \"request\" : {\n      \"indices\" : [ \"logstash*\" ],\n      \"body\" : {\n        \"query\" : {\n          \"bool\" : {\n            \"must\" : { \"match\" : { \"message\": \"error problem\" }},\n            \"filter\" : { \"range\" : { \"@timestamp\" : { \"gte\" : \"now-1d\" }}}\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n. Define a watch condition to check the payload to see if the input search\n  returned any hits. If it did, the condition resolves to `true` and the watch\n  actions will be executed.\n+\nYou define the condition with the following script:\n+\n[source,text]\n--------------------------------------------------\nreturn ctx.payload.hits.total > threshold\n--------------------------------------------------\n+\nIf you store the script in a file at `$ES_HOME/config/scripts/threshold_hits.painless`,\nyou can then reference it by name in the watch condition.\n+\n[source,js]\n--------------------------------------------------\n\"condition\" : {\n  \"script\" : {\n    \"id\" : \"threshold_hits\",\n    \"params\" : {\n      \"threshold\" : 0 <1>\n    }\n  }\n}\n--------------------------------------------------\n<1> The threshold parameter value you want to pass to the script.\n+\n. Define a watch action to send an email that contains the relevant messages\n  from the past day as an attachment.\n+\n[source,js]\n--------------------------------------------------\n\"actions\" : {\n  \"send_email\" : {\n    \"email\" : {\n      \"to\" : \"username@example.org\",\n      \"subject\" : \"Somebody needs help with the Elastic Stack\",\n      \"body\" : \"The attached Stack Overflow posts were tagged with Elasticsearch, Logstash, Beats or Kibana and mentioned an error or problem.\",\n      \"attachments\" : {\n        \"attached_data\" : {\n          \"data\" : {\n            \"format\" : \"json\"\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n+\nNOTE: To use the email action, you must configure at least one email account in\n`elasticsearch.yml`. If you configure multiple email accounts, you need to\nspecify which one you want to send the email with. For more information, see\n<<configuring-email>>.\n\nThe complete watch looks like this:\n\n[source,console]\n--------------------------------------------------\nPUT _watcher/watch/rss_watch\n{\n  \"trigger\" : {\n      \"schedule\" : {\n        \"daily\" : { \"at\" : \"12:00\" }\n    }\n  },\n  \"input\" : {\n    \"search\" : {\n      \"request\" : {\n        \"indices\" : [ \"logstash*\" ],\n        \"body\" : {\n          \"query\" : {\n            \"bool\" : {\n              \"must\" : { \"match\" : { \"message\": \"error problem\" }},\n              \"filter\" : { \"range\" : { \"@timestamp\" : { \"gte\" : \"now-1d\" }}}\n            }\n          }\n        }\n      }\n    }\n  },\n  \"condition\" : {\n    \"script\" : {\n      \"id\" : \"threshold_hits\",\n      \"params\" : {\n        \"threshold\" : 0\n      }\n    }\n  },\n  \"actions\" : {\n    \"send_email\" : {\n      \"email\" : {\n        \"to\" : \"username@example.org\",  <1>\n        \"subject\" : \"Somebody needs help with the Elastic Stack\",\n        \"body\" : \"The attached Stack Overflow posts were tagged with Elasticsearch, Logstash, Beats or Kibana and mentioned an error or problem.\",\n        \"attachments\" : {\n          \"attached_data\" : {\n            \"data\" : {}\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[s/\"id\" : \"threshold_hits\"/\"source\": \"return ctx.payload.hits.total > params.threshold\"/]\n\n<1> Replace `username@example.org` with your email address to receive\n    notifications.\n\n[TIP]\n=================================================\nTo execute a watch immediately (without waiting for the schedule to trigger),\nuse the {ref}/watcher-api-execute-watch.html[`_execute` API]:\n\n[source,console]\n--------------------------------------------------\nPOST _watcher/watch/rss_watch/_execute\n{\n  \"ignore_condition\" : true,\n  \"action_modes\" : {\n    \"_all\" : \"force_execute\"\n  },\n  \"record_execution\" : true\n}\n--------------------------------------------------\n// TEST[continued]\n=================================================\n"
}