{
    "meta": {
        "timestamp": "2024-11-01T03:07:08.832271",
        "size": 13211,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/certutil.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "certutil",
        "version": "8.15"
    },
    "doc": "[[certutil]]\n== elasticsearch-certutil\n\nThe `elasticsearch-certutil` command simplifies the creation of certificates for\nuse with Transport Layer Security (TLS) in the {stack}.\n\n[discrete]\n=== Synopsis\n\n[source,shell]\n--------------------------------------------------\nbin/elasticsearch-certutil\n(\n(ca [--ca-dn <name>] [--days <n>] [--pem])\n\n| (cert ([--ca <file_path>] | [--ca-cert <file_path> --ca-key <file_path>])\n[--ca-dn <name>] [--ca-pass <password>] [--days <n>]\n[--dns <domain_name>] [--in <input_file>] [--ip <ip_addresses>]\n[--multiple] [--name <file_name>] [--pem] [--self-signed])\n\n| (csr [--dns <domain_name>] [--in <input_file>] [--ip <ip_addresses>]\n[--name <file_name>])\n\n[-E <KeyValuePair>] [--keysize <bits>] [--out <file_path>]\n[--pass <password>]\n)\n\n| http\n\n[-h, --help] ([-s, --silent] | [-v, --verbose])\n--------------------------------------------------\n\n[discrete]\n=== Description\n\nYou can specify one of the following modes: `ca`, `cert`, `csr`, `http`. The\n`elasticsearch-certutil` command also supports a silent mode of operation to\nenable easier batch operations.\n\n[discrete]\n[[certutil-ca]]\n==== CA mode\n\nThe `ca` mode generates a new certificate authority (CA). By default, it\nproduces a single PKCS#12 output file, which holds the CA certificate and the\nprivate key for the CA. If you specify the `--pem` parameter, the command\ngenerates a zip file, which contains the certificate and private key in PEM\nformat.\n\nYou can subsequently use these files as input for the `cert` mode of the command.\n\n[discrete]\n[[certutil-cert]]\n==== CERT mode\n\nThe `cert` mode generates X.509 certificates and private keys. By default, it\nproduces a single certificate and key for use on a single instance.\n\nTo generate certificates and keys for multiple instances, specify the\n`--multiple` parameter, which prompts you for details about each instance.\nAlternatively, you can use the `--in` parameter to specify a YAML file that\ncontains details about the instances.\n\nAn instance is any piece of the Elastic Stack that requires a TLS or SSL\ncertificate. Depending on your configuration, {es}, Logstash, {kib}, and Beats\nmight all require a certificate and private key. The minimum required\ninformation for an instance is its name, which is used as the common name for\nthe certificate. The instance name can be a hostname value or a full\ndistinguished name. If the instance name would result in an invalid file or\ndirectory name, you must also specify a file name in the `--name` command\nparameter or in the `filename` field in an input YAML file.\n\nYou can optionally provide IP addresses or DNS names for each instance. If\nneither IP addresses nor DNS names are specified, the Elastic Stack products\ncannot perform hostname verification and you might need to configure the\n`verification_mode` security setting to `certificate` only. For more information\nabout this setting, see <<security-settings>>.\n\nAll certificates that are generated by this command are signed by a CA unless\nthe `--self-signed` parameter is specified. You must provide your own CA with the\n`--ca` or `--ca-cert` and `--ca-key` parameters unless `--self-signed` is specified.\nFor more information about generating a CA, see the\n<<certutil-ca,CA mode of this command>>.\nTo generate self-signed certificates, use the `--self-signed` parameter.\n\nBy default, the `cert` mode produces a single PKCS#12 output file which holds\nthe instance certificate, the instance private key, and the CA certificate. If\nyou specify the `--pem` parameter, the command generates PEM formatted\ncertificates and keys and packages them into a zip file.\nIf you specify the `--multiple` or `--in` parameters,\nthe command produces a zip file containing the generated certificates and keys.\n\n[discrete]\n[[certutil-csr]]\n==== CSR mode\n\nThe `csr` mode generates certificate signing requests (CSRs) that you can send\nto a trusted certificate authority to obtain signed certificates. The signed\ncertificates must be in PEM or PKCS#12 format to work with {es}\n{security-features}.\n\nBy default, the command produces a single CSR for a single instance.\n\nTo generate CSRs for multiple instances, specify the `--multiple` parameter,\nwhich prompts you for details about each instance. Alternatively, you can use\nthe `--in` parameter to specify a YAML file that contains details about the\ninstances.\n\nThe `csr` mode produces a single zip file which contains the CSRs and the\nprivate keys for each instance. Each CSR is provided as a standard PEM\nencoding of a PKCS#10 CSR. Each key is provided as a PEM encoding of an RSA\nprivate key.\n\n[discrete]\n[[certutil-http]]\n==== HTTP mode\n\nThe `http` mode guides you through the process of generating certificates for\nuse on the HTTP (REST) interface for {es}. It asks you a number of questions in\norder to generate the right set of files for your needs. For example, depending\non your choices, it might generate a zip file that contains a certificate\nauthority (CA), a certificate signing request (CSR), or certificates and keys\nfor use in {es} and {kib}. Each folder in the zip file contains a readme that\nexplains how to use the files.\n\n[discrete]\n[[certutil-parameters]]\n=== Parameters\n\n`ca`:: Specifies to generate a new local certificate authority (CA). This\nparameter cannot be used with the `csr`, `cert` or `http` parameters.\n\n`cert`:: Specifies to generate new X.509 certificates and keys.\nThis parameter cannot be used with the `csr`, `ca` or `http` parameters.\n\n`csr`:: Specifies to generate certificate signing requests. This parameter\ncannot be used with the `ca`, `cert` or `http` parameters.\n\n`http`:: Generates a new certificate or certificate request for the {es} HTTP\ninterface. This parameter cannot be used with the `ca`, `cert` or `csr` parameters.\n\n`--ca <file_path>`:: Specifies the path to an existing CA key pair\n(in PKCS#12 format). This parameter is only applicable to the `cert` parameter.\n\n`--ca-cert <file_path>`:: Specifies the path to an existing CA certificate (in\nPEM format). You must also specify the `--ca-key` parameter. The `--ca-cert`\nparameter is only applicable to the `cert` parameter.\n\n`--ca-dn <name>`:: Defines the _Distinguished Name_ (DN) that is used for the\ngenerated CA certificate. The default value is\n`CN=Elastic Certificate Tool Autogenerated CA`. This parameter cannot be used\nwith the `csr` or `http` parameters.\n\n`--ca-key <file_path>`:: Specifies the path to an existing CA private key (in\nPEM format). You must also specify the `--ca-cert` parameter. The `--ca-key`\nparameter is only applicable to the `cert` parameter.\n\n`--ca-pass <password>`:: Specifies the password for an existing CA private key\nor the generated CA private key. This parameter is only applicable to the `cert` parameter\n\n`--days <n>`:: Specifies an integer value that represents the number of days the\ngenerated certificates are valid. The default value is `1095`. This parameter\ncannot be used with the `csr` or `http` parameters.\n\n`--dns <domain_name>`:: Specifies a comma-separated list of DNS names. This\nparameter cannot be used with the `ca` or `http` parameters.\n\n`-E <KeyValuePair>`:: Configures a setting.\n\n`-h, --help`:: Returns all of the command parameters.\n\n`--in <input_file>`:: Specifies the file that is used to run in silent mode. The\ninput file must be a YAML file. This parameter cannot be used with the `ca` or\n`http` parameters.\n\n`--ip <IP_addresses>`:: Specifies a comma-separated list of IP addresses. This\nparameter cannot be used with the `ca` or `http` parameters.\n\n`--keysize <bits>`::\nDefines the number of bits that are used in generated RSA keys. The default\nvalue is `2048`. This parameter cannot be used with the `http` parameter.\n\n`--multiple`::\nSpecifies to generate files for multiple instances. This parameter cannot be\nused with the `ca` or `http` parameters.\n\n`--name <file_name>`::\nSpecifies the name of the generated certificate. This parameter cannot be used\nwith the `ca` or `http` parameters.\n\n`--out <file_path>`:: Specifies a path for the output files. This parameter\ncannot be used with the `http` parameter.\n\n`--pass <password>`:: Specifies the password for the generated private keys.\nThis parameter cannot be used with the `http` parameters.\n+\nKeys stored in PKCS#12 format are always password protected, however,\nthis password may be _blank_. If you want to specify a blank password\nwithout a prompt, use `--pass \"\"` (with no `=`) on the command line.\n+\nKeys stored in PEM format are password protected only if the\n`--pass` parameter is specified. If you do not supply an argument for the\n`--pass` parameter, you are prompted for a password.\nEncrypted PEM files do not support blank passwords (if you do not\nwish to password-protect your PEM keys, then do not specify\n`--pass`).\n\n\n`--pem`:: Generates certificates and keys in PEM format instead of PKCS#12. This\nparameter cannot be used with the `csr` or `http` parameters.\n\n`--self-signed`:: Generates self-signed certificates. This parameter is only\napplicable to the `cert` parameter.\n+\n--\nNOTE: This option is not recommended for <<encrypt-internode-communication,setting up TLS on a cluster>>.\nIn fact, a self-signed certificate should be used only when you can be sure\nthat a CA is definitely not needed and trust is directly given to the\ncertificate itself.\n\n--\n\n`-s, --silent`:: Shows minimal output.\n\n`-v, --verbose`:: Shows verbose output.\n\n[discrete]\n=== Examples\n\nThe following command generates a CA certificate and private key in PKCS#12\nformat:\n\n[source, sh]\n--------------------------------------------------\nbin/elasticsearch-certutil ca\n--------------------------------------------------\n\nYou are prompted for an output filename and a password. Alternatively, you can\nspecify the `--out` and `--pass` parameters.\n\nYou can then generate X.509 certificates and private keys by using the new\nCA. For example:\n\n[source, sh]\n--------------------------------------------------\nbin/elasticsearch-certutil cert --ca elastic-stack-ca.p12\n--------------------------------------------------\n\nYou are prompted for the CA password and for an output filename and password.\nAlternatively, you can specify the `--ca-pass`, `--out`, and `--pass` parameters.\n\nBy default, this command generates a file called `elastic-certificates.p12`,\nwhich you can copy to the relevant configuration directory for each Elastic\nproduct that you want to configure. For more information, see\n<<encrypt-internode-communication>>.\n\n[discrete]\n[[certutil-silent]]\n==== Using `elasticsearch-certutil` in Silent Mode\n\nTo use the silent mode of operation, you must create a YAML file that contains\ninformation about the instances. It must match the following format:\n\n[source, yaml]\n--------------------------------------------------\ninstances:\n  - name: \"node1\" <1>\n    ip: <2>\n      - \"192.0.2.1\"\n    dns: <3>\n      - \"node1.mydomain.com\"\n  - name: \"node2\"\n    ip:\n      - \"192.0.2.2\"\n      - \"198.51.100.1\"\n  - name: \"node3\"\n  - name: \"node4\"\n    dns:\n      - \"node4.mydomain.com\"\n      - \"node4.internal\"\n  - name: \"CN=node5,OU=IT,DC=mydomain,DC=com\"\n    filename: \"node5\" <4>\n--------------------------------------------------\n<1> The name of the instance. This can be a simple string value or can be a\nDistinguished Name (DN). This is the only required field.\n<2> An optional array of strings that represent IP Addresses for this instance.\nBoth IPv4 and IPv6 values are allowed. The values are added as Subject\nAlternative Names.\n<3> An optional array of strings that represent DNS names for this instance.\nThe values are added as Subject Alternative Names.\n<4> The filename to use for this instance. This name is used as the name of the\ndirectory that contains the instance's files in the output. It is also used in\nthe names of the files within the directory. This filename should not have an\nextension. Note: If the `name` provided for the instance does not represent a\nvalid filename, then the `filename` field must be present.\n\nWhen your YAML file is ready, you can use the `elasticsearch-certutil` command\nto generate certificates or certificate signing requests. Simply use the `--in`\nparameter to specify the location of the file. For example:\n\n[source, sh]\n--------------------------------------------------\nbin/elasticsearch-certutil cert --silent --in instances.yml --out test1.zip --pass testpassword --ca elastic-stack-ca.p12\n--------------------------------------------------\n\nThis command generates a compressed `test1.zip` file. After you decompress the\noutput file, there is a directory for each instance that was listed in the\n`instances.yml` file. Each instance directory contains a single PKCS#12 (`.p12`)\nfile, which contains the instance certificate, instance private key, and CA\ncertificate.\n\nYou can also use the YAML file to generate certificate signing requests. For\nexample:\n\n[source, sh]\n--------------------------------------------------\nbin/elasticsearch-certutil csr --silent --in instances.yml --out test2.zip --pass testpassword\n--------------------------------------------------\n\nThis command generates a compressed file, which contains a directory for each\ninstance. Each instance directory contains a certificate signing request\n(`*.csr` file) and private key (`*.key` file).\n"
}