{
    "meta": {
        "timestamp": "2024-11-01T03:07:10.528275",
        "size": 3363,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/user-lookup.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": false,
        "title": "user-lookup",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[user-lookup]]\n=== Looking up users without authentication\n\n{es} <<realms,realms>> exist primarily to support\n<<setting-up-authentication,user authentication>>. \nSome realms authenticate users with a password (such as the\n<<native-realm,`native`>> and <<ldap-realm,`ldap`>> realms), and other realms use\nmore complex authentication protocols (such as the <<saml-realm,`saml`>> and\n<<oidc-realm,`oidc`>> realms).\nIn each case, the _primary_ purpose of the realm is to establish the identity of\nthe user who has made a request to the {es} API.\n\nHowever, some {es} features need to _look up_ a user without using their credentials.\n\n- The <<run-as-privilege,`run_as`>> feature executes requests on behalf of\n  another user. An authenticated user with `run_as` privileges can perform\n  requests on behalf of another unauthenticated user.\n\n- The <<authorization_realms,delegated authorization>> feature links two realms\n  together so that a user who authenticates against one realm can have the roles\n  and metadata associated with a user from a different realm.\n\nIn each of these cases, a user must first authenticate to one realm and then\n{es} will query the second realm to find another user.\nThe authenticated user credentials are used to authenticate in the first realm only,\nThe user in the second realm is retrieved by username, without needing credentials.\n\nWhen {es} resolves a user using their credentials (as performed in the first realm),\nit is known as _user authentication_.\n\nWhen {es} resolves a user using the username only (as performed in the second realm),\nit is known as _user lookup_.\n\nSee the <<run-as-privilege,run_as>> and <<authorization_realms,delegated authorization>>\ndocumentation to learn more about these features, including which realms and authentication\nmethods support `run_as` or delegated authorization. \nIn both cases, only the following realms can be used for the user lookup:\n\n* The reserved, <<native-realm,`native`>> and <<file-realm,`file`>> realms always \nsupport user lookup.\n* The <<ldap-realm,`ldap`>> realm supports user lookup when the realm is configured\nin <<ldap-realm-configuration,_user search_ mode>>. User lookup is not support\nwhen the realm is configured with `user_dn_templates`.\n* User lookup support in the <<active-directory-realm,`active_directory`>> realm\nrequires that the realm be configured with a <<ref-ad-settings,`bind_dn`>> and a\nbind password.\n\nThe `pki`, `saml`, `oidc`, `kerberos` and `jwt` realms do not support user\nlookup.\n\nNOTE: If you want to use a realm only for user lookup and prevent users from \nauthenticating against that realm, you can <<ref-realm-settings,configure the realm>>\nand set `authentication.enabled` to `false`\n\nThe user lookup feature is an internal capability that is used to implement the\n`run-as` and delegated authorization features - there are no APIs for user lookup.\nIf you wish to test your user lookup configuration, then you can do this with\n`run_as`. Use the <<security-api-authenticate>> API, authenticate as a\n`superuser` (e.g. the builtin `elastic` user) and specify the\n<<run-as-privilege, `es-security-runas-user` request header>>.\n\nNOTE: The <<security-api-get-user>> API and <<user-profile>> feature are alternative\n      ways to retrieve information about a {stack} user. Those APIs are not related\n      to the user lookup feature.\n\n"
}