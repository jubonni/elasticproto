{
    "meta": {
        "size": 14001,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-termvectors.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "docs-termvectors",
        "version": "8.15"
    },
    "doc": "[[docs-termvectors]]\n=== Term vectors API\n++++\n<titleabbrev>Term vectors</titleabbrev>\n++++\n\nRetrieves information and statistics for terms in the fields of a particular document. \n\n[source,console]\n--------------------------------------------------\nGET /my-index-000001/_termvectors/1\n--------------------------------------------------\n// TEST[setup:my_index]\n\n[[docs-termvectors-api-request]]\n==== {api-request-title}\n\n`GET /<index>/_termvectors/<_id>`\n\n[[docs-termvectors-api-prereqs]]\n==== {api-prereq-title}\n\n* If the {es} {security-features} are enabled, you must have the `read`\n<<privileges-list-indices,index privilege>> for the target index or index alias.\n\n[[docs-termvectors-api-desc]]\n==== {api-description-title}\n\nYou can retrieve term vectors for documents stored in the index or \nfor _artificial_ documents passed in the body of the request. \n\nYou can specify the fields you are interested in through the `fields` parameter,\nor by adding the fields to the request body. \n\n[source,console]\n--------------------------------------------------\nGET /my-index-000001/_termvectors/1?fields=message\n--------------------------------------------------\n// TEST[setup:my_index]\n\nFields can be specified using wildcards, similar to the <<query-dsl-multi-match-query,multi match query>>.\n\nTerm vectors are <<realtime,real-time>> by default, not near real-time. \nThis can be changed by setting `realtime` parameter to `false`.\n\nYou can request three types of values: _term information_, _term statistics_\nand _field statistics_. By default, all term information and field\nstatistics are returned for all fields but term statistics are excluded.\n\n[[docs-termvectors-api-term-info]]\n===== Term information\n\n * term frequency in the field (always returned)\n * term positions (`positions` : true)\n * start and end offsets (`offsets` : true)\n * term payloads (`payloads` : true), as base64 encoded bytes\n\nIf the requested information wasn't stored in the index, it will be\ncomputed on the fly if possible. Additionally, term vectors could be computed\nfor documents not even existing in the index, but instead provided by the user.\n\n[WARNING]\n======\nStart and end offsets assume UTF-16 encoding is being used. If you want to use\nthese offsets in order to get the original text that produced this token, you\nshould make sure that the string you are taking a sub-string of is also encoded\nusing UTF-16.\n======\n\n[[docs-termvectors-api-term-stats]]\n===== Term statistics\n\nSetting `term_statistics` to `true` (default is `false`) will\nreturn\n\n * total term frequency (how often a term occurs in all documents) +\n * document frequency (the number of documents containing the current\n   term)\n\nBy default these values are not returned since term statistics can\nhave a serious performance impact.\n\n[[docs-termvectors-api-field-stats]]\n===== Field statistics\n\nSetting `field_statistics` to `false` (default is `true`) will\nomit :\n\n * document count (how many documents contain this field)\n * sum of document frequencies (the sum of document frequencies for all\n   terms in this field)\n * sum of total term frequencies (the sum of total term frequencies of\n   each term in this field)\n\n[[docs-termvectors-api-terms-filtering]]\n===== Terms filtering\n\nWith the parameter `filter`, the terms returned could also be filtered based\non their tf-idf scores. This could be useful in order find out a good\ncharacteristic vector of a document. This feature works in a similar manner to\nthe <<mlt-query-term-selection,second phase>> of the\n<<query-dsl-mlt-query,More Like This Query>>. See <<docs-termvectors-terms-filtering,example 5>>\nfor usage.\n\nThe following sub-parameters are supported:\n\n[horizontal]\n`max_num_terms`::\n  Maximum number of terms that must be returned per field. Defaults to `25`.\n`min_term_freq`::\n  Ignore words with less than this frequency in the source doc. Defaults to `1`.\n`max_term_freq`::\n  Ignore words with more than this frequency in the source doc. Defaults to unbounded.\n`min_doc_freq`::\n  Ignore terms which do not occur in at least this many docs. Defaults to `1`.\n`max_doc_freq`::\n  Ignore words which occur in more than this many docs. Defaults to unbounded.\n`min_word_length`::\n  The minimum word length below which words will be ignored. Defaults to `0`.\n`max_word_length`::\n  The maximum word length above which words will be ignored. Defaults to unbounded (`0`).\n\n[[docs-termvectors-api-behavior]]\n==== Behaviour\n\nThe term and field statistics are not accurate. Deleted documents\nare not taken into account. The information is only retrieved for the\nshard the requested document resides in.\nThe term and field statistics are therefore only useful as relative measures\nwhereas the absolute numbers have no meaning in this context. By default,\nwhen requesting term vectors of artificial documents, a shard to get the statistics\nfrom is randomly selected. Use `routing` only to hit a particular shard.\n\n[[docs-termvectors-api-path-params]]\n==== {api-path-parms-title}\n\n`<index>`::\n(Required, string) Name of the index that contains the document.\n\n`<_id>`::\n(Optional, string) Unique identifier of the document.\n\n[[docs-termvectors-api-query-params]]\n==== {api-query-parms-title}\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=fields]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=field_statistics]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=offsets]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=payloads]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=positions]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=preference]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=routing]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=realtime]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=term_statistics]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=version]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=version_type]\n\n[[docs-termvectors-api-example]]\n==== {api-examples-title}\n\n[[docs-termvectors-api-stored-termvectors]]\n===== Returning stored term vectors\n\nFirst, we create an index that stores term vectors, payloads etc. :\n\n[source,console]\n--------------------------------------------------\nPUT /my-index-000001\n{ \"mappings\": {\n    \"properties\": {\n      \"text\": {\n        \"type\": \"text\",\n        \"term_vector\": \"with_positions_offsets_payloads\",\n        \"store\" : true,\n        \"analyzer\" : \"fulltext_analyzer\"\n       },\n       \"fullname\": {\n        \"type\": \"text\",\n        \"term_vector\": \"with_positions_offsets_payloads\",\n        \"analyzer\" : \"fulltext_analyzer\"\n      }\n    }\n  },\n  \"settings\" : {\n    \"index\" : {\n      \"number_of_shards\" : 1,\n      \"number_of_replicas\" : 0\n    },\n    \"analysis\": {\n      \"analyzer\": {\n        \"fulltext_analyzer\": {\n          \"type\": \"custom\",\n          \"tokenizer\": \"whitespace\",\n          \"filter\": [\n            \"lowercase\",\n            \"type_as_payload\"\n          ]\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\nSecond, we add some documents:\n\n[source,console]\n--------------------------------------------------\nPUT /my-index-000001/_doc/1\n{\n  \"fullname\" : \"John Doe\",\n  \"text\" : \"test test test \"\n}\n\nPUT /my-index-000001/_doc/2?refresh=wait_for\n{\n  \"fullname\" : \"Jane Doe\",\n  \"text\" : \"Another test ...\"\n}\n--------------------------------------------------\n// TEST[continued]\n\nThe following request returns all information and statistics for field\n`text` in document `1` (John Doe):\n\n[source,console]\n--------------------------------------------------\nGET /my-index-000001/_termvectors/1\n{\n  \"fields\" : [\"text\"],\n  \"offsets\" : true,\n  \"payloads\" : true,\n  \"positions\" : true,\n  \"term_statistics\" : true,\n  \"field_statistics\" : true\n}\n--------------------------------------------------\n// TEST[continued]\n\nResponse:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"_index\": \"my-index-000001\",\n  \"_id\": \"1\",\n  \"_version\": 1,\n  \"found\": true,\n  \"took\": 6,\n  \"term_vectors\": {\n    \"text\": {\n      \"field_statistics\": {\n        \"sum_doc_freq\": 4,\n        \"doc_count\": 2,\n        \"sum_ttf\": 6\n      },\n      \"terms\": {\n        \"test\": {\n          \"doc_freq\": 2,\n          \"ttf\": 4,\n          \"term_freq\": 3,\n          \"tokens\": [\n            {\n              \"position\": 0,\n              \"start_offset\": 0,\n              \"end_offset\": 4,\n              \"payload\": \"d29yZA==\"\n            },\n            {\n              \"position\": 1,\n              \"start_offset\": 5,\n              \"end_offset\": 9,\n              \"payload\": \"d29yZA==\"\n            },\n            {\n              \"position\": 2,\n              \"start_offset\": 10,\n              \"end_offset\": 14,\n              \"payload\": \"d29yZA==\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n// TESTRESPONSE[s/\"took\": 6/\"took\": \"$body.took\"/]\n\n[[docs-termvectors-api-generate-termvectors]]\n===== Generating term vectors on the fly\n\nTerm vectors which are not explicitly stored in the index are automatically\ncomputed on the fly. The following request returns all information and statistics for the\nfields in document `1`, even though the terms haven't been explicitly stored in the index.\nNote that for the field `text`, the terms are not re-generated.\n\n[source,console]\n--------------------------------------------------\nGET /my-index-000001/_termvectors/1\n{\n  \"fields\" : [\"text\", \"some_field_without_term_vectors\"],\n  \"offsets\" : true,\n  \"positions\" : true,\n  \"term_statistics\" : true,\n  \"field_statistics\" : true\n}\n--------------------------------------------------\n// TEST[continued]\n\n[[docs-termvectors-artificial-doc]]\n===== Artificial documents\n\nTerm vectors can also be generated for artificial documents,\nthat is for documents not present in the index. For example, the following request would\nreturn the same results as in example 1. The mapping used is determined by the `index`.\n\n*If dynamic mapping is turned on (default), the document fields not in the original\nmapping will be dynamically created.*\n\n[source,console]\n--------------------------------------------------\nGET /my-index-000001/_termvectors\n{\n  \"doc\" : {\n    \"fullname\" : \"John Doe\",\n    \"text\" : \"test test test\"\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\n[[docs-termvectors-per-field-analyzer]]\n====== Per-field analyzer\n\nAdditionally, a different analyzer than the one at the field may be provided\nby using the `per_field_analyzer` parameter. This is useful in order to\ngenerate term vectors in any fashion, especially when using artificial\ndocuments. When providing an analyzer for a field that already stores term\nvectors, the term vectors will be re-generated.\n\n[source,console]\n--------------------------------------------------\nGET /my-index-000001/_termvectors\n{\n  \"doc\" : {\n    \"fullname\" : \"John Doe\",\n    \"text\" : \"test test test\"\n  },\n  \"fields\": [\"fullname\"],\n  \"per_field_analyzer\" : {\n    \"fullname\": \"keyword\"\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\nResponse:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"_index\": \"my-index-000001\",\n  \"_version\": 0,\n  \"found\": true,\n  \"took\": 6,\n  \"term_vectors\": {\n    \"fullname\": {\n       \"field_statistics\": {\n          \"sum_doc_freq\": 2,\n          \"doc_count\": 4,\n          \"sum_ttf\": 4\n       },\n       \"terms\": {\n          \"John Doe\": {\n             \"term_freq\": 1,\n             \"tokens\": [\n                {\n                   \"position\": 0,\n                   \"start_offset\": 0,\n                   \"end_offset\": 8\n                }\n             ]\n          }\n       }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n// TESTRESPONSE[s/\"took\": 6/\"took\": \"$body.took\"/]\n// TESTRESPONSE[s/\"sum_doc_freq\": 2/\"sum_doc_freq\": \"$body.term_vectors.fullname.field_statistics.sum_doc_freq\"/]\n// TESTRESPONSE[s/\"doc_count\": 4/\"doc_count\": \"$body.term_vectors.fullname.field_statistics.doc_count\"/]\n// TESTRESPONSE[s/\"sum_ttf\": 4/\"sum_ttf\": \"$body.term_vectors.fullname.field_statistics.sum_ttf\"/]\n\n\n[[docs-termvectors-terms-filtering]]\n===== Terms filtering\n\nFinally, the terms returned could be filtered based on their tf-idf scores. In\nthe example below we obtain the three most \"interesting\" keywords from the\nartificial document having the given \"plot\" field value. Notice\nthat the keyword \"Tony\" or any stop words are not part of the response, as\ntheir tf-idf must be too low.\n\n[source,console]\n--------------------------------------------------\nGET /imdb/_termvectors\n{\n  \"doc\": {\n    \"plot\": \"When wealthy industrialist Tony Stark is forced to build an armored suit after a life-threatening incident, he ultimately decides to use its technology to fight against evil.\"\n  },\n  \"term_statistics\": true,\n  \"field_statistics\": true,\n  \"positions\": false,\n  \"offsets\": false,\n  \"filter\": {\n    \"max_num_terms\": 3,\n    \"min_term_freq\": 1,\n    \"min_doc_freq\": 1\n  }\n}\n--------------------------------------------------\n// TEST[skip:no imdb test index]\n\nResponse:\n\n[source,console-result]\n--------------------------------------------------\n{\n   \"_index\": \"imdb\",\n   \"_version\": 0,\n   \"found\": true,\n   \"term_vectors\": {\n      \"plot\": {\n         \"field_statistics\": {\n            \"sum_doc_freq\": 3384269,\n            \"doc_count\": 176214,\n            \"sum_ttf\": 3753460\n         },\n         \"terms\": {\n            \"armored\": {\n               \"doc_freq\": 27,\n               \"ttf\": 27,\n               \"term_freq\": 1,\n               \"score\": 9.74725\n            },\n            \"industrialist\": {\n               \"doc_freq\": 88,\n               \"ttf\": 88,\n               \"term_freq\": 1,\n               \"score\": 8.590818\n            },\n            \"stark\": {\n               \"doc_freq\": 44,\n               \"ttf\": 47,\n               \"term_freq\": 1,\n               \"score\": 9.272792\n            }\n         }\n      }\n   }\n}\n--------------------------------------------------\n"
}