{
    "meta": {
        "size": 7506,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/date.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "date",
        "version": "8.15"
    },
    "doc": "[[date]]\n=== Date field type\n++++\n<titleabbrev>Date</titleabbrev>\n++++\n\nJSON doesn't have a date data type, so dates in Elasticsearch can either be:\n\n* strings containing formatted dates, e.g. `\"2015-01-01\"` or `\"2015/01/01 12:10:30\"`.\n* a number representing _milliseconds-since-the-epoch_.\n* a number representing _seconds-since-the-epoch_ (<<date-epoch-seconds, configuration>>).\n\nInternally, dates are converted to UTC (if the time-zone is specified) and\nstored as a long number representing milliseconds-since-the-epoch.\n\nNOTE: Use the <<date_nanos,date_nanos>> field type if a nanosecond resolution is expected.\n\nQueries on dates are internally converted to range queries on this long\nrepresentation, and the result of aggregations and stored fields is converted\nback to a string depending on the date format that is associated with the field.\n\nNOTE: Dates will always be rendered as strings, even if they were initially\nsupplied as a long in the JSON document.\n\nDate formats can be customised, but if no `format` is specified then it uses\nthe default:\n\n[source,js]\n----\n    \"strict_date_optional_time||epoch_millis\"\n----\n// NOTCONSOLE\n\nThis means that it will accept dates with optional timestamps, which conform\nto the formats supported by <<strict-date-time,`strict_date_optional_time`>>\nor milliseconds-since-the-epoch.\n\nFor instance:\n\n[source,console,id=date-example]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"date\": {\n        \"type\": \"date\" <1>\n      }\n    }\n  }\n}\n\nPUT my-index-000001/_doc/1\n{ \"date\": \"2015-01-01\" } <2>\n\nPUT my-index-000001/_doc/2\n{ \"date\": \"2015-01-01T12:10:30Z\" } <3>\n\nPUT my-index-000001/_doc/3\n{ \"date\": 1420070400001 } <4>\n\nGET my-index-000001/_search\n{\n  \"sort\": { \"date\": \"asc\"} <5>\n}\n--------------------------------------------------\n\n<1> The `date` field uses the default `format`.\n<2> This document uses a plain date.\n<3> This document includes a time.\n<4> This document uses milliseconds-since-the-epoch.\n<5> Note that the `sort` values that are returned are all in milliseconds-since-the-epoch.\n\n[WARNING]\n====\nDates\n// tag::decimal-warning[]\nwill accept numbers with a decimal point like `{\"date\": 1618249875.123456}`\nbut there are some cases ({es-issue}70085[#70085]) where we'll lose precision\non those dates so they should be avoided.\n// end::decimal-warning[]\n====\n\n[[multiple-date-formats]]\n==== Multiple date formats\n\nMultiple formats can be specified by separating them with `||` as a separator.\nEach format will be tried in turn until a matching format is found. The first\nformat will be used to convert the _milliseconds-since-the-epoch_ value back\ninto a string.\n\n[source,console,id=date-format-example]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"date\": {\n        \"type\":   \"date\",\n        \"format\": \"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n[[date-params]]\n==== Parameters for `date` fields\n\nThe following parameters are accepted by `date` fields:\n\n[horizontal]\n\n<<doc-values,`doc_values`>>::\n\n    Should the field be stored on disk in a column-stride fashion, so that it\n    can later be used for sorting, aggregations, or scripting? Accepts `true`\n    (default) or `false`.\n\n<<mapping-date-format,`format`>>::\n\n    The date format(s) that can be parsed. Defaults to\n    `strict_date_optional_time||epoch_millis`.\n\n`locale`::\n\n    The locale to use when parsing dates since months do not have the same names\n    and/or abbreviations in all languages. The default is ENGLISH.\n\n<<ignore-malformed,`ignore_malformed`>>::\n\n    If `true`, malformed numbers are ignored. If `false` (default), malformed\n    numbers throw an exception and reject the whole document. Note that this\n    cannot be set if the `script` parameter is used.\n\n<<mapping-index,`index`>>::\n\n    Should the field be quickly searchable? Accepts `true` (default) and\n    `false`. Date fields that only have <<doc-values,`doc_values`>>\n    enabled can also be queried, albeit slower.\n\n<<null-value,`null_value`>>::\n\n    Accepts a date value in one of the configured +format+'s as the field\n    which is substituted for any explicit `null` values. Defaults to `null`,\n    which means the field is treated as missing.  Note that this cannot be\n    set of the `script` parameter is used.\n\n\n`on_script_error`::\n\n    Defines what to do if the script defined by the `script` parameter\n    throws an error at indexing time. Accepts `fail` (default), which\n    will cause the entire document to be rejected, and `continue`, which\n    will register the field in the document's\n    <<mapping-ignored-field,`_ignored`>> metadata field and continue\n    indexing. This parameter can only be set if the `script` field is\n    also set.\n\n`script`::\n\n    If this parameter is set, then the field will index values generated\n    by this script, rather than reading the values directly from the\n    source. If a value is set for this field on the input document, then\n    the document will be rejected with an error.\n    Scripts are in the same format as their\n    <<runtime-mapping-fields,runtime equivalent>>, and should emit\n    long-valued timestamps.\n\n<<mapping-store,`store`>>::\n\n    Whether the field value should be stored and retrievable separately from\n    the <<mapping-source-field,`_source`>> field. Accepts `true` or `false`\n    (default).\n\n<<mapping-field-meta,`meta`>>::\n\n    Metadata about the field.\n\n\n[[date-epoch-seconds]]\n==== Epoch seconds\n\nIf you need to send dates as _seconds-since-the-epoch_ then make sure the\n`format` lists `epoch_second`:\n\n[source,console,id=date-epoch-seconds-example]\n----\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"date\": {\n        \"type\":   \"date\",\n        \"format\": \"strict_date_optional_time||epoch_second\"\n      }\n    }\n  }\n}\n\nPUT my-index-000001/_doc/example?refresh\n{ \"date\": 1618321898 }\n\nPOST my-index-000001/_search\n{\n  \"fields\": [ {\"field\": \"date\"}],\n  \"_source\": false\n}\n----\n// TEST[s/_search/_search?filter_path=hits.hits/]\n\nWhich will reply with a date like:\n\n[source,console-result]\n----\n{\n  \"hits\": {\n    \"hits\": [\n      {\n        \"_id\": \"example\",\n        \"_index\": \"my-index-000001\",\n        \"_score\": 1.0,\n        \"fields\": {\n          \"date\": [\"2021-04-13T13:51:38.000Z\"]\n        }\n      }\n    ]\n  }\n}\n----\n\n[[date-synthetic-source]]\n==== Synthetic `_source`\n\nIMPORTANT: Synthetic `_source` is Generally Available only for TSDB indices\n(indices that have `index.mode` set to `time_series`). For other indices\nsynthetic `_source` is in technical preview. Features in technical preview may\nbe changed or removed in a future release. Elastic will work to fix\nany issues, but features in technical preview are not subject to the support SLA\nof official GA features.\n\nSynthetic source may sort `date` field values. For example:\n[source,console,id=synthetic-source-date-example]\n----\nPUT idx\n{\n  \"settings\": {\n    \"index\": {\n      \"mapping\": {\n        \"source\": {\n          \"mode\": \"synthetic\"\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"date\": { \"type\": \"date\" }\n    }\n  }\n}\nPUT idx/_doc/1\n{\n  \"date\": [\"2015-01-01T12:10:30Z\", \"2014-01-01T12:10:30Z\"]\n}\n----\n// TEST[s/$/\\nGET idx\\/_doc\\/1?filter_path=_source\\n/]\n\nWill become:\n[source,console-result]\n----\n{\n  \"date\": [\"2014-01-01T12:10:30.000Z\", \"2015-01-01T12:10:30.000Z\"]\n}\n----\n// TEST[s/^/{\"_source\":/ s/\\n$/}/]\n"
}