{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.153581",
        "size": 9906,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/circuit-breaker.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "circuit-breaker",
        "version": "8.15"
    },
    "doc": "[[circuit-breaker]]\n=== Circuit breaker settings\n[[circuit-breaker-description]]\n// tag::circuit-breaker-description-tag[]\n{es} contains multiple circuit breakers used to prevent operations from causing an OutOfMemoryError. Each breaker specifies a limit for how much memory it can use. Additionally, there is a parent-level breaker that specifies the total amount of memory that can be used across all breakers.\n\nExcept where noted otherwise, these settings can be dynamically updated on a\nlive cluster with the <<cluster-update-settings,cluster-update-settings>> API.\n// end::circuit-breaker-description-tag[]\n\nFor information about circuit breaker errors, see <<circuit-breaker-errors>>.\n\n[[parent-circuit-breaker]]\n[discrete]\n==== Parent circuit breaker\n\nThe parent-level breaker can be configured with the following settings:\n\n`indices.breaker.total.use_real_memory`::\n    (<<static-cluster-setting,Static>>)\n    Determines whether the parent breaker should take real\n    memory usage into account (`true`) or only consider the amount that is\n    reserved by child circuit breakers (`false`). Defaults to `true`.\n\n[[indices-breaker-total-limit]]\n// tag::indices-breaker-total-limit-tag[]\n`indices.breaker.total.limit` {ess-icon}::\n    (<<dynamic-cluster-setting,Dynamic>>)\n    Starting limit for overall parent breaker. Defaults to 70% of JVM heap if\n    `indices.breaker.total.use_real_memory` is `false`. If `indices.breaker.total.use_real_memory`\n    is `true`, defaults to 95% of the JVM heap.\n// end::indices-breaker-total-limit-tag[]\n\n[[fielddata-circuit-breaker]]\n[discrete]\n==== Field data circuit breaker\nThe field data circuit breaker estimates the heap memory required to load a\nfield into the <<modules-fielddata,field data cache>>. If loading the field would\ncause the cache to exceed a predefined memory limit, the circuit breaker stops the\noperation and returns an error.\n\n[[fielddata-circuit-breaker-limit]]\n// tag::fielddata-circuit-breaker-limit-tag[]\n`indices.breaker.fielddata.limit` {ess-icon}::\n    (<<dynamic-cluster-setting,Dynamic>>)\n    Limit for fielddata breaker. Defaults to 40% of JVM heap.\n// end::fielddata-circuit-breaker-limit-tag[]\n\n[[fielddata-circuit-breaker-overhead]]\n// tag::fielddata-circuit-breaker-overhead-tag[]\n`indices.breaker.fielddata.overhead` {ess-icon}::\n    (<<dynamic-cluster-setting,Dynamic>>)\n    A constant that all field data estimations are multiplied with to determine a\n    final estimation. Defaults to `1.03`.\n// end::fielddata-circuit-breaker-overhead-tag[]\n\n[[request-circuit-breaker]]\n[discrete]\n==== Request circuit breaker\n\nThe request circuit breaker allows Elasticsearch to prevent per-request data\nstructures (for example, memory used for calculating aggregations during a\nrequest) from exceeding a certain amount of memory.\n\n[[request-breaker-limit]]\n// tag::request-breaker-limit-tag[]\n`indices.breaker.request.limit` {ess-icon}::\n    (<<dynamic-cluster-setting,Dynamic>>)\n    Limit for request breaker, defaults to 60% of JVM heap.\n// end::request-breaker-limit-tag[]\n\n[[request-breaker-overhead]]\n// tag::request-breaker-overhead-tag[]\n`indices.breaker.request.overhead` {ess-icon}::\n    (<<dynamic-cluster-setting,Dynamic>>)\n    A constant that all request estimations are multiplied with to determine a\n    final estimation. Defaults to `1`.\n// end::request-breaker-overhead-tag[]\n\n[[in-flight-circuit-breaker]]\n[discrete]\n==== In flight requests circuit breaker\n\nThe in flight requests circuit breaker allows Elasticsearch to limit the memory usage of all\ncurrently active incoming requests on transport or HTTP level from exceeding a certain amount of\nmemory on a node. The memory usage is based on the content length of the request itself. This\ncircuit breaker also considers that memory is not only needed for representing the raw request but\nalso as a structured object which is reflected by default overhead.\n\n`network.breaker.inflight_requests.limit`::\n    (<<dynamic-cluster-setting,Dynamic>>)\n    Limit for in flight requests breaker, defaults to 100% of JVM heap. This means that it is bound\n    by the limit configured for the parent circuit breaker.\n\n`network.breaker.inflight_requests.overhead`::\n    (<<dynamic-cluster-setting,Dynamic>>)\n    A constant that all in flight requests estimations are multiplied with to determine a\n    final estimation. Defaults to 2.\n\n[[script-compilation-circuit-breaker]]\n[discrete]\n==== Script compilation circuit breaker\n\nSlightly different than the previous memory-based circuit breaker, the script\ncompilation circuit breaker limits the number of inline script compilations\nwithin a period of time.\n\nSee the \"prefer-parameters\" section of the <<modules-scripting-using,scripting>>\ndocumentation for more information.\n\n`script.max_compilations_rate`::\n    (<<dynamic-cluster-setting,Dynamic>>)\n    Limit for the number of unique dynamic scripts within a certain interval\n    that are allowed to be compiled. Defaults to `150/5m`,\n    meaning 150 every 5 minutes.\n\nIf the cluster regularly hits the given `max_compilation_rate`, it's possible the\nscript cache is undersized, use <<cluster-nodes-stats,Nodes Stats>> to inspect\nthe number of recent cache evictions, `script.cache_evictions_history` and\ncompilations `script.compilations_history`.  If there are a large\nnumber of recent cache evictions or compilations, the script cache may be\nundersized, consider doubling the size of the script cache via the setting\n`script.cache.max_size`.\n\n[[regex-circuit-breaker]]\n[discrete]\n==== Regex circuit breaker\n\nPoorly written regular expressions can degrade cluster stability and\nperformance. The regex circuit breaker limits the use and complexity of\n{painless}/painless-regexes.html[regex in Painless scripts].\n\n[[script-painless-regex-enabled]]\n`script.painless.regex.enabled`::\n(<<static-cluster-setting,Static>>) Enables regex in Painless scripts. Accepts:\n\n`limited` (Default):::\nEnables regex but limits complexity using the\n<<script-painless-regex-limit-factor,`script.painless.regex.limit-factor`>>\ncluster setting.\n\n`true`:::\nEnables regex with no complexity limits. Disables the regex circuit breaker.\n\n`false`:::\nDisables regex. Any Painless script containing a regular expression returns an\nerror.\n\n[[script-painless-regex-limit-factor]]\n`script.painless.regex.limit-factor`::\n(<<static-cluster-setting,Static>>) Limits the number of characters a regular\nexpression in a Painless script can consider. {es} calculates this limit by\nmultiplying the setting value by the script input's character length.\n+\nFor example, the input `foobarbaz` has a character length of `9`. If\n`script.painless.regex.limit-factor` is `6`, a regular expression on `foobarbaz`\ncan consider up to 54 (9 * 6) characters. If the expression exceeds this limit,\nit triggers the regex circuit breaker and returns an error.\n+\n{es} only applies this limit if\n<<script-painless-regex-enabled,`script.painless.regex.enabled`>> is `limited`.\n\n[[circuit-breakers-page-eql]]\n[discrete]\n=== EQL circuit breaker\n\nWhen a <<eql-sequences, sequence>> query is executed, the node handling the query\nneeds to keep some structures in memory, which are needed by the algorithm\nimplementing the sequence matching. When large amounts of data need to be processed,\nand/or a large amount of matched sequences is requested by the user (by setting the\n<<eql-search-api-params-size, size>> query param), the memory occupied by those\nstructures could potentially exceed the available memory of the JVM. This would cause\nan `OutOfMemory` exception which would bring down the node.\n\nTo prevent this from happening, a special <<circuit-breaker, circuit breaker>> is used,\nwhich limits the memory allocation during the execution of a <<eql-sequences, sequence>>\nquery. When the breaker is triggered, an `org.elasticsearch.common.breaker.CircuitBreakingException`\nis thrown and a descriptive error message including `circuit_breaking_exception`\nis returned to the user.\n\nThis <<circuit-breaker, circuit breaker>> can be configured using the following settings:\n\n`breaker.eql_sequence.limit`::\n(<<cluster-update-settings,Dynamic>>) The limit for circuit breaker used to restrict\nthe memory utilisation during the execution of an EQL sequence query. This value is\ndefined as a percentage of the JVM heap. Defaults to `50%`. If the\n<<parent-circuit-breaker,parent circuit breaker>> is set to a value less than `50%`,\nthis setting uses that value as its default instead.\n\n`breaker.eql_sequence.overhead`::\n(<<cluster-update-settings,Dynamic>>) A constant that sequence query memory\nestimates are multiplied by to determine a final estimate. Defaults to `1`.\n\n`breaker.eql_sequence.type`::\n(<<static-cluster-setting,Static>>) Circuit breaker type. Valid values are:\n\n`memory` (Default):::\nThe breaker limits memory usage for EQL sequence queries.\n\n`noop`:::\nDisables the breaker.\n\n[[circuit-breakers-page-model-inference]]\n[discrete]\n==== {ml-cap} circuit breaker\n\n`breaker.model_inference.limit`::\n(<<cluster-update-settings,Dynamic>>) The limit for the trained model circuit\nbreaker. This value is defined as a percentage of the JVM heap. Defaults to\n`50%`. If the <<parent-circuit-breaker,parent circuit breaker>> is set to a\nvalue less than `50%`, this setting uses that value as its default instead.\n\n`breaker.model_inference.overhead`::\n(<<cluster-update-settings,Dynamic>>) A constant that all trained model\nestimations are multiplied by to determine a final estimation. See\n<<circuit-breaker>>. Defaults to `1`.\n\n`breaker.model_inference.type`::\n(<<static-cluster-setting,Static>>) The underlying type of the circuit breaker.\nThere are two valid options: `noop` and `memory`. `noop` means the circuit\nbreaker does nothing to prevent too much memory usage. `memory` means the\ncircuit breaker tracks the memory used by trained models and can potentially\nbreak and prevent `OutOfMemory` errors. The default value is `memory`.\n"
}