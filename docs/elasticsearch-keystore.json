{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.533271",
        "size": 10234,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/elasticsearch-keystore.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "elasticsearch-keystore",
        "version": "8.15"
    },
    "doc": "[[elasticsearch-keystore]]\n== elasticsearch-keystore\n\nThe `elasticsearch-keystore` command manages <<secure-settings,secure settings>>\nin the {es} keystore.\n\n[discrete]\n[[elasticsearch-keystore-synopsis]]\n=== Synopsis\n\n[source,shell]\n--------------------------------------------------\nbin/elasticsearch-keystore\n( [add <settings>] [-f] [--stdin]\n| [add-file (<setting> <path>)+]\n| [create] [-p]\n| [has-passwd]\n| [list]\n| [passwd]\n| [remove <setting>]\n| [show [-o <output-file>] <setting>]\n| [upgrade]\n) [-h, --help] ([-s, --silent] | [-v, --verbose])\n--------------------------------------------------\n\n[discrete]\n[[elasticsearch-keystore-description]]\n=== Description\n\nIMPORTANT: This command should be run as the user that will run {es}.\n\nCurrently, all secure settings are node-specific settings that must have the\nsame value on every node. Therefore you must run this command on every node.\n\nWhen the keystore is password-protected, you must supply the password each time\n{es} starts.\n\nModifications to the keystore are not automatically applied to the running {es}\nnode.\nAny changes to the keystore will take effect when you restart {es}.\nSome secure settings can be explicitly <<reloadable-secure-settings, reloaded>>\nwithout restart.\n\nOnly some settings are designed to be read from the keystore. However, there\nis no validation to block unsupported settings from the keystore and they can\ncause {es} to fail to start. To see whether a setting is supported in the\nkeystore, see the setting reference.\n\n[discrete]\n[[elasticsearch-keystore-parameters]]\n=== Parameters\n\n`add <settings>`:: Adds settings to the keystore. Multiple setting names can be\nspecified as arguments to the `add` command. By default, you are prompted for\nthe values of the settings. If the keystore is password protected, you are also\nprompted to enter the password. If a setting already exists in the keystore, you\nmust confirm that you want to overwrite the current value. If the keystore does\nnot exist, you must confirm that you want to create a keystore. To avoid these\ntwo confirmation prompts, use the `-f` parameter.\n\n`add-file (<setting> <path>)+`:: Adds files to the keystore.\n\n`create`:: Creates the keystore.\n\n`-f, --force`:: When used with the `add` parameter, the command no longer prompts you\nbefore overwriting existing entries in the keystore. Also, if you haven't\ncreated a keystore yet, it creates a keystore that is obfuscated but not\npassword protected.\n\n`-h, --help`:: Returns all of the command parameters.\n\n`has-passwd`:: Returns a success message if the keystore exists and is\npassword-protected. Otherwise, the command fails with exit code 1 and returns an\nerror message.\n\n`list`:: Lists the settings in the keystore. If the keystore is password\nprotected, you are prompted to enter the password.\n\n`-p`:: When used with the `create` parameter, the command prompts you to enter a\nkeystore password. If you don't specify the `-p` flag or if you enter an empty\npassword, the keystore is obfuscated but not password protected.\n\n`passwd`:: Changes or sets the keystore password. If the keystore is password\nprotected, you are prompted to enter the current password and the new one. You\ncan optionally use an empty string to remove the password. If the keystore is\nnot password protected, you can use this command to set a password.\n\n`remove <settings>`:: Removes settings from the keystore. Multiple setting\nnames can be specified as arguments to the `remove` command.\n\n`show <setting>`:: Displays the value of a single setting in the keystore.\nPass the `-o` (or `--output`) parameter to write the setting to a file.\nIf writing to the standard output (the terminal) the setting's value is always\ninterpreted as a UTF-8 string. If the setting contains binary data (for example\nfor data that was added via the `add-file` command), always use the `-o` option\nto write to a file.\n\n`-s, --silent`:: Shows minimal output.\n\n`-x, --stdin`:: When used with the `add` parameter, you can pass the settings values\nthrough standard input (stdin). Separate multiple values with carriage returns\nor newlines. See <<add-string-to-keystore>>.\n\n`upgrade`:: Upgrades the internal format of the keystore.\n\n`-v, --verbose`:: Shows verbose output.\n\n[discrete]\n[[elasticsearch-keystore-examples]]\n=== Examples\n\n[discrete]\n[[creating-keystore]]\n==== Create the keystore\n\nTo create the `elasticsearch.keystore`, use the `create` command:\n\n[source,sh]\n----------------------------------------------------------------\nbin/elasticsearch-keystore create -p\n----------------------------------------------------------------\n\nYou are prompted to enter the keystore password. A password-protected\n`elasticsearch.keystore` file is created alongside the `elasticsearch.yml` file.\n\n[discrete]\n[[changing-keystore-password]]\n==== Change the password of the keystore\n\nTo change the password of the `elasticsearch.keystore`, use the `passwd` command:\n\n[source,sh]\n----------------------------------------------------------------\nbin/elasticsearch-keystore passwd\n----------------------------------------------------------------\n\nIf the {es} keystore is password protected, you are prompted to enter the\ncurrent password and then enter the new one. If it is not password protected,\nyou are prompted to set a password.\n\n[discrete]\n[[list-settings]]\n==== List settings in the keystore\n\nTo list the settings in the keystore, use the `list` command.\n\n[source,sh]\n----------------------------------------------------------------\nbin/elasticsearch-keystore list\n----------------------------------------------------------------\n\nIf the {es} keystore is password protected, you are prompted to enter the\npassword.\n\n[discrete]\n[[add-string-to-keystore]]\n==== Add settings to the keystore\n\nSensitive string settings, like authentication credentials for Cloud plugins,\ncan be added with the `add` command:\n\n[source,sh]\n----------------------------------------------------------------\nbin/elasticsearch-keystore add the.setting.name.to.set\n----------------------------------------------------------------\n\nYou are prompted to enter the value of the setting. If the {es} keystore is\npassword protected, you are also prompted to enter the password.\n\nYou can also add multiple settings with the `add` command:\n\n[source,sh]\n----------------------------------------------------------------\nbin/elasticsearch-keystore add \\\n  the.setting.name.to.set \\\n  the.other.setting.name.to.set\n----------------------------------------------------------------\n\nYou are prompted to enter the values of the settings. If the {es} keystore is\npassword protected, you are also prompted to enter the password.\n\nTo pass the settings values through standard input (stdin), use the `--stdin`\nflag:\n\n[source,sh]\n----------------------------------------------------------------\ncat /file/containing/setting/value | bin/elasticsearch-keystore add --stdin the.setting.name.to.set\n----------------------------------------------------------------\n\nValues for multiple settings must be separated by carriage returns or newlines.\n\n[discrete]\n[[add-file-to-keystore]]\n==== Add files to the keystore\n\nYou can add sensitive files, like authentication key files for Cloud plugins,\nusing the `add-file` command. Settings and file paths are specified in pairs\nconsisting of `setting path`. The value of the setting will be the binary contents\nof the file path at the time the file is added to the keystore.\n\n[source,sh]\n----------------------------------------------------------------\nbin/elasticsearch-keystore add-file the.setting.name.to.set /path/example-file.json\n----------------------------------------------------------------\n\nYou can add multiple files with the `add-file` command:\n\n[source,sh]\n----------------------------------------------------------------\nbin/elasticsearch-keystore add-file \\\n  the.setting.name.to.set /path/example-file.json \\\n  the.other.setting.name.to.set /path/other-example-file.json\n----------------------------------------------------------------\n\nIf the {es} keystore is password protected, you are prompted to enter the\npassword.\n\n[discrete]\n[[show-keystore-value]]\n==== Show settings in the keystore\n\nTo display the value of a setting in the keystore use the `show` command:\n\n[source,sh]\n----------------------------------------------------------------\nbin/elasticsearch-keystore show the.name.of.the.setting.to.show\n----------------------------------------------------------------\n\nIf the setting contains binary data you should write it to a file with the\n`-o` (or `--output`) option:\n\n[source,sh]\n----------------------------------------------------------------\nbin/elasticsearch-keystore show -o my_file binary.setting.name\n----------------------------------------------------------------\n\nIf the {es} keystore is password protected, you are prompted to enter the\npassword.\n\n[discrete]\n[[remove-settings]]\n==== Remove settings from the keystore\n\nTo remove a setting from the keystore, use the `remove` command:\n\n[source,sh]\n----------------------------------------------------------------\nbin/elasticsearch-keystore remove the.setting.name.to.remove\n----------------------------------------------------------------\n\nYou can also remove multiple settings with the `remove` command:\n\n[source,sh]\n----------------------------------------------------------------\nbin/elasticsearch-keystore remove \\\n  the.setting.name.to.remove \\\n  the.other.setting.name.to.remove\n----------------------------------------------------------------\n\nIf the {es} keystore is password protected, you are prompted to enter the\npassword.\n\n[discrete]\n[[keystore-upgrade]]\n==== Upgrade the keystore\n\nOccasionally, the internal format of the keystore changes. When {es} is\ninstalled from a package manager, an upgrade of the on-disk keystore to the new\nformat is done during package upgrade. In other cases, {es} performs the upgrade\nduring node startup. This requires that {es} has write permissions to the\ndirectory that contains the keystore. Alternatively, you can manually perform\nsuch an upgrade by using the `upgrade` command:\n\n[source,sh]\n----------------------------------------------------------------\nbin/elasticsearch-keystore upgrade\n----------------------------------------------------------------\n"
}