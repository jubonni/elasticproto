{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.972580",
        "size": 3096,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-lat-long.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "ml-lat-long",
        "version": "8.15"
    },
    "doc": "[\"appendix\",role=\"exclude\",id=\"ml-geo-functions\"]\n= Geographic functions\n\nThe geographic functions detect anomalies in the geographic location of the\ninput data.\n\nThe {ml-features} include the following geographic function: `lat_long`.\n\nNOTE: You cannot create forecasts for {anomaly-jobs} that contain geographic\nfunctions. You also cannot add rules with conditions to detectors that use\ngeographic functions. \n\n[discrete]\n[[ml-lat-long]]\n== Lat_long\n\nThe `lat_long` function detects anomalies in the geographic location of the\ninput data.\n\nThis function supports the following properties:\n\n* `field_name` (required)\n* `by_field_name` (optional)\n* `over_field_name` (optional)\n* `partition_field_name` (optional)\n\nFor more information about those properties, see the\n{ref}/ml-put-job.html#ml-put-job-request-body[create {anomaly-jobs} API].\n\n.Example 1: Analyzing transactions with the lat_long function\n[source,console]\n--------------------------------------------------\nPUT _ml/anomaly_detectors/example1\n{\n  \"analysis_config\": {\n    \"detectors\": [{\n      \"function\" : \"lat_long\",\n      \"field_name\" : \"transaction_coordinates\",\n      \"by_field_name\" : \"credit_card_number\"\n    }]\n  },\n  \"data_description\": {\n    \"time_field\":\"timestamp\",\n    \"time_format\": \"epoch_ms\"\n  }\n}\n--------------------------------------------------\n// TEST[skip:needs-licence]\n\nIf you use this `lat_long` function in a detector in your {anomaly-job}, it\ndetects anomalies where the geographic location of a credit card transaction is\nunusual for a particular customer\u2019s credit card. An anomaly might indicate \nfraud.\n\nA \"typical\" value indicates a centroid of a cluster of previously observed \nlocations that is closest to the \"actual\" location at that time. For example, \nthere may be one centroid near the person's home that is associated with the \ncluster of local grocery stores and restaurants, and another centroid near the \nperson's work associated with the cluster of lunch and coffee places.   \n\nIMPORTANT: The `field_name` that you supply must be a single string that \ncontains two comma-separated numbers of the form `latitude,longitude`, a \n`geo_point` field, a `geo_shape` field that contains point values, or a \n`geo_centroid` aggregation. The `latitude` and `longitude` must be in the range \n-180 to 180 and represent a point on the surface of the Earth.\n\nFor example, JSON data might contain the following transaction coordinates:\n\n[source,js]\n--------------------------------------------------\n{\n  \"time\": 1460464275,\n  \"transaction_coordinates\": \"40.7,-74.0\",\n  \"credit_card_number\": \"1234123412341234\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIn {es}, location data is likely to be stored in `geo_point` fields. For more\ninformation, see {ref}/geo-point.html[`geo_point` data type]. This data type is\nsupported natively in {ml-features}. Specifically, when pulling data from a\n`geo_point` field, a {dfeed} will transform the data into the appropriate\n`lat,lon` string format before sending to the {anomaly-job}.\n\nFor more information, see <<ml-configuring-transform>>.\n"
}