{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.195580",
        "size": 7710,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/common-log-format-example.html",
        "type": "documentation",
        "role": [
            "screenshot",
            "screenshot"
        ],
        "has_code": false,
        "title": "common-log-format-example",
        "version": "8.15"
    },
    "doc": "[[common-log-format-example]]\n== Example: Parse logs in the Common Log Format\n++++\n<titleabbrev>Example: Parse logs</titleabbrev>\n++++\n\nIn this example tutorial, you\u2019ll use an <<ingest,ingest pipeline>> to parse\nserver logs in the {wikipedia}/Common_Log_Format[Common Log Format] before\nindexing. Before starting, check the <<ingest-prerequisites,prerequisites>> for\ningest pipelines.\n\nThe logs you want to parse look similar to this:\n\n[source,log]\n----\n212.87.37.154 - - [05/May/2099:16:21:15 +0000] \"GET /favicon.ico HTTP/1.1\" 200 3638 \"-\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36\"\n----\n// NOTCONSOLE\n\nThese logs contain a timestamp, IP address, and user agent. You want to give\nthese three items their own field in {es} for faster searches and\nvisualizations. You also want to know where the request is coming from.\n\n. In {kib}, open the main menu and click **Stack Management** > **Ingest\nPipelines**.\n+\n[role=\"screenshot\"]\nimage::images/ingest/ingest-pipeline-list.png[Kibana's Ingest Pipelines list view,align=\"center\"]\n\n. Click **Create pipeline > New pipeline**.\n. Set **Name** to `my-pipeline` and optionally add a description for the \npipeline.\n. Add a <<grok-processor,grok processor>> to parse the log message:\n\n.. Click **Add a processor** and select the **Grok** processor type.\n.. Set **Field** to `message` and **Patterns** to the following\n<<grok,grok pattern>>:\n+\n[source,grok]\n----\n%{IPORHOST:source.ip} %{USER:user.id} %{USER:user.name} \\[%{HTTPDATE:@timestamp}\\] \"%{WORD:http.request.method} %{DATA:url.original} HTTP/%{NUMBER:http.version}\" %{NUMBER:http.response.status_code:int} (?:-|%{NUMBER:http.response.body.bytes:int}) %{QS:http.request.referrer} %{QS:user_agent}\n----\n// NOTCONSOLE\n+\n.. Click **Add** to save the processor.\n.. Set the processor description to `Extract fields from 'message'`.\n\n. Add processors for the timestamp, IP address, and user agent fields. Configure\nthe processors as follows:\n+\n--\n\n[options=\"header\"]\n|====\n| Processor type | Field  | Additional options | Description\n\n| <<date-processor,**Date**>>\n| `@timestamp`\n| **Formats**: `dd/MMM/yyyy:HH:mm:ss Z`\n| `Format '@timestamp' as 'dd/MMM/yyyy:HH:mm:ss Z'`\n\n| <<geoip-processor,**GeoIP**>>\n| `source.ip`\n| **Target field**: `source.geo`\n| `Add 'source.geo' GeoIP data for 'source.ip'`\n\n| <<user-agent-processor,**User agent**>>\n| `user_agent`\n|\n| `Extract fields from 'user_agent'`\n|====\n\nYour form should look similar to this:\n\n[role=\"screenshot\"]\nimage::images/ingest/ingest-pipeline-processor.png[Processors for Ingest Pipelines,align=\"center\"]\n\nThe four processors will run sequentially: +\nGrok > Date > GeoIP > User agent +\nYou can reorder processors using the arrow icons.\n\nAlternatively, you can click the **Import processors** link and define the\nprocessors as JSON:\n\n[source,js]\n----\n{\ninclude::common-log-format-example.asciidoc[tag=common-log-pipeline]\n}\n----\n// NOTCONSOLE\n\n////\n[source,console]\n----\nPUT _ingest/pipeline/my-pipeline\n{\n// tag::common-log-pipeline[]\n  \"processors\": [\n    {\n      \"grok\": {\n        \"description\": \"Extract fields from 'message'\",\n        \"field\": \"message\",\n        \"patterns\": [\"%{IPORHOST:source.ip} %{USER:user.id} %{USER:user.name} \\\\[%{HTTPDATE:@timestamp}\\\\] \\\"%{WORD:http.request.method} %{DATA:url.original} HTTP/%{NUMBER:http.version}\\\" %{NUMBER:http.response.status_code:int} (?:-|%{NUMBER:http.response.body.bytes:int}) %{QS:http.request.referrer} %{QS:user_agent}\"]\n      }\n    },\n    {\n      \"date\": {\n        \"description\": \"Format '@timestamp' as 'dd/MMM/yyyy:HH:mm:ss Z'\",\n        \"field\": \"@timestamp\",\n        \"formats\": [ \"dd/MMM/yyyy:HH:mm:ss Z\" ]\n      }\n    },\n    {\n      \"geoip\": {\n        \"description\": \"Add 'source.geo' GeoIP data for 'source.ip'\",\n        \"field\": \"source.ip\",\n        \"target_field\": \"source.geo\"\n      }\n    },\n    {\n      \"user_agent\": {\n        \"description\": \"Extract fields from 'user_agent'\",\n        \"field\": \"user_agent\"\n      }\n    }\n  ]\n// end::common-log-pipeline[]\n}\n----\n////\n--\n\n. To test the pipeline, click **Add documents**.\n\n. In the **Documents** tab, provide a sample document for testing:\n+\n[source,js]\n----\n[\n  {\n    \"_source\": {\n      \"message\": \"212.87.37.154 - - [05/May/2099:16:21:15 +0000] \\\"GET /favicon.ico HTTP/1.1\\\" 200 3638 \\\"-\\\" \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36\\\"\"\n    }\n  }\n]\n----\n// NOTCONSOLE\n\n. Click **Run the pipeline** and verify the pipeline worked as expected.\n\n. If everything looks correct, close the panel, and then click **Create\npipeline**.\n+\nYou\u2019re now ready to index the logs data to a <<data-streams,data stream>>.\n\n. Create an <<index-templates,index template>> with\n<<create-index-template,data stream enabled>>.\n+\n[source,console]\n----\nPUT _index_template/my-data-stream-template\n{\n  \"index_patterns\": [ \"my-data-stream*\" ],\n  \"data_stream\": { },\n  \"priority\": 500\n}\n----\n// TEST[continued]\n\n. Index a document with the pipeline you created.\n+\n[source,console]\n----\nPOST my-data-stream/_doc?pipeline=my-pipeline\n{\n  \"message\": \"89.160.20.128 - - [05/May/2099:16:21:15 +0000] \\\"GET /favicon.ico HTTP/1.1\\\" 200 3638 \\\"-\\\" \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36\\\"\"\n}\n----\n// TEST[s/my-pipeline/my-pipeline&refresh=wait_for/]\n// TEST[continued]\n\n. To verify, search the data stream to retrieve the document. The following\nsearch uses <<common-options-response-filtering,`filter_path`>> to return only\nthe <<mapping-source-field,document source>>.\n+\n--\n[source,console]\n----\nGET my-data-stream/_search?filter_path=hits.hits._source\n----\n// TEST[continued]\n\nThe API returns:\n\n[source,console-result]\n----\n{\n  \"hits\": {\n    \"hits\": [\n      {\n        \"_source\": {\n          \"@timestamp\": \"2099-05-05T16:21:15.000Z\",\n          \"http\": {\n            \"request\": {\n              \"referrer\": \"\\\"-\\\"\",\n              \"method\": \"GET\"\n            },\n            \"response\": {\n              \"status_code\": 200,\n              \"body\": {\n                \"bytes\": 3638\n              }\n            },\n            \"version\": \"1.1\"\n          },\n          \"source\": {\n            \"ip\": \"89.160.20.128\",\n            \"geo\": {\n              \"continent_name\" : \"Europe\",\n              \"country_name\" : \"Sweden\",\n              \"country_iso_code\" : \"SE\",\n              \"city_name\" : \"Link\u00f6ping\",\n              \"region_iso_code\" : \"SE-E\",\n              \"region_name\" : \"\u00d6sterg\u00f6tland County\",\n              \"location\" : {\n                \"lon\" : 15.6167,\n                \"lat\" : 58.4167\n              }\n            }\n          },\n          \"message\": \"89.160.20.128 - - [05/May/2099:16:21:15 +0000] \\\"GET /favicon.ico HTTP/1.1\\\" 200 3638 \\\"-\\\" \\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36\\\"\",\n          \"url\": {\n            \"original\": \"/favicon.ico\"\n          },\n          \"user\": {\n            \"name\": \"-\",\n            \"id\": \"-\"\n          },\n          \"user_agent\": {\n            \"original\": \"\\\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36\\\"\",\n            \"os\": {\n              \"name\": \"Mac OS X\",\n              \"version\": \"10.11.6\",\n              \"full\": \"Mac OS X 10.11.6\"\n            },\n            \"name\": \"Chrome\",\n            \"device\": {\n              \"name\": \"Mac\"\n            },\n            \"version\": \"52.0.2743.116\"\n          }\n        }\n      }\n    ]\n  }\n}\n----\n--\n\n////\n[source,console]\n----\nDELETE _data_stream/*\nDELETE _index_template/*\n----\n// TEST[continued]\n////\n"
}