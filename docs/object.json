{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.064579",
        "size": 2934,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/object.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "object",
        "version": "8.15"
    },
    "doc": "[[object]]\n=== Object field type\n++++\n<titleabbrev>Object</titleabbrev>\n++++\n\nJSON documents are hierarchical in nature: the document may contain inner\nobjects which, in turn, may contain inner objects themselves:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001/_doc/1\n{ <1>\n  \"region\": \"US\",\n  \"manager\": { <2>\n    \"age\":     30,\n    \"name\": { <3>\n      \"first\": \"John\",\n      \"last\":  \"Smith\"\n    }\n  }\n}\n--------------------------------------------------\n\n<1> The outer document is also a JSON object.\n<2> It contains an inner object called `manager`.\n<3> Which in turn contains an inner object called `name`.\n\nInternally, this document is indexed as a simple, flat list of key-value\npairs, something like this:\n\n[source,js]\n--------------------------------------------------\n{\n  \"region\":             \"US\",\n  \"manager.age\":        30,\n  \"manager.name.first\": \"John\",\n  \"manager.name.last\":  \"Smith\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nAn explicit mapping for the above document could look like this:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": { <1>\n      \"region\": {\n        \"type\": \"keyword\"\n      },\n      \"manager\": { <2>\n        \"properties\": {\n          \"age\":  { \"type\": \"integer\" },\n          \"name\": { <3>\n            \"properties\": {\n              \"first\": { \"type\": \"text\" },\n              \"last\":  { \"type\": \"text\" }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n<1> Properties in the top-level mappings definition.\n<2> The `manager` field is an inner `object` field.\n<3> The `manager.name` field is an inner `object` field within the `manager` field.\n\nYou are not required to set the field `type` to `object` explicitly, as this is the default value.\n\n[[object-params]]\n==== Parameters for `object` fields\n\nThe following parameters are accepted by `object` fields:\n\n[horizontal]\n<<dynamic,`dynamic`>>::\n\n    Whether or not new `properties` should be added dynamically\n    to an existing object. Accepts `true` (default), `runtime`, `false`\n    and `strict`.\n\n<<enabled,`enabled`>>::\n\n    Whether the JSON value given for the object field should be\n    parsed and indexed (`true`, default) or completely ignored (`false`).\n\n<<subobjects,`subobjects`>>::\n\n    Whether the object can hold subobjects (`true`, default) or not (`false`). If not, sub-fields\n    with dots in their names will be treated as leaves instead, otherwise their field names\n    would be expanded to their corresponding object structure.\n\n<<properties,`properties`>>::\n\n    The fields within the object, which can be of any\n    <<mapping-types,data type>>, including `object`. New properties\n    may be added to an existing object.\n\nIMPORTANT: If you need to index arrays of objects instead of single objects,\nread <<nested>> first.\n"
}