{
    "meta": {
        "timestamp": "2024-11-01T03:07:10.086273",
        "size": 4604,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/rest-api-compatibility.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "rest-api-compatibility",
        "version": "8.15"
    },
    "doc": "[[rest-api-compatibility]]\n== REST API compatibility\n\nTo help REST clients mitigate the impact of non-compatible (breaking)\nAPI changes, {es} provides a per-request, opt-in API compatibility mode.\n\n{es} REST APIs are generally stable across versions. However, some\nimprovements require changes that are not compatible with previous versions.\nFor example, {es} 7.x supported custom mapping types in many URL paths,\nbut {es} 8.0+ does not (see <<removal-of-types>>). Specifying a custom type\nin a request sent to {es} 8.0+ returns an error. However, if you request\nREST API compatibility, {es} accepts the request even though mapping types\nare no longer supported.\n\nWhen an API is targeted for removal or is going to be changed in a\nnon-compatible way, the original API is deprecated for one or more releases.\nUsing the original API triggers a deprecation warning in the logs.\nThis enables you to review the deprecation logs  and take the appropriate actions\nbefore upgrading. However, in some cases it is difficult to\nidentify all places where deprecated APIs are being used. This is where REST API\ncompatibility can help.\n\nWhen you request REST API compatibility, {es} attempts to honor the previous\nREST API version. {es} attempts to apply the most compatible URL, request body,\nresponse body, and HTTP parameters.\n\nFor compatible APIs, this has no effect--it only impacts calls to APIs\nthat have breaking changes from the previous version. An error can still be\nreturned in compatibility mode if {es} cannot automatically resolve the incompatibilities.\n\nIMPORTANT: REST API compatibility does not guarantee the same behavior\nas the prior version. It instructs {es} to automatically resolve any\nincompatibilities so the request can be processed instead of returning an error.\n\n\nREST API compatibility should be a bridge to smooth out the upgrade process,\nnot a long term strategy. REST API compatibility is only honored across one\nmajor version: honor 7.x requests/responses from 8.x.\n\nWhen you submit requests using REST API compatibility and {es} resolves\nthe incompatibility, a message is written to the deprecation log with\nthe category \"compatible_api\". Review the deprecation log to identify\nany gaps in usage and fully supported features.\n\n\nFor information about specific breaking changes and the impact of requesting\ncompatibility mode, see <<breaking_80_rest_api_changes, REST API changes>>\nin the migration guide.\n\n[discrete]\n[[request-rest-api-compatibility]]\n=== Requesting REST API compatibility\n\nREST API compatibility is implemented per request via the Accept\nand/or Content-Type headers.\n\nFor example:\n\n[source, text]\n------------------------------------------------------------\nAccept: \"application/vnd.elasticsearch+json;compatible-with=7\"\nContent-Type: \"application/vnd.elasticsearch+json;compatible-with=7\"\n------------------------------------------------------------\n\nThe Accept header is always required and the Content-Type header is\nonly required when a body is sent with the request. The following values are\nvalid when communicating with a 7.x or 8.x {es} server:\n[source, text]\n------------------------------------------------------------\n\"application/vnd.elasticsearch+json;compatible-with=7\"\n\"application/vnd.elasticsearch+yaml;compatible-with=7\"\n\"application/vnd.elasticsearch+smile;compatible-with=7\"\n\"application/vnd.elasticsearch+cbor;compatible-with=7\"\n------------------------------------------------------------\nThe https://www.elastic.co/guide/en/elasticsearch/client/index.html[officially supported {es} clients]\ncan enable REST API compatibility for all requests.\n\nTo enable REST API compatibility for all requests received\nby {es} set the environment variable `ELASTIC_CLIENT_APIVERSIONING` to true.\n\n[discrete]\n=== REST API compatibility workflow\n\nTo leverage REST API compatibility during an upgrade from 7.17 to {version}:\n\n1. Upgrade your https://www.elastic.co/guide/en/elasticsearch/client/index.html[{es} clients]\nto the latest 7.x version and enable REST API compatibility.\n2. Use the {kibana-ref-all}/{prev-major-last}/upgrade-assistant.html[Upgrade Assistant]\nto review all critical issues and explore the deprecation logs.\nSome critical issues might be mitigated by REST API compatibility.\n3. Resolve all critical issues before proceeding with the upgrade.\n4. Upgrade Elasticsearch to {version}.\n5. Review the deprecation logs for entries with the category `compatible_api`.\nReview the workflow associated with the requests that relied on compatibility mode.\n6. Upgrade your {es} clients to 8.x and resolve compatibility issues manually where needed.\n\n"
}