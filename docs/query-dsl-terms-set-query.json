{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.715591",
        "size": 6036,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-set-query.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "query-dsl-terms-set-query",
        "version": "8.15"
    },
    "doc": "[[query-dsl-terms-set-query]]\n=== Terms set query\n++++\n<titleabbrev>Terms set</titleabbrev>\n++++\n\nReturns documents that contain a minimum number of *exact* terms in a provided\nfield.\n\nThe `terms_set` query is the same as the <<query-dsl-terms-query, `terms`\nquery>>, except you can define the number of matching terms required to\nreturn a document. For example:\n\n* A field, `programming_languages`, contains a list of known programming\nlanguages, such as `c++`, `java`, or `php` for job candidates. You can use the\n`terms_set` query to return documents that match at least two of these\nlanguages.\n\n* A field, `permissions`, contains a list of possible user permissions for an\napplication. You can use the `terms_set` query to return documents that\nmatch a subset of these permissions.\n\n[[terms-set-query-ex-request]]\n==== Example request\n\n[[terms-set-query-ex-request-index-setup]]\n===== Index setup\nIn most cases, you'll need to include a <<number, numeric>> field mapping in\nyour index to use the `terms_set` query. This numeric field contains the\nnumber of matching terms required to return a document.\n\nTo see how you can set up an index for the `terms_set` query, try the\nfollowing example.\n\n. Create an index, `job-candidates`, with the following field mappings:\n+\n--\n\n* `name`, a <<keyword, `keyword`>> field. This field contains the name of the\njob candidate.\n\n* `programming_languages`, a <<keyword, `keyword`>> field. This field contains\nprogramming languages known by the job candidate.\n\n* `required_matches`, a <<number, numeric>> `long` field. This field contains\nthe number of matching terms required to return a document.\n\n[source,console]\n----\nPUT /job-candidates\n{\n  \"mappings\": {\n    \"properties\": {\n      \"name\": {\n        \"type\": \"keyword\"\n      },\n      \"programming_languages\": {\n        \"type\": \"keyword\"\n      },\n      \"required_matches\": {\n        \"type\": \"long\"\n      }\n    }\n  }\n}\n----\n// TESTSETUP\n\n--\n\n. Index a document with an ID of `1` and the following values:\n+\n--\n\n* `Jane Smith` in the `name` field.\n\n* `[\"c++\", \"java\"]` in the `programming_languages` field.\n\n* `2` in the `required_matches` field.\n\nInclude the `?refresh` parameter so the document is immediately available for\nsearch.\n\n[source,console]\n----\nPUT /job-candidates/_doc/1?refresh\n{\n  \"name\": \"Jane Smith\",\n  \"programming_languages\": [ \"c++\", \"java\" ],\n  \"required_matches\": 2\n}\n----\n\n--\n\n. Index another document with an ID of `2` and the following values:\n+\n--\n\n* `Jason Response` in the `name` field.\n\n* `[\"java\", \"php\"]` in the `programming_languages` field.\n\n* `2` in the `required_matches` field.\n\n[source,console]\n----\nPUT /job-candidates/_doc/2?refresh\n{\n  \"name\": \"Jason Response\",\n  \"programming_languages\": [ \"java\", \"php\" ],\n  \"required_matches\": 2\n}\n----\n\n--\n\nYou can now use the `required_matches` field value as the number of\nmatching terms required to return a document in the `terms_set` query.\n\n[[terms-set-query-ex-request-query]]\n===== Example query\n\nThe following search returns documents where the `programming_languages` field\ncontains at least two of the following terms:\n\n* `c++`\n* `java`\n* `php`\n\nThe `minimum_should_match_field` is `required_matches`. This means the\nnumber of matching terms required is `2`, the value of the `required_matches`\nfield.\n\n[source,console]\n----\nGET /job-candidates/_search\n{\n  \"query\": {\n    \"terms_set\": {\n      \"programming_languages\": {\n        \"terms\": [ \"c++\", \"java\", \"php\" ],\n        \"minimum_should_match_field\": \"required_matches\"\n      }\n    }\n  }\n}\n----\n\n[[terms-set-top-level-params]]\n==== Top-level parameters for `terms_set`\n\n`<field>`::\n(Required, object) Field you wish to search.\n\n[[terms-set-field-params]]\n==== Parameters for `<field>`\n\n`terms`::\n+\n--\n(Required, array) Array of terms you wish to find in the provided\n`<field>`. To return a document, a required number of terms must exactly match\nthe field values, including whitespace and capitalization.\n\nThe required number of matching terms is defined in the `minimum_should_match`,\n`minimum_should_match_field` or `minimum_should_match_script` parameters. Exactly\none of these parameters must be provided.\n--\n\n`minimum_should_match`::\n+\n--\n(Optional) Specification for the number of matching terms required to return\na document.\n\nFor valid values, see <<query-dsl-minimum-should-match, `minimum_should_match` parameter>>.\n--\n\n`minimum_should_match_field`::\n(Optional, string) <<number, Numeric>> field containing the number of matching\nterms required to return a document.\n\n`minimum_should_match_script`::\n+\n--\n(Optional, string) Custom script containing the number of matching terms\nrequired to return a document.\n\nFor parameters and valid values, see <<modules-scripting, Scripting>>.\n\nFor an example query using the `minimum_should_match_script` parameter, see\n<<terms-set-query-script, How to use the `minimum_should_match_script`\nparameter>>.\n--\n\n[[terms-set-query-notes]]\n==== Notes\n\n[[terms-set-query-script]]\n===== How to use the `minimum_should_match_script` parameter\nYou can use `minimum_should_match_script` to define the required number of\nmatching terms using a script. This is useful if you need to set the number of\nrequired terms dynamically.\n\n[[terms-set-query-script-ex]]\n====== Example query using `minimum_should_match_script`\n\nThe following search returns documents where the `programming_languages` field\ncontains at least two of the following terms:\n\n* `c++`\n* `java`\n* `php`\n\nThe `source` parameter of this query indicates:\n\n* The required number of terms to match cannot exceed `params.num_terms`, the\nnumber of terms provided in the `terms` field.\n* The required number of terms to match is `2`, the value of the\n`required_matches` field.\n\n[source,console]\n----\nGET /job-candidates/_search\n{\n  \"query\": {\n    \"terms_set\": {\n      \"programming_languages\": {\n        \"terms\": [ \"c++\", \"java\", \"php\" ],\n        \"minimum_should_match_script\": {\n          \"source\": \"Math.min(params.num_terms, doc['required_matches'].value)\"\n        },\n        \"boost\": 1.0\n      }\n    }\n  }\n}\n----\n"
}