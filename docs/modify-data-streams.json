{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.139579",
        "size": 20997,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/modify-data-streams.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "modify-data-streams",
        "version": "8.15"
    },
    "doc": "[[modify-data-streams]]\n== Modify a data stream\n\n[discrete]\n[[data-streams-change-mappings-and-settings]]\n=== Change mappings and settings for a data stream\n\nEach <<data-streams,data stream>> has a <<create-index-template,matching index\ntemplate>>. Mappings and index settings from this template are applied to new\nbacking indices created for the stream. This includes the stream's first\nbacking index, which is auto-generated when the stream is created.\n\nBefore creating a data stream, we recommend you carefully consider which\nmappings and settings to include in this template.\n\nIf you later need to change the mappings or settings for a data stream, you have\na few options:\n\n* <<add-new-field-mapping-to-a-data-stream>>\n* <<change-existing-field-mapping-in-a-data-stream>>\n* <<change-dynamic-index-setting-for-a-data-stream>>\n* <<change-static-index-setting-for-a-data-stream>>\n\nTIP: If your changes include modifications to existing field mappings or\n<<index-modules-settings,static index settings>>, a reindex is often required to\napply the changes to a data stream's backing indices. If you are already\nperforming a reindex, you can use the same process to add new field\nmappings and change <<index-modules-settings,dynamic index settings>>. See\n<<data-streams-use-reindex-to-change-mappings-settings>>.\n\n////\n[source,console]\n----\nPUT /_ilm/policy/my-data-stream-policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\": {\n            \"max_primary_shard_size\": \"25GB\"\n          }\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"30d\",\n        \"actions\": {\n          \"delete\": {}\n        }\n      }\n    }\n  }\n}\n\nPUT /_index_template/my-data-stream-template\n{\n  \"index_patterns\": [ \"my-data-stream*\" ],\n  \"data_stream\": { }\n}\n\nPUT /_index_template/new-data-stream-template\n{\n  \"index_patterns\": [ \"new-data-stream*\" ],\n  \"data_stream\": { }\n}\n\nPUT /_data_stream/my-data-stream\n\nPOST /my-data-stream/_rollover/\n\nPUT /_data_stream/new-data-stream\n\nDELETE /_data_stream/*/_lifecycle\n----\n// TESTSETUP\n\n[source,console]\n----\nDELETE /_data_stream/my-data-stream*,new-data-stream*\n\nDELETE /_index_template/my-data-stream-template,new-data-stream-template\n\nDELETE /_ilm/policy/my-data-stream-policy\n----\n// TEARDOWN\n////\n\n[discrete]\n[[add-new-field-mapping-to-a-data-stream]]\n==== Add a new field mapping to a data stream\n\nTo add a mapping for a new field to a data stream, following these steps:\n\n. Update the index template used by the data stream. This ensures the new\nfield mapping is added to future backing indices created for the stream.\n+\n--\nFor example, `my-data-stream-template` is an existing index template used by\n`my-data-stream`.\n\nThe following <<index-templates,create or update index template>> request adds a mapping\nfor a new field, `message`, to the template.\n\n[source,console]\n----\nPUT /_index_template/my-data-stream-template\n{\n  \"index_patterns\": [ \"my-data-stream*\" ],\n  \"data_stream\": { },\n  \"priority\": 500,\n  \"template\": {\n    \"mappings\": {\n      \"properties\": {\n        \"message\": {                              <1>\n          \"type\": \"text\"\n        }\n      }\n    }\n  }\n}\n----\n<1> Adds a mapping for the new `message` field.\n--\n\n. Use the <<indices-put-mapping,update mapping API>> to add the new field mapping\nto the data stream. By default, this adds the mapping to the stream's existing\nbacking indices, including the write index.\n+\n--\nThe following update mapping API request adds the new `message` field mapping to\n`my-data-stream`.\n\n[source,console]\n----\nPUT /my-data-stream/_mapping\n{\n  \"properties\": {\n    \"message\": {\n      \"type\": \"text\"\n    }\n  }\n}\n----\n--\n+\nTo add the mapping only to the stream's write index, set the update mapping API's\n`write_index_only` query parameter to `true`.\n+\n--\nThe following update mapping request adds the new `message` field mapping only to\n`my-data-stream`'s write index. The new field mapping is not added to\nthe stream's other backing indices.\n\n[source,console]\n----\nPUT /my-data-stream/_mapping?write_index_only=true\n{\n  \"properties\": {\n    \"message\": {\n      \"type\": \"text\"\n    }\n  }\n}\n----\n--\n\n[discrete]\n[[change-existing-field-mapping-in-a-data-stream]]\n==== Change an existing field mapping in a data stream\n\nThe documentation for each <<mapping-params,mapping parameter>> indicates\nwhether you can update it for an existing field using the\n<<indices-put-mapping,update mapping API>>. To update these parameters for an\nexisting field, follow these steps:\n\n. Update the index template used by the data stream. This ensures the updated\nfield mapping is added to future backing indices created for the stream.\n+\n--\nFor example, `my-data-stream-template` is an existing index template used by\n`my-data-stream`.\n\nThe following <<index-templates,create or update index template>> request changes the\nargument for the `host.ip` field's <<ignore-malformed,`ignore_malformed`>>\nmapping parameter to `true`.\n\n[source,console]\n----\nPUT /_index_template/my-data-stream-template\n{\n  \"index_patterns\": [ \"my-data-stream*\" ],\n  \"data_stream\": { },\n  \"priority\": 500,\n  \"template\": {\n    \"mappings\": {\n      \"properties\": {\n        \"host\": {\n          \"properties\": {\n            \"ip\": {\n              \"type\": \"ip\",\n              \"ignore_malformed\": true            <1>\n            }\n          }\n        }\n      }\n    }\n  }\n}\n----\n<1> Changes the `host.ip` field's `ignore_malformed` value to `true`.\n--\n\n. Use the <<indices-put-mapping,update mapping API>> to apply the mapping changes\nto the data stream. By default, this applies the changes to the stream's\nexisting backing indices, including the write index.\n+\n--\nThe following <<indices-put-mapping,update mapping API>> request targets\n`my-data-stream`. The request changes the argument for the `host.ip`\nfield's `ignore_malformed` mapping parameter to `true`.\n\n[source,console]\n----\nPUT /my-data-stream/_mapping\n{\n  \"properties\": {\n    \"host\": {\n      \"properties\": {\n        \"ip\": {\n          \"type\": \"ip\",\n          \"ignore_malformed\": true\n        }\n      }\n    }\n  }\n}\n----\n--\n+\nTo apply the mapping changes only to the stream's write index, set the put\nmapping API's `write_index_only` query parameter to `true`.\n+\n--\nThe following update mapping request changes the `host.ip` field's mapping only for\n`my-data-stream`'s write index. The change is not applied to the\nstream's other backing indices.\n\n[source,console]\n----\nPUT /my-data-stream/_mapping?write_index_only=true\n{\n  \"properties\": {\n    \"host\": {\n      \"properties\": {\n        \"ip\": {\n          \"type\": \"ip\",\n          \"ignore_malformed\": true\n        }\n      }\n    }\n  }\n}\n----\n--\n\nExcept for supported mapping parameters, we don't recommend you change the\nmapping or field data type of existing fields, even in a data stream's matching\nindex template or its backing indices. Changing the mapping of an existing\nfield could invalidate any data that\u2019s already indexed.\n\nIf you need to change the mapping of an existing field, create a new\ndata stream and reindex your data into it. See\n<<data-streams-use-reindex-to-change-mappings-settings>>.\n\n[discrete]\n[[change-dynamic-index-setting-for-a-data-stream]]\n==== Change a dynamic index setting for a data stream\n\nTo change a <<index-modules-settings,dynamic index setting>> for a data stream,\nfollow these steps:\n\n. Update the index template used by the data stream. This ensures the setting is\napplied to future backing indices created for the stream.\n+\n--\nFor example, `my-data-stream-template` is an existing index template used by\n`my-data-stream`.\n\nThe following <<index-templates,create or update index template>> request changes the\ntemplate's `index.refresh_interval` index setting to `30s` (30 seconds).\n\n[source,console]\n----\nPUT /_index_template/my-data-stream-template\n{\n  \"index_patterns\": [ \"my-data-stream*\" ],\n  \"data_stream\": { },\n  \"priority\": 500,\n  \"template\": {\n    \"settings\": {\n      \"index.refresh_interval\": \"30s\"             <1>\n    }\n  }\n}\n----\n<1> Changes the `index.refresh_interval` setting to `30s` (30 seconds).\n--\n\n. Use the <<indices-update-settings,update index settings API>> to update the\nindex setting for the data stream. By default, this applies the setting to\nthe stream's existing backing indices, including the write index.\n+\n--\nThe following update index settings API request updates the\n`index.refresh_interval` setting for `my-data-stream`.\n\n[source,console]\n----\nPUT /my-data-stream/_settings\n{\n  \"index\": {\n    \"refresh_interval\": \"30s\"\n  }\n}\n----\n--\n\nIMPORTANT: To change the `index.lifecycle.name` setting, first use the\n<<ilm-remove-policy,remove policy API>> to remove the existing {ilm-init}\npolicy. See <<switch-lifecycle-policies>>.\n\n[discrete]\n[[change-static-index-setting-for-a-data-stream]]\n==== Change a static index setting for a data stream\n\n<<index-modules-settings,Static index settings>> can only be set when a backing\nindex is created. You cannot update static index settings using the\n<<indices-update-settings,update index settings API>>.\n\nTo apply a new static setting to future backing indices, update the index\ntemplate used by the data stream. The setting is automatically applied to any\nbacking index created after the update.\n\nFor example, `my-data-stream-template` is an existing index template used by\n`my-data-stream`.\n\nThe following <<index-templates,create or update index template API>> requests\nadds new `sort.field` and `sort.order index` settings to the template.\n\n[source,console]\n----\nPUT /_index_template/my-data-stream-template\n{\n  \"index_patterns\": [ \"my-data-stream*\" ],\n  \"data_stream\": { },\n  \"priority\": 500,\n  \"template\": {\n    \"settings\": {\n      \"sort.field\": [ \"@timestamp\"],             <1>\n      \"sort.order\": [ \"desc\"]                    <2>\n    }\n  }\n}\n----\n<1> Adds the `sort.field` index setting.\n<2> Adds the `sort.order` index setting.\n\nIf wanted, you can <<manually-roll-over-a-data-stream,roll over the data\nstream>> to immediately apply the setting to the data stream\u2019s write index. This\naffects any new data added to the stream after the rollover. However, it does\nnot affect the data stream's existing backing indices or existing data.\n\nTo apply static setting changes to existing backing indices, you must create a\nnew data stream and reindex your data into it. See\n<<data-streams-use-reindex-to-change-mappings-settings>>.\n\n[discrete]\n[[data-streams-use-reindex-to-change-mappings-settings]]\n==== Use reindex to change mappings or settings\n\nYou can use a reindex to change the mappings or settings of a data stream. This\nis often required to change the data type of an existing field or update static\nindex settings for backing indices.\n\nTo reindex a data stream, first create or update an index template so that it\ncontains the wanted mapping or setting changes. You can then reindex the\nexisting data stream into a new stream matching the template. This applies the\nmapping and setting changes in the template to each document and backing index\nadded to the new data stream. These changes also affect any future backing\nindex created by the new stream.\n\nFollow these steps:\n\n. Choose a name or index pattern for a new data stream. This new data\nstream will contain data from your existing stream.\n+\n--\nYou can use the resolve index API to check if the name or pattern matches any\nexisting indices, aliases, or data streams. If so, you should consider using\nanother name or pattern.\n\nThe following resolve index API request checks for any existing indices,\naliases, or data streams that start with `new-data-stream`. If not, the\n`new-data-stream*` index pattern can be used to create a new data stream.\n\n[source,console]\n----\nGET /_resolve/index/new-data-stream*\n----\n\nThe API returns the following response, indicating no existing targets match\nthis pattern.\n\n[source,console-result]\n----\n{\n  \"indices\": [ ],\n  \"aliases\": [ ],\n  \"data_streams\": [ ]\n}\n----\n// TESTRESPONSE[s/\"data_streams\": \\[ \\]/\"data_streams\": $body.data_streams/]\n--\n\n. Create or update an index template. This template should contain the\nmappings and settings you'd like to apply to the new data stream's backing\nindices.\n+\nThis index template must meet the\n<<create-index-template,requirements for a data stream template>>. It\nshould also contain your previously chosen name or index pattern in the\n`index_patterns` property.\n+\nTIP: If you are only adding or changing a few things, we recommend you create a\nnew template by copying an existing one and modifying it as needed.\n+\n--\nFor example, `my-data-stream-template` is an existing index template used by\n`my-data-stream`.\n\nThe following <<index-templates,create or update index template API>> request\ncreates a new index template, `new-data-stream-template`.\n`new-data-stream-template` uses `my-data-stream-template` as its basis, with the\nfollowing changes:\n\n* The index pattern in `index_patterns` matches any index or data stream\n  starting with `new-data-stream`.\n* The `@timestamp` field mapping uses the `date_nanos` field data type rather\n  than the `date` data type.\n* The template includes `sort.field` and `sort.order` index settings, which were\n  not in the original `my-data-stream-template` template.\n\n[source,console]\n----\nPUT /_index_template/new-data-stream-template\n{\n  \"index_patterns\": [ \"new-data-stream*\" ],\n  \"data_stream\": { },\n  \"priority\": 500,\n  \"template\": {\n    \"mappings\": {\n      \"properties\": {\n        \"@timestamp\": {\n          \"type\": \"date_nanos\"                 <1>\n        }\n      }\n    },\n    \"settings\": {\n      \"sort.field\": [ \"@timestamp\"],          <2>\n      \"sort.order\": [ \"desc\"]                 <3>\n    }\n  }\n}\n----\n<1>  Changes the `@timestamp` field mapping to the `date_nanos` field data type.\n<2>  Adds the `sort.field` index setting.\n<3>  Adds the `sort.order` index setting.\n--\n\n. Use the <<indices-create-data-stream,create data stream API>> to manually\ncreate the new data stream. The name of the data stream must match the index\npattern defined in the new template's `index_patterns` property.\n+\nWe do not recommend <<create-data-stream,indexing new data\nto create this data stream>>. Later, you will reindex older data from an\nexisting data stream into this new stream. This could result in one or more\nbacking indices that contains a mix of new and old data.\n+\n[IMPORTANT]\n======\n[[data-stream-mix-new-old-data]]\n*Mixing new and old data in a data stream*\n\nWhile mixing new and old data is safe, it could interfere with data retention.\nIf you delete older indices, you could accidentally delete a backing index that\ncontains both new and old data. To prevent premature data loss, you would need\nto retain such a backing index until you are ready to delete its newest data.\n======\n+\n--\nThe following create data stream API request targets `new-data-stream`, which\nmatches the index pattern for `new-data-stream-template`.\nBecause no existing index or data stream uses this name, this request creates\nthe `new-data-stream` data stream.\n\n[source,console]\n----\nPUT /_data_stream/new-data-stream\n----\n// TEST[s/new-data-stream/new-data-stream-two/]\n--\n\n. If you do not want to mix new and old data in your new data stream, pause the\nindexing of new documents. While mixing old and new data is safe, it could\ninterfere with data retention. See <<data-stream-mix-new-old-data,Mixing new and\nold data in a data stream>>.\n\n. If you use {ilm-init} to <<getting-started-index-lifecycle-management,automate\nrollover>>, reduce the {ilm-init} poll interval. This ensures the current write\nindex doesn\u2019t grow too large while waiting for the rollover check. By default,\n{ilm-init} checks rollover conditions every 10 minutes.\n+\n--\nThe following <<cluster-update-settings,cluster update settings API>> request\nlowers the `indices.lifecycle.poll_interval` setting to `1m` (one minute).\n\n[source,console]\n----\nPUT /_cluster/settings\n{\n  \"persistent\": {\n    \"indices.lifecycle.poll_interval\": \"1m\"\n  }\n}\n----\n--\n\n. Reindex your data to the new data stream using an `op_type` of `create`.\n+\nIf you want to partition the data in the order in which it was originally\nindexed, you can run separate reindex requests. These reindex requests can use\nindividual backing indices as the source. You can use the\n<<indices-get-data-stream,get data stream API>> to retrieve a list of backing\nindices.\n+\n--\nFor example, you plan to reindex data from `my-data-stream` into\n`new-data-stream`. However, you want to submit a separate reindex request for\neach backing index in `my-data-stream`, starting with the oldest backing index.\nThis preserves the order in which the data was originally indexed.\n\nThe following get data stream API request retrieves information about\n`my-data-stream`, including a list of its backing indices.\n\n[source,console]\n----\nGET /_data_stream/my-data-stream\n----\n\nThe response's `indices` property contains an array of the stream's current\nbacking indices. The first item in the array contains information about the\nstream's oldest backing index.\n\n[source,console-result]\n----\n{\n  \"data_streams\": [\n    {\n      \"name\": \"my-data-stream\",\n      \"timestamp_field\": {\n        \"name\": \"@timestamp\"\n      },\n      \"indices\": [\n        {\n          \"index_name\": \".ds-my-data-stream-2099.03.07-000001\", <1>\n          \"index_uuid\": \"Gpdiyq8sRuK9WuthvAdFbw\",\n          \"prefer_ilm\": true,\n          \"managed_by\": \"Unmanaged\"\n        },\n        {\n          \"index_name\": \".ds-my-data-stream-2099.03.08-000002\",\n          \"index_uuid\": \"_eEfRrFHS9OyhqWntkgHAQ\",\n          \"prefer_ilm\": true,\n          \"managed_by\": \"Unmanaged\"\n        }\n      ],\n      \"generation\": 2,\n      \"status\": \"GREEN\",\n      \"next_generation_managed_by\": \"Unmanaged\",\n      \"prefer_ilm\": true,\n      \"template\": \"my-data-stream-template\",\n      \"hidden\": false,\n      \"system\": false,\n      \"allow_custom_routing\": false,\n      \"replicated\": false,\n      \"rollover_on_write\": false\n    }\n  ]\n}\n----\n// TESTRESPONSE[s/\"index_uuid\": \"Gpdiyq8sRuK9WuthvAdFbw\"/\"index_uuid\": $body.data_streams.0.indices.0.index_uuid/]\n// TESTRESPONSE[s/\"index_uuid\": \"_eEfRrFHS9OyhqWntkgHAQ\"/\"index_uuid\": $body.data_streams.0.indices.1.index_uuid/]\n// TESTRESPONSE[s/\"index_name\": \".ds-my-data-stream-2099.03.07-000001\"/\"index_name\": $body.data_streams.0.indices.0.index_name/]\n// TESTRESPONSE[s/\"index_name\": \".ds-my-data-stream-2099.03.08-000002\"/\"index_name\": $body.data_streams.0.indices.1.index_name/]\n// TESTRESPONSE[s/\"status\": \"GREEN\"/\"status\": \"YELLOW\",\"failure_store\":{\"enabled\": false, \"indices\": [], \"rollover_on_write\": true}/]\n\n<1> First item in the `indices` array for `my-data-stream`. This item contains\ninformation about the stream's oldest backing index,\n`.ds-my-data-stream-2099.03.07-000001`.\n\nThe following <<docs-reindex,reindex API>> request copies documents from\n`.ds-my-data-stream-2099.03.07-000001` to `new-data-stream`. The request's\n`op_type` is `create`.\n\n[source,console]\n----\nPOST /_reindex\n{\n  \"source\": {\n    \"index\": \".ds-my-data-stream-2099.03.07-000001\"\n  },\n  \"dest\": {\n    \"index\": \"new-data-stream\",\n    \"op_type\": \"create\"\n  }\n}\n----\n// TEST[setup:my_index]\n// TEST[s/.ds-my-data-stream-2099.03.07-000001/my-index-000001/]\n--\n+\nYou can also use a query to reindex only a subset of documents with each\nrequest.\n+\n--\nThe following <<docs-reindex,reindex API>> request copies documents from\n`my-data-stream` to `new-data-stream`. The request\nuses a <<query-dsl-range-query,`range` query>> to only reindex documents with a\ntimestamp within the last week. Note the request's `op_type` is `create`.\n\n[source,console]\n----\nPOST /_reindex\n{\n  \"source\": {\n    \"index\": \"my-data-stream\",\n    \"query\": {\n      \"range\": {\n        \"@timestamp\": {\n          \"gte\": \"now-7d/d\",\n          \"lte\": \"now/d\"\n        }\n      }\n    }\n  },\n  \"dest\": {\n    \"index\": \"new-data-stream\",\n    \"op_type\": \"create\"\n  }\n}\n----\n--\n\n. If you previously changed your {ilm-init} poll interval, change it back to its\noriginal value when reindexing is complete. This prevents unnecessary load on\nthe master node.\n+\n--\nThe following cluster update settings API request resets the\n`indices.lifecycle.poll_interval` setting to its default value.\n\n[source,console]\n----\nPUT /_cluster/settings\n{\n  \"persistent\": {\n    \"indices.lifecycle.poll_interval\": null\n  }\n}\n----\n--\n\n. Resume indexing using the new data stream. Searches on this stream will now\nquery your new data and the reindexed data.\n\n. Once you have verified that all reindexed data is available in the new\ndata stream, you can safely remove the old stream.\n+\n--\nThe following <<indices-delete-data-stream,delete data stream API>> request\ndeletes `my-data-stream`. This request also deletes the stream's\nbacking indices and any data they contain.\n\n[source,console]\n----\nDELETE /_data_stream/my-data-stream\n----\n--\n\n[discrete]\n[[data-streams-change-alias]]\n=== Update or add an alias to a data stream\n\nUse the <<indices-aliases,aliases API>> to update an existing data stream's\naliases. Changing an existing data stream's aliases in its index pattern has no\neffect.\n\ninclude::../alias.asciidoc[tag=alias-multiple-actions-example]\n"
}