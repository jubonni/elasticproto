{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.578075",
        "size": 15612,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/defining-roles.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "defining-roles",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[defining-roles]]\n=== Defining roles\n\nA role is defined by the following JSON structure:\n\n[source,js]\n-----\n{\n  \"run_as\": [ ... ], <1>\n  \"cluster\": [ ... ], <2>\n  \"global\": { ... }, <3>\n  \"indices\": [ ... ], <4>\n  \"applications\": [ ... ], <5>\n  \"remote_indices\": [ ... ], <6>\n  \"remote_cluster\": [ ... ], <7>\n  \"metadata\": { ... }, <8>\n  \"description\": \"...\" <9>\n}\n-----\n// NOTCONSOLE\n\n<1> A list of usernames the owners of this role can <<run-as-privilege, impersonate>>.\n<2> A list of cluster privileges. These privileges define the\n    cluster level actions users with this role are able to execute. This field\n    is optional (missing `cluster` privileges effectively mean no cluster level\n    permissions).\n<3> An object defining global privileges. A global privilege is a form of\n    cluster privilege that is request sensitive. A standard cluster privilege\n    makes authorization decisions based solely on the action being executed.\n    A global privilege also considers the parameters included in the request.\n    Support for global privileges is currently limited to the management of\n    application privileges. This field is optional.\n<4> A list of indices permissions entries. This field is optional (missing `indices`\n    privileges effectively mean no index level permissions).\n<5> A list of application privilege entries. This field is optional.\n<6> A list of indices permissions entries for\n    <<remote-clusters-api-key,remote clusters configured with the API key based model>>.\n    This field is optional (missing `remote_indices` privileges effectively mean\n    no index level permissions for any API key based remote clusters).\n<7> A list of cluster permissions entries for\n    <<remote-clusters-api-key,remote clusters configured with the API key based model>>.\n    This field is optional (missing `remote_cluster` privileges effectively means\n    no additional cluster permissions for any API key based remote clusters).\n<8> Metadata field associated with the role, such as `metadata.app_tag`.\n    Metadata is internally indexed as a <<flattened,flattened>> field type.\n    This means that all sub-fields act like `keyword` fields when querying and sorting.\n    Metadata values can be simple values, but also lists and maps.\n    This field is optional.\n<9> A string value with the description text of the role.\n    The maximum length of it is `1000` chars.\n    The field is internally indexed as a <<text-field-type,text>> field type\n    (with default values for all parameters).\n    This field is optional.\n\n[[valid-role-name]]\nNOTE: Role names must be at least 1 and no more than 507 characters. They can\n      contain alphanumeric characters (`a-z`, `A-Z`, `0-9`), spaces,\n      punctuation, and printable symbols in the {wikipedia}/Basic_Latin_(Unicode_block)[Basic Latin (ASCII) block].\n      Leading or trailing whitespace is not allowed.\n\n[[roles-indices-priv]]\n==== Indices privileges\n\nThe following describes the structure of an indices permissions entry:\n\n[source,js]\n-------\n{\n  \"names\": [ ... ], <1>\n  \"privileges\": [ ... ], <2>\n  \"field_security\" : { ... }, <3>\n  \"query\": \"...\", <4>\n  \"allow_restricted_indices\": false <5>\n}\n-------\n// NOTCONSOLE\n\n<1> A list of data streams, indices, and aliases to which the permissions\n    in this entry apply. Supports wildcards (`*`).\n<2> The index level privileges the owners of the role have on the associated\n    data streams and indices specified in the `names` argument.\n<3> Specification for document fields the owners of the role have read access to.\n    See <<field-and-document-access-control>> for details.\n<4> A search query that defines the documents the owners of the role have read\n    access to. A document within the associated data streams and indices must match this query\n    in order for it to be accessible by the owners of the role.\n<5> Restricted indices are a special category of indices that are used\n    internally to store configuration data and should not be directly accessed.\n    Only internal system roles should normally grant privileges over the restricted indices.\n    **Toggling this flag is very strongly discouraged because it could effectively grant unrestricted\n    operations on critical data, making the entire system unstable or leaking sensitive information.**\n    If however, for administrative purposes, you need to create a role with privileges covering\n    restricted indices, you must set this field to `true` (default is `false`), and then the\n    `names` field will cover the restricted indices as well.\n\n[TIP]\n==============================================================================\nThe `names` parameter accepts wildcard and regular expressions that may refer to\nmultiple data streams, indices, and aliases.\n\n* Wildcard (default) - simple wildcard matching where `*` is a placeholder\n  for zero or more characters, `?` is a placeholder for a single character\n  and `\\` may be used as an escape character.\n\n* Regular Expressions - A more powerful syntax for matching more complex\n  patterns. This regular expression is based on Lucene's regexp automaton\n  syntax. To enable this syntax, it must be wrapped within a pair of\n  forward slashes (`/`). Any pattern starting with `/` and not ending with\n  `/` is considered to be malformed.\n\n.Example Regular Expressions\n[source,yaml]\n------------------------------------------------------------------------------\n\"foo-bar\":               # match the literal `foo-bar`\n\"foo-*\":                 # match anything beginning with \"foo-\"\n\"logstash-201?-*\":       # ? matches any one character\n\"/.*-201[0-9]-.*/\":      # use a regex to match anything containing 2010-2019\n\"/foo\":                  # syntax error - missing final /\n------------------------------------------------------------------------------\n==============================================================================\n\n[[roles-global-priv]]\n==== Global privileges\nThe following describes the structure of the global privileges entry:\n\n[source,js]\n-------\n{\n  \"application\": {\n    \"manage\": {    <1>\n      \"applications\": [ ... ] <2>\n    }\n  },\n  \"profile\": {\n    \"write\": { <3>\n      \"applications\": [ ... ] <4>\n    }\n  }\n}\n-------\n// NOTCONSOLE\n\n<1> The privilege for the ability to manage application privileges\n<2> The list of application names that may be managed. This list supports\n    wildcards (e.g. `\"myapp-*\"`) and regular expressions (e.g.\n    `\"/app[0-9]*/\"`)\n<3> The privilege for the ability to write the `access` and `data` of any user profile\n<4> The list of names, wildcards and regular expressions to which the write\nprivilege is restricted to\n\n[[roles-application-priv]]\n==== Application privileges\nThe following describes the structure of an application privileges entry:\n\n[source,js]\n-------\n{\n  \"application\": \"my_app\", <1>\n  \"privileges\": [ ... ],   <2>\n  \"resources\": [ ... ]     <3>\n}\n-------\n// NOTCONSOLE\n\n<1> The name of the application.\n<2> The list of the names of the application privileges to grant to this role.\n<3> The resources to which those privileges apply. These are handled in the same\n    way as index name pattern in `indices` permissions. These resources do not\n    have any special meaning to the {es} {security-features}.\n\nFor details about the validation rules for these fields, see the\n<<security-api-put-privileges,add application privileges API>>.\n\nA role may refer to application privileges that do not exist - that is, they\nhave not yet been defined through the add application privileges API (or they\nwere defined, but have since been deleted). In this case, the privilege has\nno effect, and will not grant any actions in the\n<<security-api-has-privileges,has privileges API>>.\n\n[[roles-remote-indices-priv]]\n==== Remote indices privileges\n\nFor <<remote-clusters-api-key,remote clusters configured with the API key based model>>, remote indices privileges\ncan be used to specify desired indices privileges for matching remote clusters. The final\neffective index privileges will be an intersection of the remote indices privileges\nand the <<security-api-create-cross-cluster-api-key,cross-cluster API key>>'s indices privileges.\n\nNOTE: Remote indices are effective for remote clusters configured with the API key based model.\nThey have no effect for remote clusters configured with the certificate based model.\n\nThe remote indices privileges entry has an extra mandatory `clusters` field compared to\nan <<roles-indices-priv,indices privileges entry>>. Otherwise the two have identical structure.\nThe following describes the structure of a remote indices permissions entry:\n\n[source,js]\n-------\n{\n  \"clusters\": [ ... ], <1>\n  \"names\": [ ... ], <2>\n  \"privileges\": [ ... ], <3>\n  \"field_security\" : { ... }, <4>\n  \"query\": \"...\", <5>\n  \"allow_restricted_indices\": false <6>\n}\n-------\n// NOTCONSOLE\n<1> A list of remote cluster aliases. It supports literal strings as well as\n    <<api-multi-index,wildcards>> and <<regexp-syntax,regular expressions>>.\n    This field is required.\n<2> A list of data streams, indices, and aliases to which the permissions\n    in this entry apply. Supports wildcards (`*`).\n<3> The index level privileges the owners of the role have on the associated\n    data streams and indices specified in the `names` argument.\n<4> Specification for document fields the owners of the role have read access to.\n    See <<field-and-document-access-control>> for details.\n<5> A search query that defines the documents the owners of the role have read\n    access to. A document within the associated data streams and indices must match this query\n    in order for it to be accessible by the owners of the role.\n<6> Restricted indices are a special category of indices that are used\n    internally to store configuration data and should not be directly accessed.\n    Only internal system roles should normally grant privileges over the restricted indices.\n    **Toggling this flag is very strongly discouraged because it could effectively grant unrestricted\n    operations on critical data, making the entire system unstable or leaking sensitive information.**\n    If however, for administrative purposes, you need to create a role with privileges covering\n    restricted indices, you must set this field to `true` (default is `false`), and then the\n    `names` field will cover the restricted indices as well.\n\n[[roles-remote-cluster-priv]]\n==== Remote cluster privileges\n\nFor <<remote-clusters-api-key,remote clusters configured with the API key based model>>, remote cluster privileges\ncan be used to specify additional cluster privileges for matching remote clusters.\n\nNOTE: Remote cluster privileges are only effective for remote clusters configured with the API key based model.\nThey have no effect on remote clusters configured with the certificate based model.\n\nThe following describes the structure of a remote cluster permissions entry:\n\n[source,js]\n-------\n{\n  \"clusters\": [ ... ], <1>\n  \"privileges\": [ ... ] <2>\n}\n-------\n// NOTCONSOLE\n<1> A list of remote cluster aliases. It supports literal strings as well as\n<<api-multi-index,wildcards>> and <<regexp-syntax,regular expressions>>.\nThis field is required.\n<2> The cluster level privileges for the remote cluster. The allowed values here are a subset of the\n<<privileges-list-cluster,cluster privileges>>. This field is required.\n\nThe `monitor_enrich` privilege for remote clusters was introduced in version\n8.15.0. Currently, this is the only privilege available for remote clusters and\nis required to enable users to use the `ENRICH` keyword in ES|QL queries across\nclusters.\n\n==== Example\n\nThe following snippet shows an example definition of a `clicks_admin` role:\n\n[source,console]\n-----------\nPOST /_security/role/clicks_admin\n{\n  \"run_as\": [ \"clicks_watcher_1\" ],\n  \"cluster\": [ \"monitor\" ],\n  \"indices\": [\n    {\n      \"names\": [ \"events-*\" ],\n      \"privileges\": [ \"read\" ],\n      \"field_security\" : {\n        \"grant\" : [ \"category\", \"@timestamp\", \"message\" ]\n      },\n      \"query\": \"{\\\"match\\\": {\\\"category\\\": \\\"click\\\"}}\"\n    }\n  ]\n}\n-----------\n\nBased on the above definition, users owning the `clicks_admin` role can:\n\n  * Impersonate the `clicks_watcher_1` user and execute requests on its behalf.\n  * Monitor the {es} cluster\n  * Read data from all indices prefixed with `events-`\n  * Within these indices, only read the events of the `click` category\n  * Within these document, only read the `category`, `@timestamp` and `message`\n    fields.\n\nTIP:  For a complete list of available <<security-privileges, cluster and indices privileges>>\n\nThere are two available mechanisms to define roles: using the _Role Management APIs_\nor in local files on the {es} nodes. You can also implement\ncustom roles providers. If you need to integrate with another system to retrieve\nuser roles, you can build a custom roles provider plugin. For more information,\nsee <<custom-roles-authorization>>.\n\n[discrete]\n[[roles-management-ui]]\n=== Role management UI\n\nYou can manage users and roles easily in {kib}. To\nmanage roles, log in to {kib} and go to *Management / Security / Roles*.\n\n[discrete]\n[[roles-management-api]]\n=== Role management API\n\nThe _Role Management APIs_ enable you to add, update, remove and retrieve roles\ndynamically. When you use the APIs to manage roles in the `native` realm, the\nroles are stored in an internal {es} index. For more information and examples,\nsee <<security-role-apis>>.\n\n[discrete]\n[[roles-management-file]]\n=== File-based role management\n\nApart from the _Role Management APIs_, roles can also be defined in local\n`roles.yml` file located in `ES_PATH_CONF`. This is a YAML file where each\nrole definition is keyed by its name.\n\n[IMPORTANT]\n==============================\nIf the same role name is used in the `roles.yml` file and through the\n_Role Management APIs_, the role found in the file will be used.\n==============================\n\nWhile the _Role Management APIs_ is the preferred mechanism to define roles,\nusing the `roles.yml` file becomes useful if you want to define fixed roles that\nno one (beside an administrator having physical access to the {es} nodes)\nwould be able to change. Please note however, that the `roles.yml` file is provided as a\nminimal administrative function and is not intended to cover and be used\nto define roles for all use cases.\n\n[IMPORTANT]\n==============================\nYou cannot view, edit, or remove any roles that are defined in `roles.yml` by\nusing the <<roles-management-ui,role management UI>> or the\n<<roles-management-api,role management APIs>>.\n==============================\n\n[IMPORTANT]\n==============================\nThe `roles.yml` file is managed locally by the node and is not globally by the\ncluster. This means that with a typical multi-node cluster, the exact same\nchanges need to be applied on each and every node in the cluster.\n\nA safer approach would be to apply the change on one of the nodes and have the\n`roles.yml` distributed/copied to all other nodes in the cluster (either\nmanually or using a configuration management system such as Puppet or Chef).\n==============================\n\nThe following snippet shows an example of the `roles.yml` file configuration:\n\n[source,yaml]\n-----------------------------------\nclick_admins:\n  run_as: [ 'clicks_watcher_1' ]\n  cluster: [ 'monitor' ]\n  indices:\n    - names: [ 'events-*' ]\n      privileges: [ 'read' ]\n      field_security:\n        grant: ['category', '@timestamp', 'message' ]\n      query: '{\"match\": {\"category\": \"click\"}}'\n-----------------------------------\n\n{es} continuously monitors the `roles.yml` file and automatically picks\nup and applies any changes to it.\n"
}