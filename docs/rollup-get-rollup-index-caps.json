{
    "meta": {
        "timestamp": "2024-11-01T02:49:26.266067",
        "size": 4848,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/rollup-get-rollup-index-caps.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "rollup-get-rollup-index-caps",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[rollup-get-rollup-index-caps]]\n=== Get rollup index capabilities API\n++++\n<titleabbrev>Get rollup index caps</titleabbrev>\n++++\n\ndeprecated::[8.11.0,\"Rollups will be removed in a future version. Use <<downsampling,downsampling>> instead.\"]\n\nReturns the rollup capabilities of all jobs inside of a rollup index (e.g. the\nindex where rollup data is stored).\n\n[[rollup-get-rollup-index-caps-request]]\n==== {api-request-title}\n\n`GET <target>/_rollup/data`\n\n[[rollup-get-rollup-index-caps-prereqs]]\n==== {api-prereq-title}\n\n* If the {es} {security-features} are enabled, you must have any of the `read`,\n`view_index_metadata`, or `manage` <<privileges-list-indices,index privilege>>\non the index that stores the rollup results. For more information, see\n<<security-privileges>>.\n\n[[rollup-get-rollup-index-caps-desc]]\n==== {api-description-title}\n\nA single rollup index may store the data for multiple {rollup-jobs}, and may\nhave a variety of capabilities depending on those jobs.\n\nThis API will allow you to determine:\n\n1. What jobs are stored in an index (or indices specified via a pattern)?\n2. What target indices were rolled up, what fields were used in those rollups\nand what aggregations can be performed on each job?\n\n[[rollup-get-rollup-index-caps-path-params]]\n==== {api-path-parms-title}\n\n`<target>`::\n(Required, string) Data stream or index to check for rollup capabilities.\nWildcard (`*`) expressions are supported.\n\n[[rollup-get-rollup-index-caps-example]]\n==== {api-examples-title}\n\nImagine we have an index named `sensor-1` full of raw data. We know that the\ndata will grow over time, so there will be a `sensor-2`, `sensor-3`, etc.\nLet's create a {rollup-job} that stores its data in `sensor_rollup`:\n\n[source,console]\n--------------------------------------------------\nPUT _rollup/job/sensor\n{\n  \"index_pattern\": \"sensor-*\",\n  \"rollup_index\": \"sensor_rollup\",\n  \"cron\": \"*/30 * * * * ?\",\n  \"page_size\": 1000,\n  \"groups\": {\n    \"date_histogram\": {\n      \"field\": \"timestamp\",\n      \"fixed_interval\": \"1h\",\n      \"delay\": \"7d\"\n    },\n    \"terms\": {\n      \"fields\": [ \"node\" ]\n    }\n  },\n  \"metrics\": [\n    {\n      \"field\": \"temperature\",\n      \"metrics\": [ \"min\", \"max\", \"sum\" ]\n    },\n    {\n      \"field\": \"voltage\",\n      \"metrics\": [ \"avg\" ]\n    }\n  ]\n}\n--------------------------------------------------\n// TEST[setup:sensor_index]\n\nIf at a later date, we'd like to determine what jobs and capabilities were\nstored in the `sensor_rollup` index, we can use the get rollup index API:\n\n[source,console]\n--------------------------------------------------\nGET /sensor_rollup/_rollup/data\n--------------------------------------------------\n// TEST[continued]\n\nNote how we are requesting the concrete rollup index name (`sensor_rollup`) as\nthe first part of the URL. This will yield the following response:\n\n[source,console-result]\n----\n{\n  \"sensor_rollup\" : {\n    \"rollup_jobs\" : [\n      {\n        \"job_id\" : \"sensor\",\n        \"rollup_index\" : \"sensor_rollup\",\n        \"index_pattern\" : \"sensor-*\",\n        \"fields\" : {\n          \"node\" : [\n            {\n              \"agg\" : \"terms\"\n            }\n          ],\n          \"temperature\" : [\n            {\n              \"agg\" : \"min\"\n            },\n            {\n              \"agg\" : \"max\"\n            },\n            {\n              \"agg\" : \"sum\"\n            }\n          ],\n          \"timestamp\" : [\n            {\n              \"agg\" : \"date_histogram\",\n              \"time_zone\" : \"UTC\",\n              \"fixed_interval\" : \"1h\",\n              \"delay\": \"7d\"\n            }\n          ],\n          \"voltage\" : [\n            {\n              \"agg\" : \"avg\"\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n----\n\n\nThe response that is returned contains information that is similar to the\noriginal rollup configuration, but formatted differently. First, there are some\nhouse-keeping details: the {rollup-job} ID, the index that holds the rolled data,\nthe index pattern that the job was targeting.\n\nNext it shows a list of fields that contain data eligible for rollup searches.\nHere we see four fields: `node`, `temperature`, `timestamp` and `voltage`. Each\nof these fields list the aggregations that are possible. For example, you can\nuse a min, max, or sum aggregation on the `temperature` field, but only a\n`date_histogram` on `timestamp`.\n\nNote that the `rollup_jobs` element is an array; there can be multiple,\nindependent jobs configured for a single index or index pattern. Each of these\njobs may have different configurations, so the API returns a list of all the\nvarious configurations available.\n\nLike other APIs that interact with indices, you can specify index patterns\ninstead of explicit indices:\n\n[source,console]\n--------------------------------------------------\nGET /*_rollup/_rollup/data\n--------------------------------------------------\n// TEST[continued]\n"
}