{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.172066",
        "size": 4363,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-match-enrich-policy-type.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "geo-match-enrich-policy-type",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[geo-match-enrich-policy-type]]\n=== Example: Enrich your data based on geolocation\n\n`geo_match` <<enrich-policy,enrich policies>> match enrich data to incoming\ndocuments based on a geographic location, using a\n<<query-dsl-geo-shape-query,`geo_shape` query>>.\n\nThe following example creates a `geo_match` enrich policy that adds postal\ncodes to incoming documents based on a set of coordinates. It then adds the\n`geo_match` enrich policy to a processor in an ingest pipeline.\n\nUse the <<indices-create-index,create index API>> to create a source index\ncontaining at least one `geo_shape` field.\n\n[source,console]\n----\nPUT /postal_codes\n{\n  \"mappings\": {\n    \"properties\": {\n      \"location\": {\n        \"type\": \"geo_shape\"\n      },\n      \"postal_code\": {\n        \"type\": \"keyword\"\n      }\n    }\n  }\n}\n----\n\nUse the <<docs-index_,index API>> to index enrich data to this source index.\n\n[source,console]\n----\nPUT /postal_codes/_doc/1?refresh=wait_for\n{\n  \"location\": {\n    \"type\": \"envelope\",\n    \"coordinates\": [ [ 13.0, 53.0 ], [ 14.0, 52.0 ] ]\n  },\n  \"postal_code\": \"96598\"\n}\n----\n// TEST[continued]\n\nUse the <<put-enrich-policy-api,create enrich policy API>> to create\nan enrich policy with the `geo_match` policy type. This policy must include:\n\n* One or more source indices\n* A `match_field`,\n  the `geo_shape` field from the source indices used to match incoming documents\n* Enrich fields from the source indices you'd like to append to incoming\n  documents\n\n[source,console]\n----\nPUT /_enrich/policy/postal_policy\n{\n  \"geo_match\": {\n    \"indices\": \"postal_codes\",\n    \"match_field\": \"location\",\n    \"enrich_fields\": [ \"location\", \"postal_code\" ]\n  }\n}\n----\n// TEST[continued]\n\nUse the <<execute-enrich-policy-api,execute enrich policy API>> to create an\nenrich index for the policy.\n\n[source,console]\n----\nPOST /_enrich/policy/postal_policy/_execute?wait_for_completion=false\n----\n// TEST[s/\\?wait_for_completion=false//]\n// TEST[continued]\n\nUse the <<put-pipeline-api,create or update pipeline API>> to create an ingest\npipeline. In the pipeline, add an <<enrich-processor,enrich processor>> that\nincludes:\n\n* Your enrich policy.\n* The `field` of incoming documents used to match the geoshape of documents\n  from the enrich index.\n* The `target_field` used to store appended enrich data for incoming documents.\n  This field contains the `match_field` and `enrich_fields` specified in your\n  enrich policy.\n* The `shape_relation`, which indicates how the processor matches geoshapes in\n  incoming documents to geoshapes in documents from the enrich index. See\n  <<_spatial_relations>> for valid options and more information.\n\n[source,console]\n----\nPUT /_ingest/pipeline/postal_lookup\n{\n  \"processors\": [\n    {\n      \"enrich\": {\n        \"description\": \"Add 'geo_data' based on 'geo_location'\",\n        \"policy_name\": \"postal_policy\",\n        \"field\": \"geo_location\",\n        \"target_field\": \"geo_data\",\n        \"shape_relation\": \"INTERSECTS\"\n      }\n    }\n  ]\n}\n----\n// TEST[continued]\n\nUse the ingest pipeline to index a document. The incoming document should\ninclude the `field` specified in your enrich processor.\n\n[source,console]\n----\nPUT /users/_doc/0?pipeline=postal_lookup\n{\n  \"first_name\": \"Mardy\",\n  \"last_name\": \"Brown\",\n  \"geo_location\": \"POINT (13.5 52.5)\"\n}\n----\n// TEST[continued]\n\nTo verify the enrich processor matched and appended the appropriate field data,\nuse the <<docs-get,get API>> to view the indexed document.\n\n[source,console]\n----\nGET /users/_doc/0\n----\n// TEST[continued]\n\nThe API returns the following response:\n\n[source,console-result]\n----\n{\n  \"found\": true,\n  \"_index\": \"users\",\n  \"_id\": \"0\",\n  \"_version\": 1,\n  \"_seq_no\": 55,\n  \"_primary_term\": 1,\n  \"_source\": {\n    \"geo_data\": {\n      \"location\": {\n        \"type\": \"envelope\",\n        \"coordinates\": [[13.0, 53.0], [14.0, 52.0]]\n      },\n      \"postal_code\": \"96598\"\n    },\n    \"first_name\": \"Mardy\",\n    \"last_name\": \"Brown\",\n    \"geo_location\": \"POINT (13.5 52.5)\"\n  }\n}\n----\n// TESTRESPONSE[s/\"_seq_no\": \\d+/\"_seq_no\" : $body._seq_no/ s/\"_primary_term\":1/\"_primary_term\" : $body._primary_term/]\n\n////\n[source,console]\n--------------------------------------------------\nDELETE /_ingest/pipeline/postal_lookup\nDELETE /_enrich/policy/postal_policy\nDELETE /postal_codes\nDELETE /users\n--------------------------------------------------\n// TEST[continued]\n////\n"
}