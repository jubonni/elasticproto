{
    "meta": {
        "size": 4447,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/infer-service-openai.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "infer-service-openai",
        "version": "8.15"
    },
    "doc": "[[infer-service-openai]]\n=== OpenAI {infer} service\n\nCreates an {infer} endpoint to perform an {infer} task with the `openai` service.\n\n\n[discrete]\n[[infer-service-openai-api-request]]\n==== {api-request-title}\n\n`PUT /_inference/<task_type>/<inference_id>`\n\n[discrete]\n[[infer-service-openai-api-path-params]]\n==== {api-path-parms-title}\n\n`<inference_id>`::\n(Required, string)\ninclude::inference-shared.asciidoc[tag=inference-id]\n\n`<task_type>`::\n(Required, string)\ninclude::inference-shared.asciidoc[tag=task-type]\n+\n--\nAvailable task types:\n\n* `completion`,\n* `text_embedding`.\n--\n\n[discrete]\n[[infer-service-openai-api-request-body]]\n==== {api-request-body-title}\n\n`chunking_settings`::\n(Optional, object)\ninclude::inference-shared.asciidoc[tag=chunking-settings]\n\n`max_chunking_size`:::\n(Optional, integer)\ninclude::inference-shared.asciidoc[tag=chunking-settings-max-chunking-size]\n\n`overlap`:::\n(Optional, integer)\ninclude::inference-shared.asciidoc[tag=chunking-settings-overlap]\n\n`sentence_overlap`:::\n(Optional, integer)\ninclude::inference-shared.asciidoc[tag=chunking-settings-sentence-overlap]\n\n`strategy`:::\n(Optional, string)\ninclude::inference-shared.asciidoc[tag=chunking-settings-strategy]\n\n`service`::\n(Required, string)\nThe type of service supported for the specified task type. In this case, \n`openai`.\n\n`service_settings`::\n(Required, object)\ninclude::inference-shared.asciidoc[tag=service-settings]\n+\n--\nThese settings are specific to the `openai` service.\n--\n\n`api_key`:::\n(Required, string)\nA valid API key of your OpenAI account.\nYou can find your OpenAI API keys in your OpenAI account under the\nhttps://platform.openai.com/api-keys[API keys section].\n+\n--\ninclude::inference-shared.asciidoc[tag=api-key-admonition]\n--\n\n`model_id`:::\n(Required, string)\nThe name of the model to use for the {infer} task.\nRefer to the\nhttps://platform.openai.com/docs/guides/embeddings/what-are-embeddings[OpenAI documentation]\nfor the list of available text embedding models.\n\n`organization_id`:::\n(Optional, string)\nThe unique identifier of your organization.\nYou can find the Organization ID in your OpenAI account under\nhttps://platform.openai.com/account/organization[**Settings** > **Organizations**].\n\n`url`:::\n(Optional, string)\nThe URL endpoint to use for the requests.\nCan be changed for testing purposes.\nDefaults to `https://api.openai.com/v1/embeddings`.\n\n`rate_limit`:::\n(Optional, object)\nThe `openai` service sets a default number of requests allowed per minute depending on the task type.\nFor `text_embedding` it is set to `3000`.\nFor `completion` it is set to `500`.\nThis helps to minimize the number of rate limit errors returned from OpenAI.\nTo modify this, set the `requests_per_minute` setting of this object in your service settings:\n+\n--\ninclude::inference-shared.asciidoc[tag=request-per-minute-example]\n\nMore information about the rate limits for OpenAI can be found in your https://platform.openai.com/account/limits[Account limits].\n--\n\n`task_settings`::\n(Optional, object)\ninclude::inference-shared.asciidoc[tag=task-settings]\n+\n.`task_settings` for the `completion` task type\n[%collapsible%closed]\n=====\n`user`:::\n(Optional, string)\nSpecifies the user issuing the request, which can be used for abuse detection.\n=====\n+\n.`task_settings` for the `text_embedding` task type\n[%collapsible%closed]\n=====\n`user`:::\n(optional, string)\nSpecifies the user issuing the request, which can be used for abuse detection.\n=====\n\n\n[discrete]\n[[inference-example-openai]]\n==== OpenAI service example\n\nThe following example shows how to create an {infer} endpoint called\n`openai-embeddings` to perform a `text_embedding` task type.\n\n[source,console]\n------------------------------------------------------------\nPUT _inference/text_embedding/openai-embeddings\n{\n    \"service\": \"openai\",\n    \"service_settings\": {\n        \"api_key\": \"<api_key>\",\n        \"model_id\": \"text-embedding-ada-002\"\n    }\n}\n------------------------------------------------------------\n// TEST[skip:TBD]\n\nThe next example shows how to create an {infer} endpoint called\n`openai-completion` to perform a `completion` task type.\n\n[source,console]\n------------------------------------------------------------\nPUT _inference/completion/openai-completion\n{\n    \"service\": \"openai\",\n    \"service_settings\": {\n        \"api_key\": \"<api_key>\",\n        \"model_id\": \"gpt-3.5-turbo\"\n    }\n}\n------------------------------------------------------------\n// TEST[skip:TBD]"
}