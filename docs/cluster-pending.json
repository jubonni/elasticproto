{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.913067",
        "size": 3538,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-pending.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "cluster-pending",
        "version": "8.15"
    },
    "doc": "[[cluster-pending]]\n=== Pending cluster tasks API\n++++\n<titleabbrev>Pending cluster tasks</titleabbrev>\n++++\n\nReturns cluster-level changes that have not yet been executed.\n\n\n[[cluster-pending-api-request]]\n==== {api-request-title}\n\n`GET /_cluster/pending_tasks`\n\n[[cluster-pending-api-prereqs]]\n==== {api-prereq-title}\n\n* If the {es} {security-features} are enabled, you must have the `monitor` or\n`manage` <<privileges-list-cluster,cluster privilege>> to use this API.\n\n[[cluster-pending-api-desc]]\n==== {api-description-title}\n\nThe pending cluster tasks API returns a list of any cluster-level changes (e.g. \ncreate index, update mapping, allocate or fail shard) which have not yet been \nexecuted.\n\nNOTE: This API returns a list of any pending updates to the cluster state. These are distinct from the tasks reported by the\n<<tasks,Task Management API>> which include periodic tasks and tasks initiated by the user, such as node stats, search queries, or create\nindex requests. However, if a user-initiated task such as a create index command causes a cluster state update, the activity of this task\nmight be reported by both task api and pending cluster tasks API.\n\n\n[[cluster-pending-api-path-params]]\n==== {api-path-parms-title}\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=local]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=master-timeout]\n\n\n[[cluster-pending-api-response-body]]\n==== {api-response-body-title}\n\n`tasks`::\n    (object) A list of pending tasks.\n    \n`insert_order`::\n    (integer) The number that represents when the task has been inserted into \n    the task queue.\n    \n`priority`::\n    (string) The priority of the pending task. The valid priorities in descending priority order are: `IMMEDIATE` > `URGENT` > `HIGH` > `NORMAL` > `LOW` > `LANGUID`. \n    \n`source`::\n    (string) A general description of the cluster task that may include a reason \n    and origin. \n    \n`executing`::\n    (boolean) True or false, indicating whether the pending tasks is currently getting executed or not.\n    \n`time_in_queue_millis`::\n    (integer) The time expressed in milliseconds since the task is waiting for \n    being performed.\n    \n`time_in_queue`::\n    (string) The time since the task is waiting for being performed.\n\n\n[[cluster-pending-api-example]]\n==== {api-examples-title}\n\nUsually the request will return an empty list as cluster-level changes are fast. \nHowever, if there are tasks queued up, the response will look similar like this:\n\n[source,js]\n--------------------------------------------------\n{\n   \"tasks\": [\n      {\n         \"insert_order\": 101,\n         \"priority\": \"URGENT\",\n         \"source\": \"create-index [foo_9], cause [api]\",\n         \"executing\" : true,\n         \"time_in_queue_millis\": 86,\n         \"time_in_queue\": \"86ms\"\n      },\n      {\n         \"insert_order\": 46,\n         \"priority\": \"HIGH\",\n         \"source\": \"shard-started ([foo_2][1], node[tMTocMvQQgGCkj7QDHl3OA], [P], s[INITIALIZING]), reason [after recovery from shard_store]\",\n         \"executing\" : false,\n         \"time_in_queue_millis\": 842,\n         \"time_in_queue\": \"842ms\"\n      },\n      {\n         \"insert_order\": 45,\n         \"priority\": \"HIGH\",\n         \"source\": \"shard-started ([foo_2][0], node[tMTocMvQQgGCkj7QDHl3OA], [P], s[INITIALIZING]), reason [after recovery from shard_store]\",\n         \"executing\" : false,\n         \"time_in_queue_millis\": 858,\n         \"time_in_queue\": \"858ms\"\n      }\n  ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n// We can't test tasks output\n"
}