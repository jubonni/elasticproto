{
    "meta": {
        "timestamp": "2024-11-01T03:07:08.712278",
        "size": 2573,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/api-java-ack-watch.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "api-java-ack-watch",
        "version": "8.15"
    },
    "doc": "[discrete]\n[[api-java-ack-watch]]\n=== Ack watch API\n\n<<actions-ack-throttle,Acknowledging>> a watch enables you to manually throttle\nexecution of the watch actions. The action's _acknowledgement state_ is stored in\nthe `status.actions.<id>.ack.state` structure.\n\nThe current status of the watch and the state of its actions are returned as part\nof the <<api-java-get-watch,get watch API>> response:\n\n[source,java]\n--------------------------------------------------\nGetWatchResponse getWatchResponse = watcherClient.prepareGetWatch(\"my-watch\").get();\nState state = getWatchResponse.getStatus().actionStatus(\"my-action\").ackStatus().state();\n--------------------------------------------------\n\nThe action state of a newly created watch is `awaits_successful_execution`. When\nthe watch runs and its condition is met, the state changes to `ackable`.\nAcknowledging the action sets the state to `acked`.\n\nWhen an action state is set to `acked`, further executions of that action are\nthrottled until its state is reset to `awaits_successful_execution`. This happens\nwhen the watch condition is no longer met (the condition evaluates to `false`).\n\nThe following snippet shows how to acknowledge an action. You specify the IDs of\nthe watch and the action you want to acknowledge--in this example `my-watch` and\n`my-action`:\n\n[source,java]\n--------------------------------------------------\nAckWatchResponse ackResponse = watcherClient.prepareAckWatch(\"my-watch\").setActionIds(\"my-action\").get();\n--------------------------------------------------\n\nAs a response to this request, the status of the watch and the state of the\naction are returned and can be obtained from `AckWatchResponse` object:\n\n[source,java]\n--------------------------------------------------\nWatchStatus status = ackResponse.getStatus();\nActionStatus actionStatus = status.actionStatus(\"my-action\");\nActionStatus.AckStatus ackStatus = actionStatus.ackStatus();\nActionStatus.AckStatus.State ackState = ackStatus.state();\n--------------------------------------------------\n\nYou can acknowledge multiple actions:\n\n[source,java]\n--------------------------------------------------\nAckWatchResponse ackResponse = watcherClient.prepareAckWatch(\"my-watch\")\n  .setActionIds(\"action1\", \"action2\")\n  .get();\n--------------------------------------------------\n\nTo acknowledge all actions of a watch, specify only the watch ID:\n\n[source,java]\n--------------------------------------------------\nAckWatchResponse ackResponse = watcherClient.prepareAckWatch(\"my-watch\").get();\n--------------------------------------------------\n"
}