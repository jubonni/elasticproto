{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.286586",
        "size": 8415,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/redact-processor.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "redact-processor",
        "version": "8.15"
    },
    "doc": "[[redact-processor]]\n=== Redact processor\n++++\n<titleabbrev>Redact</titleabbrev>\n++++\n\nThe Redact processor uses the Grok rules engine to obscure\ntext in the input document matching the given Grok patterns. The processor can\nbe used to obscure Personal Identifying Information (PII) by configuring it to\ndetect known patterns such as email or IP addresses. Text that matches a Grok\npattern is replaced with a configurable string such as `<EMAIL>` where an email\naddress is matched or simply replace all matches with the text `<REDACTED>`\nif preferred.\n\n{es} comes packaged with a number of useful predefined {es-repo}blob/{branch}/libs/grok/src/main/resources/patterns/ecs-v1[patterns]\nthat can be conveniently referenced by the Redact processor.\nIf one of those does not suit your needs, create a new pattern with a\ncustom pattern definition. The Redact processor replaces every occurrence\nof a match. If there are multiple matches all will be replaced with the\npattern name.\n\nThe Redact processor is compatible with {ecs-ref}/ecs-field-reference.html[Elastic Common Schema (ECS)]\npatterns. Legacy Grok patterns are not supported.\n\n[[using-redact]]\n\n==== Using the Redact processor in a pipeline\n\n[[redact-options]]\n.Redact Options\n[options=\"header\"]\n|======\n| Name                   | Required  | Default             | Description\n| `field`                | yes       | -                   | The field to be redacted\n| `patterns`             | yes       | -                   | A list of grok expressions to match and redact named captures with\n| `pattern_definitions`  | no        | -                   | A map of pattern-name and pattern tuples defining custom patterns to be used by the processor. Patterns matching existing names will override the pre-existing definition\n| `prefix`               | no        | <                   | Start a redacted section with this token\n| `suffix`               | no        | >                   | End a redacted section with this token\n| `ignore_missing`       | no        | `true`              | If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document\ninclude::common-options.asciidoc[]\n| `skip_if_unlicensed`   | no        | `false`             | If `true` and the current license does not support running redact processors, then the processor quietly exits without modifying the document\n| `trace_redact`         | no        | `false`             | If `true` then ingest metadata `_ingest._redact._is_redacted` is set to `true` if the document has been redacted\n|======\n\nIn this example the predefined `IP` Grok pattern is used to match\nand redact an IP addresses from the `message` text field. The pipeline\nis tested using the Simulate API.\n\n[source,console]\n--------------------------------------------------\nPOST _ingest/pipeline/_simulate\n{\n  \"pipeline\": {\n    \"description\" : \"Hide my IP\",\n    \"processors\": [\n      {\n        \"redact\": {\n          \"field\": \"message\",\n          \"patterns\": [\"%{IP:client}\"]\n        }\n      }\n    ]\n  },\n  \"docs\":[\n    {\n      \"_source\": {\n        \"message\": \"55.3.244.1 GET /index.html 15824 0.043\"\n      }\n    }\n  ]\n}\n--------------------------------------------------\n\nThe document in the response still contains the `message` field\nbut now the IP address `55.3.244.1` is replaced by the text `<client>`.\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"docs\": [\n    {\n      \"doc\": {\n        \"_index\": \"_index\",\n        \"_id\": \"_id\",\n        \"_version\": \"-3\",\n        \"_source\": {\n          \"message\": \"<client> GET /index.html 15824 0.043\"\n        },\n        \"_ingest\": {\n          \"timestamp\": \"2023-02-01T16:08:39.419056008Z\"\n        }\n      }\n    }\n  ]\n}\n--------------------------------------------------\n// TESTRESPONSE[s/2023-02-01T16:08:39.419056008Z/$body.docs.0.doc._ingest.timestamp/]\n\nThe IP address is replaced with the word `client` because that is what is\nspecified in the Grok pattern `%{IP:client}`. The `<` and `>` tokens which\nsurround the pattern name are configurable using the `prefix` and `suffix` options.\n\nThe next example defines multiple patterns both of which are replaced\nwith the word `REDACTED` and the prefix and suffix tokens are set to `*`\n\n[source,console]\n--------------------------------------------------\nPOST _ingest/pipeline/_simulate\n{\n  \"pipeline\": {\n    \"description\": \"Hide my IP\",\n    \"processors\": [\n      {\n        \"redact\": {\n          \"field\": \"message\",\n          \"patterns\": [\n            \"%{IP:REDACTED}\",\n            \"%{EMAILADDRESS:REDACTED}\"\n          ],\n          \"prefix\": \"*\",\n          \"suffix\": \"*\"\n        }\n      }\n    ]\n  },\n  \"docs\": [\n    {\n      \"_source\": {\n        \"message\": \"55.3.244.1 GET /index.html 15824 0.043 test@elastic.co\"\n      }\n    }\n  ]\n}\n--------------------------------------------------\n\nIn the response both the IP `55.3.244.1` and email address `test@elastic.co`\nhave been replaced by `*REDACTED*`.\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"docs\": [\n    {\n      \"doc\": {\n        \"_index\": \"_index\",\n        \"_id\": \"_id\",\n        \"_version\": \"-3\",\n        \"_source\": {\n          \"message\": \"*REDACTED* GET /index.html 15824 0.043 *REDACTED*\"\n        },\n        \"_ingest\": {\n          \"timestamp\": \"2023-02-01T16:53:14.560005377Z\"\n        }\n      }\n    }\n  ]\n}\n--------------------------------------------------\n// TESTRESPONSE[s/2023-02-01T16:53:14.560005377Z/$body.docs.0.doc._ingest.timestamp/]\n\n[[redact-custom-patterns]]\n==== Custom patterns\n\nIf one of the existing Grok {es-repo}blob/{branch}/libs/grok/src/main/resources/patterns/ecs-v1[patterns]\ndoes not fit your requirements custom patterns can be added with the\n`pattern_definitions` option. New patterns definitions are composed of\na pattern name and the pattern itself. The pattern may be a regular\nexpression or reference existing Grok patterns.\n\nThis example defines the custom pattern `GITHUB_NAME` to match\nGitHub usernames. The pattern definition uses the existing\n`USERNAME` Grok https://github.com/elastic/elasticsearch/blob/{branch}/libs/grok/src/main/resources/patterns/ecs-v1/grok-patterns[pattern] prefixed by the\nliteral `@`.\n\nNOTE: The {kibana-ref}/xpack-grokdebugger.html[Grok Debugger] is a really\nuseful tool for building custom patterns.\n\n[source,console]\n--------------------------------------------------\nPOST _ingest/pipeline/_simulate\n{\n  \"pipeline\": {\n    \"processors\": [\n      {\n        \"redact\": {\n          \"field\": \"message\",\n          \"patterns\": [\n            \"%{GITHUB_NAME:GITHUB_NAME}\"\n          ],\n          \"pattern_definitions\": {\n            \"GITHUB_NAME\": \"@%{USERNAME}\"\n          }\n        }\n      }\n    ]\n  },\n  \"docs\": [\n    {\n      \"_source\": {\n        \"message\": \"@elastic-data-management the PR is ready for review\"\n      }\n    }\n  ]\n}\n--------------------------------------------------\n\nThe username is redacted in the response.\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"docs\": [\n    {\n      \"doc\": {\n        \"_index\": \"_index\",\n        \"_id\": \"_id\",\n        \"_version\": \"-3\",\n        \"_source\": {\n          \"message\": \"<GITHUB_NAME> the PR is ready for review\"\n        },\n        \"_ingest\": {\n          \"timestamp\": \"2023-02-01T16:53:14.560005377Z\"\n        }\n      }\n    }\n  ]\n}\n--------------------------------------------------\n// TESTRESPONSE[s/2023-02-01T16:53:14.560005377Z/$body.docs.0.doc._ingest.timestamp/]\n\n[[grok-watchdog-redact]]\n==== Grok watchdog\n\nThe watchdog interrupts expressions that take too long to execute.\nWhen interrupted, the Redact processor fails with an error.\nThe same <<grok-watchdog-options, settings>> that control the\nGrok Watchdog timeout also apply to the Redact processor.\n\n[[redact-licensing]]\n==== Licensing\n\nThe `redact` processor is a commercial feature that requires an\nappropriate license. For more information, refer to\nhttps://www.elastic.co/subscriptions.\n\nThe `skip_if_unlicensed` option can be set on a redact processor to\ncontrol behavior when the cluster's license is not sufficient to run\nsuch a processor. `skip_if_unlicensed` defaults to `false`, and the\nredact processor will throw an exception if the cluster's license is\nnot sufficient. If you set the `skip_if_unlicensed` option to `true`,\nhowever, then the redact processor not throw an exception (it will do\nnothing at all) in the case of an insufficient license.\n"
}