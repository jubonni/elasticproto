{
    "meta": {
        "timestamp": "2024-11-01T03:07:08.913282",
        "size": 10795,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/completion-suggester.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "completion-suggester",
        "version": "8.15"
    },
    "doc": "[[completion-suggester]]\n==== Completion Suggester\n\nThe `completion` suggester provides auto-complete/search-as-you-type\nfunctionality. This is a navigational feature to guide users to\nrelevant results as they are typing, improving search precision.\nIt is not meant for spell correction or did-you-mean functionality\nlike the `term` or `phrase` suggesters.\n\nIdeally, auto-complete functionality should be as fast as a user\ntypes to provide instant feedback relevant to what a user has already\ntyped in. Hence, `completion` suggester is optimized for speed.\nThe suggester uses data structures that enable fast lookups,\nbut are costly to build and are stored in-memory.\n\n[[completion-suggester-mapping]]\n===== Mapping\ninclude::../../mapping/types/completion.asciidoc[tag=completion-mapping]\n\n\n[[indexing]]\n===== Indexing\n\nYou index suggestions like any other field. A suggestion is made of an\n`input` and an optional `weight` attribute. An `input` is the expected\ntext to be matched by a suggestion query and the `weight` determines how\nthe suggestions will be scored. Indexing a suggestion is as follows:\n\n////\n[source,console]\n--------------------------------------------------\nPUT music\n{\n  \"mappings\": {\n    \"properties\": {\n      \"suggest\": {\n        \"type\": \"completion\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TESTSETUP\n////\n\n[source,console]\n--------------------------------------------------\nPUT music/_doc/1?refresh\n{\n  \"suggest\" : {\n    \"input\": [ \"Nevermind\", \"Nirvana\" ],\n    \"weight\" : 34\n  }\n}\n--------------------------------------------------\n// TEST\n\nThe following parameters are supported:\n\n[horizontal]\n`input`::\n    The input to store, this can be an array of strings or just\n    a string. This field is mandatory.\n+\n[NOTE]\n====\nThis value cannot contain the following UTF-16 control characters:\n\n* `\\u0000` (null)\n* `\\u001f` (information separator one)\n* `\\u001e` (information separator two)\n====\n\n\n`weight`::\n    A positive integer or a string containing a positive integer,\n    which defines a weight and allows you to rank your suggestions.\n    This field is optional.\n\nYou can index multiple suggestions for a document as follows:\n\n[source,console]\n--------------------------------------------------\nPUT music/_doc/1?refresh\n{\n  \"suggest\": [\n    {\n      \"input\": \"Nevermind\",\n      \"weight\": 10\n    },\n    {\n      \"input\": \"Nirvana\",\n      \"weight\": 3\n    }\n  ]\n}\n--------------------------------------------------\n// TEST[continued]\n\nYou can use the following shorthand form. Note that you can not specify\na weight with suggestion(s) in the shorthand form.\n\n[source,console]\n--------------------------------------------------\nPUT music/_doc/1?refresh\n{\n  \"suggest\" : [ \"Nevermind\", \"Nirvana\" ]\n}\n--------------------------------------------------\n// TEST[continued]\n\n[[querying]]\n===== Querying\n\nSuggesting works as usual, except that you have to specify the suggest\ntype as `completion`. Suggestions are near real-time, which means\nnew suggestions can be made visible by <<indices-refresh,refresh>> and\ndocuments once deleted are never shown. This request:\n\n[source,console]\n--------------------------------------------------\nPOST music/_search?pretty\n{\n  \"suggest\": {\n    \"song-suggest\": {\n      \"prefix\": \"nir\",        <1>\n      \"completion\": {         <2>\n          \"field\": \"suggest\"  <3>\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\n<1> Prefix used to search for suggestions\n<2> Type of suggestions\n<3> Name of the field to search for suggestions in\n\nreturns this response:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"_shards\" : {\n    \"total\" : 1,\n    \"successful\" : 1,\n    \"skipped\" : 0,\n    \"failed\" : 0\n  },\n  \"hits\": ...\n  \"took\": 2,\n  \"timed_out\": false,\n  \"suggest\": {\n    \"song-suggest\" : [ {\n      \"text\" : \"nir\",\n      \"offset\" : 0,\n      \"length\" : 3,\n      \"options\" : [ {\n        \"text\" : \"Nirvana\",\n        \"_index\": \"music\",\n        \"_id\": \"1\",\n        \"_score\": 1.0,\n        \"_source\": {\n          \"suggest\": [\"Nevermind\", \"Nirvana\"]\n        }\n      } ]\n    } ]\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"hits\": .../\"hits\": \"$body.hits\",/]\n// TESTRESPONSE[s/\"took\": 2,/\"took\": \"$body.took\",/]\n\n\nIMPORTANT: `_source` metadata field must be enabled, which is the default\nbehavior, to enable returning `_source` with suggestions.\n\nThe configured weight for a suggestion is returned as `_score`. The\n`text` field uses the `input` of your indexed suggestion. Suggestions\nreturn the full document `_source` by default. The size of the `_source`\ncan impact performance due to disk fetch and network transport overhead.\nTo save some network overhead, filter out unnecessary fields from the `_source`\nusing <<source-filtering, source filtering>> to minimize\n`_source` size. Note that the _suggest endpoint doesn't support source\nfiltering but using suggest on the `_search` endpoint does:\n\n[source,console]\n--------------------------------------------------\nPOST music/_search\n{\n  \"_source\": \"suggest\",     <1>\n  \"suggest\": {\n    \"song-suggest\": {\n      \"prefix\": \"nir\",\n      \"completion\": {\n        \"field\": \"suggest\", <2>\n        \"size\": 5           <3>\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\n<1> Filter the source to return only the `suggest` field\n<2> Name of the field to search for suggestions in\n<3> Number of suggestions to return\n\nWhich should look like:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"took\": 6,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\": 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\": {\n      \"value\": 0,\n      \"relation\": \"eq\"\n    },\n    \"max_score\": null,\n    \"hits\": []\n  },\n  \"suggest\": {\n    \"song-suggest\": [ {\n        \"text\": \"nir\",\n        \"offset\": 0,\n        \"length\": 3,\n        \"options\": [ {\n            \"text\": \"Nirvana\",\n            \"_index\": \"music\",\n            \"_id\": \"1\",\n            \"_score\": 1.0,\n            \"_source\": {\n              \"suggest\": [ \"Nevermind\", \"Nirvana\" ]\n            }\n          } ]\n      } ]\n  }\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"took\": 6,/\"took\": $body.took,/]\n\nThe basic completion suggester query supports the following parameters:\n\n[horizontal]\n`field`:: The name of the field on which to run the query (required).\n`size`::  The number of suggestions to return (defaults to `5`).\n`skip_duplicates`:: Whether duplicate suggestions should be filtered out (defaults to `false`).\n\nNOTE: The completion suggester considers all documents in the index.\nSee <<context-suggester>> for an explanation of how to query a subset of\ndocuments instead.\n\nNOTE: In case of completion queries spanning more than one shard, the suggest\nis executed in two phases, where the last phase fetches the relevant documents\nfrom shards, implying executing completion requests against a single shard is\nmore performant due to the document fetch overhead when the suggest spans\nmultiple shards. To get best performance for completions, it is recommended to\nindex completions into a single shard index. In case of high heap usage due to\nshard size, it is still recommended to break index into multiple shards instead\nof optimizing for completion performance.\n\n[[skip_duplicates]]\n===== Skip duplicate suggestions\n\nQueries can return duplicate suggestions coming from different documents.\nIt is possible to modify this behavior by setting `skip_duplicates` to true.\nWhen set, this option filters out documents with duplicate suggestions from the result.\n\n[source,console]\n--------------------------------------------------\nPOST music/_search?pretty\n{\n  \"suggest\": {\n    \"song-suggest\": {\n      \"prefix\": \"nor\",\n      \"completion\": {\n        \"field\": \"suggest\",\n        \"skip_duplicates\": true\n      }\n    }\n  }\n}\n--------------------------------------------------\n\nWARNING: When set to true, this option can slow down search because more suggestions\nneed to be visited to find the top N.\n\n[[fuzzy]]\n===== Fuzzy queries\n\nThe completion suggester also supports fuzzy queries -- this means\nyou can have a typo in your search and still get results back.\n\n[source,console]\n--------------------------------------------------\nPOST music/_search?pretty\n{\n  \"suggest\": {\n    \"song-suggest\": {\n      \"prefix\": \"nor\",\n      \"completion\": {\n        \"field\": \"suggest\",\n        \"fuzzy\": {\n          \"fuzziness\": 2\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\nSuggestions that share the longest prefix to the query `prefix` will\nbe scored higher.\n\nThe fuzzy query can take specific fuzzy parameters.\nThe following parameters are supported:\n\n[horizontal]\n`fuzziness`::\n    The fuzziness factor, defaults to `AUTO`.\n    See  <<fuzziness>> for allowed settings.\n\n`transpositions`::\n    if set to `true`, transpositions are counted\n    as one change instead of two, defaults to `true`\n\n`min_length`::\n    Minimum length of the input before fuzzy\n    suggestions are returned, defaults `3`\n\n`prefix_length`::\n    Minimum length of the input, which is not\n    checked for fuzzy alternatives, defaults to `1`\n\n`unicode_aware`::\n    If `true`, all measurements (like fuzzy edit\n    distance, transpositions, and lengths) are\n    measured in Unicode code points instead of\n    in bytes. This is slightly slower than raw\n    bytes, so it is set to `false` by default.\n\nNOTE: If you want to stick with the default values, but\n      still use fuzzy, you can either use `fuzzy: {}`\n      or `fuzzy: true`.\n\n[[regex]]\n===== Regex queries\n\nThe completion suggester also supports regex queries meaning\nyou can express a prefix as a regular expression\n\n[source,console]\n--------------------------------------------------\nPOST music/_search?pretty\n{\n  \"suggest\": {\n    \"song-suggest\": {\n      \"regex\": \"n[ever|i]r\",\n      \"completion\": {\n        \"field\": \"suggest\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n\nThe regex query can take specific regex parameters.\nThe following parameters are supported:\n\n[horizontal]\n`flags`::\n    Possible flags are `ALL` (default), `ANYSTRING`, `COMPLEMENT`,\n    `EMPTY`, `INTERSECTION`, `INTERVAL`, or `NONE`. See <<query-dsl-regexp-query, regexp-syntax>>\n    for their meaning\n\n`max_determinized_states`::\n    Regular expressions are dangerous because it's easy to accidentally\n    create an innocuous looking one that requires an exponential number of\n    internal determinized automaton states (and corresponding RAM and CPU)\n    for Lucene to execute. Lucene prevents these using the\n    `max_determinized_states` setting (defaults to 10000). You can raise\n    this limit to allow more complex regular expressions to execute.\n"
}