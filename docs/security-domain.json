{
    "meta": {
        "size": 6578,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-domain.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": false,
        "title": "security-domain",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[security-domain]]\n=== Security domains\n\nSecurity domains are a method of grouping multiple <<realms,realms>> under the\nsame domain so that the {stack} can recognize when a single user authenticates\nwith these realms. Users can authenticate with any of the realms in the domain\ngroup, and have access to the same set of resources regardless of which realm\nthey authenticated with.\n\nFor example, a single <<user-profile,user profile>> is associated with a user,\nenabling preferences, notifications, and other user data to be shared across\nrealms. The user can view results from an asynchronous search request or a\nscrolling search across realms. If the user has the necessary privileges, they\ncan also view and manage API keys across realms.\n\n[[security-domain-resource-sharing]]\n==== Resource sharing across domains\nSome types of resources in {es} are owned by a single user, such as\n<<async-search,async search contexts>>, <<security-api-create-api-key,API keys>>,\nand <<user-profile,user profiles>>. When a user creates a resource, {es}\ncaptures the user's username and realm information as part of the resource's\nmetadata. Likewise, if a user updates a resource, such as an API key,\n{es} automatically re-captures the user's current realm information.\n\nWhen a user later attempts to access the resource, {es} compares\nthe captured username and realm information against those from the accessing\nuser. {es} will deny access unless both the realm and username match.\nIf {es} detects that a username from two different realms is\nattempting to access a resource, {es} assumes that these users are distinct and\ndoesn't allow resources to be shared between those users.\n\nHowever, there are cases where the same user can authenticate with\nmultiple realms and needs to share the same set of resources across realms.\nFor example, an <<ldap-realm,LDAP realm>> and a <<saml-realm,SAML realm>> can\nbe backed by the same directory service. Additionally,\n<<configuring-authorization-delegation,authorization delegation>> allows one\nrealm to delegate authorization to another realm. If both realms authenticate\nusers with the same username, it's reasonable to treat these users as the\nsame user from a resource ownership perspective.\n\nSecurity domains make resource sharing across realms possible by grouping those\nrealms under the same domain. {es} always enforces the privileges that are\nassociated with the currently authenticated user, which remains true with\nsecurity domains. Security domains don't bypass\n<<authorization,user authorization>> when resource sharing requires them. For\nexample, a user requires the `manage_own_api_key` privilege to manage their own\nAPI keys. If that user doesn't have this privilege when authenticating with one\nrealm, they won't be able to manage API keys while authenticating with another\nrealm.\n\n[[security-domain-realm-roles]]\n===== Managing roles across realms\n{es} provides multiple ways to consistently apply roles across realms. For example, you can use\n<<configuring-authorization-delegation,authorization delegation>> to\nensure that a user is assigned the same roles from multiple realms. You can also\nmanually configure multiple realms that are backed by the same directory service.\nThough it's possible to configure different <<roles,roles>> for the same user\nwhen authenticating with different realms, it is _not_ recommended.\n\n\n[[security-domain-configure]]\n==== Configure a security domain\n\n[[security-domain-warning]]\n[IMPORTANT]\n====\nSecurity domains are an advanced feature that requires careful configuration.\nMisconfiguration or misuse can lead to unexpected behaviors.\n====\n\nSecurity domains must be configured consistently across all nodes in cluster.\nInconsistent configuration can lead to issues such as:\n\n- Duplicated user profiles\n- Different ownership of resources depending on the authenticating node's configuration\n\nTo configure a security domain:\n\n. Add a security domain configuration to `elasticsearch.yml` in the\n`xpack.security.authc.domains` namespace:\n+\n[source, yaml]\n----\nxpack:\n  security:\n    authc:\n      domains:\n        my_domain:\n          realms: [ 'default_native', 'saml1' ] <1>\n----\n<1> This configuration defines a security domain called `my_domain`, which\ncontains two realms named `default_native` and `saml1`.\n+\nThe specified realms must be defined in `elasticsearch.yml`,\nbut do not need to be enabled.\n+\nNOTE: The <<file-realm,file realm>> and <<native-realm,native realm>> are\nautomatically enabled as `default_file` and `default_native`, respectively,\nwithout any explicit configuration. You can list these realms under domains even\nwhen they are not explicitly defined in `elasticsearch.yml`.\n\n. Restart {es}.\n+\n[IMPORTANT]\n====\n{es} can fail to start if the domain configuration is invalid, such as:\n\n* The same realm is configured under multiple domains.\n* Any undefined realm, synthetic realm, or the reserved realm is configured to\nbe under a domain.\n====\n\n. Apply the same configuration across all nodes in the cluster\nbefore performing operations related to security domains,\nincluding creating and managing resources such as\n<<user-profile,user profiles>>, <<security-api-create-api-key,API keys>>, and <<async-search,async search>>.\n+\nWhen adding realms to a security domain, avoid authenticating with a newly-added realm until changes are fully applied to all nodes.\n\n[[security-domain-remove-realm]]\n==== Removing realms from a security domain\n\nRemoving realms from a security domain can lead to unexpected behaviors\nand is not recommended.\nResources created or updated before the removal can be owned by different users depending on the resource type:\n\n- <<user-profile,User profiles>> are owned by the user for whom the profile was last\n<<security-api-activate-user-profile,activated>>.\nFor users whose realms are no longer in the same domain as the owner user, a new user profile\nwill be created for them next time the activate user profile API is called.\n- An API key is owned by the user who originally <<security-api-create-api-key,created>> or last <<security-api-update-api-key,updated>> it.\nUsers, including the original creator of the API key, will lose ownership if their realms are no longer in the same domain as those of the current API key owner.\n- Resources such as async search contexts are owned by the user who originally created them.\n\nInstead of removing realms, consider disabling them and keeping them as part of the security domain.\nUnder all circumstances, resource sharing across realms is only possible between users with the same username.\n"
}