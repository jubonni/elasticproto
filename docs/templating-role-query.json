{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.375590",
        "size": 2760,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/templating-role-query.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "templating-role-query",
        "version": "8.15"
    },
    "doc": "[[templating-role-query]]\n==== Templating a role query\n\nWhen you create a role, you can specify a query that defines the \n<<document-level-security,document level security permissions>>. You can \noptionally use Mustache templates in the role query to insert the username of the\ncurrent authenticated user into the role. Like other places in {es} that support\ntemplating or scripting, you can specify inline, stored, or file-based templates\nand define custom parameters. You access the details for the current\nauthenticated user through the `_user` parameter.\n\nFor example, the following role query uses a template to insert the username\nof the current authenticated user:\n\n[source,console]\n--------------------------------------------------\nPOST /_security/role/example1\n{\n  \"indices\" : [\n    {\n      \"names\" : [ \"my-index-000001\" ],\n      \"privileges\" : [ \"read\" ],\n      \"query\" : {\n        \"template\" : {\n          \"source\" : {\n            \"term\" : { \"acl.username\" : \"{{_user.username}}\" }\n          }\n        }\n      }\n    }\n  ]\n}\n--------------------------------------------------\n\nYou can access the following information through the `_user` variable:\n\n[options=\"header\"]\n|======\n| Property              | Description\n| `_user.username`      | The username of the current authenticated user.\n| `_user.full_name`     | If specified, the full name of the current authenticated user.\n| `_user.email`         | If specified, the email of the current authenticated user.\n| `_user.roles`         | If associated, a list of the role names of the current authenticated user.\n| `_user.metadata`      | If specified, a hash holding custom metadata of the current authenticated user.\n|======\n\nYou can also access custom user metadata. For example, if you maintain a\n`group_id` in your user metadata, you can apply document level security\nbased on the `group.id` field in your documents:\n\n[source,console]\n--------------------------------------------------\nPOST /_security/role/example2\n{\n  \"indices\" : [\n    {\n      \"names\" : [ \"my-index-000001\" ],\n      \"privileges\" : [ \"read\" ],\n      \"query\" : {\n        \"template\" : {\n          \"source\" : {\n            \"term\" : { \"group.id\" : \"{{_user.metadata.group_id}}\" }\n          }\n        }\n      }\n    }\n  ]\n}\n--------------------------------------------------\n\nIf your metadata field contains an object or array, you can access it using the\n`{{#toJson}}parameter{{/toJson}}` function.\n\n[source,console]\n----\nPOST /_security/role/example3\n{\n  \"indices\" : [\n    {\n      \"names\" : [ \"my-index-000001\" ],\n      \"privileges\" : [ \"read\" ],\n      \"query\" : {\n        \"template\" : {\n          \"source\" : \"{ \\\"terms\\\": { \\\"group.statuses\\\": {{#toJson}}_user.metadata.statuses{{/toJson}} }}\"\n        }\n      }\n    }\n  ]\n}\n----\n"
}