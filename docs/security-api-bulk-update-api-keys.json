{
    "meta": {
        "size": 10887,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-bulk-update-api-keys.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "security-api-bulk-update-api-keys",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[security-api-bulk-update-api-keys]]\n=== Bulk update API keys API\n\n++++\n<titleabbrev>Bulk update API keys</titleabbrev>\n++++\n\n[[security-api-bulk-update-api-keys-request]]\n==== {api-request-title}\n\n`POST /_security/api_key/_bulk_update`\n\n[[security-api-bulk-update-api-keys-prereqs]]\n==== {api-prereq-title}\n\n* To use this API, you must have at least the `manage_own_api_key` cluster privilege.\nUsers can only update API keys that they created or that were granted to them.\nTo update another user's API key, use the <<run-as-privilege,`run_as` feature>>\nto submit a request on behalf of another user.\n\nIMPORTANT: It's not possible to use an API key as the authentication credential for this API.\nTo update API keys, the owner user's credentials are required.\n\n[[security-api-bulk-update-api-keys-desc]]\n==== {api-description-title}\n\nThis API is similar to <<security-api-update-api-key,update single API Key>> but allows you to apply the *same update* to multiple API keys in one API call.\nThis operation can greatly improve performance over making individual updates.\n\nIt's not possible to update expired or <<security-api-invalidate-api-key,invalidated>> API keys.\n\nThis API supports updates to API key access scope, metadata and expiration.\nThe access scope of each API key is derived from the <<security-api-bulk-update-api-keys-api-key-role-descriptors,`role_descriptors`>> you specify in the request, and a snapshot of the owner user's permissions at the time of the request.\nThe snapshot of the owner's permissions is updated automatically on every call.\n\n[IMPORTANT]\n====\nIf you don't specify <<security-api-bulk-update-api-keys-api-key-role-descriptors,`role_descriptors`>> in the request, a call to this API might still change an API key's access scope.\nThis change can occur if the owner user's permissions have changed since the API key was created or last modified.\n====\n\n[[security-api-bulk-update-api-keys-request-body]]\n==== {api-request-body-title}\n\nYou can specify the following parameters in the request body.\n\n`ids`:: (Required, list) The IDs of the API keys to update.\n\n[[security-api-bulk-update-api-keys-api-key-role-descriptors]]\n`role_descriptors`::\n(Optional, object) The role descriptors to assign to the API keys.\nAn API key's effective permissions are an intersection of its assigned privileges and the point-in-time snapshot of permissions of the owner user.\nYou can assign new privileges by specifying them in this parameter.\nTo remove assigned privileges, supply the `role_descriptors` parameter as an empty object `{}`.\nIf an API key has no assigned privileges, it inherits the owner user's full permissions.\nThe snapshot of the owner's permissions is always updated, whether you supply the `role_descriptors` parameter or not.\nThe structure of a role descriptor is the same as the request for the <<api-key-role-descriptors, create API keys API>>.\n\n`metadata`::\n(Optional, object) Arbitrary, nested metadata to associate with the API keys.\n\nWithin the `metadata` object, top-level keys beginning with an underscore (`_`) are reserved for system usage.\nAny information specified with this parameter fully replaces metadata previously associated with the API key.\n\n`expiration`::\n(Optional, string) Expiration time for the API keys. By default, API keys never expire. Can be omitted to leave unchanged.\n\n[[security-api-bulk-update-api-keys-response-body]]\n==== {api-response-body-title}\n\nA successful request returns a JSON structure that contains the IDs of all updated API keys, the IDs of API keys that already had the requested changes and did not require an update, and <<security-api-bulk-update-api-keys-examples-errors, error details>> for any failed update.\n\n[[security-api-bulk-update-api-keys-example]]\n==== {api-examples-title}\n\nFor the examples below, assume that a user creates two API keys.\nThe user creates the first API key:\n\n[source,console]\n------------------------------------------------------------\nPOST /_security/api_key\n{\n  \"name\": \"my-api-key\",\n  \"role_descriptors\": {\n    \"role-a\": {\n      \"cluster\": [\"all\"],\n      \"indices\": [\n        {\n          \"names\": [\"index-a*\"],\n          \"privileges\": [\"read\"]\n        }\n      ]\n    }\n  },\n  \"metadata\": {\n    \"application\": \"my-application\",\n    \"environment\": {\n       \"level\": 1,\n       \"trusted\": true,\n       \"tags\": [\"dev\", \"staging\"]\n    }\n  }\n}\n------------------------------------------------------------\n\nThis results in a response with the following API key information.\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"id\": \"VuaCfGcBCdbkQm-e5aOx\",\n  \"name\": \"my-api-key\",\n  \"api_key\": \"ui2lp2axTNmsyakw9tvNnw\",\n  \"encoded\": \"VnVhQ2ZHY0JDZGJrUW0tZTVhT3g6dWkybHAyYXhUTm1zeWFrdzl0dk5udw==\"\n}\n--------------------------------------------------\n// TESTRESPONSE[s/VuaCfGcBCdbkQm-e5aOx/$body.id/]\n// TESTRESPONSE[s/ui2lp2axTNmsyakw9tvNnw/$body.api_key/]\n// TESTRESPONSE[s/VnVhQ2ZHY0JDZGJrUW0tZTVhT3g6dWkybHAyYXhUTm1zeWFrdzl0dk5udw==/$body.encoded/]\n\nThe user creates the second API key:\n\n[source,console]\n------------------------------------------------------------\nPOST /_security/api_key\n{\n  \"name\": \"my-other-api-key\",\n  \"metadata\": {\n    \"application\": \"my-application\",\n    \"environment\": {\n       \"level\": 2,\n       \"trusted\": true,\n       \"tags\": [\"dev\", \"staging\"]\n    }\n  }\n}\n------------------------------------------------------------\n\nResulting in the following API key information.\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"id\": \"H3_AhoIBA9hmeQJdg7ij\",\n  \"name\": \"my-other-api-key\",\n  \"api_key\": \"134G4ilmT_uGWXHRfJfXXA\",\n  \"encoded\": \"SDNfQWhvSUJBOWhtZVFKZGc3aWo6MTM0RzRpbG1UX3VHV1hIUmZKZlhYQQ==\"\n}\n--------------------------------------------------\n// TESTRESPONSE[s/H3_AhoIBA9hmeQJdg7ij/$body.id/]\n// TESTRESPONSE[s/134G4ilmT_uGWXHRfJfXXA/$body.api_key/]\n// TESTRESPONSE[s/SDNfQWhvSUJBOWhtZVFKZGc3aWo6MTM0RzRpbG1UX3VHV1hIUmZKZlhYQQ==/$body.encoded/]\n\nFurther, assume that the owner user's permissions are:\n\n[[security-api-bulk-update-api-keys-examples-user-permissions]]\n[source,js]\n--------------------------------------------------\n{\n  \"cluster\": [\"all\"],\n  \"indices\": [\n    {\n      \"names\": [\"*\"],\n      \"privileges\": [\"all\"]\n    }\n  ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nThe following example updates the API keys created above, assigning them new role descriptors, metadata and updates\ntheir expiration time.\n\n[source,console]\n----\nPOST /_security/api_key/_bulk_update\n{\n  \"ids\": [\n    \"VuaCfGcBCdbkQm-e5aOx\",\n    \"H3_AhoIBA9hmeQJdg7ij\"\n  ],\n  \"role_descriptors\": {\n    \"role-a\": {\n      \"indices\": [\n        {\n          \"names\": [\"*\"],\n          \"privileges\": [\"write\"]\n        }\n      ]\n    }\n  },\n  \"metadata\": {\n    \"environment\": {\n       \"level\": 2,\n       \"trusted\": true,\n       \"tags\": [\"production\"]\n    }\n  },\n  \"expiration\": \"30d\"\n}\n----\n// TEST[skip:api key ids not available]\n\nA successful call returns a JSON structure indicating that the API keys were updated:\n\n[source,console-result]\n----\n{\n  \"updated\": [\n    \"VuaCfGcBCdbkQm-e5aOx\",\n    \"H3_AhoIBA9hmeQJdg7ij\"\n  ],\n  \"noops\": []\n}\n----\n\nBoth API keys' effective permissions after the update will be the intersection of the supplied role descriptors and the <<security-api-bulk-update-api-keys-examples-user-permissions, owner user's permissions>>:\n\n[source,js]\n--------------------------------------------------\n{\n  \"indices\": [\n    {\n      \"names\": [\"*\"],\n      \"privileges\": [\"write\"]\n    }\n  ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nThe following example removes the API keys' previously assigned permissions, making them inherit the owner user's full permissions.\n\n[source,console]\n----\nPOST /_security/api_key/_bulk_update\n{\n  \"ids\": [\n    \"VuaCfGcBCdbkQm-e5aOx\",\n    \"H3_AhoIBA9hmeQJdg7ij\"\n  ],\n  \"role_descriptors\": {}\n}\n----\n// TEST[skip:api key ids not available]\n\nWhich returns the response:\n\n[source,console-result]\n----\n{\n  \"updated\": [\n    \"VuaCfGcBCdbkQm-e5aOx\",\n    \"H3_AhoIBA9hmeQJdg7ij\"\n  ],\n  \"noops\": []\n}\n----\n\nThe API keys' effective permissions after the update will be the same as the owner user's:\n\n[source,js]\n--------------------------------------------------\n{\n  \"cluster\": [\"all\"],\n  \"indices\": [\n    {\n      \"names\": [\"*\"],\n      \"privileges\": [\"all\"]\n    }\n  ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nFor the next example, assume that the owner user's permissions have changed from <<security-api-bulk-update-api-keys-examples-user-permissions, the original permissions>> to:\n\n[source,js]\n--------------------------------------------------\n{\n  \"cluster\": [\"manage_security\"],\n  \"indices\": [\n    {\n      \"names\": [\"*\"],\n      \"privileges\": [\"read\"]\n    }\n  ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nThe following request auto-updates the snapshot of the user's permissions associated with the two API keys.\n\n[source,console]\n----\nPOST /_security/api_key/_bulk_update\n{\n  \"ids\": [\n    \"VuaCfGcBCdbkQm-e5aOx\",\n    \"H3_AhoIBA9hmeQJdg7ij\"\n  ]\n}\n----\n// TEST[skip:api key ids not available]\n\nWhich returns the response:\n\n[source,console-result]\n----\n{\n  \"updated\": [\n    \"VuaCfGcBCdbkQm-e5aOx\",\n    \"H3_AhoIBA9hmeQJdg7ij\"\n  ],\n  \"noops\": []\n}\n----\n\nResulting in the following effective permissions for both API keys:\n\n[source,js]\n--------------------------------------------------\n{\n  \"cluster\": [\"manage_security\"],\n  \"indices\": [\n    {\n      \"names\": [\"*\"],\n      \"privileges\": [\"read\"]\n    }\n  ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf any API keys fail to update, error details are included in the `errors` field.\nFor example:\n\n[[security-api-bulk-update-api-keys-examples-errors]]\n[source,js]\n--------------------------------------------------\n{\n  \"updated\": [\"VuaCfGcBCdbkQm-e5aOx\"],\n  \"noops\": [],\n  \"errors\": { <1>\n    \"count\": 3,\n    \"details\": {\n       \"g_PqP4IBcBaEQdwM5-WI\": { <2>\n         \"type\": \"resource_not_found_exception\",\n         \"reason\": \"no API key owned by requesting user found for ID [g_PqP4IBcBaEQdwM5-WI]\"\n       },\n       \"OM4cg4IBGgpHBfLerY4B\": {\n         \"type\": \"illegal_argument_exception\",\n         \"reason\": \"cannot update invalidated API key [OM4cg4IBGgpHBfLerY4B]\"\n       },\n       \"Os4gg4IBGgpHBfLe2I7j\": {\n         \"type\": \"exception\",\n         \"reason\": \"bulk request execution failure\",\n         \"caused_by\": { <3>\n           \"type\" : \"version_conflict_engine_exception\",\n           \"reason\" : \"[1]: version conflict, required seqNo [1], primary term [1]. current document has seqNo [2] and primary term [1]\"\n         }\n       }\n    }\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\n<1> This field is not present in the response when `count` is 0.\n<2> The ID of the API key for which the error occurred.\n<3> The error details may also include a `caused_by` field.\n"
}