{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.111581",
        "size": 2961,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/migrating-${majorDotMinor}.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "migrating-${majorDotMinor}",
        "version": "8.15"
    },
    "doc": "[[migrating-${majorDotMinor}]]\n== Migrating to ${majorDotMinor}\n++++\n<titleabbrev>${majorDotMinor}</titleabbrev>\n++++\n\nThis section discusses the changes that you need to be aware of when migrating\nyour application to {es} ${majorDotMinor}.\n\nSee also <<release-highlights>> and <<es-release-notes>>.\n<% if (isElasticsearchSnapshot) { %>\ncoming::[${majorDotMinorDotRevision}]\n<% } %>\n\n[discrete]\n[[breaking-changes-${majorDotMinor}]]\n=== Breaking changes\n<% if (breakingByNotabilityByArea.isEmpty()) { %>\nThere are no breaking changes in {es} ${majorDotMinor}.\n<% } else { %>\nThe following changes in {es} ${majorDotMinor} might affect your applications\nand prevent them from operating normally.\nBefore upgrading to ${majorDotMinor}, review these changes and take the described steps\nto mitigate the impact.\n<%\n    if (breakingByNotabilityByArea.getOrDefault(true, []).isEmpty()) { %>\n\nThere are no notable breaking changes in {es} ${majorDotMinor}.\nBut there are some less critical breaking changes.\n<%  }\n    [true, false].each { isNotable ->\n        def breakingByArea = breakingByNotabilityByArea.getOrDefault(isNotable, [])\n        if (breakingByArea.isEmpty() == false) {\n            breakingByArea.eachWithIndex { area, breakingChanges, i ->\n                print \"\\n[discrete]\\n\"\n                print \"[[breaking_${majorMinor}_${ area.toLowerCase().replaceAll(\"[^a-z0-9]+\", \"_\") }_changes]]\\n\"\n                print \"==== ${area} changes\\n\"\n\n                for (breaking in breakingChanges) { %>\n[[${ breaking.anchor }]]\n.${breaking.title}\n[%collapsible]\n====\n*Details* +\n${breaking.details.trim()}\n\n*Impact* +\n${breaking.impact.trim()}\n====\n<%\n                }\n            }\n\n        }\n    }\n}\n\nif (deprecationsByNotabilityByArea.isEmpty() == false) { %>\n\n[discrete]\n[[deprecated-${majorDotMinor}]]\n=== Deprecations\n\nThe following functionality has been deprecated in {es} ${majorDotMinor}\nand will be removed in a future version.\nWhile this won't have an immediate impact on your applications,\nwe strongly encourage you to take the described steps to update your code\nafter upgrading to ${majorDotMinor}.\n\nTo find out if you are using any deprecated functionality,\nenable <<deprecation-logging, deprecation logging>>.\n<%\n    [true, false].each { isNotable ->\n        def deprecationsByArea = deprecationsByNotabilityByArea.getOrDefault(isNotable, [])\n        if (deprecationsByArea.isEmpty() == false) {\n            deprecationsByArea.eachWithIndex { area, deprecations, i ->\n                print \"\\n[discrete]\\n\"\n                print \"[[deprecations_${majorMinor}_${ area.toLowerCase().replaceAll(\"[^a-z0-9]+\", \"_\") }]]\\n\"\n                print \"==== ${area} deprecations\\n\"\n\n                for (deprecation in deprecations) { %>\n[[${ deprecation.anchor }]]\n.${deprecation.title}\n[%collapsible]\n====\n*Details* +\n${deprecation.details.trim()}\n\n*Impact* +\n${deprecation.impact.trim()}\n====\n<%\n                }\n            }\n\n        }\n    }\n} %>\n"
}