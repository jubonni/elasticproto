{
    "meta": {
        "timestamp": "2024-11-01T03:07:10.026271",
        "size": 3138,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "query-dsl-regexp-query",
        "version": "8.15"
    },
    "doc": "[[query-dsl-regexp-query]]\n=== Regexp query\n++++\n<titleabbrev>Regexp</titleabbrev>\n++++\n\nReturns documents that contain terms matching a\n{wikipedia}/Regular_expression[regular expression].\n\nA regular expression is a way to match patterns in data using placeholder\ncharacters, called operators. For a list of operators supported by the\n`regexp` query, see <<regexp-syntax, Regular expression syntax>>.\n\n[[regexp-query-ex-request]]\n==== Example request\n\nThe following search returns documents where the `user.id` field contains any term\nthat begins with `k` and ends with `y`. The `.*` operators match any\ncharacters of any length, including no characters. Matching\nterms can include `ky`, `kay`, and `kimchy`.\n\n[source,console]\n----\nGET /_search\n{\n  \"query\": {\n    \"regexp\": {\n      \"user.id\": {\n        \"value\": \"k.*y\",\n        \"flags\": \"ALL\",\n        \"case_insensitive\": true,\n        \"max_determinized_states\": 10000,\n        \"rewrite\": \"constant_score_blended\"\n      }\n    }\n  }\n}\n----\n\n\n[[regexp-top-level-params]]\n==== Top-level parameters for `regexp`\n`<field>`::\n(Required, object) Field you wish to search.\n\n[[regexp-query-field-params]]\n==== Parameters for `<field>`\n`value`::\n(Required, string) Regular expression for terms you wish to find in the provided\n`<field>`. For a list of supported operators, see <<regexp-syntax, Regular\nexpression syntax>>.\n+\n--\nBy default, regular expressions are limited to 1,000 characters. You can change\nthis limit using the <<index-max-regex-length, `index.max_regex_length`>>\nsetting.\n\n[WARNING]\n=====\nThe performance of the `regexp` query can vary based on the regular expression\nprovided. To improve performance, avoid using wildcard patterns, such as `.*` or\n`.*?+`, without a prefix or suffix.\n=====\n--\n\n`flags`::\n(Optional, string) Enables optional operators for the regular expression. For\nvalid values and more information, see <<regexp-optional-operators, Regular\nexpression syntax>>.\n\n`case_insensitive` added:[7.10.0]::\n(Optional, Boolean) Allows case insensitive matching of the regular expression\nvalue with the indexed field values when set to true. Default is false which means\nthe case sensitivity of matching depends on the underlying field's mapping.\n\n`max_determinized_states`::\n+\n--\n(Optional, integer) Maximum number of\n{wikipedia}/Deterministic_finite_automaton[automaton states]\nrequired for the query. Default is `10000`.\n\n{es} uses https://lucene.apache.org/core/[Apache Lucene] internally to parse\nregular expressions. Lucene converts each regular expression to a finite\nautomaton containing a number of determinized states.\n\nYou can use this parameter to prevent that conversion from unintentionally\nconsuming too many resources. You may need to increase this limit to run complex\nregular expressions.\n--\n\n`rewrite`::\n(Optional, string) Method used to rewrite the query. For valid values and more\ninformation, see the <<query-dsl-multi-term-rewrite, `rewrite` parameter>>.\n\n[[regexp-query-notes]]\n==== Notes\n===== Allow expensive queries\nRegexp queries will not be executed if <<query-dsl-allow-expensive-queries, `search.allow_expensive_queries`>>\nis set to false.\n"
}