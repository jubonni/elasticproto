{
    "meta": {
        "timestamp": "2024-11-01T03:07:10.535272",
        "size": 8356,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/search-validate.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "search-validate",
        "version": "8.15"
    },
    "doc": "[[search-validate]]\n=== Validate API\n++++\n<titleabbrev>Validate</titleabbrev>\n++++\n\nValidates a potentially expensive query without executing it.\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_validate/query?q=user.id:kimchy\n--------------------------------------------------\n// TEST[setup:my_index]\n\n\n[[search-validate-api-request]]\n==== {api-request-title}\n\n`GET /<target>/_validate/<query>`\n\n[[search-validate-api-prereqs]]\n==== {api-prereq-title}\n\n* If the {es} {security-features} are enabled, you must have the `read`\n<<privileges-list-indices,index privilege>> for the target data stream, index,\nor alias.\n\n[[search-validate-api-desc]]\n==== {api-description-title}\n\nThe validate API allows you to validate a potentially expensive query\nwithout executing it. The query can be sent either as a path parameter or in the\nrequest body.\n\n\n[[search-validate-api-path-params]]\n==== {api-path-parms-title}\n\n`<target>`::\n(Optional, string) Comma-separated list of data streams, indices, and aliases to\nsearch. Supports wildcards (`*`). To search all data streams or indices, omit\nthis parameter or use `*` or `_all`.\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=query]\n\n\n[[search-validate-api-query-params]]\n==== {api-query-parms-title}\n\n`all_shards`::\n  (Optional, Boolean) If `true`, the validation is executed on all shards\n  instead of one random shard per index. Defaults to `false`.\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=allow-no-indices]\n+\nDefaults to `false`.\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=analyzer]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=analyze_wildcard]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=default_operator]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=df]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=expand-wildcards]\n\n`explain`::\n  (Optional, Boolean) If `true`, the response returns detailed information if an\n  error has occurred. Defaults to `false`.\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=index-ignore-unavailable]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=lenient]\n\n`rewrite`::\n  (Optional, Boolean) If `true`, returns a more detailed explanation showing the\n  actual Lucene query that will be executed. Defaults to `false`.\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=search-q]\n\n\n[[search-validate-api-example]]\n==== {api-examples-title}\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001/_bulk?refresh\n{\"index\":{\"_id\":1}}\n{\"user\" : { \"id\": \"kimchy\" }, \"@timestamp\" : \"2099-11-15T14:12:12\", \"message\" : \"trying out Elasticsearch\"}\n{\"index\":{\"_id\":2}}\n{\"user\" : { \"id\": \"kimchi\" }, \"@timestamp\" : \"2099-11-15T14:12:13\", \"message\" : \"My user ID is similar to kimchy!\"}\n--------------------------------------------------\n\n\nWhen sent a valid query:\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_validate/query?q=user.id:kimchy\n--------------------------------------------------\n// TEST[continued]\n\n\nThe response contains `valid:true`:\n\n[source,console-result]\n--------------------------------------------------\n{\"valid\":true,\"_shards\":{\"total\":1,\"successful\":1,\"failed\":0}}\n--------------------------------------------------\n\n\nThe query may also be sent in the request body:\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_validate/query\n{\n  \"query\" : {\n    \"bool\" : {\n      \"must\" : {\n        \"query_string\" : {\n          \"query\" : \"*:*\"\n        }\n      },\n      \"filter\" : {\n        \"term\" : { \"user.id\" : \"kimchy\" }\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\nNOTE: The query being sent in the body must be nested in a `query` key, same as\nthe <<search-search,search api>> works\n\nIf the query is invalid, `valid` will be `false`. Here the query is invalid\nbecause {es} knows the `post_date` field should be a date due to dynamic\nmapping, and 'foo' does not correctly parse into a date:\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_validate/query\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"@timestamp:foo\",\n      \"lenient\": false\n    }\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\n[source,console-result]\n--------------------------------------------------\n{\"valid\":false,\"_shards\":{\"total\":1,\"successful\":1,\"failed\":0}}\n--------------------------------------------------\n\n===== The explain parameter\n\nAn `explain` parameter can be specified to get more detailed information about\nwhy a query failed:\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_validate/query?explain=true\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"@timestamp:foo\",\n      \"lenient\": false\n    }\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\n\nThe API returns the following response:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"valid\" : false,\n  \"_shards\" : {\n    \"total\" : 1,\n    \"successful\" : 1,\n    \"failed\" : 0\n  },\n  \"explanations\" : [ {\n    \"index\" : \"my-index-000001\",\n    \"valid\" : false,\n    \"error\" : \"my-index-000001/IAEc2nIXSSunQA_suI0MLw] QueryShardException[failed to create query:...failed to parse date field [foo]\"\n  } ]\n}\n--------------------------------------------------\n// TESTRESPONSE[s/\"error\" : \"[^\\\"]+\"/\"error\": \"$body.explanations.0.error\"/]\n\n===== The rewrite parameter\n\nWhen the query is valid, the explanation defaults to the string representation\nof that query. With `rewrite` set to `true`, the explanation is more detailed\nshowing the actual Lucene query that will be executed.\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_validate/query?rewrite=true\n{\n  \"query\": {\n    \"more_like_this\": {\n      \"like\": {\n        \"_id\": \"2\"\n      },\n      \"boost_terms\": 1\n    }\n  }\n}\n--------------------------------------------------\n// TEST[skip:the output is randomized depending on which shard we hit]\n\n\nThe API returns the following response:\n\n[source,console-result]\n--------------------------------------------------\n{\n   \"valid\": true,\n   \"_shards\": {\n      \"total\": 1,\n      \"successful\": 1,\n      \"failed\": 0\n   },\n   \"explanations\": [\n      {\n         \"index\": \"my-index-000001\",\n         \"valid\": true,\n         \"explanation\": \"((user:terminator^3.71334 plot:future^2.763601 plot:human^2.8415773 plot:sarah^3.4193945 plot:kyle^3.8244398 plot:cyborg^3.9177752 plot:connor^4.040236 plot:reese^4.7133346 ... )~6) -ConstantScore(_id:2)) #(ConstantScore(_type:_doc))^0.0\"\n      }\n   ]\n}\n--------------------------------------------------\n\n\n===== Rewrite and all_shards parameters\n\nBy default, the request is executed on a single shard only, which is randomly\nselected. The detailed explanation of the query may depend on which shard is\nbeing hit, and therefore may vary from one request to another. So, in case of\nquery rewrite the `all_shards` parameter should be used to get response from\nall available shards.\n\n////\n[source,console]\n--------------------------------------------------\nPUT my-index-000001/_bulk?refresh\n{\"index\":{\"_id\":1}}\n{\"user\" : { \"id\": \"kimchy\" }, \"@timestamp\" : \"2099-11-15T14:12:12\", \"message\" : \"trying out Elasticsearch\"}\n{\"index\":{\"_id\":2}}\n{\"user\" : { \"id\": \"kimchi\" }, \"@timestamp\" : \"2099-11-15T14:12:13\", \"message\" : \"My user ID is similar to kimchy!\"}\n--------------------------------------------------\n////\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_validate/query?rewrite=true&all_shards=true\n{\n  \"query\": {\n    \"match\": {\n      \"user.id\": {\n        \"query\": \"kimchy\",\n        \"fuzziness\": \"auto\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\nThe API returns the following response:\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"valid\": true,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"failed\": 0\n  },\n  \"explanations\": [\n    {\n      \"index\": \"my-index-000001\",\n      \"shard\": 0,\n      \"valid\": true,\n      \"explanation\": \"(user.id:kimchi)^0.8333333 user.id:kimchy\"\n    }\n  ]\n}\n--------------------------------------------------\n"
}