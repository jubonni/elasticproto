{
    "meta": {
        "timestamp": "2024-11-01T03:07:08.726286",
        "size": 7800,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/aggregate-metric-double.html",
        "type": "documentation",
        "role": [
            "xpack",
            "child_attributes"
        ],
        "has_code": false,
        "title": "aggregate-metric-double",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[aggregate-metric-double]]\n=== Aggregate metric field type\n++++\n<titleabbrev>Aggregate metric</titleabbrev>\n++++\n\nStores pre-aggregated numeric values for <<search-aggregations-metrics,metric\naggregations>>. An `aggregate_metric_double` field is an object containing one\nor more of the following metric sub-fields: `min`, `max`, `sum`, and\n`value_count`.\n\nWhen you run certain metric aggregations on an `aggregate_metric_double` field,\nthe aggregation uses the related sub-field's values. For example, a\n<<search-aggregations-metrics-min-aggregation, `min`>> aggregation on an\n`aggregate_metric_double` field returns the minimum value of all `min`\nsub-fields.\n\n\nIMPORTANT: An `aggregate_metric_double` field stores a single numeric\n<<doc-values,doc value>> for each metric sub-field. Array values are not\nsupported. `min`, `max`, and `sum` values are `double` numbers. `value_count`\nis a positive `long` number.\n\n[source,console]\n----\nPUT my-index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"my-agg-metric-field\": {\n        \"type\": \"aggregate_metric_double\",\n        \"metrics\": [ \"min\", \"max\", \"sum\", \"value_count\" ],\n        \"default_metric\": \"max\"\n      }\n    }\n  }\n}\n----\n\n[role=\"child_attributes\"]\n[[aggregate-metric-double-params]]\n==== Parameters for `aggregate_metric_double` fields\n\n`metrics`::\n(Required, array of strings)\nArray of metric sub-fields to store. Each value corresponds to a\n<<search-aggregations-metrics,metric aggregation>>. Valid values are\n<<search-aggregations-metrics-min-aggregation,`min`>>,\n<<search-aggregations-metrics-max-aggregation,`max`>>,\n<<search-aggregations-metrics-sum-aggregation,`sum`>>, and\n<<search-aggregations-metrics-valuecount-aggregation,`value_count`>>. You must\nspecify at least one value.\n\n`default_metric`::\n(Required, string)\nDefault metric sub-field to use for queries, scripts, and aggregations that\ndon't use a sub-field. Must be a value from the `metrics` array.\n\n`time_series_metric`::\n(Optional, string)\ninclude::numeric.asciidoc[tag=time_series_metric]\n+\n.Valid `time_series_metric` values for `aggregate_metric_double` fields\n[%collapsible%open]\n====\n\ninclude::{es-ref-dir}/data-streams/tsds.asciidoc[tag=time-series-metric-gauge]\n\ninclude::{es-ref-dir}/data-streams/tsds.asciidoc[tag=time-series-metric-null]\n====\n\n[[aggregate-metric-double-uses]]\n==== Uses\n\nWe designed `aggregate_metric_double` fields for use with the following aggregations:\n\n* A <<search-aggregations-metrics-min-aggregation,`min`>> aggregation returns the\nminimum value of all `min` sub-fields.\n\n* A <<search-aggregations-metrics-max-aggregation,`max`>> aggregation returns the\nmaximum value of all `max` sub-fields.\n\n* A <<search-aggregations-metrics-sum-aggregation,`sum`>> aggregation returns the\nsum of the values of all `sum` sub-fields.\n\n* A <<search-aggregations-metrics-valuecount-aggregation,`value_count`>>\naggregation returns the sum of the values of all `value_count` sub-fields.\n\n* A <<search-aggregations-metrics-avg-aggregation,`avg`>> aggregation. There is no\n`avg` sub-field; the result of the `avg` aggregation is computed using the `sum`\nand `value_count` metrics. To run an `avg` aggregation, the field must contain\nboth `sum` and `value_count` metric sub-field.\n\nRunning any other aggregation on an `aggregate_metric_double` field will fail with\nan \"unsupported aggregation\" error.\n\nFinally, an `aggregate_metric_double` field supports the following queries for which\nit behaves as a `double` by delegating its behavior to its `default_metric` sub-field:\n\n* <<query-dsl-exists-query,`exists`>>\n* <<query-dsl-range-query,`range`>>\n* <<query-dsl-term-query,`term`>>\n* <<query-dsl-terms-query,`terms`>>\n\n[[aggregate-metric-double-example]]\n==== Examples\n\nThe following <<indices-create-index, create index>> API request creates an\nindex with an `aggregate_metric_double` field named `agg_metric`. The request\nsets `max` as the field's `default_metric`.\n\n[source,console]\n----\nPUT stats-index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"agg_metric\": {\n        \"type\": \"aggregate_metric_double\",\n        \"metrics\": [ \"min\", \"max\", \"sum\", \"value_count\" ],\n        \"default_metric\": \"max\"\n      }\n    }\n  }\n}\n----\n\nThe following <<docs-index_,index>> API request adds documents with\npre-aggregated data in the `agg_metric` field.\n\n[source,console]\n----\nPUT stats-index/_doc/1\n{\n  \"agg_metric\": {\n    \"min\": -302.50,\n    \"max\": 702.30,\n    \"sum\": 200.0,\n    \"value_count\": 25\n  }\n}\n\nPUT stats-index/_doc/2\n{\n  \"agg_metric\": {\n    \"min\": -93.00,\n    \"max\": 1702.30,\n    \"sum\": 300.00,\n    \"value_count\": 25\n  }\n}\n----\n// TEST[continued]\n// TEST[s/_doc\\/2/_doc\\/2?refresh=wait_for/]\n\nYou can run `min`, `max`, `sum`, `value_count`, and `avg` aggregations on a\n`agg_metric` field.\n\n[source,console]\n----\nPOST stats-index/_search?size=0\n{\n  \"aggs\": {\n    \"metric_min\": { \"min\": { \"field\": \"agg_metric\" } },\n    \"metric_max\": { \"max\": { \"field\": \"agg_metric\" } },\n    \"metric_value_count\": { \"value_count\": { \"field\": \"agg_metric\" } },\n    \"metric_sum\": { \"sum\": { \"field\": \"agg_metric\" } },\n    \"metric_avg\": { \"avg\": { \"field\": \"agg_metric\" } }\n  }\n}\n----\n// TEST[continued]\n\nThe aggregation results are based on related metric sub-field values.\n\n[source,console-result]\n----\n{\n...\n  \"aggregations\": {\n    \"metric_min\": {\n      \"value\": -302.5\n    },\n    \"metric_max\": {\n      \"value\": 1702.3\n    },\n    \"metric_value_count\": {\n      \"value\": 50\n    },\n    \"metric_sum\": {\n      \"value\": 500.0\n    },\n    \"metric_avg\": {\n      \"value\": 10.0\n    }\n  }\n}\n----\n// TESTRESPONSE[s/\\.\\.\\./\"took\": $body.took,\"timed_out\": false,\"_shards\": $body._shards,\"hits\": $body.hits,/]\n\nQueries on a `aggregate_metric_double` field use the `default_metric` value.\n\n[source,console]\n----\nGET stats-index/_search\n{\n  \"query\": {\n    \"term\": {\n      \"agg_metric\": {\n        \"value\": 702.30\n      }\n    }\n  }\n}\n----\n// TEST[continued]\n\nThe search returns the following hit. The value of the `default_metric` field,\n`max`, matches the query value.\n\n[source,console-result]\n----\n{\n  ...\n    \"hits\": {\n    \"total\": {\n      \"value\": 1,\n      \"relation\": \"eq\"\n    },\n    \"max_score\": 1.0,\n    \"hits\": [\n      {\n        \"_index\": \"stats-index\",\n        \"_id\": \"1\",\n        \"_score\": 1.0,\n        \"_source\": {\n          \"agg_metric\": {\n            \"min\": -302.5,\n            \"max\": 702.3,\n            \"sum\": 200.0,\n            \"value_count\": 25\n          }\n        }\n      }\n    ]\n  }\n}\n----\n// TESTRESPONSE[s/\\.\\.\\./\"took\": $body.took,\"timed_out\": false,\"_shards\": $body._shards,/]\n\n[[aggregate-metric-double-synthetic-source]]\n==== Synthetic `_source`\n\nIMPORTANT: Synthetic `_source` is Generally Available only for TSDB indices\n(indices that have `index.mode` set to `time_series`). For other indices\nsynthetic `_source` is in technical preview. Features in technical preview may\nbe changed or removed in a future release. Elastic will work to fix\nany issues, but features in technical preview are not subject to the support SLA\nof official GA features.\n\nFor example:\n[source,console,id=synthetic-source-aggregate-metric-double-example]\n----\nPUT idx\n{\n  \"settings\": {\n    \"index\": {\n      \"mapping\": {\n        \"source\": {\n          \"mode\": \"synthetic\"\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"agg_metric\": {\n        \"type\": \"aggregate_metric_double\",\n        \"metrics\": [ \"min\", \"max\", \"sum\", \"value_count\" ],\n        \"default_metric\": \"max\"\n      }\n    }\n  }\n}\n\nPUT idx/_doc/1\n{\n  \"agg_metric\": {\n    \"min\": -302.50,\n    \"max\": 702.30,\n    \"sum\": 200.0,\n    \"value_count\": 25\n  }\n}\n----\n// TEST[s/$/\\nGET idx\\/_doc\\/1?filter_path=_source\\n/]\n\nWill become:\n\n[source,console-result]\n----\n{\n  \"agg_metric\": {\n    \"min\": -302.50,\n    \"max\": 702.30,\n    \"sum\": 200.0,\n    \"value_count\": 25\n  }\n}\n----\n// TEST[s/^/{\"_source\":/ s/\\n$/}/]\n"
}