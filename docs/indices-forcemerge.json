{
    "meta": {
        "size": 6702,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-forcemerge.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "indices-forcemerge",
        "version": "8.15"
    },
    "doc": "[[indices-forcemerge]]\n=== Force merge API\n++++\n<titleabbrev>Force merge</titleabbrev>\n++++\n\nForces a <<index-modules-merge,merge>> on the shards of one or more indices.\nFor data streams, the API forces a merge on the shards of the stream's backing\nindices.\n\n[source,console]\n----\nPOST /my-index-000001/_forcemerge\n----\n// TEST[setup:my_index]\n\n\n[[forcemerge-api-request]]\n==== {api-request-title}\n\n`POST /<target>/_forcemerge`\n\n`POST /_forcemerge`\n\n[[forcemerge-api-prereqs]]\n==== {api-prereq-title}\n\n* If the {es} {security-features} are enabled, you must have the `maintenance`\nor `manage` <<privileges-list-indices,index privilege>> for the target data\nstream, index, or alias.\n\n[[forcemerge-api-desc]]\n==== {api-description-title}\n\nUse the force merge API to force a <<index-modules-merge,merge>> on the\nshards of one or more indices. Merging reduces the number of segments in each\nshard by merging some of them together, and also frees up the space used by\ndeleted documents. Merging normally happens automatically, but sometimes it is\nuseful to trigger a merge manually.\n\n// tag::force-merge-read-only-warn[]\nWARNING: **We recommend only force merging a read-only index (meaning the index\nis no longer receiving writes).**  When documents are updated or deleted, the\nold version is not immediately removed, but instead soft-deleted and marked\nwith a \"tombstone\". These soft-deleted documents are automatically cleaned up\nduring regular segment merges. But force merge can cause very large (> 5GB)\nsegments to be produced, which are not eligible for regular merges. So the\nnumber of soft-deleted documents can then grow rapidly, resulting in higher\ndisk usage and worse search performance. If you regularly force merge an index\nreceiving writes, this can also make snapshots more expensive, since the new\ndocuments can't be backed up incrementally.\n// end::force-merge-read-only-warn[]\n\n\n[[forcemerge-blocks]]\n===== Blocks during a force merge\n\nCalls to this API block until the merge is complete (unless request contains\n`wait_for_completion=false`, which is default `true`). If the client connection\nis lost before completion then the force merge process will continue in the\nbackground. Any new requests to force merge the same indices will also block\nuntil the ongoing force merge is complete.\n\n[[docs-forcemerge-task-api]]\n===== Running force merge asynchronously\n\nIf the request contains `wait_for_completion=false`, {es}\nperforms some preflight checks, launches the request, and returns a\n<<tasks,`task`>> you can use to get the status of the task. However, you can\nnot cancel this task as the force merge task is not cancelable. {es}\ncreates a record of this task as a document at `_tasks/<task_id>`. When you\nare done with a task, you should delete the task document so {es}\ncan reclaim the space.\n\n[[forcemerge-multi-index]]\n===== Force merging multiple indices\n\nYou can force merge multiple indices with a single request by targeting:\n\n* One or more data streams that contain multiple backing indices\n* Multiple indices\n* One or more aliases\n* All data streams and indices in a cluster\n\nEach targeted shard is force-merged separately using <<modules-threadpool,the\n`force_merge` threadpool>>. By default each node only has a single\n`force_merge` thread which means that the shards on that node are force-merged\none at a time. If you expand the `force_merge` threadpool on a node then it\nwill force merge its shards in parallel.\n\nForce merge makes the storage for the shard being merged temporarily\nincrease, as it may require free space up to triple its size in case\n`max_num_segments` parameter is set to `1`, to rewrite all segments into a new\none.\n\n[[forcemerge-api-path-params]]\n==== {api-path-parms-title}\n\n`<target>`::\n(Optional, string) Comma-separated list of data streams, indices, and aliases\nused to limit the request. Supports wildcards (`*`). To target all data streams\nand indices, omit this parameter or use `*` or `_all`.\n\n[[forcemerge-api-query-params]]\n==== {api-query-parms-title}\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=allow-no-indices]\n+\nDefaults to `true`.\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=expand-wildcards]\n+\nDefaults to `open`.\n\n`flush`::\n(Optional, Boolean)\nIf `true`,\n{es} performs a <<indices-flush,flush>> on the indices\nafter the force merge.\nDefaults to `true`.\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=index-ignore-unavailable]\n\n`max_num_segments`::\n+\n--\n(Optional, integer)\nThe number of segments to merge to.\nTo fully merge indices,\nset it to `1`.\n\nDefaults to checking if a merge needs to execute.\nIf so, executes it.\n\nYou can't specify this parameter and `only_expunge_deletes` in the same request.\n--\n\n`only_expunge_deletes`::\n+\n--\n(Optional, Boolean)\nIf `true`,\nexpunge all segments containing more than `index.merge.policy.expunge_deletes_allowed`\n (default to 10) percents of deleted documents.\nDefaults to `false`.\n\nIn Lucene,\na document is not deleted from a segment;\njust marked as deleted.\nDuring a merge,\na new segment is created\nthat does not contain those document deletions.\n\nYou can't specify this parameter and `max_num_segments` in the same request.\n--\n\n`wait_for_completion`::\n+\n--\n(Optional, Boolean)\nIf `true`, the request blocks until the operation is complete.\nDefaults to `true`.\n--\n\n[[forcemerge-api-example]]\n==== {api-examples-title}\n\n\n[[forcemerge-api-specific-ex]]\n===== Force merge a specific data stream or index\n\n[source,console]\n----\nPOST /my-index-000001/_forcemerge\n----\n// TEST[continued]\n\n\n[[forcemerge-api-multiple-ex]]\n===== Force merge several data streams or indices\n\n[source,console]\n----\nPOST /my-index-000001,my-index-000002/_forcemerge\n----\n// TEST[s/^/PUT my-index-000001\\nPUT my-index-000002\\n/]\n\n\n[[forcemerge-api-all-ex]]\n===== Force merge all indices\n\n[source,console]\n----\nPOST /_forcemerge\n----\n\n\n[[forcemerge-api-time-based-index-ex]]\n===== Data streams and time-based indices\n\nForce-merging is useful for managing a data stream's older backing indices and\nother time-based indices, particularly after a\n<<indices-rollover-index,rollover>>.\nIn these cases,\neach index only receives indexing traffic for a certain period of time.\nOnce an index receive no more writes,\nits shards can be force-merged to a single segment.\n\n[source,console]\n--------------------------------------------------\nPOST /.ds-my-data-stream-2099.03.07-000001/_forcemerge?max_num_segments=1\n--------------------------------------------------\n// TEST[setup:my_index]\n// TEST[s/.ds-my-data-stream-2099.03.07-000001/my-index-000001/]\n\nThis can be a good idea because single-segment shards can sometimes use simpler\nand more efficient data structures to perform searches.\n"
}