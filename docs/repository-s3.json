{
    "meta": {
        "timestamp": "2024-11-01T03:07:10.071279",
        "size": 26737,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/repository-s3.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "repository-s3",
        "version": "8.15"
    },
    "doc": "[[repository-s3]]\n=== S3 repository\n\nYou can use AWS S3 as a repository for {ref}/snapshot-restore.html[Snapshot/Restore].\n\n*If you are looking for a hosted solution of Elasticsearch on AWS, please visit\nhttps://www.elastic.co/cloud/.*\n\n[[repository-s3-usage]]\n==== Getting started\n\nTo register an S3 repository, specify the type as `s3` when creating\nthe repository. The repository defaults to using\nhttps://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html[ECS\nIAM Role] credentials for authentication. You can also use <<iam-kubernetes-service-accounts,Kubernetes service accounts>> for authentication.\n\nThe only mandatory setting is the bucket name:\n\n[source,console]\n----\nPUT _snapshot/my_s3_repository\n{\n  \"type\": \"s3\",\n  \"settings\": {\n    \"bucket\": \"my-bucket\"\n  }\n}\n----\n// TEST[skip:we don't have s3 setup while testing this]\n\n\n[[repository-s3-client]]\n==== Client settings\n\nThe client that you use to connect to S3 has a number of settings available.\nThe settings have the form `s3.client.CLIENT_NAME.SETTING_NAME`. By default,\n`s3` repositories use a client named `default`, but this can be modified using\nthe <<repository-s3-repository,repository setting>> `client`. For example:\n\n[source,console]\n----\nPUT _snapshot/my_s3_repository\n{\n  \"type\": \"s3\",\n  \"settings\": {\n    \"bucket\": \"my-bucket\",\n    \"client\": \"my-alternate-client\"\n  }\n}\n----\n// TEST[skip:we don't have S3 setup while testing this]\n\nMost client settings can be added to the `elasticsearch.yml` configuration file\nwith the exception of the secure settings, which you add to the {es} keystore.\nFor more information about creating and updating the {es} keystore, see\n{ref}/secure-settings.html[Secure settings].\n\nFor example, if you want to use specific credentials to access S3 then run the\nfollowing commands to add these credentials to the keystore.\n\n[source,sh]\n----\nbin/elasticsearch-keystore add s3.client.default.access_key\nbin/elasticsearch-keystore add s3.client.default.secret_key\n# a session token is optional so the following command may not be needed\nbin/elasticsearch-keystore add s3.client.default.session_token\n----\n\nIf instead you want to use the instance role or container role to access S3\nthen you should leave these settings unset. You can switch from using specific\ncredentials back to the default of using the instance role or container role by\nremoving these settings from the keystore as follows:\n\n[source,sh]\n----\nbin/elasticsearch-keystore remove s3.client.default.access_key\nbin/elasticsearch-keystore remove s3.client.default.secret_key\n# a session token is optional so the following command may not be needed\nbin/elasticsearch-keystore remove s3.client.default.session_token\n----\n\n*All* client secure settings of this repository type are\n{ref}/secure-settings.html#reloadable-secure-settings[reloadable].\nYou can define these settings before the node is started,\nor call the <<cluster-nodes-reload-secure-settings,Nodes reload secure settings API>>\nafter the settings are defined to apply them to a running node.\n\nAfter you reload the settings, the internal `s3` clients, used to transfer the snapshot\ncontents, will utilize the latest settings from the keystore. Any existing `s3`\nrepositories, as well as any newly created ones, will pick up the new values\nstored in the keystore.\n\nNOTE: In-progress snapshot/restore tasks will not be preempted by a *reload* of\nthe client's secure settings. The task will complete using the client as it was\nbuilt when the operation started.\n\nThe following list contains the available client settings. Those that must be\nstored in the keystore are marked as \"secure\" and are *reloadable*; the other\nsettings belong in the `elasticsearch.yml` file.\n\n`access_key` ({ref}/secure-settings.html[Secure], {ref}/secure-settings.html#reloadable-secure-settings[reloadable])::\n\n    An S3 access key. If set, the `secret_key` setting must also be specified.\n    If unset, the client will use the instance or container role instead.\n\n`secret_key` ({ref}/secure-settings.html[Secure], {ref}/secure-settings.html#reloadable-secure-settings[reloadable])::\n\n    An S3 secret key. If set, the `access_key` setting must also be specified.\n\n`session_token` ({ref}/secure-settings.html[Secure], {ref}/secure-settings.html#reloadable-secure-settings[reloadable])::\n\n    An S3 session token. If set, the `access_key` and `secret_key` settings\n    must also be specified.\n\n`endpoint`::\n\n    The S3 service endpoint to connect to. This defaults to `s3.amazonaws.com`\n    but the\n    https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region[AWS\n    documentation] lists alternative S3 endpoints. If you are using an\n    <<repository-s3-compatible-services,S3-compatible service>> then you should\n    set this to the service's endpoint.\n\n`protocol`::\n\n    The protocol to use to connect to S3. Valid values are either `http` or\n    `https`. Defaults to `https`. When using HTTPS, this repository type validates the\n    repository's certificate chain using the JVM-wide truststore. Ensure that\n    the root certificate authority is in this truststore using the JVM's\n    `keytool` tool. If you have a custom certificate authority for your S3 repository\n    and you use the {es} <<jvm-version,bundled JDK>>, then you will need to reinstall your\n    CA certificate every time you upgrade {es}.\n\n`proxy.host`::\n\n    The host name of a proxy to connect to S3 through.\n\n`proxy.port`::\n\n    The port of a proxy to connect to S3 through.\n\n`proxy.scheme`::\n\n    The scheme to use for the proxy connection to S3. Valid values are either `http` or `https`.\n    Defaults to `http`. This setting allows to specify the protocol used for communication with the\n    proxy server\n\n`proxy.username` ({ref}/secure-settings.html[Secure], {ref}/secure-settings.html#reloadable-secure-settings[reloadable])::\n\n    The username to connect to the `proxy.host` with.\n\n`proxy.password` ({ref}/secure-settings.html[Secure], {ref}/secure-settings.html#reloadable-secure-settings[reloadable])::\n\n    The password to connect to the `proxy.host` with.\n\n`read_timeout`::\n\n    (<<time-units,time value>>) The maximum time {es} will wait to receive the next byte\n    of data over an established, open connection to the repository before it closes the\n    connection. The default value is 50 seconds.\n\n`max_connections`::\n\n    The maximum number of concurrent connections to S3. The default value is `50`.\n\n`max_retries`::\n\n    The number of retries to use when an S3 request fails. The default value is\n    `3`.\n\n`use_throttle_retries`::\n\n    Whether retries should be throttled (i.e. should back off). Must be `true`\n    or `false`. Defaults to `true`.\n\n`path_style_access`::\n\n   Whether to force the use of the path style access pattern. If `true`, the\n   path style access pattern will be used. If `false`, the access pattern will\n   be automatically determined by the AWS Java SDK (See\n   https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/s3/AmazonS3Builder.html#setPathStyleAccessEnabled-java.lang.Boolean-[AWS\n   documentation] for details). Defaults to `false`.\n\n[[repository-s3-path-style-deprecation]]\nNOTE: In versions `7.0`, `7.1`, `7.2` and `7.3` all bucket operations used the\nhttps://aws.amazon.com/blogs/aws/amazon-s3-path-deprecation-plan-the-rest-of-the-story/[now-deprecated]\npath style access pattern. If your deployment requires the path style access\npattern then you should set this setting to `true` when upgrading.\n\n`disable_chunked_encoding`::\n\n    Whether chunked encoding should be disabled or not. If `false`, chunked\n    encoding is enabled and will be used where appropriate. If `true`, chunked\n    encoding is disabled and will not be used, which may mean that snapshot\n    operations consume more resources and take longer to complete. It should\n    only be set to `true` if you are using a storage service that does not\n    support chunked encoding. See the\n    https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/s3/AmazonS3Builder.html#disableChunkedEncoding--[AWS\n    Java SDK documentation] for details. Defaults to `false`.\n\n`region`::\n\n    Allows specifying the signing region to use. Specificing this setting manually should not be necessary for most use cases. Generally,\n    the SDK will correctly guess the signing region to use. It should be considered an expert level setting to support S3-compatible APIs\n    that require https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html[v4 signatures] and use a region other than the\n    default `us-east-1`. Defaults to empty string which means that the SDK will try to automatically determine the correct signing region.\n\n`signer_override`::\n\n    Allows specifying the name of the signature algorithm to use for signing requests by the S3 client. Specifying this setting should not\n    be necessary for most use cases. It should be considered an expert level setting to support S3-compatible APIs that do not support the\n    signing algorithm that the SDK automatically determines for them.\n    See the\n    https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/ClientConfiguration.html#setSignerOverride-java.lang.String-[AWS\n    Java SDK documentation] for details. Defaults to empty string which means that no signing algorithm override will be used.\n\n\n[[repository-s3-repository]]\n==== Repository settings\n\nThe `s3` repository type supports a number of settings to customize how data is\nstored in S3. These can be specified when creating the repository. For example:\n\n[source,console]\n----\nPUT _snapshot/my_s3_repository\n{\n  \"type\": \"s3\",\n  \"settings\": {\n    \"bucket\": \"my-bucket\",\n    \"another_setting\": \"setting-value\"\n  }\n}\n----\n// TEST[skip:we don't have S3 set up while testing this]\n\nThe following settings are supported:\n\n`bucket`::\n(Required)\nName of the S3 bucket to use for snapshots.\n+\nThe bucket name must adhere to Amazon's\nhttps://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html#bucketnamingrules[S3\nbucket naming rules].\n\n`client`::\n\n    The name of the <<repository-s3-client,S3 client>> to use to connect to S3.\n    Defaults to `default`.\n\n`base_path`::\n\n    Specifies the path to the repository data within its bucket. Defaults to an\n    empty string, meaning that the repository is at the root of the bucket. The\n    value of this setting should not start or end with a `/`.\n+\nNOTE: Don't set `base_path` when configuring a snapshot repository for {ECE}.\n{ECE} automatically generates the `base_path` for each deployment so that\nmultiple deployments may share the same bucket.\n\n`chunk_size`::\n\n    (<<byte-units,byte value>>) The maximum size of object that {es} will write to the repository\n    when creating a snapshot. Files which are larger than `chunk_size` will be chunked into several\n    smaller objects. {es} may also split a file across multiple objects to satisfy other constraints\n    such as the `max_multipart_parts` limit. Defaults to `5TB` which is the\n    https://docs.aws.amazon.com/AmazonS3/latest/userguide/qfacts.html[maximum size of an object in AWS S3].\n\n`compress`::\n\n    When set to `true` metadata files are stored in compressed format. This\n    setting doesn't affect index files that are already compressed by default.\n    Defaults to `true`.\n\ninclude::repository-shared-settings.asciidoc[]\n\n`server_side_encryption`::\n\n    When set to `true` files are encrypted on server side using AES256\n    algorithm. Defaults to `false`.\n\n`buffer_size`::\n\n    (<<byte-units,byte value>>) Minimum threshold below which the chunk is\n    uploaded using a single request.\n    Beyond this threshold, the S3 repository will use the\n    https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html[AWS\n    Multipart Upload API] to split the chunk into several parts, each of\n    `buffer_size` length, and to upload each part in its own request. Note that\n    setting a buffer size lower than `5mb` is not allowed since it will prevent\n    the use of the Multipart API and may result in upload errors. It is also not\n    possible to set a buffer size greater than `5gb` as it is the maximum upload\n    size allowed by S3. Defaults to `100mb` or `5%` of JVM heap, whichever is\n    smaller.\n\n`max_multipart_parts` ::\n\n    (integer) The maximum number of parts that {es} will write during a multipart upload of a single object. Files which are larger than\n    `buffer_size \u00d7 max_multipart_parts` will be chunked into several smaller objects. {es} may also split a file across multiple objects to\n    satisfy other constraints such as the `chunk_size` limit. Defaults to `10000` which is the\n    https://docs.aws.amazon.com/AmazonS3/latest/userguide/qfacts.html[maximum number of parts in a multipart upload in AWS S3].\n\n`canned_acl`::\n\n    The S3 repository supports all\n    https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl[S3\n    canned ACLs] : `private`, `public-read`, `public-read-write`,\n    `authenticated-read`, `log-delivery-write`, `bucket-owner-read`,\n    `bucket-owner-full-control`. Defaults to `private`. You could specify a\n    canned ACL using the `canned_acl` setting. When the S3 repository creates\n    buckets and objects, it adds the canned ACL into the buckets and objects.\n\n`storage_class`::\n\n    Sets the S3 storage class for objects written to the repository. Values may\n    be `standard`, `reduced_redundancy`, `standard_ia`, `onezone_ia` and\n    `intelligent_tiering`. Defaults to `standard`. See\n    <<repository-s3-storage-classes>> for more information.\n\n`delete_objects_max_size`::\n\n    (integer) Sets the maxmimum batch size, betewen 1 and 1000, used for `DeleteObjects` requests. Defaults to 1000 which is the maximum\n    number supported by the https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObjects.html[AWS DeleteObjects API].\n\n`max_multipart_upload_cleanup_size`::\n\n    (integer) Sets the maximum number of possibly-dangling multipart uploads to clean up in each batch of snapshot deletions. Defaults to\n    `1000` which is the maximum number supported by the https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html[AWS\n    ListMultipartUploads API]. If set to `0`, {es} will not attempt to clean up dangling multipart uploads.\n\n`throttled_delete_retry.delay_increment`::\n\n    (<<time-units,time value>>) This value is used as the delay before the first retry and the amount the delay is incremented by on each subsequent retry. Default is 50ms, minimum is 0ms.\n\n`throttled_delete_retry.maximum_delay`::\n\n    (<<time-units,time value>>) This is the upper bound on how long the delays between retries will grow to. Default is 5s, minimum is 0ms.\n\n`throttled_delete_retry.maximum_number_of_retries`::\n\n    (integer) Sets the number times to retry a throttled snapshot deletion. Defaults to `10`, minimum value is `0` which\n    will disable retries altogether. Note that if retries are enabled in the Azure client, each of these retries\n    comprises that many client-level retries.\n\n`get_register_retry_delay`\n\n    (<<time-units,time value>>) Sets the time to wait before trying again if an attempt to read a\n    <<repository-s3-linearizable-registers,linearizable register>> fails. Defaults to `5s`.\n\nNOTE: The option of defining client settings in the repository settings as\ndocumented below is considered deprecated, and will be removed in a future\nversion.\n\nIn addition to the above settings, you may also specify all non-secure client\nsettings in the repository settings. In this case, the client settings found in\nthe repository settings will be merged with those of the named client used by\nthe repository. Conflicts between client and repository settings are resolved\nby the repository settings taking precedence over client settings.\n\nFor example:\n\n[source,console]\n----\nPUT _snapshot/my_s3_repository\n{\n  \"type\": \"s3\",\n  \"settings\": {\n    \"client\": \"my-client\",\n    \"bucket\": \"my-bucket\",\n    \"endpoint\": \"my.s3.endpoint\"\n  }\n}\n----\n// TEST[skip:we don't have s3 set up while testing this]\n\nThis sets up a repository that uses all client settings from the client\n`my_client_name` except for the `endpoint` that is overridden to\n`my.s3.endpoint` by the repository settings.\n`\n[[repository-s3-storage-classes]]\n==== S3 storage classes\n\nAmazon S3 supports a variety of  _storage classes_, each of which offers\ndifferent operational characteristics. For instance, some classes cost less per\nbyte stored per month, but cost more per request, and other classes may vary in\nterms of their availability guarantees.\n\nYou may specify the storage class that {es} uses to store data objects with the\n`storage_class` repository setting.\n\nChanging the `storage_class` setting on an existing repository only affects the\nstorage class for newly created objects, resulting in a mixed usage of storage\nclasses.\n\nYou may use an S3 Lifecycle Policy to adjust the storage class of existing\nobjects in your repository, but you must not transition objects to an\nunsupported class such as the Glacier classes, and you must not expire objects.\nIf you use a Glacier storage class, or another unsupported storage class, or\nobject expiry, then you may permanently lose access to your repository\ncontents.\n\nYou may use the `intelligent_tiering` storage class to automatically manage\nthe class of objects, but you must not enable the optional Archive Access or\nDeep Archive Access tiers. If you use these tiers then you may permanently lose\naccess to your repository contents.\n\nFor more information about S3 storage classes, see\nhttps://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html[AWS\nStorage Classes Guide].\n\n[[repository-s3-permissions]]\n==== Recommended S3 permissions\n\nIn order to restrict the Elasticsearch snapshot process to the minimum required\nresources, we recommend using Amazon IAM in conjunction with pre-existing S3\nbuckets. Here is an example policy which will allow the snapshot access to an S3\nbucket named \"snaps.example.com\". This may be configured through the AWS IAM\nconsole, by creating a Custom Policy, and using a Policy Document similar to\nthis (changing snaps.example.com to your bucket name).\n\n[source,js]\n----\n{\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"s3:ListBucket\",\n        \"s3:GetBucketLocation\",\n        \"s3:ListBucketMultipartUploads\",\n        \"s3:ListBucketVersions\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": [\n        \"arn:aws:s3:::snaps.example.com\"\n      ]\n    },\n    {\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:PutObject\",\n        \"s3:DeleteObject\",\n        \"s3:AbortMultipartUpload\",\n        \"s3:ListMultipartUploadParts\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": [\n        \"arn:aws:s3:::snaps.example.com/*\"\n      ]\n    }\n  ],\n  \"Version\": \"2012-10-17\"\n}\n----\n// NOTCONSOLE\n\nYou may further restrict the permissions by specifying a prefix within the\nbucket, in this example, named \"foo\".\n\n[source,js]\n----\n{\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"s3:ListBucket\",\n        \"s3:GetBucketLocation\",\n        \"s3:ListBucketMultipartUploads\",\n        \"s3:ListBucketVersions\"\n      ],\n      \"Condition\": {\n        \"StringLike\": {\n          \"s3:prefix\": [\n            \"foo/*\"\n          ]\n        }\n      },\n      \"Effect\": \"Allow\",\n      \"Resource\": [\n        \"arn:aws:s3:::snaps.example.com\"\n      ]\n    },\n    {\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:PutObject\",\n        \"s3:DeleteObject\",\n        \"s3:AbortMultipartUpload\",\n        \"s3:ListMultipartUploadParts\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": [\n        \"arn:aws:s3:::snaps.example.com/foo/*\"\n      ]\n    }\n  ],\n  \"Version\": \"2012-10-17\"\n}\n----\n// NOTCONSOLE\n\nThe bucket needs to exist to register a repository for snapshots. If you did not\ncreate the bucket then the repository registration will fail.\n\n[[iam-kubernetes-service-accounts]]\n[discrete]\n===== Using IAM roles for Kubernetes service accounts for authentication\n\nIf you want to use https://aws.amazon.com/blogs/opensource/introducing-fine-grained-iam-roles-service-accounts/[Kubernetes service accounts]\nfor authentication, you need to add a symlink to the `$AWS_WEB_IDENTITY_TOKEN_FILE` environment variable\n(which should be automatically set by a Kubernetes pod) in the S3 repository config directory, so the repository\ncan have the read access for the service account (a repository can't read any files outside its config directory).\nFor example:\n\n[source,bash]\n----\nmkdir -p \"${ES_PATH_CONF}/repository-s3\"\nln -s $AWS_WEB_IDENTITY_TOKEN_FILE \"${ES_PATH_CONF}/repository-s3/aws-web-identity-token-file\"\n----\n\nIMPORTANT: The symlink must be created on all data and master eligible nodes and be readable\nby the `elasticsearch` user. By default, {es} runs as user `elasticsearch` using uid:gid `1000:0`.\n\nIf the symlink exists, it will be used by default by all S3 repositories that don't have explicit `client` credentials.\n\n[[repository-s3-aws-vpc]]\n==== AWS VPC bandwidth settings\n\nAWS instances resolve S3 endpoints to a public IP. If the Elasticsearch\ninstances reside in a private subnet in an AWS VPC then all traffic to S3 will\ngo through the VPC's NAT instance. If your VPC's NAT instance is a smaller\ninstance size (e.g. a t2.micro) or is handling a high volume of network traffic\nyour bandwidth to S3 may be limited by that NAT instance's networking bandwidth\nlimitations. Instead we recommend creating a https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html[VPC endpoint]\nthat enables connecting to S3 in instances that reside in a private subnet in\nan AWS VPC. This will eliminate any limitations imposed by the network\nbandwidth of your VPC's NAT instance.\n\nInstances residing in a public subnet in an AWS VPC will connect to S3 via the\nVPC's internet gateway and not be bandwidth limited by the VPC's NAT instance.\n\n[[repository-s3-compatible-services]]\n==== S3-compatible services\n\nThere are a number of storage systems that provide an S3-compatible API, and\nthe `s3` repository type allows you to use these systems in place of AWS S3.\nTo do so, you should set the `s3.client.CLIENT_NAME.endpoint` setting to the\nsystem's endpoint. This setting accepts IP addresses and hostnames and may\ninclude a port. For example, the endpoint may be `172.17.0.2` or\n`172.17.0.2:9000`.\n\nBy default {es} communicates with your storage system using HTTPS, and\nvalidates the repository's certificate chain using the JVM-wide truststore.\nEnsure that the JVM-wide truststore includes an entry for your repository. If\nyou wish to use unsecured HTTP communication instead of HTTPS, set\n`s3.client.CLIENT_NAME.protocol` to `http`.\n\nhttps://minio.io[MinIO] is an example of a storage system that provides an\nS3-compatible API. The `s3` repository type allows {es} to work with\nMinIO-backed repositories as well as repositories stored on AWS S3. Other\nS3-compatible storage systems may also work with {es}, but these are not\ncovered by the {es} test suite.\n\nThere are many systems, including some from very well-known storage vendors,\nwhich claim to offer an S3-compatible API despite failing to emulate S3's\nbehaviour in full. If you are using such a system for your snapshots, consider\nusing a <<snapshots-filesystem-repository,shared filesystem repository>> based\non a standardized protocol such as NFS to access your storage system instead.\nThe `s3` repository type requires full compatibility with S3. In particular it\nmust support the same set of API endpoints, with the same parameters, return\nthe same errors in case of failures, and offer consistency and performance at\nleast as good as S3 even when accessed concurrently by multiple nodes. You will\nneed to work with the supplier of your storage system to address any\nincompatibilities you encounter. Please do not report {es} issues involving\nstorage systems which claim to be S3-compatible unless you can demonstrate that\nthe same issue exists when using a genuine AWS S3 repository.\n\nYou can perform some basic checks of the suitability of your storage system\nusing the {ref}/repo-analysis-api.html[repository analysis API]. If this API\ndoes not complete successfully, or indicates poor performance, then your\nstorage system is not fully compatible with AWS S3 and therefore unsuitable for\nuse as a snapshot repository. However, these checks do not guarantee full\ncompatibility.\n\nMost storage systems can be configured to log the details of their interaction\nwith {es}. If you are investigating a suspected incompatibility with AWS S3, it\nis usually simplest to collect these logs and provide them to the supplier of\nyour storage system for further analysis. If the incompatibility is not clear\nfrom the logs emitted by the storage system, configure {es} to log every\nrequest it makes to the S3 API by <<configuring-logging-levels,setting the\nlogging level>> of the `com.amazonaws.request` logger to `DEBUG`.\n\nTo prevent leaking sensitive information such as credentials and keys in logs,\n{es} rejects configuring this logger at high verbosity unless\n<<http-rest-request-tracer,insecure network trace logging>> is enabled.\nTo do so, you must explicitly enable it on each node by setting the system\nproperty `es.insecure_network_trace_enabled` to `true`.\n\nOnce enabled, you can configure the `com.amazonaws.request` logger:\n\n[source,console]\n----\nPUT /_cluster/settings\n{\n  \"persistent\": {\n    \"logger.com.amazonaws.request\": \"DEBUG\"\n  }\n}\n----\n// TEST[skip:we don't really want to change this logger]\n\nCollect the Elasticsearch logs covering the time period of the failed analysis\nfrom all nodes in your cluster and share them with the supplier of your storage\nsystem along with the analysis response so they can use them to determine the\nproblem. See the\nhttps://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/java-dg-logging.html[AWS Java SDK]\ndocumentation for further information, including details about other loggers\nthat can be used to obtain even more verbose logs. When you have finished\ncollecting the logs needed by your supplier, set the logger settings back to\n`null` to return to the default logging configuration and disable insecure network\ntrace logging again. See <<cluster-logger>> and <<cluster-update-settings>> for\nmore information.\n\n[[repository-s3-linearizable-registers]]\n==== Linearizable register implementation\n\nThe linearizable register implementation for S3 repositories is based on the\nstrongly consistent semantics of the multipart upload API. {es} first creates a\nmultipart upload to indicate its intention to perform a linearizable register\noperation. {es} then lists and cancels all other multipart uploads for the same\nregister. {es} then attempts to complete the upload. If the upload completes\nsuccessfully then the compare-and-exchange operation was atomic.\n"
}