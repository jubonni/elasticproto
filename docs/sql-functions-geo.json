{
    "meta": {
        "timestamp": "2024-11-01T03:07:09.274270",
        "size": 5171,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-functions-geo.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "sql-functions-geo",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[sql-functions-geo]]\n=== Geo Functions\n\nbeta[]\n\nThe geo functions work with geometries stored in `geo_point`, `geo_shape` and `shape` fields, or returned by other geo functions.\n\n==== Limitations\n\n<<geo-point, `geo_point`>>, <<geo-shape, `geo_shape`>> and <<shape, `shape`>> and types are represented in SQL as\ngeometry and can be used interchangeably with the following exceptions:\n\n* `geo_shape` and `shape` fields don't have doc values, therefore these fields cannot be used for filtering, grouping\n  or sorting.\n\n* `geo_points` fields are indexed and have doc values by default, however only latitude and longitude are stored and\n  indexed with some loss of precision from the original values (4.190951585769653E-8 for the latitude and\n  8.381903171539307E-8 for longitude). The altitude component is accepted but not stored in doc values nor indexed.\n  Therefore calling `ST_Z` function in the filtering, grouping or sorting will return `null`.\n\n==== Geometry Conversion\n\n[[sql-functions-geo-st-as-wkt]]\n===== `ST_AsWKT`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nST_AsWKT(\n    geometry <1>\n)\n--------------------------------------------------\n\n*Input*:\n\n<1> geometry. If `null`, the function returns `null`.\n\n*Output*: string\n\n*Description*: Returns the WKT representation of the `geometry`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/geo.csv-spec[aswkt]\n--------------------------------------------------\n\n\n[[sql-functions-geo-st-wkt-to-sql]]\n===== `ST_WKTToSQL`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nST_WKTToSQL(\n    string <1>\n)\n--------------------------------------------------\n\n*Input*:\n\n<1> string WKT representation of geometry. If `null`, the function returns\n`null`.\n\n*Output*: geometry\n\n*Description*: Returns the geometry from WKT representation.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/geo.csv-spec[wkttosql]\n--------------------------------------------------\n\n==== Geometry Properties\n\n[[sql-functions-geo-st-geometrytype]]\n===== `ST_GeometryType`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nST_GeometryType(\n    geometry <1>\n)\n--------------------------------------------------\n\n*Input*:\n\n<1> geometry. If `null`, the function returns `null`.\n\n*Output*: string\n\n*Description*: Returns the type of the `geometry` such as POINT, MULTIPOINT, LINESTRING, MULTILINESTRING, POLYGON, MULTIPOLYGON, GEOMETRYCOLLECTION, ENVELOPE or CIRCLE.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/geo.csv-spec[geometrytype]\n--------------------------------------------------\n\n[[sql-functions-geo-st-x]]\n===== `ST_X`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nST_X(\n    geometry <1>\n)\n--------------------------------------------------\n\n*Input*:\n\n<1> geometry. If `null`, the function returns `null`.\n\n*Output*: double\n\n*Description*: Returns the longitude of the first point in the geometry.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/geo.csv-spec[x]\n--------------------------------------------------\n\n[[sql-functions-geo-st-y]]\n===== `ST_Y`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nST_Y(\n    geometry <1>\n)\n--------------------------------------------------\n\n*Input*:\n\n<1> geometry. If `null`, the function returns `null`.\n\n*Output*: double\n\n*Description*: Returns the latitude of the first point in the geometry.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/geo.csv-spec[y]\n--------------------------------------------------\n\n[[sql-functions-geo-st-z]]\n===== `ST_Z`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nST_Z(\n    geometry <1>\n)\n--------------------------------------------------\n\n*Input*:\n\n<1> geometry. If `null`, the function returns `null`.\n\n*Output*: double\n\n*Description*: Returns the altitude of the first point in the geometry.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/geo.csv-spec[z]\n--------------------------------------------------\n\n[[sql-functions-geo-st-distance]]\n===== `ST_Distance`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nST_Distance(\n    geometry, <1>\n    geometry  <2>\n)\n--------------------------------------------------\n\n*Input*:\n\n<1> source geometry. If `null`, the function returns `null`.\n<2> target geometry. If `null`, the function returns `null`.\n\n*Output*: Double\n\n*Description*: Returns the distance between geometries in meters. Both geometries have to be points.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/geo.csv-spec[distance]\n--------------------------------------------------\n"
}