{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.747582",
        "size": 1705,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/skipping-rollover.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "skipping-rollover",
        "version": "8.15"
    },
    "doc": "[[skipping-rollover]]\n== Skip rollover\n\nWhen `index.lifecycle.indexing_complete` is set to `true`, \n{ilm-init} won't perform the rollover action on an index, \neven if it otherwise meets the rollover criteria. \nIt's set automatically by {ilm-init} when the rollover action completes successfully.\n\nYou can set it manually to skip rollover if you need to make an exception\nto your normal lifecycle policy and update the alias to force a roll over, \nbut want {ilm-init} to continue to manage the index. \nIf you use the rollover API, it is not necessary to configure this setting manually. \n\nIf an index's lifecycle policy is removed, this setting is also removed.\n\nIMPORTANT: When `index.lifecycle.indexing_complete` is `true`, \n{ilm-init} verifies that the index is no longer the write index \nfor the alias specified by `index.lifecycle.rollover_alias`.\nIf the index is still the write index or the rollover alias is not set,\nthe index is moved to the <<index-lifecycle-error-handling,`ERROR` step>>.\n\nFor example, if you need to change the name of new indices in a series while retaining\npreviously-indexed data in accordance with your configured policy, you can:\n\n. Create a template for the new index pattern that uses the same policy. \n. Bootstrap the initial index.\n. Change the write index for the alias to the bootstrapped index \nusing the <<indices-aliases,aliases API>>.\n. Set `index.lifecycle.indexing_complete` to `true` on the old index to indicate \nthat it does not need to be rolled over.\n\n{ilm-init} continues to manage the old index in accordance with your existing policy. \nNew indices are named according to the new template and \nmanaged according to the same policy without interruption.\n"
}