{
    "meta": {
        "timestamp": "2024-11-01T03:07:08.814276",
        "size": 3065,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-bulk-delete-role.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "security-api-bulk-delete-role",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[security-api-bulk-delete-role]]\n=== Bulk delete roles API\npreview::[]\n++++\n<titleabbrev>Bulk delete roles API</titleabbrev>\n++++\n\nBulk deletes roles in the native realm.\n\n[[security-api-bulk-delete-role-request]]\n==== {api-request-title}\n\n`DELETE /_security/role/`\n\n[[security-api-bulk-delete-role-prereqs]]\n==== {api-prereq-title}\n\n* To use this API, you must have at least the `manage_security` cluster\nprivilege.\n\n[[security-api-bulk-delete-role-desc]]\n==== {api-description-title}\n\nThe role management APIs are generally the preferred way to manage roles, rather than using\n<<roles-management-file,file-based role management>>. The bulk delete roles API cannot delete\nroles that are defined in roles files.\n\n[[security-api-bulk-delete-role-path-params]]\n==== {api-path-parms-title}\n\n`refresh`::\nOptional setting of the {ref}/docs-refresh.html[refresh policy] for the write request. Defaults to Immediate.\n\n[[security-api-bulk-delete-role-request-body]]\n==== {api-request-body-title}\n\nThe following parameters can be specified in the body of a DELETE request\nand pertain to deleting a set of roles:\n\n`names`::\n(list) A list of role names to delete.\n\n[[security-bulk-api-delete-role-example]]\n==== {api-examples-title}\nThe following example deletes a `my_admin_role` and `my_user_role` roles:\n\n[source,console]\n--------------------------------------------------\nDELETE /_security/role\n{\n    \"names\": [\"my_admin_role\", \"my_user_role\"]\n}\n--------------------------------------------------\n// TEST[setup:admin_role,user_role]\n\nIf the roles are successfully deleted, the request returns:\n\n[source,console-result]\n--------------------------------------------------\n{\n    \"deleted\": [\n        \"my_admin_role\",\n        \"my_user_role\"\n    ]\n}\n--------------------------------------------------\n\nIf a role cannot be found, the not found roles are grouped under `not_found`:\n\n[source,console]\n--------------------------------------------------\nDELETE /_security/role\n{\n    \"names\": [\"my_admin_role\", \"not_an_existing_role\"]\n}\n--------------------------------------------------\n// TEST[setup:admin_role]\n\n[source,console-result]\n--------------------------------------------------\n{\n    \"deleted\": [\n        \"my_admin_role\"\n    ],\n    \"not_found\": [\n        \"not_an_existing_role\"\n    ]\n}\n--------------------------------------------------\n\nIf a request fails or is invalid, the errors are grouped under `errors`:\n\n[source,console]\n--------------------------------------------------\nDELETE /_security/role\n{\n    \"names\": [\"my_admin_role\", \"superuser\"]\n}\n--------------------------------------------------\n// TEST[setup:admin_role]\n\n\n[source,console-result]\n--------------------------------------------------\n{\n    \"deleted\": [\n        \"my_admin_role\"\n    ],\n    \"errors\": {\n        \"count\": 1,\n        \"details\": {\n            \"superuser\": {\n                \"type\": \"illegal_argument_exception\",\n                \"reason\": \"role [superuser] is reserved and cannot be deleted\"\n            }\n        }\n    }\n}\n--------------------------------------------------\n"
}