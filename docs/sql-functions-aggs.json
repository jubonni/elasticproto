{
    "meta": {
        "timestamp": "2024-11-01T02:49:24.246806",
        "size": 23961,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-functions-aggs.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "sql-functions-aggs",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[sql-functions-aggs]]\n=== Aggregate Functions\n\nFunctions for computing a _single_ result from a set of input values.\n{es-sql} supports aggregate functions only alongside <<sql-syntax-group-by,grouping>> (implicit or explicit).\n\n[[sql-functions-aggs-general]]\n[discrete]\n=== General Purpose\n\n[[sql-functions-aggs-avg]]\n==== `AVG`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nAVG(numeric_field) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> numeric field. If this field contains only `null` values, the function\nreturns `null`. Otherwise, the function ignores `null` values in this field.\n\n*Output*: `double` numeric value\n\n*Description*: Returns the {wikipedia}/Arithmetic_mean[Average] (arithmetic mean) of input values.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggAvg]\n--------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggAvgScalars]\n--------------------------------------------------\n\n[[sql-functions-aggs-count]]\n==== `COUNT`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nCOUNT(expression) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> a field name, wildcard (`*`) or any numeric value. For `COUNT(*)` or\n`COUNT(<literal>)`, all values are considered, including `null` or missing\nones. For `COUNT(<field_name>)`, `null` values are not considered.\n\n*Output*: numeric value\n\n*Description*: Returns the total number (count) of input values.\n\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggCountStar]\n--------------------------------------------------\n\n\n[[sql-functions-aggs-count-all]]\n==== `COUNT(ALL)`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nCOUNT(ALL field_name) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> a field name. If this field contains only `null` values, the function\nreturns `null`. Otherwise, the function ignores `null` values in this field.\n\n*Output*: numeric value\n\n*Description*: Returns the total number (count) of all _non-null_ input values. `COUNT(<field_name>)` and `COUNT(ALL <field_name>)` are equivalent.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggCountAll]\n--------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggCountAllScalars]\n--------------------------------------------------\n\n[[sql-functions-aggs-count-distinct]]\n==== `COUNT(DISTINCT)`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nCOUNT(DISTINCT field_name) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> a field name\n\n*Output*: numeric value. If this field contains only `null` values, the function\nreturns `null`. Otherwise, the function ignores `null` values in this field.\n\n*Description*: Returns the total number of _distinct non-null_ values in input values.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggCountDistinct]\n--------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggCountDistinctScalars]\n--------------------------------------------------\n\n[[sql-functions-aggs-first]]\n==== `FIRST/FIRST_VALUE`\n\n.Synopsis:\n[source, sql]\n----------------------------------------------\nFIRST(\n    field_name               <1>\n    [, ordering_field_name]) <2>\n----------------------------------------------\n\n*Input*:\n\n<1> target field for the aggregation\n<2> optional field used for ordering\n\n*Output*: same type as the input\n\n*Description*: Returns the first non-`null` value (if such exists) of the `field_name` input column sorted by\nthe `ordering_field_name` column. If `ordering_field_name` is not provided, only the `field_name`\ncolumn is used for the sorting. E.g.:\n\n[cols=\"<,<\"]\n|===\ns| a    | b\n\n | 100  | 1\n | 200  | 1\n | 1    | 2\n | 2    | 2\n | 10   | null\n | 20   | null\n | null | null\n|===\n\n[source, sql]\n----------------------\nSELECT FIRST(a) FROM t\n----------------------\n\nwill result in:\n[cols=\"<\"]\n|===\ns| FIRST(a)\n | 1\n|===\n\nand\n\n[source, sql]\n-------------------------\nSELECT FIRST(a, b) FROM t\n-------------------------\n\nwill result in:\n[cols=\"<\"]\n|===\ns| FIRST(a, b)\n | 100\n|===\n\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n-----------------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[firstWithOneArg]\n-----------------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[firstWithOneArgAndGroupBy]\n--------------------------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n-----------------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[firstWithTwoArgs]\n-----------------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n---------------------------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[firstWithTwoArgsAndGroupBy]\n---------------------------------------------------------------------\n\n`FIRST_VALUE` is a name alias and can be used instead of `FIRST`, e.g.:\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[firstValueWithTwoArgsAndGroupBy]\n--------------------------------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[firstValueWithTwoArgsAndGroupByScalars]\n--------------------------------------------------------------------------\n\n[NOTE]\n`FIRST` cannot be used in a HAVING clause.\n[NOTE]\n`FIRST` cannot be used with columns of type <<text, `text`>> unless\nthe field is also <<before-enabling-fielddata,saved as a keyword>>.\n\n[[sql-functions-aggs-last]]\n==== `LAST/LAST_VALUE`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nLAST(\n    field_name               <1>\n    [, ordering_field_name]) <2>\n--------------------------------------------------\n\n*Input*:\n\n<1> target field for the aggregation\n<2> optional field used for ordering\n\n*Output*: same type as the input\n\n*Description*: It's the inverse of <<sql-functions-aggs-first>>. Returns the last non-`null` value (if such exists) of the\n`field_name` input column sorted descending by the `ordering_field_name` column. If `ordering_field_name` is not\nprovided, only the `field_name` column is used for the sorting. E.g.:\n\n[cols=\"<,<\"]\n|===\ns| a    | b\n\n | 10   | 1\n | 20   | 1\n | 1    | 2\n | 2    | 2\n | 100  | null\n | 200  | null\n | null | null\n|===\n\n[source, sql]\n------------------------\nSELECT LAST(a) FROM t\n------------------------\n\nwill result in:\n[cols=\"<\"]\n|===\ns| LAST(a)\n | 200\n|===\n\nand\n\n[source, sql]\n------------------------\nSELECT LAST(a, b) FROM t\n------------------------\n\nwill result in:\n[cols=\"<\"]\n|===\ns| LAST(a, b)\n | 2\n|===\n\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n-----------------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[lastWithOneArg]\n-----------------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n-------------------------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[lastWithOneArgAndGroupBy]\n-------------------------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n-----------------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[lastWithTwoArgs]\n-----------------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[lastWithTwoArgsAndGroupBy]\n--------------------------------------------------------------------\n\n`LAST_VALUE` is a name alias and can be used instead of `LAST`, e.g.:\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n-------------------------------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[lastValueWithTwoArgsAndGroupBy]\n-------------------------------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n-------------------------------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[lastValueWithTwoArgsAndGroupByScalars]\n-------------------------------------------------------------------------\n\n[NOTE]\n`LAST` cannot be used in `HAVING` clause.\n[NOTE]\n`LAST` cannot be used with columns of type <<text, `text`>> unless\nthe field is also <<before-enabling-fielddata,`saved as a keyword`>>.\n\n[[sql-functions-aggs-max]]\n==== `MAX`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nMAX(field_name) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> a numeric field. If this field contains only `null` values, the function\nreturns `null`. Otherwise, the function ignores `null` values in this field.\n\n*Output*: same type as the input\n\n*Description*: Returns the maximum value across input values in the field `field_name`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggMax]\n--------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggMaxScalars]\n--------------------------------------------------\n\n[NOTE]\n`MAX` on a field of type <<text, `text`>> or <<keyword, `keyword`>> is translated into\n<<sql-functions-aggs-last>> and therefore, it cannot be used in `HAVING` clause.\n\n[[sql-functions-aggs-min]]\n==== `MIN`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nMIN(field_name) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> a numeric field. If this field contains only `null` values, the function\nreturns `null`. Otherwise, the function ignores `null` values in this field.\n\n*Output*: same type as the input\n\n*Description*: Returns the minimum value across input values in the field `field_name`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggMin]\n--------------------------------------------------\n\n[NOTE]\n`MIN` on a field of type <<text, `text`>> or <<keyword, `keyword`>> is translated into\n<<sql-functions-aggs-first>> and therefore, it cannot be used in `HAVING` clause.\n\n[[sql-functions-aggs-sum]]\n==== `SUM`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nSUM(field_name) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> a numeric field. If this field contains only `null` values, the function\nreturns `null`. Otherwise, the function ignores `null` values in this field.\n\n*Output*: `bigint` for integer input, `double` for floating points\n\n*Description*: Returns the sum of input values in the field `field_name`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggSum]\n--------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggSumScalars]\n--------------------------------------------------\n\n[[sql-functions-aggs-statistics]]\n[discrete]\n=== Statistics\n\n[[sql-functions-aggs-kurtosis]]\n==== `KURTOSIS`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nKURTOSIS(field_name) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> a numeric field. If this field contains only `null` values, the function\nreturns `null`. Otherwise, the function ignores `null` values in this field.\n\n*Output*: `double` numeric value\n\n*Description*:\n\n{wikipedia}/Kurtosis[Quantify] the shape of the distribution of input values in the field `field_name`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggKurtosis]\n--------------------------------------------------\n\n[NOTE]\n====\n`KURTOSIS` cannot be used on top of scalar functions or operators but only directly on a field. So, for example,\nthe following is not allowed and an error is returned:\n[source, sql]\n---------------------------------------\n SELECT KURTOSIS(salary / 12.0), gender FROM emp GROUP BY gender\n---------------------------------------\n====\n\n[[sql-functions-aggs-mad]]\n==== `MAD`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nMAD(field_name) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> a numeric field. If this field contains only `null` values, the function\nreturns `null`. Otherwise, the function ignores `null` values in this field.\n\n*Output*: `double` numeric value\n\n*Description*:\n\n{wikipedia}/Median_absolute_deviation[Measure] the variability of the input values in the field `field_name`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggMad]\n--------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggMadScalars]\n--------------------------------------------------\n\n[[sql-functions-aggs-percentile]]\n==== `PERCENTILE`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nPERCENTILE(\n    field_name,         <1>\n    percentile[,        <2>\n    method[,            <3>\n    method_parameter]]) <4>\n--------------------------------------------------\n\n*Input*:\n\n<1> a numeric field. If this field contains only `null` values, the function\nreturns `null`. Otherwise, the function ignores `null` values in this field.\n<2> a numeric expression (must be a constant and not based on a field). If\n`null`, the function returns `null`.\n<3> optional string literal for the <<search-aggregations-metrics-percentile-aggregation-approximation,percentile algorithm>>. Possible values: `tdigest` or `hdr`. Defaults to `tdigest`.\n<4> optional numeric literal that configures the <<search-aggregations-metrics-percentile-aggregation-approximation,percentile algorithm>>. Configures `compression` for `tdigest` or `number_of_significant_value_digits` for `hdr`. The default is the same as that of the backing algorithm.\n\n*Output*: `double` numeric value\n\n*Description*:\n\nReturns the nth {wikipedia}/Percentile[percentile] (represented by `numeric_exp` parameter)\nof input values in the field `field_name`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggPercentile]\n--------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggPercentileScalars]\n--------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggPercentileWithPercentileConfig]\n--------------------------------------------------\n\n[[sql-functions-aggs-percentile-rank]]\n==== `PERCENTILE_RANK`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nPERCENTILE_RANK(\n    field_name,         <1>\n    value[,             <2>\n    method[,            <3>\n    method_parameter]]) <4>\n--------------------------------------------------\n\n*Input*:\n\n<1> a numeric field. If this field contains only `null` values, the function\nreturns `null`. Otherwise, the function ignores `null` values in this field.\n<2> a numeric expression (must be a constant and not based on a field). If\n`null`, the function returns `null`.\n<3> optional string literal for the <<search-aggregations-metrics-percentile-aggregation-approximation,percentile algorithm>>. Possible values: `tdigest` or `hdr`. Defaults to `tdigest`.\n<4> optional numeric literal that configures the <<search-aggregations-metrics-percentile-aggregation-approximation,percentile algorithm>>. Configures `compression` for `tdigest` or `number_of_significant_value_digits` for `hdr`. The default is the same as that of the backing algorithm.\n\n\n*Output*: `double` numeric value\n\n*Description*:\n\nReturns the nth {wikipedia}/Percentile_rank[percentile rank] (represented by `numeric_exp` parameter)\nof input values in the field `field_name`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggPercentileRank]\n--------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggPercentileRankScalars]\n--------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggPercentileRankWithPercentileConfig]\n--------------------------------------------------\n\n[[sql-functions-aggs-skewness]]\n==== `SKEWNESS`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nSKEWNESS(field_name) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> a numeric field. If this field contains only `null` values, the function\nreturns `null`. Otherwise, the function ignores `null` values in this field.\n\n*Output*: `double` numeric value\n\n*Description*:\n\n{wikipedia}/Skewness[Quantify] the asymmetric distribution of input values in the field `field_name`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggSkewness]\n--------------------------------------------------\n\n[NOTE]\n====\n`SKEWNESS` cannot be used on top of scalar functions but only directly on a field. So, for example, the following is\nnot allowed and an error is returned:\n[source, sql]\n---------------------------------------\n SELECT SKEWNESS(ROUND(salary / 12.0, 2), gender FROM emp GROUP BY gender\n---------------------------------------\n====\n\n[[sql-functions-aggs-stddev-pop]]\n==== `STDDEV_POP`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nSTDDEV_POP(field_name) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> a numeric field. If this field contains only `null` values, the function\nreturns `null`. Otherwise, the function ignores `null` values in this field.\n\n*Output*: `double` numeric value\n\n*Description*:\n\nReturns the {wikipedia}/Standard_deviations[population standard deviation] of input values in the field `field_name`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggStddevPop]\n--------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggStddevPopScalars]\n--------------------------------------------------\n\n[[sql-functions-aggs-stddev-samp]]\n==== `STDDEV_SAMP`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nSTDDEV_SAMP(field_name) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> a numeric field. If this field contains only `null` values, the function\nreturns `null`. Otherwise, the function ignores `null` values in this field.\n\n*Output*: `double` numeric value\n\n*Description*:\n\nReturns the {wikipedia}/Standard_deviations[sample standard deviation] of input values in the field `field_name`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggStddevSamp]\n--------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggStddevSampScalars]\n--------------------------------------------------\n\n[[sql-functions-aggs-sum-squares]]\n==== `SUM_OF_SQUARES`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nSUM_OF_SQUARES(field_name) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> a numeric field. If this field contains only `null` values, the function\nreturns `null`. Otherwise, the function ignores `null` values in this field.\n\n*Output*: `double` numeric value\n\n*Description*:\n\nReturns the sum of squares of input values in the field `field_name`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggSumOfSquares]\n--------------------------------------------------\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggSumOfSquaresScalars]\n--------------------------------------------------\n\n[[sql-functions-aggs-var-pop]]\n==== `VAR_POP`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nVAR_POP(field_name) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> a numeric field. If this field contains only `null` values, the function\nreturns `null`. Otherwise, the function ignores `null` values in this field.\n\n*Output*: `double` numeric value\n\n*Description*:\n\nReturns the {wikipedia}/Variance[population variance] of input values in the field `field_name`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggVarPop]\n--------------------------------------------------\n\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggVarPopScalars]\n--------------------------------------------------\n\n[[sql-functions-aggs-var-samp]]\n==== `VAR_SAMP`\n\n.Synopsis:\n[source, sql]\n--------------------------------------------------\nVAR_SAMP(field_name) <1>\n--------------------------------------------------\n\n*Input*:\n\n<1> a numeric field. If this field contains only `null` values, the function\nreturns `null`. Otherwise, the function ignores `null` values in this field.\n\n*Output*: `double` numeric value\n\n*Description*:\n\nReturns the {wikipedia}/Variance[sample variance] of input values in the field `field_name`.\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggVarSamp]\n--------------------------------------------------\n\n\n[\"source\",\"sql\",subs=\"attributes,macros\"]\n--------------------------------------------------\ninclude-tagged::{sql-specs}/docs/docs.csv-spec[aggVarSampScalars]\n--------------------------------------------------\n"
}