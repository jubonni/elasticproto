{
    "meta": {
        "size": 5416,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/ml-rare.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "ml-rare",
        "version": "8.15"
    },
    "doc": "[\"appendix\",role=\"exclude\",id=\"ml-rare-functions\"]\n= Rare functions\n\nThe rare functions detect values that occur rarely in time or rarely for a\npopulation.\n\nThe `rare` analysis detects anomalies according to the number of distinct rare\nvalues. This differs from `freq_rare`, which detects anomalies according to the\nnumber of times (frequency) rare values occur.\n\n[NOTE]\n====\n* The `rare` and `freq_rare` functions should not be used in conjunction with\n`exclude_frequent`.\n* You cannot create forecasts for {anomaly-jobs} that contain `rare` or\n`freq_rare` functions. \n* You cannot add rules with conditions to detectors that use `rare` or \n`freq_rare` functions. \n* Shorter bucket spans (less than 1 hour, for example) are recommended when\nlooking for rare events. The functions model whether something happens in a\nbucket at least once. With longer bucket spans, it is more likely that\nentities will be seen in a bucket and therefore they appear less rare.\nPicking the ideal bucket span depends on the characteristics of the data\nwith shorter bucket spans typically being measured in minutes, not hours.\n* To model rare data, a learning period of at least 20 buckets is required\nfor typical data.\n====\n\nThe {ml-features} include the following rare functions:\n\n* <<ml-rare,`rare`>>\n* <<ml-freq-rare,`freq_rare`>>\n\n\n[discrete]\n[[ml-rare]]\n== Rare\n\nThe `rare` function detects values that occur rarely in time or rarely for a\npopulation. It detects anomalies according to the number of distinct rare values.\n\nThis function supports the following properties:\n\n* `by_field_name` (required)\n* `over_field_name` (optional)\n* `partition_field_name` (optional)\n\nFor more information about those properties, see the\n{ref}/ml-put-job.html#ml-put-job-request-body[create {anomaly-jobs} API].\n\n.Example 1: Analyzing status codes with the rare function\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"rare\",\n  \"by_field_name\" : \"status\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf you use this `rare` function in a detector in your {anomaly-job}, it detects\nvalues that are rare in time. It models status codes that occur over time and\ndetects when rare status codes occur compared to the past. For example, you can\ndetect status codes in a web access log that have never (or rarely) occurred\nbefore.\n\n.Example 2: Analyzing status codes in a population with the rare function\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"rare\",\n  \"by_field_name\" : \"status\",\n  \"over_field_name\" : \"clientip\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf you use this `rare` function in a detector in your {anomaly-job}, it detects\nvalues that are rare in a population. It models status code and client IP\ninteractions that occur. It defines a rare status code as one that occurs for\nfew client IP values compared to the population. It detects client IP values\nthat experience one or more distinct rare status codes compared to the\npopulation. For example in a web access log, a `clientip` that experiences the\nhighest number of different rare status codes compared to the population is\nregarded as highly anomalous. This analysis is based on the number of different\nstatus code values, not the count of occurrences.\n\nNOTE: To define a status code as rare the {ml-features} look at the number\nof distinct status codes that occur, not the number of times the status code\noccurs. If a single client IP experiences a single unique status code, this\nis rare, even if it occurs for that client IP in every bucket.\n\n[discrete]\n[[ml-freq-rare]]\n== Freq_rare\n\nThe `freq_rare` function detects values that occur rarely for a population.\nIt detects anomalies according to the number of times (frequency) that rare\nvalues occur.\n\nThis function supports the following properties:\n\n* `by_field_name` (required)\n* `over_field_name` (required)\n* `partition_field_name` (optional)\n\nFor more information about those properties, see the\n{ref}/ml-put-job.html#ml-put-job-request-body[create {anomaly-jobs} API].\n\n.Example 3: Analyzing URI values in a population with the freq_rare function\n[source,js]\n--------------------------------------------------\n{\n  \"function\" : \"freq_rare\",\n  \"by_field_name\" : \"uri\",\n  \"over_field_name\" : \"clientip\"\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nIf you use this `freq_rare` function in a detector in your {anomaly-job}, it\ndetects values that are frequently rare in a population. It models URI paths and\nclient IP interactions that occur. It defines a rare URI path as one that is\nvisited by few client IP values compared to the population. It detects the\nclient IP values that experience many interactions with rare URI paths compared\nto the population. For example in a web access log, a client IP that visits\none or more rare URI paths many times compared to the population is regarded as\nhighly anomalous. This analysis is based on the count of interactions with rare\nURI paths, not the number of different URI path values.\n\n\nNOTE: Defining a URI path as rare happens the same way as you can see in the \ncase of the status codes above: the analytics consider the number of distinct \nvalues that occur and not the number of times the URI path occurs. If a single \nclient IP visits a single unique URI path, this is rare, even if it\noccurs for that client IP in every bucket.\n"
}