{
    "meta": {
        "size": 5775,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/field-level-security.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "field-level-security",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[field-level-security]]\n=== Field level security\n\nField level security restricts the fields that users have read access to.\nIn particular, it restricts which fields can be accessed from document-based \nread APIs. \n\nTo enable field level security, specify the fields that each role can access\nas part of the indices permissions in a role definition. Field level security is\nthus bound to a well-defined set of data streams or indices (and potentially a set of\n<<document-level-security, documents>>).\n\nThe following role definition grants read access only to the `category`,\n`@timestamp`, and `message` fields in all the `events-*` data streams and indices.\n\n[source,console]\n--------------------------------------------------\nPOST /_security/role/test_role1\n{\n  \"indices\": [\n    {\n      \"names\": [ \"events-*\" ],\n      \"privileges\": [ \"read\" ],\n      \"field_security\" : {\n        \"grant\" : [ \"category\", \"@timestamp\", \"message\" ]\n      }\n    }\n  ]\n}\n--------------------------------------------------\n\nAccess to the following metadata fields is always allowed: `_id`,\n`_type`, `_parent`, `_routing`, `_timestamp`, `_ttl`, `_size` and `_index`. If\nyou specify an empty list of fields, only these metadata fields are accessible.\n\nNOTE: Omitting the fields entry entirely disables field level security.\n\nYou can also specify field expressions. For example, the following\nexample grants read access to all fields that start with an `event_` prefix:\n\n[source,console]\n--------------------------------------------------\nPOST /_security/role/test_role2\n{\n  \"indices\" : [\n    {\n      \"names\" : [ \"*\" ],\n      \"privileges\" : [ \"read\" ],\n      \"field_security\" : {\n        \"grant\" : [ \"event_*\" ]\n      }\n    }\n  ]\n}\n--------------------------------------------------\n\nUse the dot notations to refer to nested fields in more complex documents. For\nexample, assuming the following document:\n\n[source,js]\n--------------------------------------------------\n{\n  \"customer\": {\n    \"handle\": \"Jim\",\n    \"email\": \"jim@mycompany.com\",\n    \"phone\": \"555-555-5555\"\n  }\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nThe following role definition enables only read access to the customer `handle`\nfield:\n\n[source,console]\n--------------------------------------------------\nPOST /_security/role/test_role3\n{\n  \"indices\" : [\n    {\n      \"names\" : [ \"*\" ],\n      \"privileges\" : [ \"read\" ],\n      \"field_security\" : {\n        \"grant\" : [ \"customer.handle\" ]\n      }\n    }\n  ]\n}\n--------------------------------------------------\n\nThis is where wildcard support shines. For example, use `customer.*` to enable\nonly read access to the `customer` data:\n\n[source,console]\n--------------------------------------------------\nPOST /_security/role/test_role4\n{\n  \"indices\" : [\n    {\n      \"names\" : [ \"*\" ],\n      \"privileges\" : [ \"read\" ],\n      \"field_security\" : {\n        \"grant\" : [ \"customer.*\" ]\n      }\n    }\n  ]\n}\n--------------------------------------------------\n\nYou can deny permission to access fields with the following syntax:\n\n[source,console]\n--------------------------------------------------\nPOST /_security/role/test_role5\n{\n  \"indices\" : [\n    {\n      \"names\" : [ \"*\" ],\n      \"privileges\" : [ \"read\" ],\n      \"field_security\" : {\n        \"grant\" : [ \"*\"],\n        \"except\": [ \"customer.handle\" ]\n      }\n    }\n  ]\n}\n--------------------------------------------------\n\nThe following rules apply:\n\n* The absence of `field_security` in a role is equivalent to * access.\n* If permission has been granted explicitly to some fields, you can specify\ndenied fields. The denied fields must be a subset of the fields to which\npermissions were granted.\n* Defining denied and granted fields implies access to all granted fields except\nthose which match the pattern in the denied fields.\n\nFor example:\n\n[source,console]\n--------------------------------------------------\nPOST /_security/role/test_role6\n{\n  \"indices\" : [\n    {\n      \"names\" : [ \"*\" ],\n      \"privileges\" : [ \"read\" ],\n      \"field_security\" : {\n        \"except\": [ \"customer.handle\" ],\n        \"grant\" : [ \"customer.*\" ]\n      }\n    }\n  ]\n}\n--------------------------------------------------\n\nIn the above example, users can read all fields with the prefix \"customer.\"\nexcept for \"customer.handle\".\n\nAn empty array for `grant` (for example, `\"grant\" : []`) means that access has\nnot been granted to any fields.\n\nWhen a user has several roles that specify field level permissions, the\nresulting field level permissions per data stream or index are the union of the individual role\npermissions. For example, if these two roles are merged:\n\n[source,console]\n--------------------------------------------------\nPOST /_security/role/test_role7\n{\n  \"indices\" : [\n    {\n      \"names\" : [ \"*\" ],\n      \"privileges\" : [ \"read\" ],\n      \"field_security\" : {\n        \"grant\": [ \"a.*\" ],\n        \"except\" : [ \"a.b*\" ]\n      }\n    }\n  ]\n}\n\nPOST /_security/role/test_role8\n{\n  \"indices\" : [\n    {\n      \"names\" : [ \"*\" ],\n      \"privileges\" : [ \"read\" ],\n      \"field_security\" : {\n        \"grant\": [ \"a.b*\" ],\n        \"except\" : [ \"a.b.c*\" ]\n      }\n    }\n  ]\n}\n--------------------------------------------------\n\nThe resulting permission is equal to:\n\n[source,js]\n--------------------------------------------------\n{\n  // role 1 + role 2\n  ...\n  \"indices\" : [\n    {\n      \"names\" : [ \"*\" ],\n      \"privileges\" : [ \"read\" ],\n      \"field_security\" : {\n        \"grant\": [ \"a.*\" ],\n        \"except\" : [ \"a.b.c*\" ]\n      }\n    }\n  ]\n}\n--------------------------------------------------\n// NOTCONSOLE\n\nNOTE: Field-level security should not be set on <<field-alias,`alias`>> fields.\nTo secure a\nconcrete field, its field name must be used directly.\n\nFor more information, see <<field-and-document-access-control>>."
}