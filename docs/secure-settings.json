{
    "meta": {
        "timestamp": "2024-11-01T03:07:10.176271",
        "size": 3198,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/secure-settings.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "secure-settings",
        "version": "8.15"
    },
    "doc": "[[secure-settings]]\n=== Secure settings\n\nSome settings are sensitive, and relying on filesystem permissions to protect\ntheir values is not sufficient. For this use case, {es} provides a\nkeystore and the <<elasticsearch-keystore,`elasticsearch-keystore` tool>> to\nmanage the settings in the keystore.\n\nIMPORTANT: Only some settings are designed to be read from the keystore.\nAdding unsupported settings to the keystore causes the validation in the\n`_nodes/reload_secure_settings` API to fail and if not addressed, will\ncause {es} to fail to start. To see whether a setting is supported in the\nkeystore, look for a \"Secure\" qualifier in the setting reference.\n\nAll the modifications to the keystore take effect only after restarting {es}.\n\nThese settings, just like the regular ones in the `elasticsearch.yml` config file,\nneed to be specified on each node in the cluster. Currently, all secure settings\nare node-specific settings that must have the same value on every node.\n\n[discrete]\n[[reloadable-secure-settings]]\n=== Reloadable secure settings\n\nJust like the settings values in `elasticsearch.yml`, changes to the keystore\ncontents are not automatically applied to the running {es} node. Re-reading\nsettings requires a node restart. However, certain secure settings are marked as\n*reloadable*. Such settings can be re-read and applied on a running node.\n\nYou can define these settings before the node is started, \nor call the <<cluster-nodes-reload-secure-settings,Nodes reload secure settings API>> \nafter the settings are defined to apply them to a running node. \n\nThe values of all secure settings, *reloadable* or not, must be identical\nacross all cluster nodes. After making the desired secure settings changes,\nusing the `bin/elasticsearch-keystore add` command, call:\n\n[source,console]\n----\nPOST _nodes/reload_secure_settings\n{\n  \"secure_settings_password\": \"keystore-password\" <1>\n}\n----\n// NOTCONSOLE\n\n<1> The password that the {es} keystore is encrypted with.\n\nThis API decrypts, re-reads the entire keystore and validates all settings on\nevery cluster node, but only the *reloadable* secure settings are applied.\nChanges to other settings do not go into effect until the next restart. Once\nthe call returns, the reload has been completed, meaning that all internal data\nstructures dependent on these settings have been changed. Everything should\nlook as if the settings had the new value from the start.\n\nWhen changing multiple *reloadable* secure settings, modify all of them on each\ncluster node, then issue a <<cluster-nodes-reload-secure-settings, `reload_secure_settings`>>\ncall instead of reloading after each modification.\n\nThere are reloadable secure settings for:\n\n* <<repository-azure,The Azure repository plugin>>\n* {plugins}/discovery-ec2-usage.html#_configuring_ec2_discovery[The EC2 discovery plugin]\n* <<repository-gcs,The GCS repository plugin>>\n* <<repository-s3,The S3 repository plugin>>\n* <<monitoring-settings>>\n* <<notification-settings>>\n* <<ref-jwt-settings, JWT realm>>\n* <<ref-ad-settings, Active Directory realm>>\n* <<ref-ldap-settings, LDAP realm>>\n* <<remote-cluster-credentials-setting, Remote cluster credentials for the API key based security model>>\n"
}