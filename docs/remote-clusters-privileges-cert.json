{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.313580",
        "size": 8693,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/remote-clusters-privileges-cert.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "remote-clusters-privileges-cert",
        "version": "8.15"
    },
    "doc": "[[remote-clusters-privileges-cert]]\n=== Configure roles and users for remote clusters\nAfter <<remote-clusters-connect,connecting remote clusters>>, you create a\nuser role on both the local and remote clusters and assign necessary privileges.\nThese roles are required to use {ccr} and {ccs}.\n\nIMPORTANT: You must use the same role names on both the local\nand remote clusters. For example, the following configuration for {ccr} uses the\n`remote-replication` role name on both the local and remote clusters. However,\nyou can specify different role definitions on each cluster.\n\nYou can manage users and roles from Stack Management in {kib} by selecting\n*Security > Roles* from the side navigation. You can also use the\n<<security-role-mapping-apis,role management APIs>> to add, update, remove, and\nretrieve roles dynamically. When you use the APIs to manage roles in the\n`native` realm, the roles are stored in an internal {es} index.\n\nThe following requests use the\n<<security-api-put-role,create or update roles API>>. You must have at least the\n`manage_security` cluster privilege to use this API.\n\n[[remote-clusters-privileges-ccr]]\n//tag::configure-ccr-privileges[]\n==== Configure privileges for {ccr}\nThe {ccr} user requires different cluster and index privileges on the remote\ncluster and local cluster. Use the following requests to create separate roles\non the local and remote clusters, and then create a user with the required\nroles.\n\n[discrete]\n===== Remote cluster\nOn the remote cluster that contains the leader index, the {ccr} role requires\nthe `read_ccr` cluster privilege, and `monitor` and `read` privileges on the\nleader index.\n\nNOTE: If requests are authenticated with an <<security-api-create-api-key, API key>>, the API key\nrequires the above privileges on the **local** cluster, instead of the remote.\n\nNOTE: If requests are issued <<run-as-privilege,on behalf of other users>>,\nthen the authenticating user must have the `run_as` privilege on the remote\ncluster.\n\nThe following request creates a `remote-replication` role on the remote cluster:\n\n[source,console]\n----\nPOST /_security/role/remote-replication\n{\n  \"cluster\": [\n    \"read_ccr\"\n  ],\n  \"indices\": [\n    {\n      \"names\": [\n        \"leader-index-name\"\n      ],\n      \"privileges\": [\n        \"monitor\",\n        \"read\"\n      ]\n    }\n  ]\n}\n----\n\n////\n[source,console]\n----\nDELETE /_security/role/remote-replication\n----\n// TEST[continued]\n////\n\n[discrete]\n===== Local cluster\nOn the local cluster that contains the follower index, the `remote-replication`\nrole requires the `manage_ccr` cluster privilege, and `monitor`, `read`, `write`,\nand `manage_follow_index` privileges on the follower index.\n\nThe following request creates a `remote-replication` role on the local cluster:\n\n[source,console]\n----\nPOST /_security/role/remote-replication\n{\n  \"cluster\": [\n    \"manage_ccr\"\n  ],\n  \"indices\": [\n    {\n      \"names\": [\n        \"follower-index-name\"\n      ],\n      \"privileges\": [\n        \"monitor\",\n        \"read\",\n        \"write\",\n        \"manage_follow_index\"\n      ]\n    }\n  ]\n}\n----\n\nAfter creating the `remote-replication` role on each cluster, use the\n<<security-api-put-user,create or update users API>> to create a user on\nthe local cluster cluster and assign the `remote-replication` role. For\nexample, the following request assigns the `remote-replication` role to a user\nnamed `cross-cluster-user`:\n\n[source,console]\n----\nPOST /_security/user/cross-cluster-user\n{\n  \"password\" : \"l0ng-r4nd0m-p@ssw0rd\",\n  \"roles\" : [ \"remote-replication\" ]\n}\n----\n// TEST[continued]\n\nNOTE: You only need to create this user on the *local* cluster.\n\n//end::configure-ccr-privileges[]\n\nYou can then <<ccr-getting-started-tutorial,configure {ccr}>> to replicate your\ndata across datacenters.\n\n[[remote-clusters-privileges-ccs]]\n==== Configure privileges for {ccs}\nThe {ccs} user requires different cluster and index privileges on the remote\ncluster and local cluster. The following requests create separate roles on the\nlocal and remote clusters, and then create a user with the required roles.\n\n[discrete]\n===== Remote cluster\nOn the remote cluster, the {ccs} role requires the `read` and\n`read_cross_cluster` privileges for the target indices.\n\nNOTE: If requests are authenticated with an <<security-api-create-api-key, API key>>, the API key\nrequires the above privileges on the **local** cluster, instead of the remote.\n\nNOTE: If requests are issued <<run-as-privilege,on behalf of other users>>,\nthen the authenticating user must have the `run_as` privilege on the remote\ncluster.\n\nThe following request creates a `remote-search` role on the remote cluster:\n\n[source,console]\n----\nPOST /_security/role/remote-search\n{\n  \"indices\": [\n    {\n      \"names\": [\n        \"target-indices\"\n      ],\n      \"privileges\": [\n        \"read\",\n        \"read_cross_cluster\"\n      ]\n    }\n  ]\n}\n----\n\n////\n[source,console]\n----\nDELETE /_security/role/remote-search\n----\n// TEST[continued]\n////\n\n[discrete]\n===== Local cluster\nOn the local cluster, which is the cluster used to initiate cross cluster\nsearch, a user only needs the `remote-search` role. The role privileges can be\nempty.\n\nThe following request creates a `remote-search` role on the local cluster:\n\n\n[source,console]\n----\nPOST /_security/role/remote-search\n{}\n----\n\nAfter creating the `remote-search` role on each cluster, use the\n<<security-api-put-user,create or update users API>> to create a user on the\nlocal cluster and assign the `remote-search` role. For example, the following\nrequest assigns the `remote-search` role to a user named `cross-search-user`:\n\n[source,console]\n----\nPOST /_security/user/cross-search-user\n{\n  \"password\" : \"l0ng-r4nd0m-p@ssw0rd\",\n  \"roles\" : [ \"remote-search\" ]\n}\n----\n// TEST[continued]\n\nNOTE: You only need to create this user on the *local* cluster.\n\nUsers with the `remote-search` role can then\n<<modules-cross-cluster-search,search across clusters>>.\n\n[[clusters-privileges-ccs-kibana-cert]]\n==== Configure privileges for {ccs} and {kib}\nWhen using {kib} to search across multiple clusters, a two-step authorization\nprocess determines whether or not the user can access data streams and indices\non a remote cluster:\n\n* First, the local cluster determines if the user is authorized to access remote\nclusters. The local cluster is the cluster that {kib} is connected to.\n* If the user is authorized, the remote cluster then determines if the user has\naccess to the specified data streams and indices.\n\nTo grant {kib} users access to remote clusters, assign them a local role\nwith read privileges to indices on the remote clusters. You specify data streams\nand indices in a remote cluster as `<remote_cluster_name>:<target>`.\n\nTo grant users read access on the remote data streams and indices, you must\ncreate a matching role on the remote clusters that grants the\n`read_cross_cluster` privilege with access to the appropriate data streams and\nindices.\n\nFor example, you might be actively indexing {ls} data on a local cluster and\nand periodically offload older time-based indices to an archive on your remote\ncluster. You want to search across both clusters, so you must enable {kib}\nusers on both clusters.\n\n[discrete]\n===== Local cluster\nOn the local cluster, create a `logstash-reader` role that grants\n`read` and `view_index_metadata` privileges on the local `logstash-*` indices.\n\nNOTE: If you configure the local cluster as another remote in {es}, the\n`logstash-reader` role on your local cluster also needs to grant the\n`read_cross_cluster` privilege.\n\n[source,console]\n----\nPOST /_security/role/logstash-reader\n{\n  \"indices\": [\n    {\n      \"names\": [\n        \"logstash-*\"\n        ],\n        \"privileges\": [\n          \"read\",\n          \"view_index_metadata\"\n          ]\n    }\n  ]\n}\n----\n\nAssign your {kib} users a role that grants\n{kibana-ref}/xpack-security-authorization.html[access to {kib}], as well as your\n`logstash_reader` role. For example, the following request creates the\n`cross-cluster-kibana` user and assigns the `kibana-access` and\n`logstash-reader` roles.\n\n[source,console]\n----\nPUT /_security/user/cross-cluster-kibana\n{\n  \"password\" : \"l0ng-r4nd0m-p@ssw0rd\",\n  \"roles\" : [\n    \"logstash-reader\",\n    \"kibana-access\"\n    ]\n}\n----\n\n[discrete]\n===== Remote cluster\nOn the remote cluster, create a `logstash-reader` role that grants the\n`read_cross_cluster` privilege and `read` and `view_index_metadata` privileges\nfor the `logstash-*` indices.\n\n[source,console]\n----\nPOST /_security/role/logstash-reader\n{\n  \"indices\": [\n    {\n      \"names\": [\n        \"logstash-*\"\n        ],\n        \"privileges\": [\n          \"read_cross_cluster\",\n          \"read\",\n          \"view_index_metadata\"\n          ]\n    }\n  ]\n}\n----"
}