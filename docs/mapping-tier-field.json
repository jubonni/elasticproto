{
    "meta": {
        "timestamp": "2024-11-01T03:07:10.416272",
        "size": 1384,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-tier-field.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "mapping-tier-field",
        "version": "8.15"
    },
    "doc": "[[mapping-tier-field]]\n=== `_tier` field\n\nWhen performing queries across multiple indexes, it is sometimes desirable to\ntarget indexes held on nodes of a given data tier (`data_hot`, `data_warm`, `data_cold` or `data_frozen`).\nThe `_tier` field allows matching on the `tier_preference` setting of the index a document was indexed into.\nThe preferred value is accessible in certain queries :\n\n[source,console]\n--------------------------\nPUT index_1/_doc/1\n{\n  \"text\": \"Document in index 1\"\n}\n\nPUT index_2/_doc/2?refresh=true\n{\n  \"text\": \"Document in index 2\"\n}\n\nGET index_1,index_2/_search\n{\n  \"query\": {\n    \"terms\": {\n      \"_tier\": [\"data_hot\", \"data_warm\"] <1>\n    }\n  }\n}\n--------------------------\n\n<1> Querying on the `_tier` field\n\n\nTypically a query will use a `terms` query to list the tiers of interest but you can use\nthe `_tier` field in any query that is rewritten to a `term` query, such as the\n`match`,  `query_string`, `term`, `terms`, or `simple_query_string` query, as well as `prefix`\nand `wildcard` queries. However, it does not support `regexp` and `fuzzy`\nqueries.\n\nThe `tier_preference` setting of the index is a comma-delimited list of tier names\nin order of preference i.e. the preferred tier for hosting an index is listed first followed\nby potentially many fall-back options. Query matching only considers the first preference\n(the first value of a list).\n\n"
}