{
    "meta": {
        "timestamp": "2024-11-01T02:49:24.527071",
        "size": 2579,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/array.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "array",
        "version": "8.15"
    },
    "doc": "[[array]]\n=== Arrays\n\nIn Elasticsearch, there is no dedicated `array` data type. Any field can contain\nzero or more values by default, however, all values in the array must be of the\nsame data type. For instance:\n\n* an array of strings: [ `\"one\"`, `\"two\"` ]\n* an array of integers: [ `1`, `2` ]\n* an array of arrays: [ `1`, [ `2`, `3` ]] which is the equivalent of [ `1`, `2`, `3` ]\n* an array of objects: [ `{ \"name\": \"Mary\", \"age\": 12 }`, `{ \"name\": \"John\", \"age\": 10 }`]\n\n.Arrays of objects\n[NOTE]\n====================================================\n\nArrays of objects do not work as you would expect: you cannot query each\nobject independently of the other objects in the array. If you need to be\nable to do this then you should use the <<nested,`nested`>> data type instead\nof the <<object,`object`>> data type.\n\nThis is explained in more detail in <<nested>>.\n====================================================\n\n\nWhen adding a field dynamically, the first value in the array determines the\nfield `type`. All subsequent values must be of the same data type or it must\nat least be possible to <<coerce,coerce>> subsequent values to the same\ndata type.\n\nArrays with a mixture of data types are _not_ supported: [ `10`, `\"some string\"` ]\n\nAn array may contain `null` values, which are either replaced by the\nconfigured <<null-value,`null_value`>> or skipped entirely. An empty array\n`[]` is treated as a missing field -- a field with no values.\n\nNothing needs to be pre-configured in order to use arrays in documents, they\nare supported out of the box:\n\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001/_doc/1\n{\n  \"message\": \"some arrays in this document...\",\n  \"tags\":  [ \"elasticsearch\", \"wow\" ], <1>\n  \"lists\": [ <2>\n    {\n      \"name\": \"prog_list\",\n      \"description\": \"programming list\"\n    },\n    {\n      \"name\": \"cool_list\",\n      \"description\": \"cool stuff list\"\n    }\n  ]\n}\n\nPUT my-index-000001/_doc/2 <3>\n{\n  \"message\": \"no arrays in this document...\",\n  \"tags\":  \"elasticsearch\",\n  \"lists\": {\n    \"name\": \"prog_list\",\n    \"description\": \"programming list\"\n  }\n}\n\nGET my-index-000001/_search\n{\n  \"query\": {\n    \"match\": {\n      \"tags\": \"elasticsearch\" <4>\n    }\n  }\n}\n--------------------------------------------------\n\n<1> The `tags` field is dynamically added as a `string` field.\n<2> The `lists` field is dynamically added as an `object` field.\n<3> The second document contains no arrays, but can be indexed into the same fields.\n<4> The query looks for `elasticsearch` in the `tags` field, and matches both documents.\n\n"
}