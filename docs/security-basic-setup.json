{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.455580",
        "size": 8353,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/security-basic-setup.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "security-basic-setup",
        "version": "8.15"
    },
    "doc": "[[security-basic-setup]]\n=== Set up basic security for the Elastic Stack\n++++\n<titleabbrev>Set up basic security</titleabbrev>\n++++\n\nWhen you start {es} for the first time, passwords are generated for the `elastic`\nuser and TLS is automatically configured for you. If you configure security \nmanually _before_ starting your {es} nodes, the auto-configuration process will \nrespect your security configuration. You can adjust your TLS configuration at \nany time, such as <<update-node-certs,updating node certificates>>.\n\nIMPORTANT: If your cluster has multiple nodes, then you must configure\nTLS between nodes. <<dev-vs-prod-mode,Production mode>> clusters will not start\nif you do not enable TLS.\n\nThe transport layer relies on mutual TLS for both encryption and\nauthentication of nodes. Correctly applying TLS ensures that a malicious node\ncannot join the cluster and exchange data with other nodes. While implementing\nusername and password authentication at the HTTP layer is useful for securing a\nlocal cluster, the security of communication between nodes requires TLS.\n\nConfiguring TLS between nodes is the basic security setup to prevent\nunauthorized nodes from accessing to your cluster.\n\n.Understanding transport contexts\n****\nTransport Layer Security (TLS) is the name of an industry standard protocol for\napplying security controls (such as encryption) to network communications. TLS\nis the modern name for what used to be called Secure Sockets Layer (SSL). The\n{es} documentation uses the terms TLS and SSL interchangeably.\n\nTransport Protocol is the name of the protocol that {es} nodes use to\ncommunicate with one another. This name is specific to {es} and distinguishes\nthe transport port (default `9300`) from the HTTP port (default `9200`). Nodes\ncommunicate with one another using the transport port, and REST clients\ncommunicate with {es} using the HTTP port.\n\nAlthough the word _transport_ appears in both contexts, they mean different\nthings. It's possible to apply TLS to both the {es} transport port and the HTTP\nport. We know that these overlapping terms can be confusing, so to clarify, in\nthis scenario we're applying TLS to the {es} transport port. In\n<<security-basic-setup-https,the next scenario>>, we'll apply TLS to the {es}\nHTTP port.\n****\n\n[[generate-certificates]]\n==== Generate the certificate authority\n\nYou can add as many nodes as you want in a cluster but they must be able to\ncommunicate with each other. The communication between nodes in a cluster is\nhandled by the transport module. To secure your cluster, you must ensure that\ninternode communications are encrypted and verified, which is achieved with\nmutual TLS.\n\nIn a secured cluster, {es} nodes use certificates to identify\nthemselves when communicating with other nodes.\n\nThe cluster must validate the authenticity of these certificates. The\nrecommended approach is to trust a specific certificate authority (CA). When\nnodes are added to your cluster they must use a certificate signed by the same\nCA.\n\nFor the transport layer, we recommend using a separate, dedicated CA instead\nof an existing, possibly shared CA so that node membership is tightly controlled. Use the `elasticsearch-certutil` tool to\ngenerate a CA for your cluster.\n\n. Before starting {es}, use the `elasticsearch-certutil` tool on any single node\nto generate a CA for your cluster.\n+\n[source,shell]\n----\n./bin/elasticsearch-certutil ca\n----\n\n   a. When prompted, accept the default file name, which is `elastic-stack-ca.p12`. This file contains the public certificate for your CA and the private key used to sign certificates for each node.\n\n   b. Enter a password for your CA. You can choose to leave the password blank\n   if you're not deploying to a production environment.\n\n. On any single node, generate a certificate and private key for the nodes in\nyour cluster. You include the `elastic-stack-ca.p12` output file that you\ngenerated in the previous step.\n+\n[source,shell]\n----\n./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12\n----\n+\n   `--ca <ca_file>`:: Name of the CA file used to sign your certificates. The\n   default file name from the `elasticsearch-certutil` tool is `elastic-stack-ca.p12`.\n+\n\n   a. Enter the password for your CA, or press *Enter* if you did not configure one in the previous step.\n\n   b. Create a password for the certificate and accept the default file name.\n+\nThe output file is a keystore named `elastic-certificates.p12`. This file\ncontains a node certificate, node key, and CA certificate.\n\n. On *every* node in your cluster, copy the `elastic-certificates.p12` file to\nthe `$ES_PATH_CONF` directory.\n\n[[encrypt-internode-communication]]\n==== Encrypt internode communications with TLS\n\nThe transport networking layer is used for internal communication between\nnodes in a cluster. When security features are enabled, you must use TLS to\nensure that communication between the nodes is encrypted.\n\nNow that you've generated a certificate authority and certificates, you'll\nupdate your cluster to use these files.\n\nNOTE: {es} monitors all files such as certificates, keys, keystores, or\ntruststores that are configured as values of TLS-related node settings. If\nyou update any of these files, such as when your hostnames change or your\ncertificates are due to expire, {es} reloads them. The files are polled for\nchanges at a frequency determined by the global {es}\n`resource.reload.interval.high` setting, which defaults to 5 seconds.\n\nComplete the following steps *for each node in your cluster*. To join the\nsame cluster, all nodes must share the same `cluster.name` value.\n\n. Open the `$ES_PATH_CONF/elasticsearch.yml` file and make the following\nchanges:\n\n   a. Add the <<cluster-name,`cluster-name`>> setting and enter a name for your cluster:\n+\n[source,yaml]\n----\ncluster.name: my-cluster\n----\n\nb. Add the <<node-name,`node.name`>> setting and enter a name for the node.\nThe node name defaults to the hostname of the machine when {es} starts. \n+\n[source,yaml]\n----\nnode.name: node-1\n----\n\nc. Add the following settings to enable internode communication and provide\naccess to the node's certificate.\n+\nBecause you are using the same `elastic-certificates.p12` file on every node in\nyour cluster, set the verification mode to `certificate`:\n+\n[source,yaml]\n----\nxpack.security.transport.ssl.enabled: true\nxpack.security.transport.ssl.verification_mode: certificate <1>\nxpack.security.transport.ssl.client_authentication: required\nxpack.security.transport.ssl.keystore.path: elastic-certificates.p12\nxpack.security.transport.ssl.truststore.path: elastic-certificates.p12\n----\n<1> If you want to use hostname verification, set the verification mode to\n`full`. You should generate a different certificate for each host that\nmatches the DNS or IP address. See the \n`xpack.security.transport.ssl.verification_mode` parameter in {ref}/security-settings.html#transport-tls-ssl-settings[TLS settings].\n\n. If you entered a password when creating the node certificate, run the following commands to store the password in the {es} keystore:\n+\n--\n[source,shell]\n----\n./bin/elasticsearch-keystore add xpack.security.transport.ssl.keystore.secure_password\n----\n\n[source,shell]\n----\n./bin/elasticsearch-keystore add xpack.security.transport.ssl.truststore.secure_password\n----\n--\n\n. Complete the previous steps for each node in your cluster.\n\n. On *every* node in your cluster, start {es}. The method for\n<<starting-elasticsearch,starting>> and <<starting-elasticsearch,stopping>> {es}\nvaries depending on how you installed it.\n+\nFor example, if you installed {es} with an archive distribution\n(`tar.gz` or `.zip`), you can enter `Ctrl+C` on the command line to stop\n{es}.\n+\nWARNING: You must perform a full cluster restart. Nodes that are configured to\nuse TLS for transport cannot communicate with nodes that use unencrypted transport connection (and vice-versa).\n\n[[encrypting-internode-whatsnext]]\n==== What's next?\n\nCongratulations! You've encrypted communications between the nodes in your\ncluster and can pass the\n<<bootstrap-checks-tls,TLS bootstrap check>>.\n\nTo add another layer of security, <<security-basic-setup-https,Set up basic security for the Elastic Stack plus secured HTTPS traffic>>. In addition to\nconfiguring TLS on the transport interface of your {es} cluster, you configure\nTLS on the HTTP interface for both {es} and {kib}.\n"
}