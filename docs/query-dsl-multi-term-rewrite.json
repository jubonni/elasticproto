{
    "meta": {
        "size": 4833,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-multi-term-rewrite.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "query-dsl-multi-term-rewrite",
        "version": "8.15"
    },
    "doc": "[[query-dsl-multi-term-rewrite]]\n== `rewrite` parameter\n\nWARNING: This parameter is for expert users only. Changing the value of\nthis parameter can impact search performance and relevance.\n\n{es} uses https://lucene.apache.org/core/[Apache Lucene] internally to power\nindexing and searching. In their original form, Lucene cannot execute the\nfollowing queries:\n\n* <<query-dsl-fuzzy-query, `fuzzy`>>\n* <<query-dsl-prefix-query, `prefix`>>\n* <<query-dsl-query-string-query, `query_string`>>\n* <<query-dsl-regexp-query, `regexp`>>\n* <<query-dsl-wildcard-query, `wildcard`>>\n\nTo execute them, Lucene changes these queries to a simpler form, such as a\n<<query-dsl-bool-query, `bool` query>> or a\n{wikipedia}/Bit_array[bit set].\n\nThe `rewrite` parameter determines:\n\n* How Lucene calculates the relevance scores for each matching document\n* Whether Lucene changes the original query to a `bool`\nquery or bit set\n* If changed to a `bool` query, which `term` query clauses are included\n\n[discrete]\n[[rewrite-param-valid-values]]\n=== Valid values\n\n`constant_score_blended` (Default)::\nAssigns each document a relevance score equal to the `boost`\nparameter.\n+\nThis method maintains a <<query-dsl-bool-query, `bool`\nquery>> like implementation over the most costly terms while pre-processing\nthe less costly terms into a filter bitset.\n+\nThis method can cause the generated `bool` query to exceed the clause limit in the\n<<indices-query-bool-max-clause-count, `indices.query.bool.max_clause_count`>>\nsetting. If the query exceeds this limit, {es} returns an error.\n\n`constant_score` ::\nUses the `constant_score_boolean` method for fewer matching terms. Otherwise,\nthis method finds all matching terms in sequence and returns matching documents\nusing a bit set.\n\n`constant_score_boolean`::\nAssigns each document a relevance score equal to the `boost`\nparameter.\n+\nThis method changes the original query to a <<query-dsl-bool-query, `bool`\nquery>>. This `bool` query contains a `should` clause and\n<<query-dsl-term-query, `term` query>> for each matching term.\n+\nThis method can cause the final `bool` query to exceed the clause limit in the\n<<indices-query-bool-max-clause-count, `indices.query.bool.max_clause_count`>>\nsetting. If the query exceeds this limit, {es} returns an error.\n\n`scoring_boolean`::\nCalculates a relevance score for each matching document.\n+\nThis method changes the original query to a <<query-dsl-bool-query, `bool`\nquery>>. This `bool` query contains a `should` clause and\n<<query-dsl-term-query, `term` query>> for each matching term.\n+\nThis method can cause the final `bool` query to exceed the clause limit in the\n<<indices-query-bool-max-clause-count, `indices.query.bool.max_clause_count`>>\nsetting. If the query exceeds this limit, {es} returns an error.\n\n`top_terms_blended_freqs_N`::\nCalculates a relevance score for each matching document as if all terms had the\nsame frequency. This frequency is the maximum frequency of all matching terms.\n+\nThis method changes the original query to a <<query-dsl-bool-query, `bool`\nquery>>. This `bool` query contains a `should` clause and\n<<query-dsl-term-query, `term` query>> for each matching term.\n+\nThe final `bool` query only includes `term` queries for the top `N` scoring\nterms.\n+\nYou can use this method to avoid exceeding the clause limit in the\n<<indices-query-bool-max-clause-count, `indices.query.bool.max_clause_count`>>\nsetting.\n\n`top_terms_boost_N`::\nAssigns each matching document a relevance score equal to the `boost` parameter.\n+\nThis method changes the original query to a <<query-dsl-bool-query, `bool`\nquery>>. This `bool` query contains a `should` clause and\n<<query-dsl-term-query, `term` query>> for each matching term.\n+\nThe final `bool` query only includes `term` queries for the top `N` terms.\n+\nYou can use this method to avoid exceeding the clause limit in the\n<<indices-query-bool-max-clause-count, `indices.query.bool.max_clause_count`>>\nsetting.\n\n`top_terms_N`::\nCalculates a relevance score for each matching document.\n+\nThis method changes the original query to a <<query-dsl-bool-query, `bool`\nquery>>. This `bool` query contains a `should` clause and\n<<query-dsl-term-query, `term` query>> for each matching term.\n+\nThe final `bool` query\nonly includes `term` queries for the top `N` scoring terms.\n+\nYou can use this method to avoid exceeding the clause limit in the\n<<indices-query-bool-max-clause-count, `indices.query.bool.max_clause_count`>>\nsetting.\n\n[discrete]\n[[rewrite-param-perf-considerations]]\n=== Performance considerations for the `rewrite` parameter\nFor most uses, we recommend using the  `constant_score_blended`, `constant_score`,\n`constant_score_boolean`, or `top_terms_boost_N` rewrite methods.\n\nOther methods calculate relevance scores. These score calculations are often\nexpensive and do not improve query results.\n"
}