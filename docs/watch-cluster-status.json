{
    "meta": {
        "timestamp": "2024-11-01T02:49:25.067066",
        "size": 8215,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/watch-cluster-status.html",
        "type": "documentation",
        "role": [
            "xpack"
        ],
        "has_code": true,
        "title": "watch-cluster-status",
        "version": "8.15"
    },
    "doc": "[role=\"xpack\"]\n[[watch-cluster-status]]\n=== Watching the status of an Elasticsearch cluster\n\nYou can easily configure a basic watch to monitor the health of your\nElasticsearch cluster:\n\n* <<health-add-input,Schedule the watch and define an input>> that gets the\n  cluster health status.\n\n* <<health-add-condition,Add a condition>> that evaluates the health status to\n  determine if action is required.\n\n* <<health-take-action,Take action>> if the cluster is RED.\n\n[discrete]\n[[health-add-input]]\n==== Schedule the watch and add an input\n\nA watch <<trigger-schedule,schedule>> controls how often a watch is triggered.\nThe watch <<input,input>> gets the data that you want to evaluate.\n\nThe simplest way to define a schedule is to specify an interval. For example,\nthe following schedule runs every 10 seconds:\n\n[source,console]\n--------------------------------------------------\nPUT _watcher/watch/cluster_health_watch\n{\n  \"trigger\" : {\n    \"schedule\" : { \"interval\" : \"10s\" } <1>\n  }\n}\n--------------------------------------------------\n\n<1> Schedules are typically configured to run less frequently. This example sets\n    the interval to 10 seconds to you can easily see the watches being triggered.\n    Since this watch runs so frequently, don't forget to <<health-delete, delete the watch>>\n    when you're done experimenting.\n\nTo get the status of your cluster, you can call the <<cluster-health,cluster\nhealth API>>:\n\n[source,console]\n--------------------------------------------------\nGET _cluster/health?pretty\n--------------------------------------------------\n// TEST[continued]\n\nTo load the health status into your watch, you simply add an\n<<input-http,HTTP input>> that calls the cluster health API:\n\n[source,console]\n--------------------------------------------------\nPUT _watcher/watch/cluster_health_watch\n{\n  \"trigger\" : {\n    \"schedule\" : { \"interval\" : \"10s\" }\n  },\n  \"input\" : {\n    \"http\" : {\n      \"request\" : {\n        \"host\" : \"localhost\",\n        \"port\" : 9200,\n        \"path\" : \"/_cluster/health\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n\nIf you're using Security, then you'll also need to supply some authentication\ncredentials as part of the watch configuration:\n\n[source,console]\n--------------------------------------------------\nPUT _watcher/watch/cluster_health_watch\n{\n  \"trigger\" : {\n    \"schedule\" : { \"interval\" : \"10s\" }\n  },\n  \"input\" : {\n    \"http\" : {\n      \"request\" : {\n        \"host\" : \"localhost\",\n        \"port\" : 9200,\n        \"path\" : \"/_cluster/health\",\n        \"auth\": {\n          \"basic\": {\n            \"username\": \"elastic\",\n            \"password\": \"x-pack-test-password\"\n          }\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\nIt would be a good idea to create a user with the minimum privileges required\nfor use with such a watch configuration.\n\nDepending on how your cluster is configured, there may be additional settings\nrequired before the watch can access your cluster such as keystores, truststores,\nor certificates. For more information, see <<notification-settings>>.\n\n\nIf you check the watch history, you'll see that the cluster status is recorded\nas part of the `watch_record` each time the watch executes.\n\nFor example, the following request retrieves the last ten watch records from\nthe watch history:\n\n[source,console]\n--------------------------------------------------\nGET .watcher-history*/_search\n{\n  \"sort\" : [\n    { \"result.execution_time\" : \"desc\" }\n  ]\n}\n--------------------------------------------------\n// TEST[continued]\n\n[discrete]\n[[health-add-condition]]\n==== Add a condition\n\nA <<condition,condition>> evaluates the data you've loaded into the watch and\ndetermines if any action is required. Since you've defined an input that loads\nthe cluster status into the watch, you can define a condition that checks that\nstatus.\n\nFor example, you could add a condition to check to see if the status is RED.\n\n[source,console]\n--------------------------------------------------\nPUT _watcher/watch/cluster_health_watch\n{\n  \"trigger\" : {\n    \"schedule\" : { \"interval\" : \"10s\" } <1>\n  },\n  \"input\" : {\n    \"http\" : {\n      \"request\" : {\n       \"host\" : \"localhost\",\n       \"port\" : 9200,\n       \"path\" : \"/_cluster/health\"\n      }\n    }\n  },\n  \"condition\" : {\n    \"compare\" : {\n      \"ctx.payload.status\" : { \"eq\" : \"red\" }\n    }\n  }\n}\n--------------------------------------------------\n\n<1> Schedules are typically configured to run less frequently. This example sets\n    the interval to 10 seconds to you can easily see the watches being triggered.\n\nIf you check the watch history, you'll see that the condition result is recorded\nas part of the `watch_record` each time the watch executes.\n\nTo check to see if the condition was met, you can run the following query.\n\n[source,console]\n------------------------------------------------------\nGET .watcher-history*/_search?pretty\n{\n  \"query\" : {\n    \"match\" : { \"result.condition.met\" : true }\n  }\n}\n------------------------------------------------------\n// TEST[continued]\n\n[discrete]\n[[health-take-action]]\n==== Take action\n\nRecording `watch_records` in the watch history is nice, but the real power of\n{watcher} is being able to do something in response to an alert. A watch's\n<<actions,actions>> define what to do when the watch condition is true--you\ncan send emails, call third-party webhooks, or write documents to an\nElasticsearch index or log when the watch condition is met.\n\nFor example, you could add an action to index the cluster status information\nwhen the status is RED.\n\n[source,console]\n--------------------------------------------------\nPUT _watcher/watch/cluster_health_watch\n{\n  \"trigger\" : {\n    \"schedule\" : { \"interval\" : \"10s\" }\n  },\n  \"input\" : {\n    \"http\" : {\n      \"request\" : {\n       \"host\" : \"localhost\",\n       \"port\" : 9200,\n       \"path\" : \"/_cluster/health\"\n      }\n    }\n  },\n  \"condition\" : {\n    \"compare\" : {\n      \"ctx.payload.status\" : { \"eq\" : \"red\" }\n    }\n  },\n  \"actions\" : {\n    \"send_email\" : {\n      \"email\" : {\n        \"to\" : \"username@example.org\",\n        \"subject\" : \"Cluster Status Warning\",\n        \"body\" : \"Cluster status is RED\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n\nFor {watcher} to send email, you must configure an email account in your\n`elasticsearch.yml` configuration file and restart Elasticsearch. To add an email\naccount, set the `xpack.notification.email.account` property.\n\nFor example, the following snippet configures a single Gmail account named `work`:\n\n[source,yaml]\n----------------------------------------------------------\nxpack.notification.email.account:\n  work:\n    profile: gmail\n    email_defaults:\n      from: <email> <1>\n    smtp:\n      auth: true\n      starttls.enable: true\n      host: smtp.gmail.com\n      port: 587\n      user: <username> <2>\n      password: <password> <3>\n----------------------------------------------------------\n<1> Replace `<email>` with the email address from which you want to send\n    notifications.\n<2> Replace `<username>` with your Gmail user name (typically your Gmail address).\n<3> Replace `<password>` with your Gmail password.\n\nNOTE:   If you have advanced security options enabled for your email account,\n        you need to take additional steps to send email from {watcher}. For more\n        information, see <<configuring-email>>.\n\nYou can check the watch history or the `status_index` to see that the action was\nperformed.\n\n[source,console]\n-------------------------------------------------------\nGET .watcher-history*/_search?pretty\n{\n  \"query\" : {\n    \"match\" : { \"result.condition.met\" : true }\n  }\n}\n-------------------------------------------------------\n// TEST[continued]\n\n[discrete]\n[[health-delete]]\n==== Delete the watch\n\nSince the `cluster_health_watch` is configured to run every 10 seconds, make\nsure you delete it when you're done experimenting. Otherwise, you'll spam yourself\nindefinitely.\n\nTo remove the watch, use the <<watcher-api-delete-watch,delete watch API>>:\n\n[source,console]\n-------------------------------------------------------\nDELETE _watcher/watch/cluster_health_watch\n-------------------------------------------------------\n// TEST[continued]\n"
}