{
    "meta": {
        "timestamp": "2024-11-01T03:07:10.082271",
        "size": 9241,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-resolve-cluster-api.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "indices-resolve-cluster-api",
        "version": "8.15"
    },
    "doc": "[[indices-resolve-cluster-api]]\n=== Resolve cluster API\n++++\n<titleabbrev>Resolve cluster</titleabbrev>\n++++\n\nResolves the specified index expressions to return information about\neach cluster, including the local cluster, if included.\n\nThis endpoint is useful before doing a <<modules-cross-cluster-search,{ccs}>> in\norder to determine which remote clusters should be included in a search.\n\nYou use the same index expression with this endpoint as you would for cross-cluster\nsearch. Index and <<exclude-problematic-clusters,cluster exclusions>> are also supported\nwith this endpoint.\n\nFor each cluster in the index expression, information is returned about:\n\n1. whether the querying (\"local\") cluster is currently connected to each remote cluster\n   in the index expression scope\n2. whether each remote cluster is configured with `skip_unavailable` as `true` or `false`\n3. whether there are any indices, aliases or data streams on that cluster that match\n   the index expression\n4. whether the search is likely to have errors returned when you do the {ccs} (including any\n   authorization errors if your user does not have permission to query the index)\n5. cluster version information, including the Elasticsearch server version\n\n////\n[source,console]\n--------------------------------\nPUT _cluster/settings\n{\n  \"persistent\": {\n    \"cluster\": {\n      \"remote\": {\n        \"cluster_one\": {\n          \"seeds\": [\n            \"35.238.149.1:9300\"\n          ],\n          \"skip_unavailable\": true\n        },\n        \"cluster_two\": {\n          \"seeds\": [\n            \"35.238.149.2:9300\"\n          ],\n          \"skip_unavailable\": false\n        }\n      }\n    }\n  }\n}\n--------------------------------\n// TEST[setup:host]\n// TEST[s/35.238.149.\\d+:930\\d+/\\${transport_host}/]\n////\n\n[source,console]\n----\nGET /_resolve/cluster/my-index-*,cluster*:my-index-*\n----\n// TEST[continued]\n\nThis will return information about the local cluster and all remotely configured\nclusters that start with the alias `cluster*`. Each cluster will return information\nabout whether it has any indices, aliases or data streams that match `my-index-*`.\n\n[[resolve-cluster-api-request]]\n==== {api-request-title}\n\n`GET /_resolve/cluster/<index_expression>`\n\n[[resolve-cluster-api-prereqs]]\n==== {api-prereq-title}\n\n* If the {es} {security-features} are enabled, you must have the\n`view_index_metadata`, `read`, or `manage` <<privileges-list-indices,index\nprivilege>> for the target data stream, index, or alias.\n\n[[resolve-cluster-api-path-params]]\n==== {api-path-parms-title}\n\n`<index_expression>`::\n+\n--\n(Required, string) Comma-separated name(s) or index pattern(s) of the\nindices, aliases, and data streams to resolve, using <<api-multi-index>>.\nResources on <<remote-clusters,remote clusters>> can be specified using the\n`<cluster>:<name>` syntax.\n--\n\n[[resolve-cluster-api-query-params]]\n==== {api-query-parms-title}\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=expand-wildcards]\n+\nDefaults to `open`.\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=index-ignore-unavailable]\n+\nDefaults to `false`.\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=allow-no-indices]\n+\nDefaults to `true`.\n\n`ignore_throttled`::\n(Optional, Boolean) If `true`, concrete, expanded or aliased indices are\nignored when frozen. Defaults to `false`.\n+\ndeprecated:[7.16.0]\n\n\n[discrete]\n[[usecases-for-resolve-cluster]]\n=== Advantages of using this endpoint before a {ccs}\n\nYou may want to exclude a cluster or index from a search when:\n\n1. A remote cluster is not currently connected and is configured with `skip_unavailable`=`false`.\nExecuting a {ccs} under those conditions will cause\n<<cross-cluster-search-failures,the entire search to fail>>.\n\n2. A cluster has no matching indices, aliases or data streams for the index expression\n(or your user does not have permissions to search them). For example, suppose your\nindex expression is `logs*,remote1:logs*` and the `remote1` cluster has no indices, aliases or data\nstreams that match `logs*`. In that case, that cluster will return no results from that cluster if\nyou include it in a {ccs}.\n\n3. The index expression (combined with any query parameters you specify) will likely cause an exception\nto be thrown when you do the search. In these cases, the \"error\" field in the `_resolve/cluster` response\nwill be present. (This is also where security/permission errors will be shown.)\n\n4. A remote cluster is an older version that does not support the feature you want to\nuse in your search.\n\n\n[[resolve-cluster-api-example]]\n==== {api-examples-title}\n\n[source,console]\n----\nGET /_resolve/cluster/my-index*,clust*:my-index*\n----\n// TEST[continued]\n// TEST[setup:my_index]\n\nThe API returns the following response:\n\n[source,console-result]\n----\n{\n  \"(local)\": {          <1>\n    \"connected\": true,\n    \"skip_unavailable\": false,\n    \"matching_indices\": true,\n    \"version\": {\n      \"number\": \"8.13.0\",\n      \"build_flavor\": \"default\",\n      \"minimum_wire_compatibility_version\": \"7.17.0\",\n      \"minimum_index_compatibility_version\": \"7.0.0\"\n    }\n  },\n  \"cluster_one\": {\n    \"connected\": true,         <2>\n    \"skip_unavailable\": true,  <3>\n    \"matching_indices\": true,  <4>\n    \"version\": {\n      \"number\": \"8.13.0\",      <5>\n      \"build_flavor\": \"default\",\n      \"minimum_wire_compatibility_version\": \"7.17.0\",\n      \"minimum_index_compatibility_version\": \"7.0.0\"\n    }\n  },\n  \"cluster_two\": {\n    \"connected\": true,\n    \"skip_unavailable\": false,\n    \"matching_indices\": true,\n    \"version\": {\n      \"number\": \"8.13.0\",\n      \"build_flavor\": \"default\",\n      \"minimum_wire_compatibility_version\": \"7.17.0\",\n      \"minimum_index_compatibility_version\": \"7.0.0\"\n    }\n  }\n}\n----\n// TESTRESPONSE[s/\"number\": \"8.13.0\"/\"number\": \"$body.$_path\"/]\n// TESTRESPONSE[s/\"minimum_wire_compatibility_version\": \"7.17.0\"/\"minimum_wire_compatibility_version\": \"$body.$_path\"/]\n// TESTRESPONSE[s/\"minimum_index_compatibility_version\": \"7.0.0\"/\"minimum_index_compatibility_version\": \"$body.$_path\"/]\n\n<1> Each cluster has its own response section. The cluster you sent the request to is labelled as \"(local)\".\n<2> The querying cluster attempts to make a request to each remote cluster. If successful, `connected`=`true`.\n<3> The `skip_unavailable` setting for each remote cluster, as configured on the local cluster.\n<4> Indicates whether any index, alias or data stream matches the index expression specified for that cluster.\n<5> The Elasticsearch server version.\n\n\n[discrete]\n[[resolve-cluster-api-error-example]]\n==== Identifying potential problems with your {ccs}\n\nThe following request shows several examples of how modifying your query can\nprevent search failures.\n\n[source,console]\n--------------------------------------------------\nGET /_resolve/cluster/not-present,clust*:my-index*,oldcluster:*?ignore_unavailable=false\n--------------------------------------------------\n// TEST[continued]\n// TEST[s/,oldcluster:*//]\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"(local)\": {\n    \"connected\": true,\n    \"skip_unavailable\": false,\n    \"error\": \"no such index [not_present]\"  <1>\n  },\n  \"cluster_one\": {\n    \"connected\": true,\n    \"skip_unavailable\": true,\n    \"matching_indices\": false,    <2>\n    \"version\": {\n      \"number\": \"8.13.0\",\n      \"build_flavor\": \"default\",\n      \"minimum_wire_compatibility_version\": \"7.17.0\",\n      \"minimum_index_compatibility_version\": \"7.0.0\"\n    }\n  },\n  \"cluster_two\": {\n    \"connected\": false,           <3>\n    \"skip_unavailable\": false,\n    \"matching_indices\": true,\n    \"version\": {\n      \"number\": \"8.13.0\",\n      \"build_flavor\": \"default\",\n      \"minimum_wire_compatibility_version\": \"7.17.0\",\n      \"minimum_index_compatibility_version\": \"7.0.0\"\n    }\n  },\n  \"oldcluster\": {         <4>\n    \"connected\": true,\n    \"skip_unavailable\": false,\n    \"matching_indices\": true\n  }\n}\n--------------------------------------------------\n// TEST[skip: too many illustrative error variations to reproduce]\n\n<1> The local cluster has no index called `not_present`. Searching against it\nusing the specified `ignore_unavailable=false` param will return a \"no such\nindex\" error. Other types of errors can show up here as well, such as security\npermission errors when the user does not have authorization to search the\nspecified index.\n<2> The `cluster_one` remote cluster has no indices that match the pattern\n`my-index*`. There may be no indices that match the pattern or the index\ncould be closed. (You can check this by using the\n<<indices-resolve-index-api,resolve index>> API.)\n<3> The `cluster_two` remote cluster is not connected (the attempt to connect\nfailed). Since this cluster is marked as `skip_unavailable=false`, you should\nprobably exclude this cluster from the search by adding `-cluster_two:*` to the\nsearch index expression.\n<4> The `oldcluster` remote cluster shows that it has matching indices, but no\nversion information is included. This indicates that the cluster version predates\nthe introduction of the `_resolve/cluster` API in 8.13.0., so you may want to\nexclude it from your {ccs}. (Note: the endpoint was able to tell there were\nmatching indices because it fell back to using the <<indices-resolve-index-api,\nresolve index>> API.)\n"
}