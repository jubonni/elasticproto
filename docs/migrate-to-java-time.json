{
    "meta": {
        "size": 8591,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/migrate-to-java-time.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "migrate-to-java-time",
        "version": "8.15"
    },
    "doc": "[[migrate-to-java-time]]\n=== Java time migration guide\n\nWith 7.0, {es} switched from joda time to java time for date-related parsing,\nformatting, and calculations. This guide is designed to help you determine\nif your cluster is impacted and, if so, prepare for the upgrade.\n\n\n[discrete]\n[[java-time-convert-date-formats]]\n==== Convert date formats\n\nTo upgrade to {es} 8, you'll need to convert any joda-time date formats\nto their java-time equivalents.\n\n[discrete]\n[[java-time-migration-impacted-features]]\n=== Impacted features\nThe switch to java time only impacts custom <<date,`date`>> and\n<<date_nanos,`date_nanos`>> formats.\n\nThese formats are commonly used in:\n\n* <<mapping,Index mappings>>\n* <<index-templates,Index templates>>\n* <<ingest,Ingest pipelines>>\n\nIf you don't use custom date formats, you can skip the rest of this guide.\nMost custom date formats are compatible. However, several require\nan update.\n\nTo see if your date format is impacted, use the <<migration-api-deprecation,deprecation info API>>\nor the {kibana-ref-all}/{prev-major-last}/upgrade-assistant.html[Kibana Upgrade Assistant].\n\n[discrete]\n[[java-time-migration-incompatible-date-formats]]\n=== Incompatible date formats\nCustom date formats containing the following joda-time literals should be\nmigrated.\n\n`Y` (Year of era)::\n+\n--\nReplace with `y`.\n\n*Example:*\n`YYYY-MM-dd` should become `yyyy-MM-dd`.\n\nIn java time, `Y` is used for\nhttps://docs.oracle.com/javase/8/docs/api/java/time/temporal/WeekFields.html[week-based year].\nUsing `Y` in place of `y` could result in off-by-one errors in year calculation.\n\nFor pattern `YYYY-ww` and date `2019-01-01T00:00:00.000Z`  will give `2019-01`\nFor pattern `YYYY-ww` and date `2018-12-31T00:00:00.000Z`  will give `2019-01` (counter-intuitive) because there is >4 days of that week in 2019\n--\n\n`y` (Year)::\n+\n--\nReplace with `u`.\n\n*Example:*\n`yyyy-MM-dd` should become `uuuu-MM-dd`.\n\nIn java time, `y` is used for year of era. `u` can contain non-positive\nvalues while `y` cannot. `y` can also be associated with an era field.\n--\n\n\n`C` (Century of era)::\n+\n--\nCentury of era is not supported in java time.\nThere is no replacement. Instead, we recommend you preprocess your input.\n--\n\n`x` (Week year)::\n+\n--\nReplace with `Y`.\n\nIn java time, `x` means https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html[zone-offset].\n\n[WARNING]\n====\nFailure to properly convert `x` (Week year) to `Y` could result in data loss.\n====\n--\n\n`Z` (Zone offset/id)::\n+\n--\nReplace with multiple `X`'s.\n\n`Z` has a similar meaning in java time. However, java time expects different\nnumbers of literals to parse different forms.\n\nConsider migrating to `X`, which gives you more control over how time is parsed.\nFor example, the joda-time format `YYYY-MM-dd'T'hh:mm:ssZZ` accepts the following dates:\n\n```\n2010-01-01T01:02:03Z\n2010-01-01T01:02:03+01\n2010-01-01T01:02:03+01:02\n2010-01-01T01:02:03+01:02:03\n```\n\nIn java time, you cannot parse all these dates using a single format\nInstead, you must specify 3 separate formats:\n\n```\n2010-01-01T01:02:03Z\n2010-01-01T01:02:03+01\nboth parsed with yyyy-MM-dd'T'hh:mm:ssX\n\n2010-01-01T01:02:03+01:02\nyyyy-MM-dd'T'hh:mm:ssXXX\n\n2010-01-01T01:02:03+01:02:03\nyyyy-MM-dd'T'hh:mm:ssXXXXX\n```\n\n\nThe formats must then be delimited using `||`:\n[source,txt]\n--------------------------------------------------\nyyyy-MM-dd'T'hh:mm:ssX||yyyy-MM-dd'T'hh:mm:ssXXX||yyyy-MM-dd'T'hh:mm:ssXXXXX\n--------------------------------------------------\n\nThe same applies if you expect your pattern to occur without a colon (`:`):\nFor example, the `YYYY-MM-dd'T'hh:mm:ssZ` format accepts the following date forms:\n```\n2010-01-01T01:02:03Z\n2010-01-01T01:02:03+01\n2010-01-01T01:02:03+0102\n2010-01-01T01:02:03+010203\n```\nTo accept all these forms in java time, you must use the `||` delimiter:\n[source,txt]\n--------------------------------------------------\nyyyy-MM-dd'T'hh:mm:ssX||yyyy-MM-dd'T'hh:mm:ssXX||yyyy-MM-dd'T'hh:mm:ssXXXX\n--------------------------------------------------\n--\n\n`d` (Day)::\n+\n--\nIn java time, `d` is still interpreted as \"day\" but is less flexible.\n\nFor example, the joda-time date format `YYYY-MM-dd` accepts `2010-01-01` or\n`2010-01-1`.\n\nIn java time, you must use the `||` delimiter to provide specify each format:\n\n[source,txt]\n--------------------------------------------------\nyyyy-MM-dd||yyyy-MM-d\n--------------------------------------------------\n\nIn java time, `d` also does not accept more than 2 digits. To accept days with more\nthan two digits, you must include a text literal in your java-time date format.\nFor example, to parse `2010-01-00001`, you must use the following java-time date format:\n\n[source,txt]\n--------------------------------------------------\nyyyy-MM-'000'dd\n--------------------------------------------------\n--\n\n`e` (Name of day)::\n+\n--\nIn java time, `e` is still interpreted as \"name of day\" but does not parse\nshort- or full-text forms.\n\nFor example, the joda-time date format `EEE YYYY-MM` accepts both\n`Wed 2020-01` and `Wednesday 2020-01`.\n\nTo accept both of these dates in java time, you must specify each format using\nthe `||` delimiter:\n\n[source,txt]\n--------------------------------------------------\ncccc yyyy-MM||ccc yyyy-MM\n--------------------------------------------------\n\nThe joda-time literal `E` is interpreted as \"day of week.\"\nThe java-time literal `c` is interpreted as \"localized day of week.\"\n`E` does not accept full-text day formats, such as `Wednesday`.\n--\n\n`EEEE` and similar text forms::\n+\n--\nSupport for full-text forms depends on the locale data provided with your Java\nDevelopment Kit (JDK) and other implementation details. We recommend you\ntest formats containing these patterns carefully before upgrading.\n--\n\n`z` (Time zone text)::\n+\n--\nIn java time, `z` outputs 'Z' for Zulu when given a UTC timezone.\n--\n\n[discrete]\n[[java-time-migration-test]]\n=== Test with your data\n\nWe strongly recommend you test any date format changes using real data before\ndeploying in production.\n\n[discrete]\n[[java-time-migrate-update-mappings]]\n=== Update index mappings\nTo update joda-time date formats in index mappings, you must create a new index\nwith an updated mapping and reindex your data to it.\n\nThe following `my-index-000001` index contains a mapping for the `datetime` field, a\n`date` field with a custom joda-time date format.\n////\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"datetime\": {\n        \"type\": \"date\",\n        \"format\": \"yyyy/MM/dd HH:mm:ss||yyyy/MM/dd||epoch_millis\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n////\n\n[source,console]\n--------------------------------------------------\nGET my-index-000001/_mapping\n--------------------------------------------------\n// TEST[continued]\n\n[source,console-result]\n--------------------------------------------------\n{\n  \"my-index-000001\" : {\n    \"mappings\" : {\n      \"properties\" : {\n         \"datetime\": {\n           \"type\": \"date\",\n           \"format\": \"yyyy/MM/dd HH:mm:ss||yyyy/MM/dd||epoch_millis\"\n         }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n\nTo change the date format for the `datetime` field, create a separate index\ncontaining an updated mapping and date format.\n\nFor example, the following `my-index-000002` index changes the `datetime` field's\ndate format to `uuuu/MM/dd HH:mm:ss||uuuu/MM/dd||epoch_millis`.\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000002\n{\n  \"mappings\": {\n    \"properties\": {\n      \"datetime\": {\n        \"type\": \"date\",\n        \"format\": \"uuuu/MM/dd HH:mm:ss||uuuu/MM/dd||epoch_millis\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\nNext, reindex data from the old index to the new index.\n\nThe following <<docs-reindex,reindex>> API request reindexes data from\n`my-index-000001` to `my-index-000002`.\n\n[source,console]\n--------------------------------------------------\nPOST _reindex\n{\n  \"source\": {\n    \"index\": \"my-index-000001\"\n  },\n  \"dest\": {\n    \"index\": \"my-index-000002\"\n  }\n}\n--------------------------------------------------\n// TEST[continued]\n\nIf you use index aliases, update them to point to the new index.\n\n[source,console]\n--------------------------------------------------\nPOST /_aliases\n{\n  \"actions\" : [\n    { \"remove\" : { \"index\" : \"my-index-000001\", \"alias\" : \"my-index\" } },\n    { \"add\" : { \"index\" : \"my-index-000002\", \"alias\" : \"my-index\" } }\n  ]\n}\n--------------------------------------------------\n// TEST[continued]\n"
}