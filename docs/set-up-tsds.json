{
    "meta": {
        "timestamp": "2024-11-01T03:07:10.221278",
        "size": 8943,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/set-up-tsds.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "set-up-tsds",
        "version": "8.15"
    },
    "doc": "[[set-up-tsds]]\n=== Set up a time series data stream (TSDS)\n++++\n<titleabbrev>Set up a TSDS</titleabbrev>\n++++\n\nTo set up a <<tsds,time series data stream (TSDS)>>, follow these steps:\n\n. Check the <<tsds-prereqs,prerequisites>>.\n. <<tsds-ilm-policy>>.\n. <<create-tsds-index-template>>.\n. <<create-tsds>>.\n. <<secure-tsds>>.\n\n[discrete]\n[[tsds-prereqs]]\n==== Prerequisites\n\n* Before you create a TSDS, you should be familiar with <<data-streams,data\nstreams>> and <<tsds,TSDS concepts>>.\n\n* To follow this tutorial, you must have the following permissions:\n\n** <<privileges-list-cluster,Cluster privileges>>: `manage_ilm` and\n`manage_index_templates`.\n** <<privileges-list-indices,Index privileges>>: `create_doc` and `create_index`\nfor any TSDS you create or convert. To roll over a TSDS, you must have the\n`manage` privilege.\n\n[discrete]\n[[tsds-ilm-policy]]\n==== Create an index lifecycle policy\n\nWhile optional, we recommend using {ilm-init} to automate the management of your\nTSDS's backing indices. {ilm-init} requires an index lifecycle policy.\n\nWe recommend you specify a `max_age` criteria for the `rollover` action in the\npolicy. This ensures the <<time-bound-indices,`@timestamp` ranges>> for the\nTSDS's backing indices are consistent. For example, setting a `max_age` of `1d`\nfor the `rollover` action ensures your backing indices consistently contain one\nday's worth of data.\n\n////\n[source,console]\n----\nPUT /_snapshot/found-snapshots\n{\n \"type\": \"fs\",\n  \"settings\": {\n    \"location\": \"my_backup_location\"\n  }\n}\n----\n// TESTSETUP\n////\n\n[source,console]\n----\nPUT _ilm/policy/my-weather-sensor-lifecycle-policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\": {\n            \"max_age\": \"1d\",\n            \"max_primary_shard_size\": \"50gb\"\n          }\n        }\n      },\n      \"warm\": {\n        \"min_age\": \"30d\",\n        \"actions\": {\n          \"shrink\": {\n            \"number_of_shards\": 1\n          },\n          \"forcemerge\": {\n            \"max_num_segments\": 1\n          }\n        }\n      },\n      \"cold\": {\n        \"min_age\": \"60d\",\n        \"actions\": {\n          \"searchable_snapshot\": {\n            \"snapshot_repository\": \"found-snapshots\"\n          }\n        }\n      },\n      \"frozen\": {\n        \"min_age\": \"90d\",\n        \"actions\": {\n          \"searchable_snapshot\": {\n            \"snapshot_repository\": \"found-snapshots\"\n          }\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"735d\",\n        \"actions\": {\n          \"delete\": {}\n        }\n      }\n    }\n  }\n}\n----\n\n[discrete]\n[[create-tsds-index-template]]\n==== Create an index template\n\nTo setup a TSDS create an index template with the following details:\n\n* One or more index patterns that match the TSDS's name. We recommend\nusing our {fleet-guide}/data-streams.html#data-streams-naming-scheme[data stream\nnaming scheme].\n\n* Enable data streams.\n\n* Specify a mapping that defines your dimensions and metrics:\n\n** One or more <<time-series-dimension,dimension fields>> with a `time_series_dimension` value of `true`.\n   Alternatively, one or more <<passthrough-dimensions, pass-through>> fields configured as dimension containers,\n   provided that they will contain at least one sub-field (mapped statically or dynamically).\n\n** One or more <<time-series-metric,metric fields>>, marked using the `time_series_metric` mapping parameter.\n\n** Optional: A `date` or `date_nanos` mapping for the `@timestamp` field. If you don\u2019t specify a mapping,\n   Elasticsearch maps `@timestamp` as a `date` field with default options.\n\n* Define index settings:\n\n** Set `index.mode` setting to `time_series`.\n\n** Your lifecycle policy in the `index.lifecycle.name` index setting.\n\n** Optional: Other index settings, such as <<dynamic-index-number-of-replicas,`index.number_of_replicas`>>,\n   for your TSDS's backing indices.\n\n* A priority higher than `200` to avoid collisions with built-in templates.\nSee <<avoid-index-pattern-collisions>>.\n\n* Optional: Component templates containing your mappings and other index settings.\n\n[source,console]\n----\nPUT _index_template/my-weather-sensor-index-template\n{\n  \"index_patterns\": [\"metrics-weather_sensors-*\"],\n  \"data_stream\": { },\n  \"template\": {\n    \"settings\": {\n      \"index.mode\": \"time_series\",\n      \"index.lifecycle.name\": \"my-lifecycle-policy\"\n    },\n    \"mappings\": {\n      \"properties\": {\n        \"sensor_id\": {\n          \"type\": \"keyword\",\n          \"time_series_dimension\": true\n        },\n        \"location\": {\n          \"type\": \"keyword\",\n          \"time_series_dimension\": true\n        },\n        \"temperature\": {\n          \"type\": \"half_float\",\n          \"time_series_metric\": \"gauge\"\n        },\n        \"humidity\": {\n          \"type\": \"half_float\",\n          \"time_series_metric\": \"gauge\"\n        },\n        \"@timestamp\": {\n          \"type\": \"date\"\n        }\n      }\n    }\n  },\n  \"priority\": 500,\n  \"_meta\": {\n    \"description\": \"Template for my weather sensor data\"\n  }\n}\n----\n// TEST[continued]\n\n////\n[source,console]\n----\nDELETE _data_stream/*\nDELETE _index_template/*\nDELETE _ilm/policy/my-weather-sensor-lifecycle-policy\n----\n// TEST[continued]\n////\n\n[discrete]\n[[create-tsds]]\n==== Create the TSDS\n\n<<add-documents-to-a-data-stream,Indexing requests>> add documents to a TSDS.\nDocuments in a TSDS must include:\n\n* A `@timestamp` field\n* One or more dimension fields. At least one dimension must match the `index.routing_path` index setting,\nif specified. If not specified explicitly, `index.routing_path` is set automatically to whichever mappings have\n`time_series_dimension` set to `true`.\n\nTo automatically create your TSDS, submit an indexing request that\ntargets the TSDS's name. This name must match one of your index template's\nindex patterns.\n\nIMPORTANT: To test the following example, update the timestamps to within three hours of\nyour current time. Data added to a TSDS must always fall within an\n<<tsds-accepted-time-range,accepted time range>>.\n\n[source,console]\n----\nPUT metrics-weather_sensors-dev/_bulk\n{ \"create\":{ } }\n{ \"@timestamp\": \"2099-05-06T16:21:15.000Z\", \"sensor_id\": \"HAL-000001\", \"location\": \"plains\", \"temperature\": 26.7,\"humidity\": 49.9 }\n{ \"create\":{ } }\n{ \"@timestamp\": \"2099-05-06T16:25:42.000Z\", \"sensor_id\": \"SYKENET-000001\", \"location\": \"swamp\", \"temperature\": 32.4, \"humidity\": 88.9 }\n\nPOST metrics-weather_sensors-dev/_doc\n{\n  \"@timestamp\": \"2099-05-06T16:21:15.000Z\",\n  \"sensor_id\": \"SYKENET-000001\",\n  \"location\": \"swamp\",\n  \"temperature\": 32.4,\n  \"humidity\": 88.9\n}\n----\n// TEST[skip: The @timestamp value won't match an accepted range in the TSDS]\n\nYou can also manually create the TSDS using the\n<<indices-create-data-stream,create data stream API>>. The TSDS's name must\nstill match one of your template's index patterns.\n\n[source,console]\n----\nPUT _data_stream/metrics-weather_sensors-dev\n----\n// TEST[setup:tsds_template]\n// TEST[teardown:tsds_cleanup]\n\n[discrete]\n[[secure-tsds]]\n==== Secure the TSDS\n\nUse <<privileges-list-indices,index privileges>> to control access to a TSDS.\nGranting privileges on a TSDS grants the same privileges on its backing indices.\n\nFor an example, refer to <<data-stream-privileges>>.\n\n[discrete]\n[[convert-existing-data-stream-to-tsds]]\n==== Convert an existing data stream to a TSDS\n\nYou can also use the above steps to convert an existing regular data stream to\na TSDS. In this case, you'll want to:\n\n* Edit your existing index lifecycle policy, component templates, and index\ntemplates instead of creating new ones.\n\n* Instead of creating the TSDS, manually roll over its write index. This ensures\nthe current write index and any new backing indices have an\n<<time-series-mode,`index.mode` of `time_series`>>.\n+\nYou can manually roll over the write index using the\n<<indices-rollover-index,rollover API>>.\n+\n[source,console]\n----\nPOST metrics-weather_sensors-dev/_rollover\n----\n// TEST[setup:tsds]\n// TEST[teardown:tsds_cleanup]\n\n[discrete]\n[[set-up-component-templates]]\n==== A note about component templates and index.mode setting\n\nConfiguring a TSDS via an index template that uses component templates is a bit more complicated.\nTypically with component templates mappings and settings get scattered across multiple component templates.\nIf the `index.routing_path` is defined, the fields it references need to be defined in the same component\ntemplate with the `time_series_dimension` attribute enabled.\n\nThe reasons for this is that each component template needs to be valid on its own. When configuring the\n`index.mode` setting in an index template, the `index.routing_path` setting is configured automatically.\nIt is derived from the field mappings with `time_series_dimension` attribute enabled.\n\n[discrete]\n[[set-up-tsds-whats-next]]\n==== What's next?\n\nNow that you've set up your TSDS, you can manage and use it like a regular\ndata stream. For more information, refer to:\n\n* <<use-a-data-stream>>\n* <<data-streams-change-mappings-and-settings>>\n* <<data-stream-apis,data stream APIs>>\n"
}