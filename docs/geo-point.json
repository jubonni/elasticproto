{
    "meta": {
        "size": 8844,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-point.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "geo-point",
        "version": "8.15"
    },
    "doc": "[[geo-point]]\n=== Geopoint field type\n++++\n<titleabbrev>Geopoint</titleabbrev>\n++++\n\nFields of type `geo_point` accept latitude-longitude pairs, which can be used:\n\n* to find geopoints within a <<query-dsl-geo-bounding-box-query,bounding box>>,\n  within a certain <<query-dsl-geo-distance-query,distance>> of a central point,\n  or within a <<query-dsl-geo-shape-query,`geo_shape` query>> (for example, points in a polygon).\n* to aggregate documents by <<search-aggregations-bucket-geodistance-aggregation,distance>> from a central point.\n* to aggregate documents by geographic grids: either\n  <<search-aggregations-bucket-geohashgrid-aggregation,`geo_hash`>>,\n  <<search-aggregations-bucket-geotilegrid-aggregation,`geo_tile`>> or\n  <<search-aggregations-bucket-geohexgrid-aggregation,`geo_hex`>>.\n* to aggregate geopoints into a track using the metrics aggregation\n  <<search-aggregations-metrics-geo-line,`geo_line`>>.\n* to integrate distance into a document's <<query-dsl-function-score-query,relevance score>>.\n* to <<geo-sorting,sort>> documents by distance.\n\nAs with <<geo-shape, geo_shape>> and <<point, point>>, `geo_point` can be specified in http://geojson.org[GeoJSON]\nand https://docs.opengeospatial.org/is/12-063r5/12-063r5.html[Well-Known Text] formats.\nHowever, there are a number of additional formats that are supported for convenience and historical reasons.\nIn total there are six ways that a geopoint may be specified, as demonstrated below:\n\n[source,console]\n--------------------------------------------------\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"location\": {\n        \"type\": \"geo_point\"\n      }\n    }\n  }\n}\n\nPUT my-index-000001/_doc/1\n{\n  \"text\": \"Geopoint as an object using GeoJSON format\",\n  \"location\": { <1>\n    \"type\": \"Point\",\n    \"coordinates\": [-71.34, 41.12]\n  }\n}\n\nPUT my-index-000001/_doc/2\n{\n  \"text\": \"Geopoint as a WKT POINT primitive\",\n  \"location\" : \"POINT (-71.34 41.12)\" <2>\n}\n\nPUT my-index-000001/_doc/3\n{\n  \"text\": \"Geopoint as an object with 'lat' and 'lon' keys\",\n  \"location\": { <3>\n    \"lat\": 41.12,\n    \"lon\": -71.34\n  }\n}\n\nPUT my-index-000001/_doc/4\n{\n  \"text\": \"Geopoint as an array\",\n  \"location\": [ -71.34, 41.12 ] <4>\n}\n\nPUT my-index-000001/_doc/5\n{\n  \"text\": \"Geopoint as a string\",\n  \"location\": \"41.12,-71.34\" <5>\n}\n\nPUT my-index-000001/_doc/6\n{\n  \"text\": \"Geopoint as a geohash\",\n  \"location\": \"drm3btev3e86\" <6>\n}\n\nGET my-index-000001/_search\n{\n  \"query\": {\n    \"geo_bounding_box\": { <7>\n      \"location\": {\n        \"top_left\": {\n          \"lat\": 42,\n          \"lon\": -72\n        },\n        \"bottom_right\": {\n          \"lat\": 40,\n          \"lon\": -74\n        }\n      }\n    }\n  }\n}\n--------------------------------------------------\n\n<1> Geopoint expressed as an object, in https://geojson.org/[GeoJSON] format, with `type` and `coordinates` keys.\n<2> Geopoint expressed as a https://docs.opengeospatial.org/is/12-063r5/12-063r5.html[Well-Known Text]\nPOINT with the format: `\"POINT(lon lat)\"`\n<3> Geopoint expressed as an object, with `lat` and `lon` keys.\n<4> Geopoint expressed as an array with the format: [ `lon`, `lat`]\n<5> Geopoint expressed as a string with the format: `\"lat,lon\"`.\n<6> Geopoint expressed as a geohash.\n<7> A geo-bounding box query which finds all geopoints that fall inside the box.\n\n[IMPORTANT]\n.Geopoints expressed as an array or string\n==================================================\n\nPlease note that string geopoints are ordered as `lat,lon`, while array\ngeopoints, GeoJSON and WKT are ordered as the reverse: `lon,lat`.\n\nThe reasons for this are historical. Geographers traditionally write `latitude`\nbefore `longitude`, while recent formats specified for geographic data like\nhttps://geojson.org/[GeoJSON] and https://docs.opengeospatial.org/is/12-063r5/12-063r5.html[Well-Known Text]\norder `longitude` before `latitude` (easting before northing) in order to match\nthe mathematical convention of ordering `x` before `y`.\n\n==================================================\n\n[NOTE]\nA point can be expressed as a {wikipedia}/Geohash[geohash].\nGeohashes are {wikipedia}/Base32[base32] encoded strings of\nthe bits of the latitude and longitude interleaved. Each character in a geohash\nadds additional 5 bits to the precision. So the longer the hash, the more\nprecise it is. For the indexing purposed geohashs are translated into\nlatitude-longitude pairs. During this process only first 12 characters are\nused, so specifying more than 12 characters in a geohash doesn't increase the\nprecision. The 12 characters provide 60 bits, which should reduce a possible\nerror to less than 2cm.\n\n[[geo-point-params]]\n==== Parameters for `geo_point` fields\n\nThe following parameters are accepted by `geo_point` fields:\n\n[horizontal]\n\n<<ignore-malformed,`ignore_malformed`>>::\n\n    If `true`, malformed geopoints are ignored. If `false` (default),\n    malformed geopoints throw an exception and reject the whole document.\n    A geopoint is considered malformed if its latitude is outside the range\n    -90 <= latitude <= 90, or if its longitude is outside the range -180 <= longitude <= 180.\n    Note that this cannot be set if the `script` parameter is used.\n\n`ignore_z_value`::\n\n    If `true` (default) three dimension points will be accepted (stored in source)\n    but only latitude and longitude values will be indexed; the third dimension is\n    ignored. If `false`, geopoints containing any more than latitude and longitude\n    (two dimensions) values throw an exception and reject the whole document. Note\n    that this cannot be set if the `script` parameter is used.\n\n<<mapping-index,`index`>>::\n\n    Should the field be quickly searchable? Accepts `true` (default) and\n    `false`. Fields that only have <<doc-values,`doc_values`>>\n    enabled can still be queried, albeit slower.\n\n<<null-value,`null_value`>>::\n\n    Accepts an geopoint value which is substituted for any explicit `null` values.\n    Defaults to `null`, which means the field is treated as missing. Note that this\n    cannot be set if the `script` parameter is used.\n\n`on_script_error`::\n\n    Defines what to do if the script defined by the `script` parameter\n    throws an error at indexing time. Accepts `fail` (default), which\n    will cause the entire document to be rejected, and `continue`, which\n    will register the field in the document's\n    <<mapping-ignored-field,`_ignored`>> metadata field and continue\n    indexing. This parameter can only be set if the `script` field is\n    also set.\n\n`script`::\n\n    If this parameter is set, then the field will index values generated\n    by this script, rather than reading the values directly from the\n    source. If a value is set for this field on the input document, then\n    the document will be rejected with an error.\n    Scripts are in the same format as their\n    <<runtime-mapping-fields,runtime equivalent>>, and should emit points\n    as a pair of (lat, lon) double values.\n\n==== Using geopoints in scripts\n\nWhen accessing the value of a geopoint in a script, the value is returned as\na `GeoPoint` object, which allows access to the `.lat` and `.lon` values\nrespectively:\n\n[source,painless]\n--------------------------------------------------\ndef geopoint = doc['location'].value;\ndef lat      = geopoint.lat;\ndef lon      = geopoint.lon;\n--------------------------------------------------\n\nFor performance reasons, it is better to access the lat/lon values directly:\n\n[source,painless]\n--------------------------------------------------\ndef lat      = doc['location'].lat;\ndef lon      = doc['location'].lon;\n--------------------------------------------------\n\n[[geo-point-synthetic-source]]\n==== Synthetic source\n\nIMPORTANT: Synthetic `_source` is Generally Available only for TSDB indices\n(indices that have `index.mode` set to `time_series`). For other indices\nsynthetic `_source` is in technical preview. Features in technical preview may\nbe changed or removed in a future release. Elastic will work to fix\nany issues, but features in technical preview are not subject to the support SLA\nof official GA features.\n\nSynthetic source may sort `geo_point` fields (first by latitude and then\nlongitude) and reduces them to their stored precision. For example:\n[source,console,id=synthetic-source-geo-point-example]\n----\nPUT idx\n{\n  \"settings\": {\n    \"index\": {\n      \"mapping\": {\n        \"source\": {\n          \"mode\": \"synthetic\"\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"point\": { \"type\": \"geo_point\" }\n    }\n  }\n}\nPUT idx/_doc/1\n{\n  \"point\": [\n    {\"lat\":-90, \"lon\":-80},\n    {\"lat\":10, \"lon\":30}\n  ]\n}\n----\n// TEST[s/$/\\nGET idx\\/_doc\\/1?filter_path=_source\\n/]\n\nWill become:\n[source,console-result]\n----\n{\n  \"point\": [\n    {\"lat\":-90.0, \"lon\":-80.00000000931323},\n    {\"lat\":9.999999990686774, \"lon\":29.999999972060323}\n   ]\n}\n----\n// TEST[s/^/{\"_source\":/ s/\\n$/}/]\n"
}