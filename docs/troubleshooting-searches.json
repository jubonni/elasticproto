{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.783592",
        "size": 8994,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/troubleshooting-searches.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "troubleshooting-searches",
        "version": "8.15"
    },
    "doc": "\n[[troubleshooting-searches]]\n== Troubleshooting searches\n\nWhen you query your data, Elasticsearch may return an error, no search results,\nor results in an unexpected order. This guide describes how to troubleshoot\nsearches.\n\n[discrete]\n[[troubleshooting-searches-exists]]\n=== Ensure the data stream, index, or alias exists\n\nElasticsearch returns an `index_not_found_exception` when the data stream, index\nor alias you try to query does not exist. This can happen when you misspell the\nname or when the data has been indexed to a different data stream or index.\n\nUse the <<indices-exists,exists API>> to check whether a data stream, index, or\nalias exists:\n\n[source,console]\n----\nHEAD my-data-stream\n----\n\nUse the <<data-stream-stats-api,data stream stats API>> to list all data\nstreams:\n\n[source,console]\n----\nGET /_data_stream/_stats?human=true\n----\n\nUse the <<indices-get-index,get index API>> to list all indices and their\naliases:\n\n[source,console]\n----\nGET _all?filter_path=*.aliases\n----\n\nInstead of an error, it is possible to retrieve partial search results if some\nof the indices you're querying are unavailable. Set `ignore_unavailable` to\n`true`:\n\n[source,console]\n----\nGET /my-alias/_search?ignore_unavailable=true\n----\n\n[discrete]\n[[troubleshooting-searches-data]]\n=== Ensure the data stream or index contains data\n\nWhen a search request returns no hits, the data stream or index may contain no\ndata. This can happen when there is a data ingestion issue. For example, the\ndata may have been indexed to a data stream or index with another name.\n\nUse the <<search-count,count API>> to retrieve the number of documents in a data\nstream or index. Check that `count` in the response is not 0.\n\n////\n[source,console]\n----\nPUT my-index-000001\n{\n  \"mappings\": {\n    \"properties\": {\n      \"@timestamp\": {\n        \"type\": \"date\"\n      },\n      \"my-field\": {\n        \"type\": \"keyword\"\n      },\n      \"my-num-field\": {\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n----\n////\n\n[source,console]\n----\nGET /my-index-000001/_count\n----\n//TEST[continued]\n\nNOTE: When getting no search results in {kib}, check that you have selected the\ncorrect data view and a valid time range. Also, ensure the data view has been\nconfigured with the correct time field.\n\n[discrete]\n[[troubleshooting-searches-field-exists-caps]]\n=== Check that the field exists and its capabilities\n\nQuerying a field that does not exist will not return any results. Use the\n<<search-field-caps,field capabilities API>> to check whether a field exists:\n\n[source,console]\n----\nGET /my-index-000001/_field_caps?fields=my-field\n----\n//TEST[continued]\n\nIf the field does not exist, check the data ingestion process. The field may\nhave a different name.\n\nIf the field exists, the request will return the field's type and whether it is\nsearchable and aggregatable.\n\n[source,console-response]\n----\n{\n  \"indices\": [\n    \"my-index-000001\"\n  ],\n  \"fields\": {\n    \"my-field\": {\n      \"keyword\": {\n        \"type\": \"keyword\",         <1>\n        \"metadata_field\": false,\n        \"searchable\": true,        <2>\n        \"aggregatable\": true       <3>\n      }\n    }\n  }\n}\n----\n\n<1> The field is of type `keyword` in this index.\n<2> The field is searchable in this index.\n<3> The field is aggregatable in this index.\n\n[discrete]\n[[troubleshooting-searches-mappings]]\n=== Check the field's mappings\n\nA field's capabilities are determined by its <<mapping,mapping>>. To retrieve\nthe mapping, use the <<indices-get-mapping,get mapping API>>:\n\n[source,console]\n----\nGET /my-index-000001/_mappings\n----\n//TEST[continued]\n\nIf you query a `text` field, pay attention to the analyzer that may have been\nconfigured. You can use the <<indices-analyze,analyze API>> to check how a\nfield's analyzer processes values and query terms:\n\n[source,console]\n----\nGET /my-index-000001/_analyze\n{\n  \"field\" : \"my-field\",\n  \"text\" : \"this is a test\"\n}\n----\n//TEST[continued]\n\nTo change the mapping of an existing field, refer to\n<<updating-field-mappings,Changing the mapping of a field>>.\n\n[discrete]\n[[troubleshooting-check-field-values]]\n=== Check the field's values\n\nUse the <<query-dsl-exists-query,`exists` query>> to check whether there are\ndocuments that return a value for a field. Check that `count` in the response is\nnot 0.\n\n[source,console]\n----\nGET /my-index-000001/_count\n{\n  \"query\": {\n    \"exists\": {\n      \"field\": \"my-field\"\n    }\n  }\n}\n----\n//TEST[continued]\n\nIf the field is aggregatable, you can use <<search-aggregations,aggregations>>\nto check the field's values. For `keyword` fields, you can use a\n<<search-aggregations-bucket-terms-aggregation,terms aggregation>> to retrieve\nthe field's most common values:\n\n[source,console]\n----\nGET /my-index-000001/_search?filter_path=aggregations\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"top_values\": {\n      \"terms\": {\n        \"field\": \"my-field\",\n        \"size\": 10\n      }\n    }\n  }\n}\n----\n//TEST[continued]\n\nFor numeric fields, you can use the\n<<search-aggregations-metrics-stats-aggregation,stats aggregation>> to get an\nidea of the field's value distribution:\n\n[source,console]\n----\nGET my-index-000001/_search?filter_path=aggregations\n{\n  \"aggs\": {\n    \"my-num-field-stats\": {\n      \"stats\": {\n        \"field\": \"my-num-field\"\n      }\n    }\n  }\n}\n----\n//TEST[continued]\n\nIf the field does not return any values, check the data ingestion process. The\nfield may have a different name.\n\n[discrete]\n[[troubleshooting-searches-latest-data]]\n=== Check the latest value\n\nFor time-series data, confirm there is non-filtered data within the attempted\ntime range. For example, if you are trying to query the latest data for the\n`@timestamp` field, run the following to see if the max `@timestamp` falls\nwithin the attempted range:\n\n[source,console]\n----\nGET my-index-000001/_search?sort=@timestamp:desc&size=1\n----\n//TEST[continued]\n\n[discrete]\n[[troubleshooting-searches-validate-explain-profile]]\n=== Validate, explain, and profile queries\n\nWhen a query returns unexpected results, Elasticsearch offers several tools to\ninvestigate why.\n\nThe <<search-validate,validate API>> enables you to validate a query. Use the\n`rewrite` parameter to return the Lucene query an Elasticsearch query is\nrewritten into:\n\n[source,console]\n--------------------------------------------------\nGET /my-index-000001/_validate/query?rewrite=true\n{\n  \"query\": {\n    \"match\": {\n      \"user.id\": {\n        \"query\": \"kimchy\",\n        \"fuzziness\": \"auto\"\n      }\n    }\n  }\n}\n--------------------------------------------------\n//TEST[continued]\n\nUse the <<search-explain,explain API>> to find out why a specific document\nmatches or doesn\u2019t match a query:\n\n[source,console]\n--------------------------------------------------\nGET /my-index-000001/_explain/0\n{\n  \"query\" : {\n    \"match\" : { \"message\" : \"elasticsearch\" }\n  }\n}\n--------------------------------------------------\n// TEST[setup:messages]\n\nThe <<search-profile,profile API>> provides detailed timing information about a\nsearch request. For a visual representation of the results, use the\n{kibana-ref}/xpack-profiler.html[Search Profiler] in {kib}.\n\nNOTE: To troubleshoot queries in {kib}, select **Inspect** in the toolbar. Next,\nselect **Request**. You can now copy the query {kib} sent to {es} for\nfurther analysis in Console.\n\n[discrete]\n[[troubleshooting-searches-settings]]\n=== Check index settings\n\n<<index-modules-settings,Index settings>> can influence search results. For\nexample, the `index.query.default_field` setting, which determines the field\nthat is queried when a query specifies no explicit field. Use the\n<<indices-get-settings,get index settings API>> to retrieve the settings for an\nindex:\n\n[source,console]\n----\nGET /my-index-000001/_settings\n----\n//TEST[continued]\n\nYou can update dynamic index settings with the <<indices-update-settings,update\nindex settings API>>. <<change-dynamic-index-setting-for-a-data-stream,Changing\ndynamic index settings for a data stream>> requires changing the index template\nused by the data stream.\n\nFor static settings, you need to create a new index with the correct settings.\nNext, you can reindex the data into that index. For data streams, refer to\n<<change-static-index-setting-for-a-data-stream,Change a static index setting\nfor a data stream>>.\n\n[discrete]\n[[troubleshooting-slow-searches]]\n=== Find slow queries\n\n<<index-modules-slowlog,Slow logs>> can help pinpoint slow performing search \nrequests. Enabling <<auditing-settings,audit logging>> on top can help determine \nquery source. Add the following settings to the `elasticsearch.yml` configuration file\nto trace queries. The resulting logging is verbose, so disable these settings when not \ntroubleshooting.\n\n[source,yaml]\n----\nxpack.security.audit.enabled: true\nxpack.security.audit.logfile.events.include: _all\nxpack.security.audit.logfile.events.emit_request_body: true\n----\n\nRefer to\nhttps://www.elastic.co/blog/advanced-tuning-finding-and-fixing-slow-elasticsearch-queries[Advanced\ntuning: finding and fixing slow Elasticsearch queries] for more information.\n"
}