{
    "meta": {
        "timestamp": "2024-11-01T03:02:52.014583",
        "size": 3011,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-shard-allocation-filtering.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "cluster-shard-allocation-filtering",
        "version": "8.15"
    },
    "doc": "[[cluster-shard-allocation-filtering]]\n==== Cluster-level shard allocation filtering\n\nYou can use cluster-level shard allocation filters to control where {es}\nallocates shards from any index. These cluster wide filters are applied in\nconjunction with <<shard-allocation-filtering, per-index allocation filtering>>\nand <<shard-allocation-awareness, allocation awareness>>.\n\nShard allocation filters can be based on custom node attributes or the built-in\n`_name`, `_host_ip`, `_publish_ip`, `_ip`, `_host`, `_id` and `_tier` attributes.\n\nThe `cluster.routing.allocation` settings are <<dynamic-cluster-setting,dynamic>>, enabling live indices to\nbe moved from one set of nodes to another. Shards are only relocated if it is\npossible to do so without breaking another routing constraint, such as never\nallocating a primary and replica shard on the same node.\n\nThe most common use case for cluster-level shard allocation filtering is when\nyou want to decommission a node. To move shards off of a node prior to shutting\nit down, you could create a filter that excludes the node by its IP address:\n\n[source,console]\n--------------------------------------------------\nPUT _cluster/settings\n{\n  \"persistent\" : {\n    \"cluster.routing.allocation.exclude._ip\" : \"10.0.0.1\"\n  }\n}\n--------------------------------------------------\n\n[[cluster-routing-settings]]\n===== Cluster routing settings\n\n`cluster.routing.allocation.include.{attribute}`::\n    (<<dynamic-cluster-setting,Dynamic>>)\n    Allocate shards to a node whose `{attribute}` has at least one of the\n    comma-separated values.\n\n`cluster.routing.allocation.require.{attribute}`::\n    (<<dynamic-cluster-setting,Dynamic>>)\n    Only allocate shards to a node whose `{attribute}` has _all_ of the\n    comma-separated values.\n\n`cluster.routing.allocation.exclude.{attribute}`::\n    (<<dynamic-cluster-setting,Dynamic>>)\n    Do not allocate shards to a node whose `{attribute}` has _any_ of the\n    comma-separated values.\n\nThe cluster allocation settings support the following built-in attributes:\n\n[horizontal]\n`_name`::       Match nodes by node name\n`_host_ip`::    Match nodes by host IP address (IP associated with hostname)\n`_publish_ip`:: Match nodes by publish IP address\n`_ip`::         Match either `_host_ip` or `_publish_ip`\n`_host`::       Match nodes by hostname\n`_id`::         Match nodes by node id\n`_tier`::       Match nodes by the node's <<data-tiers, data tier>> role\n\nNOTE: `_tier` filtering is based on <<modules-node, node>> roles. Only\na subset of roles are <<data-tiers, data tier>> roles, and the generic\n<<data-node, data role>> will match any tier filtering.\na subset of roles that are <<data-tiers, data tier>> roles, but the generic\n<<data-node, data role>> will match any tier filtering.\n\n\nYou can use wildcards when specifying attribute values, for example:\n\n[source,console]\n------------------------\nPUT _cluster/settings\n{\n  \"persistent\": {\n    \"cluster.routing.allocation.exclude._ip\": \"192.168.2.*\"\n  }\n}\n------------------------\n"
}