{
    "meta": {
        "timestamp": "2024-11-01T03:02:53.308594",
        "size": 8454,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/remote-clusters-api-key.html",
        "type": "documentation",
        "role": [],
        "has_code": false,
        "title": "remote-clusters-api-key",
        "version": "8.15"
    },
    "doc": "[[remote-clusters-api-key]]\n=== Add remote clusters using API key authentication\n\nAPI key authentication enables a local cluster to authenticate itself with a\nremote cluster via a <<security-api-create-cross-cluster-api-key,cross-cluster\nAPI key>>. The API key needs to be created by an administrator of the remote\ncluster. The local cluster is configured to provide this API key on each request\nto the remote cluster. The remote cluster verifies the API key and grants\naccess, based on the API key's privileges.\n\nAll cross-cluster requests from the local cluster are bound by the API key's\nprivileges, regardless of local users associated with the requests. For example,\nif the API key only allows read access to `my-index` on the remote cluster, even\na superuser from the local cluster is limited by this constraint. This mechanism\nenables the remote cluster's administrator to have full control over who can\naccess what data with cross-cluster search and/or cross-cluster replication. The\nremote cluster's administrator can be confident that no access is possible\nbeyond what is explicitly assigned to the API key.\n\nOn the local cluster side, not every local user needs to access every piece of\ndata allowed by the API key. An administrator of the local cluster can further\nconfigure additional permission constraints on local users so each user only\ngets access to the necessary remote data. Note it is only possible to further\nreduce the permissions allowed by the API key for individual local users. It is\nimpossible to increase the permissions to go beyond what is allowed by the API\nkey.\n\nIn this model, cross-cluster operations use <<remote_cluster.port,a dedicated\nserver port>> (remote cluster interface) for communication between clusters. A\nremote cluster must enable this port for local clusters to connect. Configure\nTransport Layer Security (TLS) for this port to maximize security (as explained\nin <<remote-clusters-security-api-key>>).\n\nThe local cluster must trust the remote cluster on the remote cluster interface.\nThis means that the local cluster trusts the remote cluster's certificate\nauthority (CA) that signs the server certificate used by the remote cluster\ninterface. When establishing a connection, all nodes from the local cluster that\nparticipate in cross-cluster communication verify certificates from nodes on the\nother side, based on the TLS trust configuration.\n\nTo add a remote cluster using API key authentication:\n\n. <<remote-clusters-prerequisites-api-key,Review the prerequisites>>\n. <<remote-clusters-security-api-key>>\n. <<remote-clusters-connect-api-key>>\n. <<remote-clusters-privileges-api-key>>\n\nIf you run into any issues, refer to <<remote-clusters-troubleshooting>>.\n\n[[remote-clusters-prerequisites-api-key]]\n==== Prerequisites\n\n* The {es} security features need to be enabled on both clusters, on every node.\nSecurity is enabled by default. If it's disabled, set `xpack.security.enabled`\nto `true` in `elasticsearch.yml`. Refer to <<general-security-settings>>.\n* The nodes of the local and remote clusters must be on version 8.10 or later.\n* The local and remote clusters must have an appropriate license. For more\ninformation, refer to https://www.elastic.co/subscriptions.\n\n[[remote-clusters-security-api-key]]\n==== Establish trust with a remote cluster\n\nNOTE: If a remote cluster is part of an {ess} deployment, it has a valid certificate by default. \nYou can therefore skip steps related to certificates in these instructions.\n\n[[remote-clusters-security-api-key-remote-action]]\n===== On the remote cluster\n\n// tag::remote-cluster-steps[]\n. Enable the remote cluster server on every node of the remote cluster. In\n`elasticsearch.yml`:\n.. Set <<remote-cluster-network-settings,`remote_cluster_server.enabled`>> to\n`true`.\n.. Configure the bind and publish address for remote cluster server traffic, for\nexample using <<remote-cluster-network-settings,`remote_cluster.host`>>. Without\nconfiguring the address, remote cluster traffic may be bound to the local\ninterface, and remote clusters running on other machines can't connect.\n.. Optionally, configure the remote server port using\n<<remote_cluster.port,`remote_cluster.port`>> (defaults to `9443`).\n. Next, generate a certificate authority (CA) and a server certificate/key pair.\nOn one of the nodes of the remote cluster, from the directory where {es} has\nbeen installed:\n\n.. Create a CA, if you don't have a CA already:\n+\n[source,sh]\n----\n./bin/elasticsearch-certutil ca --pem --out=cross-cluster-ca.zip --pass CA_PASSWORD\n----\n+\nReplace `CA_PASSWORD` with the password you want to use for the CA. You can\nremove the `--pass` option and its argument if you are not deploying to a\nproduction environment.\n\n.. Unzip the generated `cross-cluster-ca.zip` file. This compressed file\ncontains the following content:\n+\n[source,txt]\n----\n/ca\n|_ ca.crt\n|_ ca.key\n----\n\n.. Generate a certificate and private key pair for the nodes in the remote\ncluster:\n+\n[source,sh]\n----\n./bin/elasticsearch-certutil cert --out=cross-cluster.p12 --pass=CERT_PASSWORD --ca-cert=ca/ca.crt --ca-key=ca/ca.key --ca-pass=CA_PASSWORD --dns=example.com --ip=127.0.0.1\n----\n+\n* Replace `CA_PASSWORD` with the CA password from the previous step.\n* Replace `CERT_PASSWORD` with the password you want to use for the generated\nprivate key.\n* Use the `--dns` option to specify the relevant DNS name for the certificate.\nYou can specify it multiple times for multiple DNS.\n* Use the `--ip` option to specify the relevant IP address for the certificate.\nYou can specify it multiple times for multiple IP addresses.\n\n.. If the remote cluster has multiple nodes, you can either:\n+\n* create a single wildcard certificate for all nodes;\n* or, create separate certificates for each node either manually or in batch\nwith the <<certutil-silent,silent mode>>.\n\n. On every node of the remote cluster:\n.. Copy the `cross-cluster.p12` file from the earlier step to the `config`\ndirectory. If you didn't create a wildcard certificate, make sure you copy the\ncorrect node-specific p12 file.\n.. Add following configuration to `elasticsearch.yml`:\n+\n[source,yaml]\n----\nxpack.security.remote_cluster_server.ssl.enabled: true\nxpack.security.remote_cluster_server.ssl.keystore.path: cross-cluster.p12\n----\n\n.. Add the SSL keystore password to the {es} keystore:\n+\n[source,sh]\n----\n./bin/elasticsearch-keystore add xpack.security.remote_cluster_server.ssl.keystore.secure_password\n----\n+\nWhen prompted, enter the `CERT_PASSWORD` from the earlier step.\n\n. Restart the remote cluster.\n\n. On the remote cluster, generate a cross-cluster API key that provides access\nto the indices you want to use for {ccs} or {ccr}. You can use the\n<<security-api-create-cross-cluster-api-key>> API or\n{kibana-ref}/api-keys.html[Kibana].\n\n. Copy the encoded key (`encoded` in the response) to a safe location. You will\nneed it to connect to the remote cluster later.\n// end::remote-cluster-steps[]\n\n[[remote-clusters-security-api-key-local-actions]]\n===== On the local cluster\n\n// tag::local-cluster-steps[]\n. On every node of the local cluster:\n\n.. Copy the `ca.crt` file generated on the remote cluster earlier into the\n`config` directory, renaming the file `remote-cluster-ca.crt`.\n\n.. Add following configuration to `elasticsearch.yml`:\n+\n[source,yaml]\n----\nxpack.security.remote_cluster_client.ssl.enabled: true\nxpack.security.remote_cluster_client.ssl.certificate_authorities: [ \"remote-cluster-ca.crt\" ]\n----\n// end::local-cluster-steps[]\n\n.. Add the cross-cluster API key, created on the remote cluster earlier, to the\nkeystore:\n+\n[source,sh]\n----\n./bin/elasticsearch-keystore add cluster.remote.ALIAS.credentials\n----\n+\nReplace `ALIAS` with the same name that you will use to create the remote cluster entry\nlater. When prompted, enter the encoded cross-cluster API key created on the\nremote cluster earlier.\n\n. Restart the local cluster to load changes to the keystore and settings.\n\n**Note:** If you are configuring only the cross-cluster API key, you can call the <<cluster-nodes-reload-secure-settings>> API, instead of restarting the cluster.\nConfiguring the `remote_cluster_client` settings in `elasticsearch.yml` still requires a restart.\n\n[[remote-clusters-connect-api-key]]\n==== Connect to a remote cluster\n\n:trust-mechanism: api-key\ninclude::remote-clusters-connect.asciidoc[]\n:!trust-mechanism:\n\ninclude::{es-ref-dir}/security/authentication/remote-clusters-privileges-api-key.asciidoc[leveloffset=+1]\n"
}