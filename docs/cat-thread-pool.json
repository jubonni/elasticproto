{
    "meta": {
        "size": 5305,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/cat-thread-pool.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "cat-thread-pool",
        "version": "8.15"
    },
    "doc": "[[cat-thread-pool]]\n=== cat thread pool API\n++++\n<titleabbrev>cat thread pool</titleabbrev>\n++++\n\n[IMPORTANT]\n====\ncat APIs are only intended for human consumption using the command line or {kib} \nconsole. They are _not_ intended for use by applications. For application \nconsumption, use the <<cluster-nodes-info,nodes info API>>.\n====\n\nReturns thread pool statistics for each node in a cluster. Returned information\nincludes all <<modules-threadpool,built-in thread pools>> and custom thread\npools.\n\n\n[[cat-thread-pool-api-request]]\n==== {api-request-title}\n\n`GET /_cat/thread_pool/<thread_pool>`\n\n`GET /_cat/thread_pool`\n\n[[cat-thread-pool-api-prereqs]]\n==== {api-prereq-title}\n\n* If the {es} {security-features} are enabled, you must have the `monitor` or\n`manage` <<privileges-list-cluster,cluster privilege>> to use this API.\n\n[[cat-thread-pool-path-params]]\n==== {api-path-parms-title}\n\n`<thread_pool>`::\n(Optional, string) Comma-separated list of thread pool names used to limit the\nrequest. Accepts wildcard expressions.\n\n\n[[cat-thread-pool-query-params]]\n==== {api-query-parms-title}\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=http-format]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=cat-h]\n+\n--\nIf you do not specify which columns to include, the API returns the default\ncolumns in the order listed below. If you explicitly specify one or more\ncolumns, it only returns the specified columns.\n\nValid columns are:\n\n`node_name`::\n(Default) Node name, such as `I8hydUG`.\n\n`name`::\n(Default) Name of the thread pool, such as `analyze` or `generic`.\n\n`active`, `a`::\n(Default) Number of active threads in the current thread pool.\n\n`queue`,`q`::\n(Default) Number of tasks in the queue for the current thread pool.\n\n`rejected`, `r`::\n(Default) Number of tasks rejected by the thread pool executor.\n\n`completed`, `c`::\nNumber of tasks completed by the thread pool executor.\n\n`core`, `cr`::\nConfigured core number of active threads allowed in the current thread pool.\n\n`ephemeral_id`,`eid`::\nEphemeral node ID.\n\n`host`, `h`::\nHostname for the current node.\n\n`ip`, `i`::\nIP address for the current node.\n\n`keep_alive`, `k`::\nConfigured keep alive time for threads.\n\n`largest`, `l`::\nHighest number of active threads in the current thread pool.\n\n`max`, `mx`::\nConfigured maximum number of active threads allowed in the current thread pool.\n\n`node_id`, `id`::\nID of the node, such as `k0zy`.\n\n`pid`, `p`::\nProcess ID of the running node.\n\n`pool_size`, `psz`::\nNumber of threads in the current thread pool.\n\n`port`, `po`::\nBound transport port for the current node.\n\n`queue_size`, `qs`::\nMaximum number of tasks permitted in the queue for the current thread pool.\n\n`size`, `sz`::\nConfigured fixed number of active threads allowed in the current thread pool.\n\n`type`, `t`::\nType of thread pool. Returned values are `fixed`, `fixed_auto_queue_size`, `direct`, or `scaling`.\n\n--\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=help]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=local]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=master-timeout]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=cat-s]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=time]\n\ninclude::{es-ref-dir}/rest-api/common-parms.asciidoc[tag=cat-v]\n\n\n[[cat-thread-pool-api-example]]\n==== {api-examples-title}\n\n[[cat-thread-pool-api-ex-default]]\n===== Example with default columns\n\n[source,console]\n--------------------------------------------------\nGET /_cat/thread_pool\n--------------------------------------------------\n\nThe API returns the following response:\n\n[source,txt]\n--------------------------------------------------\nnode-0 analyze             0 0 0\n...\nnode-0 fetch_shard_started 0 0 0\nnode-0 fetch_shard_store   0 0 0\nnode-0 flush               0 0 0\n...\nnode-0 write               0 0 0\n--------------------------------------------------\n// TESTRESPONSE[s/\\.\\.\\./(node-0 \\\\S+ 0 0 0\\n)*/]\n// TESTRESPONSE[s/\\d+/\\\\d+/ non_json]\n// The substitutions do two things:\n// 1. Expect any number of extra thread pools. This allows us to only list a\n//    few thread pools. The list would be super long otherwise. In addition,\n//    if xpack is installed then the list will contain more thread pools and\n//    this way we don't have to assert about them.\n// 2. Expect any number of active, queued, or rejected items. We really don't\n//    know how many there will be and we just want to assert that there are\n//    numbers in the response, not *which* numbers are there.\n\n\n[[cat-thread-pool-api-ex-headings]]\n===== Example with explicit columns\n\nThe following API request returns the `id`, `name`, `active`, `rejected`, and\n`completed` columns. The request limits returned information to the `generic`\nthread pool.\n\n[source,console]\n--------------------------------------------------\nGET /_cat/thread_pool/generic?v=true&h=id,name,active,rejected,completed\n--------------------------------------------------\n\nThe API returns the following response:\n\n[source,txt]\n--------------------------------------------------\nid                     name    active rejected completed\n0EWUhXeBQtaVGlexUeVwMg generic      0        0        70\n--------------------------------------------------\n// TESTRESPONSE[s/0EWUhXeBQtaVGlexUeVwMg/[\\\\w-]+/ s/\\d+/\\\\d+/ non_json]\n\n"
}