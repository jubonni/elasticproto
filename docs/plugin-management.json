{
    "meta": {
        "size": 11851,
        "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/plugin-management.html",
        "type": "documentation",
        "role": [],
        "has_code": true,
        "title": "plugin-management",
        "version": "8.15"
    },
    "doc": "[[plugin-management]]\n== Plugin management\n\n[discrete]\n=== Managing plugins on {ess}\n\nRefer to the {cloud}/ec-adding-plugins.html[{ess} documentation] for information\nabout managing plugins on {ecloud}.\n\n[discrete]\n=== Managing plugins for self-managed deployments\n\nUse the `elasticsearch-plugin` command line tool to install, list, and remove plugins. It is\nlocated in the `$ES_HOME/bin` directory by default but it may be in a\ndifferent location depending on which Elasticsearch package you installed:\n\n* {ref}/targz.html#targz-layout[Directory layout of `.tar.gz` archives]\n* {ref}/zip-windows.html#windows-layout[Directory layout of Windows `.zip` archives]\n* {ref}/deb.html#deb-layout[Directory layout of Debian package]\n* {ref}/rpm.html#rpm-layout[Directory layout of RPM]\n\nRun the following command to get usage instructions:\n\n[source,shell]\n-----------------------------------\nsudo bin/elasticsearch-plugin -h\n-----------------------------------\n\n[IMPORTANT]\n.Running as root\n=====================\nIf Elasticsearch was installed using the deb or rpm package then run\n`/usr/share/elasticsearch/bin/elasticsearch-plugin` as `root` so it can write to the appropriate files on disk.\nOtherwise run `bin/elasticsearch-plugin` as the user that owns all of the Elasticsearch\nfiles.\n=====================\n\n[discrete]\n[[plugin-management-docker]]\n=== Docker\n\nIf you run {es} using Docker, you can manage plugins using a\n<<manage-plugins-using-configuration-file,configuration file>>.\n\n[[installation]]\n=== Installing plugins\n\nThe documentation for each plugin usually includes specific installation\ninstructions for that plugin, but below we document the various available\noptions:\n\n[discrete]\n=== Core Elasticsearch plugins\n\nCore Elasticsearch plugins can be installed as follows:\n\n[source,shell]\n-----------------------------------\nsudo bin/elasticsearch-plugin install [plugin_name]\n-----------------------------------\n\nFor instance, to install the core <<analysis-icu,ICU plugin>>, just run the\nfollowing command:\n\n[source,shell]\n-----------------------------------\nsudo bin/elasticsearch-plugin install analysis-icu\n-----------------------------------\n\nThis command will install the version of the plugin that matches your\nElasticsearch version and also show a progress bar while downloading.\n\n[[plugin-management-custom-url]]\n=== Custom URL or file system\n\nA plugin can also be downloaded directly from a custom location by specifying the URL:\n\n[source,shell]\n-----------------------------------\nsudo bin/elasticsearch-plugin install [url] <1>\n-----------------------------------\n<1> must be a valid URL, the plugin name is determined from its descriptor.\n\n--\nUnix::\nTo install a plugin from your local file system at `/path/to/plugin.zip`, you could run:\n+\n[source,shell]\n-----------------------------------\nsudo bin/elasticsearch-plugin install file:///path/to/plugin.zip\n-----------------------------------\n\nWindows::\nTo install a plugin from your local file system at `C:\\path\\to\\plugin.zip`, you could run:\n+\n[source,shell]\n-----------------------------------\nbin\\elasticsearch-plugin install file:///C:/path/to/plugin.zip\n-----------------------------------\n+\nNOTE: Any path that contains spaces must be wrapped in quotes!\n+\nNOTE: If you are installing a plugin from the filesystem the plugin distribution\nmust not be contained in the `plugins` directory for the node that you are\ninstalling the plugin to or installation will fail.\n\nHTTP::\nTo install a plugin from an HTTP URL:\n+\n[source,shell]\n-----------------------------------\nsudo bin/elasticsearch-plugin install https://some.domain/path/to/plugin.zip\n-----------------------------------\n+\nThe plugin script will refuse to talk to an HTTPS URL with an untrusted\ncertificate. To use a self-signed HTTPS cert, you will need to add the CA cert\nto a local Java truststore and pass the location to the script as follows:\n+\n[source,shell]\n-----------------------------------\nsudo CLI_JAVA_OPTS=\"-Djavax.net.ssl.trustStore=/path/to/trustStore.jks\" bin/elasticsearch-plugin install https://host/plugin.zip\n-----------------------------------\n--\n\n[[installing-multiple-plugins]]\n=== Installing multiple plugins\n\nMultiple plugins can be installed in one invocation as follows:\n\n[source,shell]\n-----------------------------------\nsudo bin/elasticsearch-plugin install [plugin_id] [plugin_id] ... [plugin_id]\n-----------------------------------\n\nEach `plugin_id` can be any valid form for installing a single plugin (e.g., the\nname of a core plugin, or a custom URL).\n\nFor instance, to install the core <<analysis-icu,ICU plugin>>, run the following command:\n\n[source,shell]\n-----------------------------------\nsudo bin/elasticsearch-plugin install analysis-icu\n-----------------------------------\n\nThis command will install the versions of the plugins that matches your\nElasticsearch version. The installation will be treated as a transaction, so\nthat all the plugins will be installed, or none of the plugins will be installed\nif any installation fails.\n\n[[mandatory-plugins]]\n=== Mandatory plugins\n\nIf you rely on some plugins, you can define mandatory plugins by adding\n`plugin.mandatory` setting to the `config/elasticsearch.yml` file, for\nexample:\n\n[source,yaml]\n--------------------------------------------------\nplugin.mandatory: analysis-icu,lang-js\n--------------------------------------------------\n\nFor safety reasons, a node will not start if it is missing a mandatory plugin.\n\n[[listing-removing-updating]]\n=== Listing, removing and updating installed plugins\n\n[discrete]\n=== Listing plugins\n\nA list of the currently loaded plugins can be retrieved with the `list` option:\n\n[source,shell]\n-----------------------------------\nsudo bin/elasticsearch-plugin list\n-----------------------------------\n\nAlternatively, use the {ref}/cluster-nodes-info.html[node-info API] to find\nout which plugins are installed on each node in the cluster\n\n[discrete]\n=== Removing plugins\n\nPlugins can be removed manually, by deleting the appropriate directory under\n`plugins/`, or using the public script:\n\n[source,shell]\n-----------------------------------\nsudo bin/elasticsearch-plugin remove [pluginname]\n-----------------------------------\n\nAfter a Java plugin has been removed, you will need to restart the node to\ncomplete the removal process.\n\nBy default, plugin configuration files (if any) are preserved on disk; this is\nso that configuration is not lost while upgrading a plugin. If you wish to\npurge the configuration files while removing a plugin, use `-p` or `--purge`.\nThis can option can be used after a plugin is removed to remove any lingering\nconfiguration files.\n\n[discrete]\n[[removing-multiple-plugins]]\n=== Removing multiple plugins\n\nMultiple plugins can be removed in one invocation as follows:\n\n[source,shell]\n-----------------------------------\nsudo bin/elasticsearch-plugin remove [pluginname] [pluginname] ... [pluginname]\n-----------------------------------\n\n[discrete]\n=== Updating plugins\n\nExcept for text analysis plugins that are created using the\n<<creating-stable-plugins,stable plugin API>>, plugins are built for a specific\nversion of {es}, and must be reinstalled each time {es} is updated.\n\n[source,shell]\n-----------------------------------\nsudo bin/elasticsearch-plugin remove [pluginname]\nsudo bin/elasticsearch-plugin install [pluginname]\n-----------------------------------\n\n=== Other command line parameters\n\nThe `plugin` scripts supports a number of other command line parameters:\n\n[discrete]\n=== Silent/verbose mode\n\nThe `--verbose` parameter outputs more debug information, while the `--silent`\nparameter turns off all output including the progress bar. The script may\nreturn the following exit codes:\n\n[horizontal]\n`0`:: everything was OK\n`64`:: unknown command or incorrect option parameter\n`74`:: IO error\n`70`:: any other error\n\n[discrete]\n=== Batch mode\n\nCertain plugins require more privileges than those provided by default in core\nElasticsearch. These plugins will list the required privileges and ask the\nuser for confirmation before continuing with installation.\n\nWhen running the plugin install script from another program (e.g. install\nautomation scripts), the plugin script should detect that it is not being\ncalled from the console and skip the confirmation response, automatically\ngranting all requested permissions. If console detection fails, then batch\nmode can be forced by specifying `-b` or `--batch` as follows:\n\n[source,shell]\n-----------------------------------\nsudo bin/elasticsearch-plugin install --batch [pluginname]\n-----------------------------------\n\n[discrete]\n=== Custom config directory\n\nIf your `elasticsearch.yml` config file is in a custom location, you will need\nto specify the path to the config file when using the `plugin` script. You\ncan do this as follows:\n\n[source,sh]\n---------------------\nsudo ES_PATH_CONF=/path/to/conf/dir bin/elasticsearch-plugin install <plugin name>\n---------------------\n\n[discrete]\n=== Proxy settings\n\nTo install a plugin via a proxy, you can add the proxy details to the\n`CLI_JAVA_OPTS` environment variable with the Java settings `http.proxyHost`\nand `http.proxyPort` (or `https.proxyHost` and `https.proxyPort`):\n\n[source,shell]\n-----------------------------------\nsudo CLI_JAVA_OPTS=\"-Dhttp.proxyHost=host_name -Dhttp.proxyPort=port_number -Dhttps.proxyHost=host_name -Dhttps.proxyPort=https_port_number\" bin/elasticsearch-plugin install analysis-icu\n-----------------------------------\n\nOr on Windows:\n\n[source,shell]\n------------------------------------\nset CLI_JAVA_OPTS=\"-Dhttp.proxyHost=host_name -Dhttp.proxyPort=port_number -Dhttps.proxyHost=host_name -Dhttps.proxyPort=https_port_number\"\nbin\\elasticsearch-plugin install analysis-icu\n------------------------------------\n\n=== Plugins directory\n\nThe default location of the `plugins` directory depends on which package you install:\n\n* {ref}/targz.html#targz-layout[Directory layout of `.tar.gz` archives]\n* {ref}/zip-windows.html#windows-layout[Directory layout of Windows `.zip` archives]\n* {ref}/deb.html#deb-layout[Directory layout of Debian package]\n* {ref}/rpm.html#rpm-layout[Directory layout of RPM]\n\n\n[[manage-plugins-using-configuration-file]]\n=== Manage plugins using a configuration file\n\n[IMPORTANT]\n.Docker only\n=====================\nThis feature is only available for https://www.docker.elastic.co/[official {es}\nDocker images]. Other {es} distributions will not start with a\nplugin configuration file.\n=====================\n\nIf you run {es} using Docker, you can manage plugins using a declarative configuration file.\nWhen {es} starts up, it will compare the plugins in the file with those\nthat are currently installed, and add or remove plugins as required. {es}\nwill also upgrade official plugins when you upgrade {es} itself.\n\nThe file is called `elasticsearch-plugins.yml`, and must be placed in the\nElasticsearch configuration directory, alongside `elasticsearch.yml`. Here\nis an example:\n\n[source,yaml]\n----\nplugins:\n  - id: analysis-icu\n  - id: repository-azure\n  - id: custom-mapper\n    location: https://example.com/archive/custom-mapper-1.0.0.zip\n----\n\nThis example installs the official `analysis-icu` and\n`repository-azure` plugins, and one unofficial plugin. Every plugin must provide\nan `id`. Unofficial plugins must also provide a `location`. This is\ntypically a URL, but Maven coordinates are also supported. The downloaded\nplugin's name must match the ID in the configuration file.\n\nWhile {es} will respect the\nhttps://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html[standard\nJava proxy system properties] when downloading plugins, you can also configure an\nHTTP proxy to use explicitly in the configuration file. For example:\n\n[source,yaml]\n----\nplugins:\n  - id: custom-mapper\n    location: https://example.com/archive/custom-mapper-1.0.0.zip\nproxy: proxy.example.com:8443\n----\n"
}